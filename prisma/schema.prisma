generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../docs/erd.md"
  theme    = "default"
}

generator markdown {
  provider = "prisma-markdown"
  output   = "../docs/generated/prisma-markdown"
  title    = "MachShop MES Schema Documentation"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Enterprise {
  id             String   @id @default(cuid())
  enterpriseCode String   @unique
  enterpriseName String
  description    String?
  headquarters   String?
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  sites          Site[]

  @@map("enterprises")
}

model Site {
  id                        String                     @id @default(cuid())
  siteCode                  String                     @unique
  siteName                  String
  location                  String?
  enterpriseId              String?
  isActive                  Boolean                    @default(true)
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  areas                     Area[]
  auditReports              AuditReport[]
  equipment                 Equipment[]
  indirectCostCodes         IndirectCostCode[]
  ncrs                      NCR[]
  operations                Operation[]
  partAvailability          PartSiteAvailability[]
  permissionChangeLogs      PermissionChangeLog[]
  permissionUsageLogs       PermissionUsageLog[]
  productionSchedules       ProductionSchedule[]
  routingTemplates          RoutingTemplate[]
  routings                  Routing[]
  securityEvents            SecurityEvent[]
  enterprise                Enterprise?                @relation(fields: [enterpriseId], references: [id])
  timeTrackingConfiguration TimeTrackingConfiguration?
  userSiteRoles             UserSiteRole[]
  workOrders                WorkOrder[]

  // Role Template relationships
  roleTemplateInstances     RoleTemplateInstance[]
  roleTemplateUsageLogs     RoleTemplateUsageLog[]

  @@index([enterpriseId])
  @@map("sites")
}

model Area {
  id          String       @id @default(cuid())
  areaCode    String       @unique
  areaName    String
  description String?
  siteId      String
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  site        Site         @relation(fields: [siteId], references: [id])
  equipment   Equipment[]
  workCenters WorkCenter[]

  @@index([siteId])
  @@map("areas")
}

model User {
  id                        String                          @id @default(cuid())
  username                  String                          @unique
  email                     String                          @unique
  firstName                 String?
  lastName                  String?
  passwordHash              String
  isActive                  Boolean                         @default(true)
  roles                     String[]
  permissions               String[]
  lastLoginAt               DateTime?
  createdAt                 DateTime                        @default(now())
  updatedAt                 DateTime                        @updatedAt
  employeeNumber            String?                         @unique
  personnelClassId          String?
  hireDate                  DateTime?
  terminationDate           DateTime?
  phone                     String?
  emergencyContact          String?
  emergencyPhone            String?
  department                String?
  supervisorId              String?
  costCenter                String?
  laborRate                 Float?
  auditLogs                 AuditLog[]
  generatedAuditReports     AuditReport[]

  // Role Template relationships
  createdRoleTemplates      RoleTemplate[]              @relation("RoleTemplateCreator")
  updatedRoleTemplates      RoleTemplate[]              @relation("RoleTemplateUpdater")
  instantiatedTemplates     RoleTemplateInstance[]
  templateUsageLogsAsPerformer RoleTemplateUsageLog[]   @relation("RoleTemplateLogPerformer")
  templateUsageLogsAsTarget    RoleTemplateUsageLog[]   @relation("RoleTemplateLogTarget")
  authenticationEvents      AuthenticationEvent[]
  dispatchedWorkOrders      DispatchLog[]                   @relation("DispatchAssignedTo")
  createdDocumentTemplates  DocumentTemplate[]              @relation("DocumentTemplateCreatedBy")
  updatedDocumentTemplates  DocumentTemplate[]              @relation("DocumentTemplateUpdatedBy")
  invalidatedSignatures     ElectronicSignature[]           @relation("ElectronicSignatureInvalidatedBy")
  electronicSignatures      ElectronicSignature[]           @relation("ElectronicSignatureUser")
  equipmentLogs             EquipmentLog[]
  inspectionExecutions      InspectionExecution[]           @relation("InspectionExecutionInspector")
  approvedInspectionPlans   InspectionPlan[]                @relation("InspectionPlanApprovedBy")
  createdInspectionPlans    InspectionPlan[]                @relation("InspectionPlanCreatedBy")
  updatedInspectionPlans    InspectionPlan[]                @relation("InspectionPlanUpdatedBy")
  laborTimeEntries          LaborTimeEntry[]
  assignedNcrs              NCR[]                           @relation("AssignedTo")
  ncrReports                NCR[]                           @relation("CreatedBy")
  permissionChangesChanger  PermissionChangeLog[]           @relation("PermissionChangeChanger")
  permissionChangesTarget   PermissionChangeLog[]           @relation("PermissionChangeTarget")
  permissionUsageLogs       PermissionUsageLog[]
  availability              PersonnelAvailability[]
  certifications            PersonnelCertification[]
  skills                    PersonnelSkillAssignment[]
  workCenterAssignments     PersonnelWorkCenterAssignment[]
  qualityInspections        QualityInspection[]
  routingTemplates          RoutingTemplate[]
  resolvedSecurityEvents    SecurityEvent[]                 @relation("SecurityEventResolvedBy")
  securityEvents            SecurityEvent[]
  completedSetupExecutions  SetupExecution[]                @relation("SetupExecutionCompletedBy")
  startedSetupExecutions    SetupExecution[]                @relation("SetupExecutionStartedBy")
  approvedSetupSheets       SetupSheet[]                    @relation("SetupSheetApprovedBy")
  createdSetupSheets        SetupSheet[]                    @relation("SetupSheetCreatedBy")
  updatedSetupSheets        SetupSheet[]                    @relation("SetupSheetUpdatedBy")
  sopAcknowledgments        SOPAcknowledgment[]             @relation("SOPAcknowledgmentUser")
  sopAudits                 SOPAudit[]                      @relation("SOPAuditAuditor")
  ssoSessions               SsoSession[]
  approvedSOPs              StandardOperatingProcedure[]    @relation("SOPApprovedBy")
  createdSOPs               StandardOperatingProcedure[]    @relation("SOPCreatedBy")
  updatedSOPs               StandardOperatingProcedure[]    @relation("SOPUpdatedBy")
  toolCalibrationRecords    ToolCalibrationRecord[]         @relation("ToolCalibrationPerformedBy")
  approvedToolDrawings      ToolDrawing[]                   @relation("ToolDrawingApprovedBy")
  createdToolDrawings       ToolDrawing[]                   @relation("ToolDrawingCreatedBy")
  updatedToolDrawings       ToolDrawing[]                   @relation("ToolDrawingUpdatedBy")
  toolMaintenanceRecords    ToolMaintenanceRecord[]         @relation("ToolMaintenancePerformedBy")
  toolUsageLogs             ToolUsageLog[]                  @relation("ToolUsageLogUsedBy")
  userRoles                 UserRole[]
  userSessionLogs           UserSessionLog[]
  userSiteRoles             UserSiteRole[]
  personnelClass            PersonnelClass?                 @relation(fields: [personnelClassId], references: [id])
  supervisor                User?                           @relation("SupervisorRelation", fields: [supervisorId], references: [id])
  subordinates              User[]                          @relation("SupervisorRelation")
  workInstructionExecutions WorkInstructionExecution[]      @relation("WIExecutionOperator")
  signedStepExecutions      WorkInstructionStepExecution[]  @relation("WIStepExecutionSignedBy")
  approvedWorkInstructions  WorkInstruction[]               @relation("WorkInstructionApprovedBy")
  createdWorkInstructions   WorkInstruction[]               @relation("WorkInstructionCreatedBy")
  updatedWorkInstructions   WorkInstruction[]               @relation("WorkInstructionUpdatedBy")
  assignedWorkOrders        WorkOrder[]                     @relation("AssignedTo")
  createdWorkOrders         WorkOrder[]                     @relation("CreatedBy")
  workPerformanceRecords    WorkPerformance[]               @relation("WorkPerformancePersonnel")

  @@index([employeeNumber])
  @@index([personnelClassId])
  @@index([supervisorId])
  @@map("users")
}

model PersonnelClass {
  id             String                   @id @default(cuid())
  classCode      String                   @unique
  className      String
  description    String?
  level          Int
  parentClassId  String?
  isActive       Boolean                  @default(true)
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt
  parentClass    PersonnelClass?          @relation("PersonnelClassHierarchy", fields: [parentClassId], references: [id])
  childClasses   PersonnelClass[]         @relation("PersonnelClassHierarchy")
  qualifications PersonnelQualification[]
  personnel      User[]

  @@index([parentClassId])
  @@index([level])
  @@map("personnel_classes")
}

model PersonnelQualification {
  id                   String                   @id @default(cuid())
  qualificationCode    String                   @unique
  qualificationName    String
  description          String?
  qualificationType    QualificationType
  issuingOrganization  String?
  validityPeriodMonths Int?
  requiresRenewal      Boolean                  @default(false)
  personnelClassId     String?
  isActive             Boolean                  @default(true)
  createdAt            DateTime                 @default(now())
  updatedAt            DateTime                 @updatedAt
  certifications       PersonnelCertification[]
  personnelClass       PersonnelClass?          @relation(fields: [personnelClassId], references: [id])

  @@index([personnelClassId])
  @@index([qualificationType])
  @@map("personnel_qualifications")
}

model PersonnelCertification {
  id                  String                 @id @default(cuid())
  personnelId         String
  qualificationId     String
  certificationNumber String?
  issuedDate          DateTime
  expirationDate      DateTime?
  status              CertificationStatus    @default(ACTIVE)
  attachmentUrls      String[]
  verifiedBy          String?
  verifiedAt          DateTime?
  notes               String?
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  personnel           User                   @relation(fields: [personnelId], references: [id])
  qualification       PersonnelQualification @relation(fields: [qualificationId], references: [id])

  @@unique([personnelId, qualificationId])
  @@index([personnelId])
  @@index([qualificationId])
  @@index([expirationDate])
  @@index([status])
  @@map("personnel_certifications")
}

model PersonnelSkill {
  id               String                     @id @default(cuid())
  skillCode        String                     @unique
  skillName        String
  description      String?
  skillCategory    SkillCategory
  isActive         Boolean                    @default(true)
  createdAt        DateTime                   @default(now())
  updatedAt        DateTime                   @updatedAt
  skillAssignments PersonnelSkillAssignment[]

  @@index([skillCategory])
  @@map("personnel_skills")
}

model PersonnelSkillAssignment {
  id              String          @id @default(cuid())
  personnelId     String
  skillId         String
  competencyLevel CompetencyLevel
  assessedBy      String?
  assessedAt      DateTime?
  lastUsedDate    DateTime?
  certifiedDate   DateTime?
  notes           String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  personnel       User            @relation(fields: [personnelId], references: [id])
  skill           PersonnelSkill  @relation(fields: [skillId], references: [id])

  @@unique([personnelId, skillId])
  @@index([personnelId])
  @@index([skillId])
  @@index([competencyLevel])
  @@map("personnel_skill_assignments")
}

model PersonnelWorkCenterAssignment {
  id            String     @id @default(cuid())
  personnelId   String
  workCenterId  String
  isPrimary     Boolean    @default(false)
  effectiveDate DateTime   @default(now())
  endDate       DateTime?
  certifiedDate DateTime?
  notes         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  personnel     User       @relation(fields: [personnelId], references: [id])
  workCenter    WorkCenter @relation(fields: [workCenterId], references: [id])

  @@unique([personnelId, workCenterId])
  @@index([personnelId])
  @@index([workCenterId])
  @@index([effectiveDate])
  @@map("personnel_work_center_assignments")
}

model PersonnelAvailability {
  id               String           @id @default(cuid())
  personnelId      String
  availabilityType AvailabilityType
  startDateTime    DateTime
  endDateTime      DateTime
  shiftCode        String?
  isRecurring      Boolean          @default(false)
  recurrenceRule   String?
  reason           String?
  approvedBy       String?
  approvedAt       DateTime?
  notes            String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  personnel        User             @relation(fields: [personnelId], references: [id])

  @@index([personnelId])
  @@index([startDateTime])
  @@index([availabilityType])
  @@map("personnel_availability")
}

/// Unit of Measure lookup table for standardizing measurement units across the system
model UnitOfMeasure {
  id                       String            @id @default(cuid())
  code                     String            @unique      // e.g., "EA", "KG", "LB", "M", "FT"
  name                     String                         // e.g., "Each", "Kilogram", "Pound"
  description              String?                        // Detailed description
  unitType                 UnitType                       // Category of measurement
  systemOfMeasure          SystemOfMeasure               // Metric, Imperial, etc.
  isBaseUnit               Boolean           @default(false) // True if this is the base unit for conversions
  conversionFactor         Decimal?                       // Factor to convert to base unit
  baseUnitId               String?                        // Reference to base unit for conversions
  symbol                   String?                        // e.g., "kg", "lb", "m"
  isActive                 Boolean           @default(true)
  sortOrder                Int?                           // For consistent display ordering
  createdAt                DateTime          @default(now())
  updatedAt                DateTime          @updatedAt

  // Self-referential relation for unit conversions
  baseUnit                 UnitOfMeasure?    @relation("UnitConversions", fields: [baseUnitId], references: [id])
  derivedUnits             UnitOfMeasure[]   @relation("UnitConversions")

  // Relations to entities using this UOM
  materialDefinitionsBase  MaterialDefinition[] @relation("MaterialDefinitionBaseUOM")
  materialDefinitionsAlt   MaterialDefinition[] @relation("MaterialDefinitionAlternateUOM")
  materialProperties       MaterialProperty[]   @relation("MaterialPropertyUOM")
  materialLots             MaterialLot[]        @relation("MaterialLotUOM")
  materialSublots          MaterialSublot[]     @relation("MaterialSublotUOM")
  operationParameters      OperationParameter[] @relation("OperationParameterUOM")
  parts                    Part[]               @relation("PartUOM")
  partsWeight              Part[]               @relation("PartWeightUOM")
  bomItems                 BOMItem[]            @relation("BOMItemUOM")
  productSpecifications    ProductSpecification[] @relation("ProductSpecificationUOM")
  scheduleEntries          ScheduleEntry[]      @relation("ScheduleEntryUOM")
  qualityCharacteristics   QualityCharacteristic[] @relation("QualityCharacteristicUOM")
  inventories              Inventory[]          @relation("InventoryUOM")
  materialTransactions     MaterialTransaction[] @relation("MaterialTransactionUOM")

  @@index([code])
  @@index([unitType])
  @@index([systemOfMeasure])
  @@index([isActive])
  @@map("units_of_measure")
}

model MaterialClass {
  id                     String               @id @default(cuid())
  classCode              String               @unique
  className              String
  description            String?
  level                  Int
  parentClassId          String?
  requiresLotTracking    Boolean              @default(true)
  requiresSerialTracking Boolean              @default(false)
  requiresExpirationDate Boolean              @default(false)
  shelfLifeDays          Int?
  storageRequirements    String?
  handlingInstructions   String?
  isActive               Boolean              @default(true)
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  parentClass            MaterialClass?       @relation("MaterialClassHierarchy", fields: [parentClassId], references: [id])
  childClasses           MaterialClass[]      @relation("MaterialClassHierarchy")
  materials              MaterialDefinition[]

  @@index([parentClassId])
  @@index([level])
  @@map("material_classes")
}

model MaterialDefinition {
  id                     String               @id @default(cuid())
  materialNumber         String               @unique
  materialName           String
  description            String?
  materialClassId        String
  baseUnitOfMeasure      String
  alternateUnitOfMeasure String?
  baseUnitOfMeasureId    String?              // FK to UnitOfMeasure
  alternateUnitOfMeasureId String?            // FK to UnitOfMeasure
  conversionFactor       Float?
  materialType           MaterialType
  materialGrade          String?
  specification          String?
  minimumStock           Float?
  reorderPoint           Float?
  reorderQuantity        Float?
  leadTimeDays           Int?
  requiresLotTracking    Boolean              @default(true)
  lotNumberFormat        String?
  defaultShelfLifeDays   Int?
  standardCost           Float?
  currency               String?              @default("USD")
  requiresInspection     Boolean              @default(false)
  inspectionFrequency    String?
  primarySupplierId      String?
  supplierPartNumber     String?
  drawingNumber          String?
  revision               String?
  msdsUrl                String?
  imageUrl               String?
  isActive               Boolean              @default(true)
  isPhantom              Boolean              @default(false)
  isObsolete             Boolean              @default(false)
  obsoleteDate           DateTime?
  replacementMaterialId  String?
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  materialClass          MaterialClass        @relation(fields: [materialClassId], references: [id])
  replacementMaterial    MaterialDefinition?  @relation("MaterialReplacement", fields: [replacementMaterialId], references: [id])
  replacedMaterials      MaterialDefinition[] @relation("MaterialReplacement")
  baseUnitOfMeasureRef   UnitOfMeasure?       @relation("MaterialDefinitionBaseUOM", fields: [baseUnitOfMeasureId], references: [id])
  alternateUnitOfMeasureRef UnitOfMeasure?    @relation("MaterialDefinitionAlternateUOM", fields: [alternateUnitOfMeasureId], references: [id])
  lots                   MaterialLot[]
  properties             MaterialProperty[]

  @@index([materialClassId])
  @@index([materialType])
  @@index([isActive])
  @@index([baseUnitOfMeasureId])
  @@index([alternateUnitOfMeasureId])
  @@index([materialNumber])
  @@map("material_definitions")
}

model MaterialProperty {
  id            String               @id @default(cuid())
  materialId    String
  propertyName  String
  propertyType  MaterialPropertyType
  propertyValue String
  propertyUnit  String?
  propertyUnitId String?              // FK to UnitOfMeasure
  testMethod    String?
  nominalValue  Float?
  minValue      Float?
  maxValue      Float?
  isRequired    Boolean              @default(false)
  isCritical    Boolean              @default(false)
  notes         String?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  material      MaterialDefinition   @relation(fields: [materialId], references: [id])
  unitOfMeasureRef UnitOfMeasure?    @relation("MaterialPropertyUOM", fields: [propertyUnitId], references: [id])

  @@unique([materialId, propertyName])
  @@index([materialId])
  @@index([propertyUnitId])
  @@index([propertyType])
  @@map("material_properties")
}

model MaterialLot {
  id                  String                 @id @default(cuid())
  lotNumber           String                 @unique
  materialId          String
  supplierLotNumber   String?
  purchaseOrderNumber String?
  heatNumber          String?
  serialNumber        String?
  originalQuantity    Float
  currentQuantity     Float
  unitOfMeasure       String
  unitOfMeasureId     String?              // FK to UnitOfMeasure
  location            String?
  warehouseId         String?
  manufactureDate     DateTime?
  receivedDate        DateTime
  expirationDate      DateTime?
  shelfLifeDays       Int?
  firstUsedDate       DateTime?
  lastUsedDate        DateTime?
  status              MaterialLotStatus      @default(AVAILABLE)
  state               MaterialLotState       @default(RECEIVED)
  isQuarantined       Boolean                @default(false)
  quarantineReason    String?
  quarantinedAt       DateTime?
  qualityStatus       QualityLotStatus       @default(PENDING)
  inspectionId        String?
  certificationUrls   String[]
  supplierId          String?
  supplierName        String?
  manufacturerId      String?
  manufacturerName    String?
  countryOfOrigin     String?
  unitCost            Float?
  totalCost           Float?
  currency            String?                @default("USD")
  parentLotId         String?
  isSplit             Boolean                @default(false)
  isMerged            Boolean                @default(false)
  notes               String?
  customAttributes    Json?
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  genealogyAsChild    MaterialLotGenealogy[] @relation("ChildLot")
  genealogyAsParent   MaterialLotGenealogy[] @relation("ParentLot")
  material            MaterialDefinition     @relation(fields: [materialId], references: [id])
  parentLot           MaterialLot?           @relation("LotGenealogy", fields: [parentLotId], references: [id])
  childLots           MaterialLot[]          @relation("LotGenealogy")
  unitOfMeasureRef    UnitOfMeasure?         @relation("MaterialLotUOM", fields: [unitOfMeasureId], references: [id])
  stateHistory        MaterialStateHistory[]
  sublots             MaterialSublot[]

  @@index([materialId])
  @@index([lotNumber])
  @@index([status])
  @@index([state])
  @@index([expirationDate])
  @@index([qualityStatus])
  @@index([parentLotId])
  @@index([unitOfMeasureId])
  @@map("material_lots")
}

model MaterialSublot {
  id            String              @id @default(cuid())
  sublotNumber  String              @unique
  parentLotId   String
  operationType SublotOperationType
  quantity      Float
  unitOfMeasure String
  unitOfMeasureId String?              // FK to UnitOfMeasure
  workOrderId   String?
  operationId   String?
  reservedFor   String?
  location      String?
  status        MaterialLotStatus   @default(AVAILABLE)
  isActive      Boolean             @default(true)
  splitReason   String?
  createdById   String?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  parentLot     MaterialLot         @relation(fields: [parentLotId], references: [id])
  unitOfMeasureRef UnitOfMeasure?    @relation("MaterialSublotUOM", fields: [unitOfMeasureId], references: [id])

  @@index([parentLotId])
  @@index([sublotNumber])
  @@index([workOrderId])
  @@index([unitOfMeasureId])
  @@map("material_sublots")
}

model MaterialLotGenealogy {
  id               String                @id @default(cuid())
  parentLotId      String
  childLotId       String
  relationshipType GenealogyRelationType
  quantityConsumed Float
  quantityProduced Float?
  unitOfMeasure    String
  unitOfMeasureId  String?              // FK to UnitOfMeasure
  workOrderId      String?
  operationId      String?
  processDate      DateTime
  operatorId       String?
  notes            String?
  createdAt        DateTime              @default(now())
  childLot         MaterialLot           @relation("ChildLot", fields: [childLotId], references: [id])
  parentLot        MaterialLot           @relation("ParentLot", fields: [parentLotId], references: [id])
  unitOfMeasureRef UnitOfMeasure?        @relation("MaterialLotGenealogyUOM", fields: [unitOfMeasureId], references: [id])

  @@unique([parentLotId, childLotId, processDate])
  @@index([parentLotId])
  @@index([childLotId])
  @@index([workOrderId])
  @@index([processDate])
  @@index([unitOfMeasureId])
  @@map("material_lot_genealogy")
}

model MaterialStateHistory {
  id             String              @id @default(cuid())
  lotId          String
  previousState  MaterialLotState?
  newState       MaterialLotState
  previousStatus MaterialLotStatus?
  newStatus      MaterialLotStatus?
  reason         String?
  transitionType StateTransitionType
  quantity       Float?
  unitOfMeasure  String?
  unitOfMeasureId String?              // FK to UnitOfMeasure
  workOrderId    String?
  operationId    String?
  inspectionId   String?
  changedById    String?
  changedAt      DateTime            @default(now())
  fromLocation   String?
  toLocation     String?
  qualityNotes   String?
  notes          String?
  metadata       Json?
  createdAt      DateTime            @default(now())
  lot            MaterialLot         @relation(fields: [lotId], references: [id])
  unitOfMeasureRef UnitOfMeasure?     @relation("MaterialStateHistoryUOM", fields: [unitOfMeasureId], references: [id])

  @@index([lotId])
  @@index([changedAt])
  @@index([newState])
  @@index([unitOfMeasureId])
  @@index([newStatus])
  @@map("material_state_history")
}

model Operation {
  id                        String                                @id @default(cuid())
  description               String?
  siteId                    String?
  isStandardOperation       Boolean                               @default(false)
  operationCode             String                                @unique
  operationName             String
  operationClassification   OperationClassification?
  standardWorkInstructionId String?
  level                     Int                                   @default(1)
  parentOperationId         String?
  operationType             OperationType
  category                  String?
  duration                  Int?
  setupTime                 Int?
  teardownTime              Int?
  minCycleTime              Int?
  maxCycleTime              Int?
  version                   String                                @default("1.0")
  effectiveDate             DateTime?
  expirationDate            DateTime?
  isActive                  Boolean                               @default(true)
  requiresApproval          Boolean                               @default(false)
  approvedBy                String?
  approvedAt                DateTime?
  createdAt                 DateTime                              @default(now())
  updatedAt                 DateTime                              @updatedAt
  bomItems                  BOMItem[]
  equipmentSpecs            EquipmentOperationSpecification[]
  materialSpecs             MaterialOperationSpecification[]
  dependencies              OperationDependency[]                 @relation("DependentOperation")
  prerequisiteFor           OperationDependency[]                 @relation("PrerequisiteOperation")
  parameters                OperationParameter[]
  parentOperation           Operation?                            @relation("OperationHierarchy", fields: [parentOperationId], references: [id])
  childOperations           Operation[]                           @relation("OperationHierarchy")
  site                      Site?                                 @relation(fields: [siteId], references: [id])
  standardWorkInstruction   WorkInstruction?                      @relation("OperationStandardWI", fields: [standardWorkInstructionId], references: [id])
  personnelSpecs            PersonnelOperationSpecification[]
  assetSpecs                PhysicalAssetOperationSpecification[]
  routingSteps              RoutingStep[]
  samplingPlans             SamplingPlan[]

  @@index([parentOperationId])
  @@index([operationType])
  @@index([level])
  @@index([isActive])
  @@index([siteId])
  @@index([isStandardOperation])
  @@map("operations")
}

model OperationParameter {
  id                   String            @id @default(cuid())
  operationId          String
  parameterName        String
  parameterType        ParameterType
  dataType             ParameterDataType
  defaultValue         String?
  unitOfMeasure        String?
  unitOfMeasureId      String?           // FK to UnitOfMeasure
  minValue             Float?
  maxValue             Float?
  allowedValues        String[]
  isRequired           Boolean           @default(false)
  isCritical           Boolean           @default(false)
  requiresVerification Boolean           @default(false)
  displayOrder         Int?
  notes                String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  parameterGroupId     String?
  operation            Operation         @relation(fields: [operationId], references: [id], onDelete: Cascade)
  parameterGroup       ParameterGroup?   @relation("ParameterGrouping", fields: [parameterGroupId], references: [id])
  formula              ParameterFormula? @relation("FormulaOutput")
  limits               ParameterLimits?
  samplingPlans        SamplingPlan[]
  spcConfiguration     SPCConfiguration?
  unitOfMeasureRef     UnitOfMeasure?    @relation("OperationParameterUOM", fields: [unitOfMeasureId], references: [id])

  @@unique([operationId, parameterName])
  @@index([operationId])
  @@index([parameterType])
  @@index([unitOfMeasureId])
  @@map("operation_parameters")
}

model ParameterLimits {
  id             String             @id @default(cuid())
  parameterId    String             @unique
  engineeringMin Float?
  engineeringMax Float?
  operatingMin   Float?
  operatingMax   Float?
  LSL            Float?
  USL            Float?
  nominalValue   Float?
  highHighAlarm  Float?
  highAlarm      Float?
  lowAlarm       Float?
  lowLowAlarm    Float?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  parameter      OperationParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)

  @@map("parameter_limits")
}

model ParameterGroup {
  id            String               @id @default(cuid())
  groupName     String
  parentGroupId String?
  groupType     ParameterGroupType
  description   String?
  tags          String[]
  displayOrder  Int?
  icon          String?
  color         String?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  parameters    OperationParameter[] @relation("ParameterGrouping")
  parentGroup   ParameterGroup?      @relation("GroupHierarchy", fields: [parentGroupId], references: [id], onDelete: Cascade)
  childGroups   ParameterGroup[]     @relation("GroupHierarchy")

  @@index([parentGroupId])
  @@index([groupType])
  @@map("parameter_groups")
}

model ParameterFormula {
  id                 String             @id @default(cuid())
  formulaName        String
  outputParameterId  String             @unique
  formulaExpression  String
  formulaLanguage    FormulaLanguage    @default(JAVASCRIPT)
  inputParameterIds  String[]
  evaluationTrigger  EvaluationTrigger  @default(ON_CHANGE)
  evaluationSchedule String?
  testCases          Json?
  isActive           Boolean            @default(true)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  createdBy          String
  lastModifiedBy     String?
  outputParameter    OperationParameter @relation("FormulaOutput", fields: [outputParameterId], references: [id], onDelete: Cascade)

  @@index([outputParameterId])
  @@map("parameter_formulas")
}

model OperationDependency {
  id                      String               @id @default(cuid())
  dependentOperationId    String
  prerequisiteOperationId String
  dependencyType          DependencyType
  timingType              DependencyTimingType
  lagTime                 Int?
  leadTime                Int?
  condition               String?
  isOptional              Boolean              @default(false)
  notes                   String?
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt
  dependentOperation      Operation            @relation("DependentOperation", fields: [dependentOperationId], references: [id], onDelete: Cascade)
  prerequisiteOperation   Operation            @relation("PrerequisiteOperation", fields: [prerequisiteOperationId], references: [id], onDelete: Cascade)

  @@unique([dependentOperationId, prerequisiteOperationId])
  @@index([dependentOperationId])
  @@index([prerequisiteOperationId])
  @@map("operation_dependencies")
}

model PersonnelOperationSpecification {
  id                     String           @id @default(cuid())
  operationId            String
  personnelClassId       String?
  skillId                String?
  minimumCompetency      CompetencyLevel?
  requiredCertifications String[]
  quantity               Int              @default(1)
  isOptional             Boolean          @default(false)
  roleName               String?
  roleDescription        String?
  notes                  String?
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  operation              Operation        @relation(fields: [operationId], references: [id], onDelete: Cascade)

  @@index([operationId])
  @@index([personnelClassId])
  @@map("personnel_operation_specifications")
}

model EquipmentOperationSpecification {
  id                   String          @id @default(cuid())
  operationId          String
  equipmentClass       EquipmentClass?
  equipmentType        String?
  specificEquipmentId  String?
  requiredCapabilities String[]
  minimumCapacity      Float?
  quantity             Int             @default(1)
  isOptional           Boolean         @default(false)
  setupRequired        Boolean         @default(false)
  setupTime            Int?
  notes                String?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  operation            Operation       @relation(fields: [operationId], references: [id], onDelete: Cascade)

  @@index([operationId])
  @@index([equipmentClass])
  @@map("equipment_operation_specifications")
}

model MaterialOperationSpecification {
  id                   String          @id @default(cuid())
  operationId          String
  materialDefinitionId String?
  materialClassId      String?
  materialType         MaterialType?
  quantity             Float
  unitOfMeasure        String
  unitOfMeasureId      String?          // FK to UnitOfMeasure
  consumptionType      ConsumptionType
  requiredProperties   String[]
  qualityRequirements  String?
  isOptional           Boolean         @default(false)
  allowSubstitutes     Boolean         @default(false)
  notes                String?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  operation            Operation       @relation(fields: [operationId], references: [id], onDelete: Cascade)
  unitOfMeasureRef     UnitOfMeasure?  @relation("MaterialOperationSpecificationUOM", fields: [unitOfMeasureId], references: [id])

  @@index([operationId])
  @@index([materialDefinitionId])
  @@index([unitOfMeasureId])
  @@map("material_operation_specifications")
}

model PhysicalAssetOperationSpecification {
  id                  String            @id @default(cuid())
  operationId         String
  assetType           PhysicalAssetType
  assetCode           String?
  assetName           String
  specifications      Json?
  quantity            Int               @default(1)
  isOptional          Boolean           @default(false)
  requiresCalibration Boolean           @default(false)
  calibrationInterval Int?
  estimatedLifeCycles Int?
  notes               String?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  operation           Operation         @relation(fields: [operationId], references: [id], onDelete: Cascade)

  @@index([operationId])
  @@index([assetType])
  @@map("physical_asset_operation_specifications")
}

model Part {
  id                         String                      @id @default(cuid())
  partNumber                 String                      @unique
  partName                   String
  description                String?
  partType                   String
  productType                ProductType                 @default(MADE_TO_STOCK)
  lifecycleState             ProductLifecycleState       @default(PRODUCTION)
  unitOfMeasure              String
  unitOfMeasureId            String?                     // FK to UnitOfMeasure
  weight                     Float?
  weightUnit                 String?
  drawingNumber              String?
  revision                   String?
  cadModelUrl                String?
  releaseDate                DateTime?
  obsoleteDate               DateTime?
  replacementPartId          String?
  makeOrBuy                  String?                     @default("MAKE")
  leadTimeDays               Int?
  lotSizeMin                 Int?
  lotSizeMultiple            Int?
  standardCost               Float?
  targetCost                 Float?
  currency                   String?                     @default("USD")
  isActive                   Boolean                     @default(true)
  isConfigurable             Boolean                     @default(false)
  requiresFAI                Boolean                     @default(false)
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt
  componentItems             BOMItem[]                   @relation("ComponentPart")
  bomItems                   BOMItem[]                   @relation("ParentPart")
  equipmentMaterialMovements EquipmentMaterialMovement[]
  erpMaterialTransactions    ERPMaterialTransaction[]
  inventoryItems             Inventory[]
  siteAvailability           PartSiteAvailability[]
  replacementPart            Part?                       @relation("PartReplacement", fields: [replacementPartId], references: [id])
  replacedParts              Part[]                      @relation("PartReplacement")
  configurations             ProductConfiguration[]
  lifecycleHistory           ProductLifecycle[]
  specifications             ProductSpecification[]
  productionScheduleRequests ProductionScheduleRequest[]
  qualityPlans               QualityPlan[]
  routings                   Routing[]
  scheduleEntries            ScheduleEntry[]
  serializedParts            SerializedPart[]
  workOrders                 WorkOrder[]
  unitOfMeasureRef           UnitOfMeasure?              @relation("PartUOM", fields: [unitOfMeasureId], references: [id])

  @@index([productType])
  @@index([lifecycleState])
  @@index([isActive])
  @@index([partNumber])
  @@index([unitOfMeasureId])
  @@map("parts")
}

model PartSiteAvailability {
  id             String    @id @default(cuid())
  partId         String
  siteId         String
  isPreferred    Boolean   @default(false)
  isActive       Boolean   @default(true)
  leadTimeDays   Int?
  minimumLotSize Int?
  maximumLotSize Int?
  standardCost   Float?
  setupCost      Float?
  effectiveDate  DateTime?
  expirationDate DateTime?
  notes          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  part           Part      @relation(fields: [partId], references: [id], onDelete: Cascade)
  site           Site      @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@unique([partId, siteId])
  @@index([siteId])
  @@index([isActive])
  @@map("part_site_availability")
}

model BOMItem {
  id                  String     @id @default(cuid())
  parentPartId        String
  componentPartId     String
  quantity            Float
  unitOfMeasure       String
  unitOfMeasureId     String?    // FK to UnitOfMeasure
  scrapFactor         Float?     @default(0)
  sequence            Int?
  findNumber          String?
  referenceDesignator String?
  operationId         String?
  operationNumber     Int?
  effectiveDate       DateTime?
  obsoleteDate        DateTime?
  ecoNumber           String?
  isOptional          Boolean    @default(false)
  isCritical          Boolean    @default(false)
  notes               String?
  isActive            Boolean    @default(true)
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  componentPart       Part       @relation("ComponentPart", fields: [componentPartId], references: [id])
  operation           Operation? @relation(fields: [operationId], references: [id])
  parentPart          Part       @relation("ParentPart", fields: [parentPartId], references: [id])
  unitOfMeasureRef    UnitOfMeasure? @relation("BOMItemUOM", fields: [unitOfMeasureId], references: [id])

  @@index([parentPartId])
  @@index([componentPartId])
  @@index([operationId])
  @@index([unitOfMeasureId])
  @@index([effectiveDate])
  @@map("bom_items")
}

model ProductSpecification {
  id                  String            @id @default(cuid())
  partId              String
  specificationName   String
  specificationType   SpecificationType
  specificationValue  String?
  nominalValue        Float?
  minValue            Float?
  maxValue            Float?
  unitOfMeasure       String?
  testMethod          String?
  inspectionFrequency String?
  isCritical          Boolean           @default(false)
  isRegulatory        Boolean           @default(false)
  documentReferences  String[]
  notes               String?
  isActive            Boolean           @default(true)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  part                Part              @relation(fields: [partId], references: [id], onDelete: Cascade)

  @@index([partId])
  @@index([specificationType])
  @@index([isCritical])
  @@map("product_specifications")
}

model ProductConfiguration {
  id                String                @id @default(cuid())
  partId            String
  configurationName String
  configurationType ConfigurationType
  description       String?
  configurationCode String?
  attributes        Json?
  priceModifier     Float?                @default(0)
  costModifier      Float?                @default(0)
  leadTimeDelta     Int?                  @default(0)
  isAvailable       Boolean               @default(true)
  effectiveDate     DateTime?
  obsoleteDate      DateTime?
  isDefault         Boolean               @default(false)
  marketingName     String?
  imageUrl          String?
  isActive          Boolean               @default(true)
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  options           ConfigurationOption[]
  part              Part                  @relation(fields: [partId], references: [id], onDelete: Cascade)

  @@index([partId])
  @@index([configurationType])
  @@index([isDefault])
  @@map("product_configurations")
}

model ConfigurationOption {
  id              String               @id @default(cuid())
  configurationId String
  optionName      String
  optionCode      String?
  description     String?
  optionCategory  String?
  optionValue     String?
  isRequired      Boolean              @default(false)
  isDefault       Boolean              @default(false)
  addedPartIds    String[]
  removedPartIds  String[]
  priceModifier   Float?               @default(0)
  costModifier    Float?               @default(0)
  displayOrder    Int?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  configuration   ProductConfiguration @relation(fields: [configurationId], references: [id], onDelete: Cascade)

  @@index([configurationId])
  @@map("configuration_options")
}

model ProductLifecycle {
  id                String                 @id @default(cuid())
  partId            String
  previousState     ProductLifecycleState?
  newState          ProductLifecycleState
  transitionDate    DateTime               @default(now())
  reason            String?
  ecoNumber         String?
  approvedBy        String?
  approvedAt        DateTime?
  notificationsSent Boolean                @default(false)
  impactAssessment  String?
  notes             String?
  metadata          Json?
  createdAt         DateTime               @default(now())
  part              Part                   @relation(fields: [partId], references: [id], onDelete: Cascade)

  @@index([partId])
  @@index([newState])
  @@index([transitionDate])
  @@map("product_lifecycle")
}

model WorkOrder {
  id                           String                        @id @default(cuid())
  workOrderNumber              String                        @unique
  partId                       String
  partNumber                   String?
  quantity                     Int
  quantityCompleted            Int                           @default(0)
  quantityScrapped             Int                           @default(0)
  priority                     WorkOrderPriority
  status                       WorkOrderStatus
  dueDate                      DateTime?
  customerOrder                String?
  routingId                    String?
  siteId                       String?
  createdById                  String
  assignedToId                 String?
  startedAt                    DateTime?
  actualStartDate              DateTime?
  completedAt                  DateTime?
  actualEndDate                DateTime?
  createdAt                    DateTime                      @default(now())
  updatedAt                    DateTime                      @updatedAt
  dispatchLogs                 DispatchLog[]
  equipmentCommands            EquipmentCommand[]
  equipmentDataCollections     EquipmentDataCollection[]
  equipmentMaterialMovements   EquipmentMaterialMovement[]
  erpMaterialTransactions      ERPMaterialTransaction[]
  laborTimeEntries             LaborTimeEntry[]
  machineTimeEntries           MachineTimeEntry[]
  materialTransactions         MaterialTransaction[]
  ncrs                         NCR[]
  processDataCollections       ProcessDataCollection[]
  productionPerformanceActuals ProductionPerformanceActual[]
  productionScheduleRequests   ProductionScheduleRequest[]
  variances                    ProductionVariance[]
  qifMeasurementPlans          QIFMeasurementPlan[]
  qifMeasurementResults        QIFMeasurementResult[]
  qualityInspections           QualityInspection[]
  scheduleEntry                ScheduleEntry?
  operations                   WorkOrderOperation[]
  statusHistory                WorkOrderStatusHistory[]
  assignedTo                   User?                         @relation("AssignedTo", fields: [assignedToId], references: [id])
  createdBy                    User                          @relation("CreatedBy", fields: [createdById], references: [id])
  part                         Part                          @relation(fields: [partId], references: [id])
  routing                      Routing?                      @relation(fields: [routingId], references: [id])
  site                         Site?                         @relation(fields: [siteId], references: [id])
  workPerformance              WorkPerformance[]

  @@map("work_orders")
}

model Routing {
  id              String                @id @default(cuid())
  routingNumber   String                @unique
  partId          String?
  siteId          String?
  version         String                @default("1.0")
  lifecycleState  RoutingLifecycleState @default(DRAFT)
  description     String?
  isPrimaryRoute  Boolean               @default(false)
  isActive        Boolean               @default(true)
  effectiveDate   DateTime?
  expirationDate  DateTime?
  routingType     RoutingType           @default(PRIMARY)
  alternateForId  String?
  priority        Int                   @default(1)
  approvedBy      String?
  approvedAt      DateTime?
  visualData      Json?
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  createdBy       String?
  notes           String?
  operations      RoutingOperation[]
  steps           RoutingStep[]
  templateSources RoutingTemplate[]     @relation("TemplateSource")
  alternateFor    Routing?              @relation("AlternateRoutes", fields: [alternateForId], references: [id])
  alternateRoutes Routing[]             @relation("AlternateRoutes")
  part            Part?                 @relation(fields: [partId], references: [id])
  site            Site?                 @relation(fields: [siteId], references: [id])
  scheduleEntries ScheduleEntry[]
  workOrders      WorkOrder[]

  @@unique([partId, siteId, version])
  @@index([siteId])
  @@index([partId])
  @@index([lifecycleState])
  @@index([isActive])
  @@index([partId, siteId, routingType])
  @@index([alternateForId])
  @@map("routings")
}

model RoutingOperation {
  id              String               @id @default(cuid())
  routingId       String
  operationNumber Int
  operationName   String
  description     String?
  setupTime       Float?
  cycleTime       Float?
  workCenterId    String?
  isActive        Boolean              @default(true)
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  routing         Routing              @relation(fields: [routingId], references: [id])
  workCenter      WorkCenter?          @relation(fields: [workCenterId], references: [id])
  workOrderOps    WorkOrderOperation[]

  @@map("routing_operations")
}

model RoutingStep {
  id                   String                  @id @default(cuid())
  routingId            String
  stepNumber           Int
  operationId          String
  workCenterId         String?
  stepType             StepType                @default(PROCESS)
  controlType          ControlType?
  setupTimeOverride    Int?
  cycleTimeOverride    Int?
  teardownTimeOverride Int?
  isOptional           Boolean                 @default(false)
  isQualityInspection  Boolean                 @default(false)
  isCriticalPath       Boolean                 @default(false)
  workInstructionId    String?
  stepInstructions     String?
  notes                String?
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
  dependencies         RoutingStepDependency[] @relation("DependentStep")
  prerequisites        RoutingStepDependency[] @relation("PrerequisiteStep")
  parameterOverrides   RoutingStepParameter[]
  operation            Operation               @relation(fields: [operationId], references: [id])
  routing              Routing                 @relation(fields: [routingId], references: [id], onDelete: Cascade)
  workCenter           WorkCenter?             @relation(fields: [workCenterId], references: [id])
  workInstruction      WorkInstruction?        @relation("RoutingStepWorkInstruction", fields: [workInstructionId], references: [id])
  workOrderOperations  WorkOrderOperation[]

  @@unique([routingId, stepNumber])
  @@index([routingId])
  @@index([operationId])
  @@index([workCenterId])
  @@map("routing_steps")
}

model RoutingStepDependency {
  id                 String               @id @default(cuid())
  dependentStepId    String
  prerequisiteStepId String
  dependencyType     DependencyType
  timingType         DependencyTimingType
  lagTime            Int?
  leadTime           Int?
  createdAt          DateTime             @default(now())
  dependentStep      RoutingStep          @relation("DependentStep", fields: [dependentStepId], references: [id], onDelete: Cascade)
  prerequisiteStep   RoutingStep          @relation("PrerequisiteStep", fields: [prerequisiteStepId], references: [id], onDelete: Cascade)

  @@unique([dependentStepId, prerequisiteStepId])
  @@index([dependentStepId])
  @@index([prerequisiteStepId])
  @@map("routing_step_dependencies")
}

model RoutingStepParameter {
  id             String      @id @default(cuid())
  routingStepId  String
  parameterName  String
  parameterValue String
  unitOfMeasure  String?
  notes          String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  routingStep    RoutingStep @relation(fields: [routingStepId], references: [id], onDelete: Cascade)

  @@unique([routingStepId, parameterName])
  @@index([routingStepId])
  @@map("routing_step_parameters")
}

model RoutingTemplate {
  id              String   @id @default(cuid())
  name            String
  number          String   @unique @default(cuid())
  category        String?
  description     String?
  tags            String[]
  isPublic        Boolean  @default(false)
  isFavorite      Boolean  @default(false)
  usageCount      Int      @default(0)
  rating          Float?
  visualData      Json?
  sourceRoutingId String?
  createdById     String
  siteId          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       User     @relation(fields: [createdById], references: [id])
  site            Site     @relation(fields: [siteId], references: [id])
  sourceRouting   Routing? @relation("TemplateSource", fields: [sourceRoutingId], references: [id])

  @@index([siteId])
  @@index([createdById])
  @@index([category])
  @@index([isFavorite])
  @@map("routing_templates")
}

model WorkCenter {
  id                   String                          @id @default(cuid())
  name                 String                          @unique
  description          String?
  capacity             Float?
  areaId               String?
  isActive             Boolean                         @default(true)
  createdAt            DateTime                        @default(now())
  updatedAt            DateTime                        @updatedAt
  dispatchLogs         DispatchLog[]                   @relation("DispatchWorkCenter")
  equipment            Equipment[]
  personnelAssignments PersonnelWorkCenterAssignment[]
  operations           RoutingOperation[]
  routingSteps         RoutingStep[]
  scheduleEntries      ScheduleEntry[]
  area                 Area?                           @relation(fields: [areaId], references: [id])
  workUnits            WorkUnit[]

  @@index([areaId])
  @@map("work_centers")
}

model WorkUnit {
  id           String      @id @default(cuid())
  workUnitCode String      @unique
  workUnitName String
  description  String?
  workCenterId String
  isActive     Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  equipment    Equipment[]
  workCenter   WorkCenter  @relation(fields: [workCenterId], references: [id])

  @@index([workCenterId])
  @@map("work_units")
}

model WorkOrderOperation {
  id                 String                   @id @default(cuid())
  workOrderId        String
  routingOperationId String
  status             WorkOrderOperationStatus
  quantity           Int
  quantityCompleted  Int                      @default(0)
  quantityScrap      Int                      @default(0)
  startedAt          DateTime?
  completedAt        DateTime?
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  routingStepId      String?
  laborTimeEntries   LaborTimeEntry[]
  machineTimeEntries MachineTimeEntry[]
  variances          ProductionVariance[]
  routingOperation   RoutingOperation         @relation(fields: [routingOperationId], references: [id])
  RoutingStep        RoutingStep?             @relation(fields: [routingStepId], references: [id])
  workOrder          WorkOrder                @relation(fields: [workOrderId], references: [id])
  workPerformance    WorkPerformance[]

  @@map("work_order_operations")
}

model ProductionSchedule {
  id               String                 @id @default(cuid())
  scheduleNumber   String                 @unique
  scheduleName     String
  description      String?
  periodStart      DateTime
  periodEnd        DateTime
  periodType       String                 @default("MONTHLY")
  siteId           String?
  areaId           String?
  state            ScheduleState          @default(FORECAST)
  stateChangedAt   DateTime               @default(now())
  stateChangedBy   String?
  priority         SchedulePriority       @default(NORMAL)
  plannedBy        String?
  approvedBy       String?
  approvedAt       DateTime?
  dispatchedCount  Int                    @default(0)
  totalEntries     Int                    @default(0)
  isLocked         Boolean                @default(false)
  isFeasible       Boolean                @default(true)
  feasibilityNotes String?
  notes            String?
  metadata         Json?
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  site             Site?                  @relation(fields: [siteId], references: [id])
  entries          ScheduleEntry[]
  stateHistory     ScheduleStateHistory[]

  @@index([siteId])
  @@index([state])
  @@index([periodStart])
  @@index([periodEnd])
  @@map("production_schedules")
}

model ScheduleEntry {
  id                 String               @id @default(cuid())
  scheduleId         String
  entryNumber        Int
  partId             String
  partNumber         String
  description        String?
  plannedQuantity    Float
  dispatchedQuantity Float                @default(0)
  completedQuantity  Float                @default(0)
  unitOfMeasure      String               @default("EA")
  plannedStartDate   DateTime
  plannedEndDate     DateTime
  actualStartDate    DateTime?
  actualEndDate      DateTime?
  priority           SchedulePriority     @default(NORMAL)
  sequenceNumber     Int?
  estimatedDuration  Int?
  workCenterId       String?
  routingId          String?
  customerOrder      String?
  customerDueDate    DateTime?
  salesOrder         String?
  isDispatched       Boolean              @default(false)
  dispatchedAt       DateTime?
  dispatchedBy       String?
  workOrderId        String?              @unique
  isCancelled        Boolean              @default(false)
  cancelledAt        DateTime?
  cancelledReason    String?
  notes              String?
  metadata           Json?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  constraints        ScheduleConstraint[]
  part               Part                 @relation(fields: [partId], references: [id])
  routing            Routing?             @relation(fields: [routingId], references: [id])
  schedule           ProductionSchedule   @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  workCenter         WorkCenter?          @relation(fields: [workCenterId], references: [id])
  workOrder          WorkOrder?           @relation(fields: [workOrderId], references: [id])

  @@unique([scheduleId, entryNumber])
  @@index([scheduleId])
  @@index([partId])
  @@index([plannedStartDate])
  @@index([plannedEndDate])
  @@index([priority])
  @@index([isDispatched])
  @@index([workOrderId])
  @@map("schedule_entries")
}

model ScheduleConstraint {
  id                String         @id @default(cuid())
  entryId           String
  constraintType    ConstraintType
  constraintName    String
  description       String?
  resourceId        String?
  resourceType      String?
  requiredQuantity  Float?
  availableQuantity Float?
  unitOfMeasure     String?
  constraintDate    DateTime?
  leadTimeDays      Int?
  isViolated        Boolean        @default(false)
  violationSeverity String?
  violationMessage  String?
  isResolved        Boolean        @default(false)
  resolvedAt        DateTime?
  resolvedBy        String?
  resolutionNotes   String?
  notes             String?
  metadata          Json?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  entry             ScheduleEntry  @relation(fields: [entryId], references: [id], onDelete: Cascade)

  @@index([entryId])
  @@index([constraintType])
  @@index([isViolated])
  @@index([constraintDate])
  @@map("schedule_constraints")
}

model ScheduleStateHistory {
  id                String             @id @default(cuid())
  scheduleId        String
  previousState     ScheduleState?
  newState          ScheduleState
  transitionDate    DateTime           @default(now())
  reason            String?
  changedBy         String?
  entriesAffected   Int?
  notificationsSent Boolean            @default(false)
  notes             String?
  metadata          Json?
  createdAt         DateTime           @default(now())
  schedule          ProductionSchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  @@index([scheduleId])
  @@index([newState])
  @@index([transitionDate])
  @@map("schedule_state_history")
}

model WorkOrderStatusHistory {
  id                   String           @id @default(cuid())
  workOrderId          String
  previousStatus       WorkOrderStatus?
  newStatus            WorkOrderStatus
  transitionDate       DateTime         @default(now())
  reason               String?
  changedBy            String?
  notes                String?
  quantityAtTransition Int?
  scrapAtTransition    Int?
  metadata             Json?
  createdAt            DateTime         @default(now())
  workOrder            WorkOrder        @relation(fields: [workOrderId], references: [id], onDelete: Cascade)

  @@index([workOrderId])
  @@index([newStatus])
  @@index([transitionDate])
  @@map("work_order_status_history")
}

model DispatchLog {
  id                 String             @id @default(cuid())
  workOrderId        String
  dispatchedAt       DateTime           @default(now())
  dispatchedBy       String?
  dispatchedFrom     String?
  assignedToId       String?
  workCenterId       String?
  priorityOverride   WorkOrderPriority?
  expectedStartDate  DateTime?
  expectedEndDate    DateTime?
  quantityDispatched Int
  materialReserved   Boolean            @default(false)
  toolingReserved    Boolean            @default(false)
  dispatchNotes      String?
  metadata           Json?
  createdAt          DateTime           @default(now())
  assignedTo         User?              @relation("DispatchAssignedTo", fields: [assignedToId], references: [id])
  workCenter         WorkCenter?        @relation("DispatchWorkCenter", fields: [workCenterId], references: [id])
  workOrder          WorkOrder          @relation(fields: [workOrderId], references: [id], onDelete: Cascade)

  @@index([workOrderId])
  @@index([dispatchedAt])
  @@index([assignedToId])
  @@index([workCenterId])
  @@map("dispatch_logs")
}

model WorkPerformance {
  id               String              @id @default(cuid())
  workOrderId      String
  operationId      String?
  performanceType  WorkPerformanceType
  recordedAt       DateTime            @default(now())
  recordedBy       String?
  personnelId      String?
  laborHours       Float?
  laborCost        Float?
  laborEfficiency  Float?
  partId           String?
  quantityConsumed Float?
  quantityPlanned  Float?
  materialVariance Float?
  unitCost         Float?
  totalCost        Float?
  equipmentId      String?
  setupTime        Float?
  runTime          Float?
  plannedSetupTime Float?
  plannedRunTime   Float?
  quantityProduced Int?
  quantityGood     Int?
  quantityScrap    Int?
  quantityRework   Int?
  yieldPercentage  Float?
  scrapReason      String?
  downtimeMinutes  Float?
  downtimeReason   String?
  downtimeCategory String?
  notes            String?
  metadata         Json?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  operation        WorkOrderOperation? @relation(fields: [operationId], references: [id], onDelete: Cascade)
  personnel        User?               @relation("WorkPerformancePersonnel", fields: [personnelId], references: [id])
  workOrder        WorkOrder           @relation(fields: [workOrderId], references: [id], onDelete: Cascade)

  @@index([workOrderId])
  @@index([operationId])
  @@index([performanceType])
  @@index([recordedAt])
  @@index([personnelId])
  @@map("work_performance")
}

model ProductionVariance {
  id               String              @id @default(cuid())
  workOrderId      String
  operationId      String?
  varianceType     VarianceType
  varianceName     String
  plannedValue     Float
  actualValue      Float
  variance         Float
  variancePercent  Float
  isFavorable      Boolean             @default(false)
  costImpact       Float?
  rootCause        String?
  correctiveAction String?
  responsibleParty String?
  calculatedAt     DateTime            @default(now())
  periodStart      DateTime?
  periodEnd        DateTime?
  isResolved       Boolean             @default(false)
  resolvedAt       DateTime?
  resolvedBy       String?
  notes            String?
  metadata         Json?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  operation        WorkOrderOperation? @relation(fields: [operationId], references: [id], onDelete: Cascade)
  workOrder        WorkOrder           @relation(fields: [workOrderId], references: [id], onDelete: Cascade)

  @@index([workOrderId])
  @@index([operationId])
  @@index([varianceType])
  @@index([isFavorable])
  @@index([calculatedAt])
  @@map("production_variances")
}

model QualityPlan {
  id              String                  @id @default(cuid())
  planNumber      String                  @unique
  planName        String
  partId          String
  operation       String?
  description     String?
  isActive        Boolean                 @default(true)
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  characteristics QualityCharacteristic[]
  inspections     QualityInspection[]
  part            Part                    @relation(fields: [partId], references: [id])

  @@map("quality_plans")
}

model QualityCharacteristic {
  id               String               @id @default(cuid())
  planId           String
  characteristic   String
  specification    String
  toleranceType    QualityToleranceType
  nominalValue     Float?
  upperLimit       Float?
  lowerLimit       Float?
  unitOfMeasure    String?
  inspectionMethod String?
  isActive         Boolean              @default(true)
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  plan             QualityPlan          @relation(fields: [planId], references: [id])
  measurements     QualityMeasurement[]

  @@map("quality_characteristics")
}

model QualityInspection {
  id               String                   @id @default(cuid())
  inspectionNumber String                   @unique
  workOrderId      String
  planId           String
  inspectorId      String
  status           QualityInspectionStatus
  result           QualityInspectionResult?
  quantity         Int
  startedAt        DateTime?
  completedAt      DateTime?
  notes            String?
  createdAt        DateTime                 @default(now())
  updatedAt        DateTime                 @updatedAt
  ncrs             NCR[]
  inspector        User                     @relation(fields: [inspectorId], references: [id])
  plan             QualityPlan              @relation(fields: [planId], references: [id])
  workOrder        WorkOrder                @relation(fields: [workOrderId], references: [id])
  measurements     QualityMeasurement[]

  @@map("quality_inspections")
}

model QualityMeasurement {
  id               String                @id @default(cuid())
  inspectionId     String
  characteristicId String
  measuredValue    Float
  result           String
  notes            String?
  createdAt        DateTime              @default(now())
  characteristic   QualityCharacteristic @relation(fields: [characteristicId], references: [id])
  inspection       QualityInspection     @relation(fields: [inspectionId], references: [id])

  @@map("quality_measurements")
}

model NCR {
  id               String             @id @default(cuid())
  ncrNumber        String             @unique
  workOrderId      String?
  inspectionId     String?
  siteId           String?
  partNumber       String
  operation        String?
  defectType       String
  description      String
  severity         NCRSeverity
  status           NCRStatus
  quantity         Int
  createdById      String
  assignedToId     String?
  dueDate          DateTime?
  rootCause        String?
  correctiveAction String?
  preventiveAction String?
  closedAt         DateTime?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  assignedTo       User?              @relation("AssignedTo", fields: [assignedToId], references: [id])
  createdBy        User               @relation("CreatedBy", fields: [createdById], references: [id])
  inspection       QualityInspection? @relation(fields: [inspectionId], references: [id])
  site             Site?              @relation(fields: [siteId], references: [id])
  workOrder        WorkOrder?         @relation(fields: [workOrderId], references: [id])

  @@map("ncrs")
}

model Equipment {
  id                         String                      @id @default(cuid())
  equipmentNumber            String                      @unique
  name                       String
  description                String?
  equipmentClass             EquipmentClass
  equipmentType              String?
  equipmentLevel             Int                         @default(1)
  parentEquipmentId          String?
  manufacturer               String?
  model                      String?
  serialNumber               String?
  installDate                DateTime?
  commissionDate             DateTime?
  siteId                     String?
  areaId                     String?
  workCenterId               String?
  workUnitId                 String?
  status                     EquipmentStatus
  currentState               EquipmentState              @default(IDLE)
  stateChangedAt             DateTime                    @default(now())
  utilizationRate            Float?                      @default(0)
  availability               Float?                      @default(0)
  performance                Float?                      @default(0)
  quality                    Float?                      @default(0)
  oee                        Float?                      @default(0)
  ratedCapacity              Float?
  currentCapacity            Float?
  isActive                   Boolean                     @default(true)
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt
  area                       Area?                       @relation(fields: [areaId], references: [id])
  parentEquipment            Equipment?                  @relation("EquipmentHierarchy", fields: [parentEquipmentId], references: [id])
  childEquipment             Equipment[]                 @relation("EquipmentHierarchy")
  site                       Site?                       @relation(fields: [siteId], references: [id])
  workCenter                 WorkCenter?                 @relation(fields: [workCenterId], references: [id])
  workUnit                   WorkUnit?                   @relation(fields: [workUnitId], references: [id])
  capabilities               EquipmentCapability[]
  equipmentCommands          EquipmentCommand[]
  equipmentDataCollections   EquipmentDataCollection[]
  logs                       EquipmentLog[]
  equipmentMaterialMovements EquipmentMaterialMovement[]
  performanceData            EquipmentPerformanceLog[]
  stateHistory               EquipmentStateHistory[]
  machineTimeEntries         MachineTimeEntry[]
  maintenanceWorkOrders      MaintenanceWorkOrder[]
  processDataCollections     ProcessDataCollection[]
  productionScheduleRequests ProductionScheduleRequest[]

  @@index([parentEquipmentId])
  @@index([workUnitId])
  @@index([workCenterId])
  @@index([areaId])
  @@index([siteId])
  @@index([currentState])
  @@index([equipmentClass])
  @@map("equipment")
}

model EquipmentCapability {
  id             String    @id @default(cuid())
  equipmentId    String
  capabilityType String
  capability     String
  description    String?
  parameters     Json?
  certifiedDate  DateTime?
  expiryDate     DateTime?
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  equipment      Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)

  @@index([equipmentId])
  @@index([capabilityType])
  @@index([capability])
  @@map("equipment_capabilities")
}

model EquipmentLog {
  id          String           @id @default(cuid())
  equipmentId String
  logType     EquipmentLogType
  description String
  userId      String?
  loggedAt    DateTime         @default(now())
  equipment   Equipment        @relation(fields: [equipmentId], references: [id])
  user        User?            @relation(fields: [userId], references: [id])

  @@map("equipment_logs")
}

model EquipmentStateHistory {
  id             String          @id @default(cuid())
  equipmentId    String
  previousState  EquipmentState?
  newState       EquipmentState
  reason         String?
  changedBy      String?
  stateStartTime DateTime        @default(now())
  stateEndTime   DateTime?
  duration       Int?
  workOrderId    String?
  operationId    String?
  downtime       Boolean         @default(false)
  createdAt      DateTime        @default(now())
  equipment      Equipment       @relation(fields: [equipmentId], references: [id])

  @@index([equipmentId])
  @@index([stateStartTime])
  @@index([newState])
  @@map("equipment_state_history")
}

model EquipmentPerformanceLog {
  id                    String                @id @default(cuid())
  equipmentId           String
  periodStart           DateTime
  periodEnd             DateTime
  periodType            PerformancePeriodType @default(SHIFT)
  plannedProductionTime Int
  operatingTime         Int
  downtime              Int
  availability          Float
  idealCycleTime        Float?
  actualCycleTime       Float?
  totalUnitsProduced    Int
  targetProduction      Int?
  performance           Float
  goodUnits             Int
  rejectedUnits         Int
  scrapUnits            Int
  reworkUnits           Int
  quality               Float
  oee                   Float
  workOrderId           String?
  partId                String?
  operatorId            String?
  teep                  Float?
  utilizationRate       Float?
  notes                 String?
  hasAnomalies          Boolean               @default(false)
  createdAt             DateTime              @default(now())
  calculatedAt          DateTime              @default(now())
  equipment             Equipment             @relation(fields: [equipmentId], references: [id])

  @@index([equipmentId])
  @@index([periodStart])
  @@index([periodType])
  @@index([oee])
  @@map("equipment_performance_logs")
}

model Inventory {
  id            String                @id @default(cuid())
  partId        String
  location      String
  lotNumber     String?
  quantity      Float
  unitOfMeasure String
  unitCost      Float?
  receivedDate  DateTime?
  expiryDate    DateTime?
  isActive      Boolean               @default(true)
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  part          Part                  @relation(fields: [partId], references: [id])
  transactions  MaterialTransaction[]

  @@map("inventory")
}

model MaterialTransaction {
  id              String                  @id @default(cuid())
  inventoryId     String
  workOrderId     String?
  transactionType MaterialTransactionType
  quantity        Float
  unitOfMeasure   String
  reference       String?
  transactionDate DateTime                @default(now())
  createdAt       DateTime                @default(now())
  inventory       Inventory               @relation(fields: [inventoryId], references: [id])
  workOrder       WorkOrder?              @relation(fields: [workOrderId], references: [id])

  @@map("material_transactions")
}

model SerializedPart {
  id                    String                 @id @default(cuid())
  serialNumber          String                 @unique
  partId                String
  workOrderId           String?
  lotNumber             String?
  status                String
  currentLocation       String?
  manufactureDate       DateTime?
  shipDate              DateTime?
  customerInfo          String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  inspectionRecords     InspectionRecord[]
  components            PartGenealogy[]        @relation("ComponentPart")
  genealogy             PartGenealogy[]        @relation("ParentPart")
  qifMeasurementResults QIFMeasurementResult[]
  part                  Part                   @relation(fields: [partId], references: [id])

  @@map("serialized_parts")
}

model PartGenealogy {
  id               String         @id @default(cuid())
  parentPartId     String
  componentPartId  String
  assemblyDate     DateTime?
  assemblyOperator String?
  createdAt        DateTime       @default(now())
  componentPart    SerializedPart @relation("ComponentPart", fields: [componentPartId], references: [id])
  parentPart       SerializedPart @relation("ParentPart", fields: [parentPartId], references: [id])

  @@map("part_genealogy")
}

model WorkInstruction {
  id                   String                    @id @default(cuid())
  title                String
  description          String?
  partId               String?
  operationId          String?
  version              String                    @default("1.0.0")
  status               WorkInstructionStatus     @default(DRAFT)
  effectiveDate        DateTime?
  supersededDate       DateTime?
  ecoNumber            String?
  approvedById         String?
  approvedAt           DateTime?
  approvalHistory      Json?
  createdById          String
  updatedById          String
  createdAt            DateTime                  @default(now())
  updatedAt            DateTime                  @updatedAt
  operationType        String?
  requiredForExecution Boolean                   @default(false)
  contentFormat        WorkInstructionFormat     @default(NATIVE)
  nativeContent        Json?
  importedFromFile     String?
  exportTemplateId     String?
  tags                 String[]
  categories           String[]
  keywords             String[]
  thumbnailUrl         String?
  operationStandard    Operation[]               @relation("OperationStandardWI")
  routingStepOverrides RoutingStep[]             @relation("RoutingStepWorkInstruction")
  mediaLibraryItems    WorkInstructionMedia[]
  relatedDocuments     WorkInstructionRelation[] @relation("ParentInstruction")
  steps                WorkInstructionStep[]
  approvedBy           User?                     @relation("WorkInstructionApprovedBy", fields: [approvedById], references: [id])
  createdBy            User                      @relation("WorkInstructionCreatedBy", fields: [createdById], references: [id])
  exportTemplate       ExportTemplate?           @relation(fields: [exportTemplateId], references: [id])
  updatedBy            User                      @relation("WorkInstructionUpdatedBy", fields: [updatedById], references: [id])

  @@index([status])
  @@index([partId])
  @@index([contentFormat])
  @@index([tags])
  @@index([categories])
  @@map("work_instructions")
}

model WorkInstructionStep {
  id                String          @id @default(cuid())
  workInstructionId String
  stepNumber        Int
  title             String
  content           String
  imageUrls         String[]
  videoUrls         String[]
  attachmentUrls    String[]
  estimatedDuration Int?
  isCritical        Boolean         @default(false)
  requiresSignature Boolean         @default(false)
  dataEntryFields   Json?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  workInstruction   WorkInstruction @relation(fields: [workInstructionId], references: [id], onDelete: Cascade)

  @@unique([workInstructionId, stepNumber])
  @@index([workInstructionId])
  @@map("work_instruction_steps")
}

model WorkInstructionExecution {
  id                String                         @id @default(cuid())
  workInstructionId String
  workOrderId       String
  operationId       String?
  operatorId        String
  currentStepNumber Int                            @default(1)
  status            WorkInstructionExecutionStatus @default(IN_PROGRESS)
  startedAt         DateTime                       @default(now())
  completedAt       DateTime?
  createdAt         DateTime                       @default(now())
  updatedAt         DateTime                       @updatedAt
  operator          User                           @relation("WIExecutionOperator", fields: [operatorId], references: [id])
  stepExecutions    WorkInstructionStepExecution[]

  @@index([workOrderId])
  @@index([operatorId])
  @@map("work_instruction_executions")
}

model WorkInstructionStepExecution {
  id          String                   @id @default(cuid())
  executionId String
  stepNumber  Int
  status      String                   @default("PENDING")
  dataEntered Json?
  notes       String?
  signedById  String?
  signedAt    DateTime?
  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  execution   WorkInstructionExecution @relation(fields: [executionId], references: [id], onDelete: Cascade)
  signedBy    User?                    @relation("WIStepExecutionSignedBy", fields: [signedById], references: [id])

  @@unique([executionId, stepNumber])
  @@index([executionId])
  @@map("work_instruction_step_executions")
}

model ElectronicSignature {
  id                 String                   @id @default(cuid())
  signatureType      ElectronicSignatureType
  signatureLevel     ElectronicSignatureLevel
  userId             String
  signedEntityType   String
  signedEntityId     String
  signatureReason    String?
  signatureData      Json
  ipAddress          String
  userAgent          String
  timestamp          DateTime                 @default(now())
  biometricType      BiometricType?
  biometricTemplate  String?
  biometricScore     Float?
  signatureHash      String
  isValid            Boolean                  @default(true)
  invalidatedAt      DateTime?
  invalidatedById    String?
  invalidationReason String?
  signedDocument     Json?
  certificateId      String?
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  invalidatedBy      User?                    @relation("ElectronicSignatureInvalidatedBy", fields: [invalidatedById], references: [id])
  user               User                     @relation("ElectronicSignatureUser", fields: [userId], references: [id])

  @@index([userId])
  @@index([signedEntityType, signedEntityId])
  @@index([timestamp])
  @@map("electronic_signatures")
}

model FAIReport {
  id                    String                 @id @default(cuid())
  faiNumber             String                 @unique
  partId                String
  workOrderId           String?
  inspectionId          String?
  status                FAIStatus              @default(IN_PROGRESS)
  revisionLevel         String?
  form1Data             Json?
  form2Data             Json?
  createdById           String?
  reviewedById          String?
  approvedById          String?
  reviewedAt            DateTime?
  approvedAt            DateTime?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  characteristics       FAICharacteristic[]
  qifMeasurementPlans   QIFMeasurementPlan[]
  qifMeasurementResults QIFMeasurementResult[]

  @@index([partId])
  @@index([status])
  @@map("fai_reports")
}

model FAICharacteristic {
  id                   String    @id @default(cuid())
  faiReportId          String
  characteristicNumber Int
  characteristic       String
  specification        String
  requirement          String?
  toleranceType        String?
  nominalValue         Float?
  upperLimit           Float?
  lowerLimit           Float?
  unitOfMeasure        String?
  inspectionMethod     String?
  inspectionFrequency  String?
  measuredValues       Json
  actualValue          Float?
  deviation            Float?
  result               String?
  notes                String?
  verifiedById         String?
  verifiedAt           DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  faiReport            FAIReport @relation(fields: [faiReportId], references: [id], onDelete: Cascade)

  @@unique([faiReportId, characteristicNumber])
  @@index([faiReportId])
  @@map("fai_characteristics")
}

model AuditLog {
  id        String   @id @default(cuid())
  tableName String
  recordId  String
  action    String
  oldValues Json?
  newValues Json?
  userId    String?
  ipAddress String?
  userAgent String?
  timestamp DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model MaintenanceWorkOrder {
  id                      String     @id @default(cuid())
  externalWorkOrderNumber String     @unique
  description             String
  workType                String
  status                  String
  equipmentId             String?
  scheduledStart          DateTime?
  scheduledFinish         DateTime?
  actualStart             DateTime?
  actualFinish            DateTime?
  priority                Int        @default(3)
  failureCode             String?
  problemCode             String?
  causeCode               String?
  remedyCode              String?
  lastSyncedAt            DateTime?
  createdAt               DateTime   @default(now())
  updatedAt               DateTime   @updatedAt
  equipment               Equipment? @relation(fields: [equipmentId], references: [id])

  @@index([externalWorkOrderNumber])
  @@index([equipmentId])
  @@index([status])
  @@map("maintenance_work_orders")
}

model MeasurementEquipment {
  id                         String                      @id @default(cuid())
  externalGaugeId            String?                     @unique
  description                String
  manufacturer               String?
  model                      String?
  serialNumber               String?
  gaugeType                  String
  measurementType            String
  measurementRange           String?
  resolution                 Float?
  accuracy                   Float?
  location                   String?
  calibrationFrequency       Int?
  lastCalibrationDate        DateTime?
  nextCalibrationDate        DateTime?
  calibrationStatus          String                      @default("IN_CAL")
  isActive                   Boolean                     @default(true)
  lastSyncedAt               DateTime?
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt
  inspectionRecords          InspectionRecord[]
  operationGaugeRequirements OperationGaugeRequirement[]
  qifMeasurementResults      QIFMeasurementResult[]

  @@index([externalGaugeId])
  @@index([calibrationStatus])
  @@index([nextCalibrationDate])
  @@map("measurement_equipment")
}

model InspectionRecord {
  id                     String                @id @default(cuid())
  serializedPartId       String?
  measurementEquipmentId String?
  characteristic         String
  nominalValue           Float
  actualValue            Float
  lowerTolerance         Float
  upperTolerance         Float
  unit                   String
  result                 String
  inspectionDate         DateTime              @default(now())
  createdAt              DateTime              @default(now())
  measurementEquipment   MeasurementEquipment? @relation(fields: [measurementEquipmentId], references: [id])
  serializedPart         SerializedPart?       @relation(fields: [serializedPartId], references: [id])

  @@index([serializedPartId])
  @@index([measurementEquipmentId])
  @@index([result])
  @@map("inspection_records")
}

model CNCProgram {
  id                  String               @id @default(cuid())
  externalProgramId   String?              @unique
  programName         String
  partNumber          String
  operationCode       String
  revision            String
  revisionDate        DateTime
  status              String
  machineType         String?
  postProcessor       String?
  toolList            String?
  setupSheetUrl       String?
  approvedBy          String?
  approvalDate        DateTime?
  ecoNumber           String?
  effectiveDate       DateTime?
  firstPieceRequired  Boolean              @default(false)
  firstPieceApproved  Boolean              @default(false)
  firstPieceDate      DateTime?
  programUrl          String?
  stepAP242Url        String?
  pmiDataUrl          String?
  teamcenterItemId    String?
  lastSyncedAt        DateTime?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  programDownloadLogs ProgramDownloadLog[]

  @@index([programName])
  @@index([partNumber])
  @@index([status])
  @@index([revision])
  @@map("cnc_programs")
}

model ProgramDownloadLog {
  id                  String      @id @default(cuid())
  programId           String?
  programName         String
  revision            String
  machineId           String
  operatorBadgeNumber String
  workOrderNumber     String?
  downloadDate        DateTime    @default(now())
  authorized          Boolean
  authorizationMethod String
  createdAt           DateTime    @default(now())
  cncProgram          CNCProgram? @relation(fields: [programId], references: [id])

  @@index([programName])
  @@index([machineId])
  @@index([operatorBadgeNumber])
  @@index([downloadDate])
  @@map("program_download_logs")
}

model ProgramLoadAuthorization {
  id                    String   @id @default(cuid())
  authorizationId       String   @unique
  operatorBadgeNumber   String
  machineId             String
  programName           String
  programRevision       String
  partNumber            String
  workOrderNumber       String?
  authorized            Boolean
  authorizationDate     DateTime @default(now())
  operatorAuthenticated Boolean
  workOrderValid        Boolean
  certificationValid    Boolean
  programVersionValid   Boolean
  gaugeCalibrationValid Boolean
  failureReasons        String?
  validationDetails     Json?
  supervisorNotified    Boolean  @default(false)
  overrideReason        String?
  electronicSignature   String?
  createdAt             DateTime @default(now())

  @@index([authorizationId])
  @@index([operatorBadgeNumber])
  @@index([machineId])
  @@index([authorized])
  @@index([authorizationDate])
  @@map("program_load_authorizations")
}

model OperationGaugeRequirement {
  id                     String               @id @default(cuid())
  partNumber             String
  operationCode          String
  measurementEquipmentId String
  required               Boolean              @default(true)
  createdAt              DateTime             @default(now())
  measurementEquipment   MeasurementEquipment @relation(fields: [measurementEquipmentId], references: [id])

  @@unique([partNumber, operationCode, measurementEquipmentId])
  @@index([partNumber])
  @@index([operationCode])
  @@map("operation_gauge_requirements")
}

model Alert {
  id         String    @id @default(cuid())
  alertType  String
  severity   String
  message    String
  details    Json?
  resolved   Boolean   @default(false)
  resolvedBy String?
  resolvedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([alertType])
  @@index([severity])
  @@index([resolved])
  @@index([createdAt])
  @@map("alerts")
}

model IntegrationConfig {
  id                           String                        @id @default(cuid())
  name                         String                        @unique
  displayName                  String
  type                         IntegrationType
  enabled                      Boolean                       @default(true)
  config                       Json
  lastSync                     DateTime?
  lastSyncStatus               String?
  lastError                    String?
  errorCount                   Int                           @default(0)
  totalSyncs                   Int                           @default(0)
  successCount                 Int                           @default(0)
  failureCount                 Int                           @default(0)
  syncSchedule                 Json?
  createdAt                    DateTime                      @default(now())
  updatedAt                    DateTime                      @updatedAt
  erpMaterialTransactions      ERPMaterialTransaction[]
  logs                         IntegrationLog[]
  personnelInfoExchanges       PersonnelInfoExchange[]
  productionPerformanceActuals ProductionPerformanceActual[]
  productionScheduleRequests   ProductionScheduleRequest[]

  @@index([name])
  @@index([type])
  @@index([enabled])
  @@map("integration_configs")
}

model IntegrationLog {
  id           String               @id @default(cuid())
  configId     String
  operation    String
  direction    IntegrationDirection
  status       IntegrationLogStatus
  recordCount  Int                  @default(0)
  successCount Int                  @default(0)
  errorCount   Int                  @default(0)
  duration     Int
  requestData  Json?
  responseData Json?
  errors       Json?
  details      Json?
  startedAt    DateTime             @default(now())
  completedAt  DateTime?
  createdAt    DateTime             @default(now())
  config       IntegrationConfig    @relation(fields: [configId], references: [id], onDelete: Cascade)

  @@index([configId])
  @@index([status])
  @@index([startedAt])
  @@index([operation])
  @@map("integration_logs")
}

model ProductionScheduleRequest {
  id                    String                      @id @default(cuid())
  messageId             String                      @unique
  configId              String
  scheduleType          ScheduleType
  priority              SchedulePriority
  requestedBy           String
  requestedDate         DateTime                    @default(now())
  effectiveStartDate    DateTime
  effectiveEndDate      DateTime
  workOrderId           String?
  externalWorkOrderId   String
  partId                String?
  partNumber            String?
  quantity              Float
  unitOfMeasure         String
  dueDate               DateTime
  workCenterId          String?
  equipmentRequirements Json?
  personnelRequirements Json?
  materialRequirements  Json?
  status                B2MMessageStatus
  processedAt           DateTime?
  errorMessage          String?
  validationErrors      Json?
  requestPayload        Json
  responsePayload       Json?
  createdAt             DateTime                    @default(now())
  updatedAt             DateTime                    @updatedAt
  config                IntegrationConfig           @relation(fields: [configId], references: [id], onDelete: Cascade)
  part                  Part?                       @relation(fields: [partId], references: [id])
  workCenter            Equipment?                  @relation(fields: [workCenterId], references: [id])
  workOrder             WorkOrder?                  @relation(fields: [workOrderId], references: [id])
  response              ProductionScheduleResponse?

  @@index([configId])
  @@index([status])
  @@index([externalWorkOrderId])
  @@index([requestedDate])
  @@map("production_schedule_requests")
}

model ProductionScheduleResponse {
  id                 String                    @id @default(cuid())
  requestId          String                    @unique
  messageId          String                    @unique
  accepted           Boolean
  confirmedStartDate DateTime?
  confirmedEndDate   DateTime?
  confirmedQuantity  Float?
  rejectionReason    String?
  modifications      Json?
  constraints        Json?
  proposedStartDate  DateTime?
  proposedEndDate    DateTime?
  proposedQuantity   Float?
  respondedBy        String
  respondedAt        DateTime                  @default(now())
  sentToERP          Boolean                   @default(false)
  sentAt             DateTime?
  responsePayload    Json
  createdAt          DateTime                  @default(now())
  request            ProductionScheduleRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)

  @@index([requestId])
  @@index([respondedAt])
  @@map("production_schedule_responses")
}

model ProductionPerformanceActual {
  id                   String            @id @default(cuid())
  messageId            String            @unique
  configId             String
  workOrderId          String
  externalWorkOrderId  String
  operationId          String?
  reportingPeriodStart DateTime
  reportingPeriodEnd   DateTime
  quantityProduced     Float
  quantityGood         Float
  quantityScrap        Float
  quantityRework       Float
  yieldPercentage      Float?
  setupTimeActual      Float?
  runTimeActual        Float?
  downtimeActual       Float?
  laborHoursActual     Float?
  laborCostActual      Float?
  materialCostActual   Float?
  overheadCostActual   Float?
  totalCostActual      Float?
  quantityVariance     Float?
  timeVariance         Float?
  costVariance         Float?
  efficiencyVariance   Float?
  personnelActuals     Json?
  equipmentActuals     Json?
  materialActuals      Json?
  status               B2MMessageStatus
  sentToERP            Boolean           @default(false)
  sentAt               DateTime?
  erpConfirmation      String?
  errorMessage         String?
  messagePayload       Json
  createdBy            String
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  config               IntegrationConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  workOrder            WorkOrder         @relation(fields: [workOrderId], references: [id], onDelete: Cascade)

  @@index([configId])
  @@index([workOrderId])
  @@index([externalWorkOrderId])
  @@index([status])
  @@index([sentToERP])
  @@index([reportingPeriodStart])
  @@map("production_performance_actuals")
}

model ERPMaterialTransaction {
  id                  String               @id @default(cuid())
  messageId           String               @unique
  configId            String
  transactionType     ERPTransactionType
  direction           IntegrationDirection
  transactionDate     DateTime             @default(now())
  partId              String?
  externalPartId      String
  fromLocation        String?
  toLocation          String?
  workOrderId         String?
  externalWorkOrderId String?
  quantity            Float
  unitOfMeasure       String
  lotNumber           String?
  serialNumber        String?
  unitCost            Float?
  totalCost           Float?
  currency            String?              @default("USD")
  movementType        String
  reasonCode          String?
  status              B2MMessageStatus
  processedAt         DateTime?
  erpTransactionId    String?
  errorMessage        String?
  messagePayload      Json
  createdBy           String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  config              IntegrationConfig    @relation(fields: [configId], references: [id], onDelete: Cascade)
  part                Part?                @relation(fields: [partId], references: [id])
  workOrder           WorkOrder?           @relation(fields: [workOrderId], references: [id])

  @@index([configId])
  @@index([transactionType])
  @@index([status])
  @@index([externalPartId])
  @@index([transactionDate])
  @@map("erp_material_transactions")
}

model PersonnelInfoExchange {
  id                  String               @id @default(cuid())
  messageId           String               @unique
  configId            String
  personnelId         String?
  externalPersonnelId String
  actionType          PersonnelActionType
  direction           IntegrationDirection
  firstName           String?
  lastName            String?
  email               String?
  employeeNumber      String?
  department          String?
  jobTitle            String?
  skills              Json?
  certifications      Json?
  qualifications      Json?
  shiftCode           String?
  workCalendar        String?
  availableFrom       DateTime?
  availableTo         DateTime?
  employmentStatus    String?
  lastWorkDate        DateTime?
  status              B2MMessageStatus
  processedAt         DateTime?
  errorMessage        String?
  messagePayload      Json
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  config              IntegrationConfig    @relation(fields: [configId], references: [id], onDelete: Cascade)

  @@index([configId])
  @@index([actionType])
  @@index([status])
  @@index([externalPersonnelId])
  @@index([personnelId])
  @@map("personnel_info_exchanges")
}

model EquipmentDataCollection {
  id                  String             @id @default(cuid())
  equipmentId         String
  dataCollectionType  DataCollectionType
  collectionTimestamp DateTime           @default(now())
  dataPointName       String
  dataPointId         String?
  numericValue        Float?
  stringValue         String?
  booleanValue        Boolean?
  jsonValue           Json?
  unitOfMeasure       String?
  quality             String?
  workOrderId         String?
  operationId         String?
  productionRunId     String?
  equipmentState      String?
  protocol            String?
  sourceAddress       String?
  createdAt           DateTime           @default(now())
  equipment           Equipment          @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  workOrder           WorkOrder?         @relation(fields: [workOrderId], references: [id])

  @@index([equipmentId])
  @@index([dataCollectionType])
  @@index([collectionTimestamp])
  @@index([workOrderId])
  @@index([dataPointName])
  @@map("equipment_data_collections")
}

model EquipmentCommand {
  id              String        @id @default(cuid())
  equipmentId     String
  commandType     CommandType
  commandStatus   CommandStatus @default(PENDING)
  commandName     String
  commandPayload  Json?
  workOrderId     String?
  operationId     String?
  issuedAt        DateTime      @default(now())
  sentAt          DateTime?
  acknowledgedAt  DateTime?
  completedAt     DateTime?
  responsePayload Json?
  responseCode    String?
  responseMessage String?
  timeoutSeconds  Int           @default(30)
  retryCount      Int           @default(0)
  maxRetries      Int           @default(3)
  priority        Int           @default(5)
  issuedBy        String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  equipment       Equipment     @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  workOrder       WorkOrder?    @relation(fields: [workOrderId], references: [id])

  @@index([equipmentId])
  @@index([commandType])
  @@index([commandStatus])
  @@index([workOrderId])
  @@index([issuedAt])
  @@index([priority])
  @@map("equipment_commands")
}

model EquipmentMaterialMovement {
  id                String     @id @default(cuid())
  equipmentId       String
  partId            String?
  partNumber        String
  lotNumber         String?
  serialNumber      String?
  movementType      String
  quantity          Float
  unitOfMeasure     String
  movementTimestamp DateTime   @default(now())
  workOrderId       String?
  operationId       String?
  fromLocation      String?
  toLocation        String?
  qualityStatus     String?
  upstreamTraceId   String?
  downstreamTraceId String?
  recordedBy        String
  createdAt         DateTime   @default(now())
  equipment         Equipment  @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  part              Part?      @relation(fields: [partId], references: [id])
  workOrder         WorkOrder? @relation(fields: [workOrderId], references: [id])

  @@index([equipmentId])
  @@index([partId])
  @@index([partNumber])
  @@index([lotNumber])
  @@index([serialNumber])
  @@index([workOrderId])
  @@index([movementTimestamp])
  @@index([movementType])
  @@map("equipment_material_movements")
}

model ProcessDataCollection {
  id                 String     @id @default(cuid())
  equipmentId        String
  processName        String
  processStepNumber  Int?
  startTimestamp     DateTime
  endTimestamp       DateTime?
  duration           Float?
  workOrderId        String?
  operationId        String?
  partNumber         String?
  lotNumber          String?
  serialNumber       String?
  parameters         Json
  quantityProduced   Float?
  quantityGood       Float?
  quantityScrap      Float?
  inSpecCount        Int?
  outOfSpecCount     Int?
  averageUtilization Float?
  peakUtilization    Float?
  alarmCount         Int        @default(0)
  criticalAlarmCount Int        @default(0)
  operatorId         String?
  supervisorId       String?
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  equipment          Equipment  @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  workOrder          WorkOrder? @relation(fields: [workOrderId], references: [id])

  @@index([equipmentId])
  @@index([processName])
  @@index([workOrderId])
  @@index([startTimestamp])
  @@index([partNumber])
  @@index([lotNumber])
  @@index([serialNumber])
  @@map("process_data_collections")
}

model QIFMeasurementPlan {
  id                  String                 @id @default(cuid())
  qifPlanId           String                 @unique
  partNumber          String
  partRevision        String
  planVersion         String
  planName            String?
  description         String?
  createdDate         DateTime               @default(now())
  createdBy           String?
  qifXmlContent       String
  qifVersion          String                 @default("3.0.0")
  characteristicCount Int                    @default(0)
  workOrderId         String?
  faiReportId         String?
  status              String                 @default("ACTIVE")
  supersededBy        String?
  lastSyncedAt        DateTime?
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  characteristics     QIFCharacteristic[]
  faiReport           FAIReport?             @relation(fields: [faiReportId], references: [id])
  workOrder           WorkOrder?             @relation(fields: [workOrderId], references: [id])
  measurementResults  QIFMeasurementResult[]

  @@index([partNumber])
  @@index([partRevision])
  @@index([qifPlanId])
  @@index([workOrderId])
  @@index([faiReportId])
  @@index([status])
  @@map("qif_measurement_plans")
}

model QIFCharacteristic {
  id                   String             @id @default(cuid())
  qifMeasurementPlanId String
  characteristicId     String
  balloonNumber        String?
  characteristicName   String?
  description          String?
  nominalValue         Float?
  upperTolerance       Float?
  lowerTolerance       Float?
  toleranceType        String?
  gdtType              String?
  datumReferenceFrame  String?
  materialCondition    String?
  measurementMethod    String?
  samplingRequired     Boolean            @default(false)
  sampleSize           Int?
  sequenceNumber       Int?
  createdAt            DateTime           @default(now())
  qifMeasurementPlan   QIFMeasurementPlan @relation(fields: [qifMeasurementPlanId], references: [id], onDelete: Cascade)
  measurements         QIFMeasurement[]

  @@index([qifMeasurementPlanId])
  @@index([characteristicId])
  @@index([balloonNumber])
  @@map("qif_characteristics")
}

model QIFMeasurementResult {
  id                   String                @id @default(cuid())
  qifResultsId         String                @unique
  qifMeasurementPlanId String?
  partNumber           String
  serialNumber         String?
  lotNumber            String?
  inspectionDate       DateTime
  inspectedBy          String
  inspectionType       String?
  overallStatus        String
  totalMeasurements    Int                   @default(0)
  passedMeasurements   Int                   @default(0)
  failedMeasurements   Int                   @default(0)
  qifXmlContent        String
  qifVersion           String                @default("3.0.0")
  workOrderId          String?
  serializedPartId     String?
  faiReportId          String?
  measurementDeviceId  String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  faiReport            FAIReport?            @relation(fields: [faiReportId], references: [id])
  measurementDevice    MeasurementEquipment? @relation(fields: [measurementDeviceId], references: [id])
  qifMeasurementPlan   QIFMeasurementPlan?   @relation(fields: [qifMeasurementPlanId], references: [id])
  serializedPart       SerializedPart?       @relation(fields: [serializedPartId], references: [id])
  workOrder            WorkOrder?            @relation(fields: [workOrderId], references: [id])
  measurements         QIFMeasurement[]

  @@index([qifResultsId])
  @@index([qifMeasurementPlanId])
  @@index([partNumber])
  @@index([serialNumber])
  @@index([inspectionDate])
  @@index([overallStatus])
  @@index([workOrderId])
  @@index([faiReportId])
  @@map("qif_measurement_results")
}

model QIFMeasurement {
  id                     String               @id @default(cuid())
  qifMeasurementResultId String
  qifCharacteristicId    String?
  characteristicId       String
  balloonNumber          String?
  measuredValue          Float
  deviation              Float?
  status                 String
  measurementDate        DateTime?
  measuredBy             String?
  measurementDevice      String?
  uncertainty            Float?
  uncertaintyK           Float?
  notes                  String?
  createdAt              DateTime             @default(now())
  qifCharacteristic      QIFCharacteristic?   @relation(fields: [qifCharacteristicId], references: [id])
  qifMeasurementResult   QIFMeasurementResult @relation(fields: [qifMeasurementResultId], references: [id], onDelete: Cascade)

  @@index([qifMeasurementResultId])
  @@index([qifCharacteristicId])
  @@index([characteristicId])
  @@index([status])
  @@map("qif_measurements")
}

model SPCConfiguration {
  id                 String                 @id @default(cuid())
  parameterId        String                 @unique
  chartType          SPCChartType
  subgroupSize       Int?
  UCL                Float?
  centerLine         Float?
  LCL                Float?
  rangeUCL           Float?
  rangeCL            Float?
  rangeLCL           Float?
  USL                Float?
  LSL                Float?
  targetValue        Float?
  limitsBasedOn      LimitCalculationMethod
  historicalDataDays Int?
  lastCalculatedAt   DateTime?
  enabledRules       Json
  ruleSensitivity    String                 @default("NORMAL")
  enableCapability   Boolean                @default(true)
  confidenceLevel    Float                  @default(0.95)
  isActive           Boolean                @default(true)
  createdBy          String
  lastModifiedBy     String?
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  parameter          OperationParameter     @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  violations         SPCRuleViolation[]

  @@map("spc_configurations")
}

model SPCRuleViolation {
  id              String           @id @default(cuid())
  configurationId String
  ruleNumber      Int
  ruleName        String
  severity        String
  dataPointId     String?
  value           Float
  timestamp       DateTime
  subgroupNumber  Int?
  UCL             Float?
  LCL             Float?
  centerLine      Float?
  deviationSigma  Float?
  acknowledged    Boolean          @default(false)
  acknowledgedBy  String?
  acknowledgedAt  DateTime?
  resolution      String?
  createdAt       DateTime         @default(now())
  configuration   SPCConfiguration @relation(fields: [configurationId], references: [id], onDelete: Cascade)

  @@index([configurationId, timestamp])
  @@index([acknowledged])
  @@map("spc_rule_violations")
}

model SamplingPlan {
  id                        String                     @id @default(cuid())
  planName                  String
  planType                  SamplingPlanType
  parameterId               String?
  operationId               String?
  inspectionLevel           String
  AQL                       Float
  lotSizeMin                Int?
  lotSizeMax                Int?
  sampleSizeNormal          Int
  acceptanceNumber          Int
  rejectionNumber           Int
  sampleSizeTightened       Int?
  acceptanceNumberTightened Int?
  sampleSizeReduced         Int?
  acceptanceNumberReduced   Int?
  sampleSize2               Int?
  acceptanceNumber2         Int?
  rejectionNumber2          Int?
  currentInspectionLevel    String                     @default("NORMAL")
  consecutiveAccepted       Int                        @default(0)
  consecutiveRejected       Int                        @default(0)
  isActive                  Boolean                    @default(true)
  createdBy                 String
  lastModifiedBy            String?
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  inspectionResults         SamplingInspectionResult[]
  operation                 Operation?                 @relation(fields: [operationId], references: [id])
  parameter                 OperationParameter?        @relation(fields: [parameterId], references: [id])

  @@map("sampling_plans")
}

model SamplingInspectionResult {
  id              String       @id @default(cuid())
  planId          String
  lotNumber       String
  lotSize         Int
  inspectionDate  DateTime
  sampleSize      Int
  defectsFound    Int
  decision        String
  inspectionLevel String
  inspectorId     String
  notes           String?
  createdAt       DateTime     @default(now())
  plan            SamplingPlan @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@index([planId, inspectionDate])
  @@map("sampling_inspection_results")
}

/// Work Instruction Media - Enhanced media library for work instructions
model WorkInstructionMedia {
  id            String          @id @default(cuid())
  instructionId String
  mediaType     MediaType
  fileName      String
  fileUrl       String
  fileSize      Int
  mimeType      String
  title         String?
  description   String?
  tags          String[]
  annotations   Json?
  usageCount    Int             @default(0)
  lastUsedAt    DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  instruction   WorkInstruction @relation(fields: [instructionId], references: [id], onDelete: Cascade)

  @@index([instructionId])
  @@index([mediaType])
  @@map("work_instruction_media")
}

/// Work Instruction Relation - Relationships between work instructions
model WorkInstructionRelation {
  id           String          @id @default(cuid())
  parentId     String
  relatedId    String
  relationType RelationType
  description  String?
  createdAt    DateTime        @default(now())
  parent       WorkInstruction @relation("ParentInstruction", fields: [parentId], references: [id], onDelete: Cascade)

  @@unique([parentId, relatedId, relationType])
  @@index([parentId])
  @@index([relatedId])
  @@map("work_instruction_relations")
}

/// Export Template - Templates for exporting work instructions
model ExportTemplate {
  id             String             @id @default(cuid())
  name           String
  description    String?
  templateType   ExportTemplateType
  templateFormat ExportFormat
  headerTemplate String?
  footerTemplate String?
  styles         Json?
  layout         Json?
  isDefault      Boolean            @default(false)
  isActive       Boolean            @default(true)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  createdById    String
  updatedById    String
  instructions   WorkInstruction[]

  @@index([templateType])
  @@index([templateFormat])
  @@map("export_templates")
}

/// Data Collection Field Template - Reusable field templates
model DataCollectionFieldTemplate {
  id              String   @id @default(cuid())
  name            String
  description     String?
  fieldSchema     Json
  validationRules Json?
  category        String?
  tags            String[]
  usageCount      Int      @default(0)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdById     String

  @@index([category])
  @@index([tags])
  @@map("data_collection_field_templates")
}

model SetupSheet {
  id                 String                @id @default(cuid())
  documentNumber     String                @unique
  title              String
  description        String?
  version            String                @default("1.0.0")
  status             WorkInstructionStatus @default(DRAFT)
  effectiveDate      DateTime?
  supersededDate     DateTime?
  ecoNumber          String?
  equipmentId        String?
  operationId        String?
  partId             String?
  workCenterId       String?
  estimatedSetupTime Int?
  safetyChecklist    Json?
  requiredPPE        String[]
  imageUrls          String[]
  videoUrls          String[]
  attachmentUrls     String[]
  tags               String[]
  categories         String[]
  keywords           String[]
  thumbnailUrl       String?
  parentVersionId    String?
  approvalWorkflowId String?
  approvedById       String?
  approvedAt         DateTime?
  approvalHistory    Json?
  isActive           Boolean               @default(true)
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  createdById        String
  updatedById        String
  executions         SetupExecution[]
  parameters         SetupParameter[]
  approvedBy         User?                 @relation("SetupSheetApprovedBy", fields: [approvedById], references: [id])
  createdBy          User                  @relation("SetupSheetCreatedBy", fields: [createdById], references: [id])
  parentVersion      SetupSheet?           @relation("SetupSheetVersionHistory", fields: [parentVersionId], references: [id])
  childVersions      SetupSheet[]          @relation("SetupSheetVersionHistory")
  updatedBy          User                  @relation("SetupSheetUpdatedBy", fields: [updatedById], references: [id])
  steps              SetupStep[]
  toolList           SetupTool[]

  @@index([documentNumber])
  @@index([status])
  @@index([equipmentId])
  @@index([operationId])
  @@index([partId])
  @@map("setup_sheets")
}

model SetupStep {
  id                   String     @id @default(cuid())
  setupSheetId         String
  stepNumber           Int
  title                String
  instructions         String
  imageUrls            String[]
  videoUrls            String[]
  estimatedDuration    Int?
  isCritical           Boolean    @default(false)
  requiresVerification Boolean    @default(false)
  setupSheet           SetupSheet @relation(fields: [setupSheetId], references: [id], onDelete: Cascade)

  @@unique([setupSheetId, stepNumber])
  @@index([setupSheetId])
  @@map("setup_steps")
}

model SetupParameter {
  id                 String     @id @default(cuid())
  setupSheetId       String
  parameterName      String
  targetValue        String
  tolerance          String?
  unit               String?
  equipmentSetting   String?
  verificationMethod String?
  setupSheet         SetupSheet @relation(fields: [setupSheetId], references: [id], onDelete: Cascade)

  @@index([setupSheetId])
  @@map("setup_parameters")
}

model SetupTool {
  id           String     @id @default(cuid())
  setupSheetId String
  toolId       String?
  toolName     String
  toolNumber   String?
  quantity     Int        @default(1)
  toolOffset   String?
  notes        String?
  setupSheet   SetupSheet @relation(fields: [setupSheetId], references: [id], onDelete: Cascade)

  @@index([setupSheetId])
  @@index([toolId])
  @@map("setup_tools")
}

model SetupExecution {
  id                String                         @id @default(cuid())
  setupSheetId      String
  workOrderId       String?
  operationId       String?
  startedById       String
  startedAt         DateTime                       @default(now())
  completedById     String?
  completedAt       DateTime?
  actualSetupTime   Int?
  verificationData  Json?
  firstPieceResults Json?
  status            WorkInstructionExecutionStatus @default(IN_PROGRESS)
  completedBy       User?                          @relation("SetupExecutionCompletedBy", fields: [completedById], references: [id])
  setupSheet        SetupSheet                     @relation(fields: [setupSheetId], references: [id])
  startedBy         User                           @relation("SetupExecutionStartedBy", fields: [startedById], references: [id])

  @@index([setupSheetId])
  @@index([workOrderId])
  @@map("setup_executions")
}

model InspectionPlan {
  id                 String                     @id @default(cuid())
  documentNumber     String                     @unique
  title              String
  description        String?
  version            String                     @default("1.0.0")
  status             WorkInstructionStatus      @default(DRAFT)
  effectiveDate      DateTime?
  supersededDate     DateTime?
  ecoNumber          String?
  partId             String?
  operationId        String?
  inspectionType     InspectionType
  frequency          InspectionFrequency
  samplingPlan       Json?
  dispositionRules   Json?
  gageRRRequired     Boolean                    @default(false)
  gageRRFrequency    String?
  imageUrls          String[]
  videoUrls          String[]
  attachmentUrls     String[]
  tags               String[]
  categories         String[]
  keywords           String[]
  thumbnailUrl       String?
  parentVersionId    String?
  approvalWorkflowId String?
  approvedById       String?
  approvedAt         DateTime?
  approvalHistory    Json?
  isActive           Boolean                    @default(true)
  createdAt          DateTime                   @default(now())
  updatedAt          DateTime                   @updatedAt
  createdById        String
  updatedById        String
  characteristics    InspectionCharacteristic[]
  executions         InspectionExecution[]
  approvedBy         User?                      @relation("InspectionPlanApprovedBy", fields: [approvedById], references: [id])
  createdBy          User                       @relation("InspectionPlanCreatedBy", fields: [createdById], references: [id])
  parentVersion      InspectionPlan?            @relation("InspectionPlanVersionHistory", fields: [parentVersionId], references: [id])
  childVersions      InspectionPlan[]           @relation("InspectionPlanVersionHistory")
  updatedBy          User                       @relation("InspectionPlanUpdatedBy", fields: [updatedById], references: [id])
  steps              InspectionStep[]

  @@index([documentNumber])
  @@index([status])
  @@index([partId])
  @@index([operationId])
  @@index([inspectionType])
  @@map("inspection_plans")
}

model InspectionCharacteristic {
  id                   String          @id @default(cuid())
  inspectionPlanId     String
  characteristicNumber Int
  characteristicName   String
  measurementType      MeasurementType
  nominal              Float?
  upperLimit           Float?
  lowerLimit           Float?
  unit                 String?
  measurementMethod    String?
  gageType             String?
  isCritical           Boolean         @default(false)
  inspectionPlan       InspectionPlan  @relation(fields: [inspectionPlanId], references: [id], onDelete: Cascade)

  @@unique([inspectionPlanId, characteristicNumber])
  @@index([inspectionPlanId])
  @@map("inspection_characteristics")
}

model InspectionStep {
  id                 String         @id @default(cuid())
  inspectionPlanId   String
  stepNumber         Int
  title              String
  instructions       String
  characteristicRefs Int[]
  imageUrls          String[]
  inspectionPlan     InspectionPlan @relation(fields: [inspectionPlanId], references: [id], onDelete: Cascade)

  @@unique([inspectionPlanId, stepNumber])
  @@index([inspectionPlanId])
  @@map("inspection_steps")
}

model InspectionExecution {
  id               String           @id @default(cuid())
  inspectionPlanId String
  workOrderId      String?
  operationId      String?
  lotNumber        String?
  serialNumber     String?
  inspectorId      String
  inspectedAt      DateTime         @default(now())
  results          Json
  overallResult    InspectionResult
  defectsFound     Json?
  disposition      Disposition?
  signatureId      String?
  inspectionPlan   InspectionPlan   @relation(fields: [inspectionPlanId], references: [id])
  inspector        User             @relation("InspectionExecutionInspector", fields: [inspectorId], references: [id])

  @@index([inspectionPlanId])
  @@index([workOrderId])
  @@index([inspectedAt])
  @@map("inspection_executions")
}

model StandardOperatingProcedure {
  id                 String                       @id @default(cuid())
  documentNumber     String                       @unique
  title              String
  description        String?
  version            String                       @default("1.0.0")
  status             WorkInstructionStatus        @default(DRAFT)
  effectiveDate      DateTime?
  supersededDate     DateTime?
  ecoNumber          String?
  sopType            SOPType
  scope              String
  applicability      String?
  responsibleRoles   String[]
  references         Json?
  safetyWarnings     String[]
  requiredPPE        String[]
  emergencyProcedure String?
  trainingRequired   Boolean                      @default(false)
  trainingFrequency  String?
  reviewFrequency    String?
  nextReviewDate     DateTime?
  imageUrls          String[]
  videoUrls          String[]
  attachmentUrls     String[]
  tags               String[]
  categories         String[]
  keywords           String[]
  thumbnailUrl       String?
  parentVersionId    String?
  approvalWorkflowId String?
  approvedById       String?
  approvedAt         DateTime?
  approvalHistory    Json?
  isActive           Boolean                      @default(true)
  createdAt          DateTime                     @default(now())
  updatedAt          DateTime                     @updatedAt
  createdById        String
  updatedById        String
  acknowledgments    SOPAcknowledgment[]
  audits             SOPAudit[]
  steps              SOPStep[]
  approvedBy         User?                        @relation("SOPApprovedBy", fields: [approvedById], references: [id])
  createdBy          User                         @relation("SOPCreatedBy", fields: [createdById], references: [id])
  parentVersion      StandardOperatingProcedure?  @relation("SOPVersionHistory", fields: [parentVersionId], references: [id])
  childVersions      StandardOperatingProcedure[] @relation("SOPVersionHistory")
  updatedBy          User                         @relation("SOPUpdatedBy", fields: [updatedById], references: [id])

  @@index([documentNumber])
  @@index([status])
  @@index([sopType])
  @@index([nextReviewDate])
  @@map("standard_operating_procedures")
}

model SOPStep {
  id           String                     @id @default(cuid())
  sopId        String
  stepNumber   Int
  title        String
  instructions String
  isWarning    Boolean                    @default(false)
  isCritical   Boolean                    @default(false)
  imageUrls    String[]
  videoUrls    String[]
  sop          StandardOperatingProcedure @relation(fields: [sopId], references: [id], onDelete: Cascade)

  @@unique([sopId, stepNumber])
  @@index([sopId])
  @@map("sop_steps")
}

model SOPAcknowledgment {
  id                  String                     @id @default(cuid())
  sopId               String
  userId              String
  userName            String
  acknowledgedAt      DateTime                   @default(now())
  trainingCompletedAt DateTime?
  assessmentScore     Float?
  assessmentPassed    Boolean?
  signatureId         String?
  sop                 StandardOperatingProcedure @relation(fields: [sopId], references: [id])
  user                User                       @relation("SOPAcknowledgmentUser", fields: [userId], references: [id])

  @@unique([sopId, userId])
  @@index([sopId])
  @@index([userId])
  @@map("sop_acknowledgments")
}

model SOPAudit {
  id                String                     @id @default(cuid())
  sopId             String
  auditDate         DateTime
  auditorId         String
  auditorName       String
  complianceChecks  Json
  overallCompliance Boolean
  findingsCount     Int                        @default(0)
  findings          String?
  correctiveActions Json?
  auditor           User                       @relation("SOPAuditAuditor", fields: [auditorId], references: [id])
  sop               StandardOperatingProcedure @relation(fields: [sopId], references: [id])

  @@index([sopId])
  @@index([auditDate])
  @@map("sop_audits")
}

model ToolDrawing {
  id                   String                  @id @default(cuid())
  documentNumber       String                  @unique
  title                String
  description          String?
  version              String                  @default("1.0.0")
  status               WorkInstructionStatus   @default(DRAFT)
  effectiveDate        DateTime?
  supersededDate       DateTime?
  ecoNumber            String?
  toolType             ToolType
  toolSubtype          String?
  dimensions           Json?
  material             String?
  weight               Float?
  weightUnit           String?
  vendorId             String?
  vendorName           String?
  vendorPartNumber     String?
  catalogNumber        String?
  cost                 Float?
  costCurrency         String?
  applicablePartIds    String[]
  applicableOperations String[]
  usageInstructions    String?
  maintenanceProcedure String?
  requiresCalibration  Boolean                 @default(false)
  calibrationInterval  Int?
  lastCalibrationDate  DateTime?
  nextCalibrationDate  DateTime?
  storageLocation      String?
  quantityOnHand       Int?
  minimumQuantity      Int?
  cadFileUrls          String[]
  imageUrls            String[]
  videoUrls            String[]
  attachmentUrls       String[]
  tags                 String[]
  categories           String[]
  keywords             String[]
  thumbnailUrl         String?
  parentVersionId      String?
  approvalWorkflowId   String?
  approvedById         String?
  approvedAt           DateTime?
  approvalHistory      Json?
  isActive             Boolean                 @default(true)
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
  createdById          String
  updatedById          String
  calibrationRecords   ToolCalibrationRecord[]
  approvedBy           User?                   @relation("ToolDrawingApprovedBy", fields: [approvedById], references: [id])
  createdBy            User                    @relation("ToolDrawingCreatedBy", fields: [createdById], references: [id])
  parentVersion        ToolDrawing?            @relation("ToolDrawingVersionHistory", fields: [parentVersionId], references: [id])
  childVersions        ToolDrawing[]           @relation("ToolDrawingVersionHistory")
  updatedBy            User                    @relation("ToolDrawingUpdatedBy", fields: [updatedById], references: [id])
  maintenanceRecords   ToolMaintenanceRecord[]
  usageLogs            ToolUsageLog[]

  @@index([documentNumber])
  @@index([status])
  @@index([toolType])
  @@index([vendorId])
  @@index([nextCalibrationDate])
  @@map("tool_drawings")
}

model ToolMaintenanceRecord {
  id                  String          @id @default(cuid())
  toolDrawingId       String
  maintenanceDate     DateTime
  performedById       String
  performedByName     String
  maintenanceType     MaintenanceType
  description         String
  partsReplaced       Json?
  cost                Float?
  toolConditionBefore String?
  toolConditionAfter  String?
  performedBy         User            @relation("ToolMaintenancePerformedBy", fields: [performedById], references: [id])
  toolDrawing         ToolDrawing     @relation(fields: [toolDrawingId], references: [id])

  @@index([toolDrawingId])
  @@index([maintenanceDate])
  @@map("tool_maintenance_records")
}

model ToolCalibrationRecord {
  id                  String      @id @default(cuid())
  toolDrawingId       String
  calibrationDate     DateTime
  performedById       String
  performedByName     String
  calibrationResults  Json
  passed              Boolean
  certificationNumber String?
  certificateUrl      String?
  nextDueDate         DateTime
  performedBy         User        @relation("ToolCalibrationPerformedBy", fields: [performedById], references: [id])
  toolDrawing         ToolDrawing @relation(fields: [toolDrawingId], references: [id])

  @@index([toolDrawingId])
  @@index([calibrationDate])
  @@map("tool_calibration_records")
}

model ToolUsageLog {
  id                String      @id @default(cuid())
  toolDrawingId     String
  usedAt            DateTime    @default(now())
  usedById          String
  usedByName        String
  workOrderId       String?
  operationId       String?
  usageDuration     Int?
  conditionAfterUse String?
  toolDrawing       ToolDrawing @relation(fields: [toolDrawingId], references: [id])
  usedBy            User        @relation("ToolUsageLogUsedBy", fields: [usedById], references: [id])

  @@index([toolDrawingId])
  @@index([usedAt])
  @@map("tool_usage_logs")
}

model DocumentTemplate {
  id               String       @id @default(cuid())
  name             String
  description      String?
  documentType     DocumentType
  templateData     Json
  defaultValues    Json?
  isPublic         Boolean      @default(false)
  isSystemTemplate Boolean      @default(false)
  tags             String[]
  category         String?
  usageCount       Int          @default(0)
  isActive         Boolean      @default(true)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  createdById      String
  updatedById      String
  createdBy        User         @relation("DocumentTemplateCreatedBy", fields: [createdById], references: [id])
  updatedBy        User         @relation("DocumentTemplateUpdatedBy", fields: [updatedById], references: [id])

  @@index([documentType])
  @@index([isPublic])
  @@index([category])
  @@map("document_templates")
}

/// User Workstation Preference - Manages user layout preferences for work instruction execution
model UserWorkstationPreference {
  id                    String         @id @default(cuid())
  userId                String
  workstationId         String?
  layoutMode            LayoutMode     @default(SPLIT_VERTICAL)
  splitRatio            Float?         @default(0.6)
  panelPosition         PanelPosition? @default(LEFT)
  autoAdvanceSteps      Boolean        @default(false)
  showStepTimer         Boolean        @default(true)
  compactMode           Boolean        @default(false)
  useSecondMonitor      Boolean        @default(false)
  secondMonitorPosition Json?
  isActive              Boolean        @default(true)
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt

  @@unique([userId, workstationId])
  @@index([userId])
  @@index([workstationId])
  @@map("user_workstation_preferences")
}

/// Workstation Display Config - Physical display configuration for workstations
model WorkstationDisplayConfig {
  id                String      @id @default(cuid())
  workstationId     String      @unique
  screenWidth       Int?
  screenHeight      Int?
  isMultiMonitor    Boolean     @default(false)
  monitorCount      Int         @default(1)
  forcedLayout      LayoutMode?
  allowUserOverride Boolean     @default(true)
  isTouchScreen     Boolean     @default(false)
  touchTargetSize   Int?        @default(48)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  updatedById       String

  @@index([workstationId])
  @@map("workstation_display_configs")
}

model WorkflowDefinition {
  id           String             @id @default(cuid())
  name         String
  description  String?
  workflowType WorkflowType
  version      String             @default("1.0.0")
  structure    Json
  isActive     Boolean            @default(true)
  isTemplate   Boolean            @default(false)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  createdById  String
  updatedById  String
  instances    WorkflowInstance[]
  rules        WorkflowRule[]
  stages       WorkflowStage[]

  @@index([workflowType])
  @@index([isActive])
  @@map("workflow_definitions")
}

model WorkflowStage {
  id                 String                  @id @default(cuid())
  workflowId         String
  stageNumber        Int
  stageName          String
  description        String?
  approvalType       ApprovalType            @default(ALL_REQUIRED)
  minimumApprovals   Int?
  approvalThreshold  Float?
  requiredRoles      String[]
  optionalRoles      String[]
  assignmentStrategy AssignmentStrategy      @default(MANUAL)
  deadlineHours      Int?
  escalationRules    Json?
  allowDelegation    Boolean                 @default(true)
  allowSkip          Boolean                 @default(false)
  skipConditions     Json?
  requiresSignature  Boolean                 @default(false)
  signatureType      String?
  stageInstances     WorkflowStageInstance[]
  workflow           WorkflowDefinition      @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@unique([workflowId, stageNumber])
  @@index([workflowId])
  @@map("workflow_stages")
}

model WorkflowRule {
  id                String             @id @default(cuid())
  workflowId        String
  ruleName          String
  description       String?
  conditionField    String
  conditionOperator ConditionOperator
  conditionValue    Json
  actionType        RuleActionType
  actionConfig      Json
  priority          Int                @default(0)
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  workflow          WorkflowDefinition @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@index([workflowId])
  @@index([priority])
  @@map("workflow_rules")
}

model WorkflowInstance {
  id                 String                  @id @default(cuid())
  workflowId         String
  entityType         String
  entityId           String
  status             WorkflowStatus          @default(IN_PROGRESS)
  currentStageNumber Int?
  contextData        Json?
  startedAt          DateTime                @default(now())
  completedAt        DateTime?
  deadline           DateTime?
  priority           Priority                @default(NORMAL)
  impactLevel        ImpactLevel?
  createdById        String
  history            WorkflowHistory[]
  workflow           WorkflowDefinition      @relation(fields: [workflowId], references: [id])
  stageInstances     WorkflowStageInstance[]

  @@unique([entityType, entityId])
  @@index([workflowId])
  @@index([status])
  @@index([deadline])
  @@index([createdById])
  @@map("workflow_instances")
}

model WorkflowStageInstance {
  id                   String                         @id @default(cuid())
  workflowInstanceId   String
  stageId              String
  stageNumber          Int
  stageName            String
  status               StageStatus                    @default(PENDING)
  startedAt            DateTime?
  completedAt          DateTime?
  deadline             DateTime?
  outcome              StageOutcome?
  notes                String?
  assignments          WorkflowAssignment[]
  parallelCoordination WorkflowParallelCoordination[]
  stage                WorkflowStage                  @relation(fields: [stageId], references: [id])
  workflowInstance     WorkflowInstance               @relation(fields: [workflowInstanceId], references: [id], onDelete: Cascade)

  @@unique([workflowInstanceId, stageNumber])
  @@index([workflowInstanceId])
  @@index([status])
  @@index([deadline])
  @@map("workflow_stage_instances")
}

model WorkflowAssignment {
  id               String                @id @default(cuid())
  stageInstanceId  String
  assignedToId     String
  assignedToRole   String?
  assignmentType   AssignmentType        @default(REQUIRED)
  delegatedFromId  String?
  delegationReason String?
  delegationExpiry DateTime?
  action           ApprovalAction?
  actionTakenAt    DateTime?
  comments         String?
  signatureId      String?
  signatureType    String?
  assignedAt       DateTime              @default(now())
  dueDate          DateTime?
  escalationLevel  Int                   @default(0)
  escalatedAt      DateTime?
  escalatedToId    String?
  stageInstance    WorkflowStageInstance @relation(fields: [stageInstanceId], references: [id], onDelete: Cascade)

  @@index([stageInstanceId])
  @@index([assignedToId])
  @@index([dueDate])
  @@index([action])
  @@map("workflow_assignments")
}

model WorkflowHistory {
  id                 String            @id @default(cuid())
  workflowInstanceId String
  eventType          WorkflowEventType
  eventDescription   String
  stageNumber        Int?
  fromStatus         String?
  toStatus           String?
  performedById      String
  performedByName    String
  performedByRole    String?
  details            Json?
  occurredAt         DateTime          @default(now())
  workflowInstance   WorkflowInstance  @relation(fields: [workflowInstanceId], references: [id], onDelete: Cascade)

  @@index([workflowInstanceId])
  @@index([eventType])
  @@index([occurredAt])
  @@map("workflow_history")
}

model WorkflowDelegation {
  id                 String        @id @default(cuid())
  delegatorId        String
  delegateeId        String
  workflowType       WorkflowType?
  specificWorkflowId String?
  startDate          DateTime
  endDate            DateTime?
  reason             String
  isActive           Boolean       @default(true)
  createdAt          DateTime      @default(now())

  @@index([delegatorId])
  @@index([delegateeId])
  @@index([isActive])
  @@map("workflow_delegations")
}

model WorkflowTemplate {
  id                 String       @id @default(cuid())
  name               String
  description        String?
  workflowType       WorkflowType
  category           String       @default("STANDARD")
  templateDefinition Json
  usageCount         Int          @default(0)
  lastUsedAt         DateTime?
  isActive           Boolean      @default(true)
  isBuiltIn          Boolean      @default(false)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  createdById        String

  @@index([workflowType])
  @@index([category])
  @@index([isActive])
  @@map("workflow_templates")
}

model WorkflowTask {
  id                 String     @id @default(cuid())
  assignmentId       String     @unique
  assignedToId       String
  workflowInstanceId String
  stageNumber        Int
  entityType         String
  entityId           String
  taskTitle          String
  taskDescription    String?
  priority           Priority   @default(NORMAL)
  status             TaskStatus @default(PENDING)
  createdAt          DateTime   @default(now())
  dueDate            DateTime?
  lastReminderSent   DateTime?
  reminderCount      Int        @default(0)

  @@index([assignedToId, status])
  @@index([dueDate])
  @@index([priority])
  @@index([workflowInstanceId])
  @@map("workflow_tasks")
}

model WorkflowMetrics {
  id                 String        @id @default(cuid())
  periodStart        DateTime
  periodEnd          DateTime
  workflowId         String?
  stageId            String?
  workflowType       WorkflowType?
  userId             String?
  roleId             String?
  totalAssignments   Int           @default(0)
  completedOnTime    Int           @default(0)
  completedLate      Int           @default(0)
  avgCompletionHours Float?
  escalationCount    Int           @default(0)
  rejectionCount     Int           @default(0)
  onTimePercentage   Float?
  avgResponseHours   Float?
  updatedAt          DateTime      @updatedAt

  @@index([periodStart, periodEnd])
  @@index([workflowType])
  @@index([userId])
  @@map("workflow_metrics")
}

model WorkflowParallelCoordination {
  id                   String                @id @default(cuid())
  stageInstanceId      String
  groupId              String
  groupName            String?
  groupType            String
  completionType       String
  thresholdValue       Int?
  totalAssignments     Int                   @default(0)
  completedAssignments Int                   @default(0)
  approvedAssignments  Int                   @default(0)
  rejectedAssignments  Int                   @default(0)
  groupStatus          String                @default("PENDING")
  groupDecision        String?
  completedAt          DateTime?
  metadata             Json?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  stageInstance        WorkflowStageInstance @relation(fields: [stageInstanceId], references: [id], onDelete: Cascade)

  @@unique([stageInstanceId, groupId])
  @@index([stageInstanceId])
  @@index([groupStatus])
  @@map("workflow_parallel_coordination")
}

/// Engineering Change Order - Core ECO entity for formal change management
model EngineeringChangeOrder {
  id                     String                @id @default(cuid())
  ecoNumber              String                @unique
  title                  String
  description            String
  ecoType                ECOType
  priority               ECOPriority
  status                 ECOStatus             @default(REQUESTED)
  currentState           String
  proposedChange         String
  reasonForChange        String
  benefitsExpected       String?
  risksIfNotImplemented  String?
  requestorId            String
  requestorName          String
  requestorDept          String?
  requestDate            DateTime              @default(now())
  sponsorId              String?
  sponsorName            String?
  impactAnalysis         Json?
  affectedParts          String[]
  affectedOperations     String[]
  estimatedCost          Float?
  actualCost             Float?
  estimatedSavings       Float?
  actualSavings          Float?
  costCurrency           String                @default("USD")
  requestedEffectiveDate DateTime?
  plannedEffectiveDate   DateTime?
  actualEffectiveDate    DateTime?
  effectivityType        EffectivityType?
  effectivityValue       String?
  isInterchangeable      Boolean               @default(false)
  crbReviewDate          DateTime?
  crbDecision            CRBDecision?
  crbNotes               String?
  completedDate          DateTime?
  verifiedDate           DateTime?
  closedDate             DateTime?
  closedById             String?
  isActive               Boolean               @default(true)
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  affectedDocuments      ECOAffectedDocument[]
  attachments            ECOAttachment[]
  crbReviews             ECOCRBReview[]
  history                ECOHistory[]
  relatedECOs            ECORelation[]         @relation("ParentECO")
  parentRelations        ECORelation[]         @relation("RelatedECO")
  tasks                  ECOTask[]

  @@index([ecoNumber])
  @@index([status])
  @@index([priority])
  @@index([requestDate])
  @@index([requestorId])
  @@map("engineering_change_orders")
}

/// ECO Affected Document - Links ECOs to documents that need updates
model ECOAffectedDocument {
  id                String                 @id @default(cuid())
  ecoId             String
  documentType      String
  documentId        String
  documentTitle     String
  currentVersion    String?
  targetVersion     String?
  status            DocUpdateStatus        @default(PENDING)
  assignedToId      String?
  assignedToName    String?
  updateStartedAt   DateTime?
  updateCompletedAt DateTime?
  approvedAt        DateTime?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  eco               EngineeringChangeOrder @relation(fields: [ecoId], references: [id], onDelete: Cascade)

  @@unique([ecoId, documentType, documentId])
  @@index([ecoId])
  @@index([status])
  @@index([assignedToId])
  @@map("eco_affected_documents")
}

/// ECO Task - Implementation tasks for ECO completion
model ECOTask {
  id                String                 @id @default(cuid())
  ecoId             String
  taskName          String
  description       String?
  taskType          ECOTaskType
  assignedToId      String?
  assignedToName    String?
  assignedToDept    String?
  status            ECOTaskStatus          @default(PENDING)
  dueDate           DateTime?
  startedAt         DateTime?
  completedAt       DateTime?
  prerequisiteTasks String[]
  completionNotes   String?
  verifiedById      String?
  verifiedAt        DateTime?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  eco               EngineeringChangeOrder @relation(fields: [ecoId], references: [id], onDelete: Cascade)

  @@index([ecoId])
  @@index([assignedToId])
  @@index([status])
  @@index([dueDate])
  @@map("eco_tasks")
}

/// ECO Attachment - Supporting documents for ECOs
model ECOAttachment {
  id             String                 @id @default(cuid())
  ecoId          String
  fileName       String
  fileUrl        String
  fileSize       Int
  mimeType       String
  attachmentType AttachmentType
  description    String?
  uploadedById   String
  uploadedByName String
  uploadedAt     DateTime               @default(now())
  eco            EngineeringChangeOrder @relation(fields: [ecoId], references: [id], onDelete: Cascade)

  @@index([ecoId])
  @@index([attachmentType])
  @@map("eco_attachments")
}

/// ECO History - Complete audit trail for ECO changes
model ECOHistory {
  id               String                 @id @default(cuid())
  ecoId            String
  eventType        ECOEventType
  eventDescription String
  fromStatus       ECOStatus?
  toStatus         ECOStatus?
  details          Json?
  performedById    String
  performedByName  String
  performedByRole  String?
  occurredAt       DateTime               @default(now())
  eco              EngineeringChangeOrder @relation(fields: [ecoId], references: [id], onDelete: Cascade)

  @@index([ecoId])
  @@index([eventType])
  @@index([occurredAt])
  @@map("eco_history")
}

/// ECO CRB Review - Change Review Board meeting records
model ECOCRBReview {
  id                String                 @id @default(cuid())
  ecoId             String
  meetingDate       DateTime
  meetingAgenda     String?
  members           Json
  discussionNotes   String?
  questionsConcerns String?
  decision          CRBDecision
  decisionRationale String?
  votesFor          Int?
  votesAgainst      Int?
  votesAbstain      Int?
  conditions        String?
  actionItems       Json?
  nextReviewDate    DateTime?
  createdById       String
  createdAt         DateTime               @default(now())
  eco               EngineeringChangeOrder @relation(fields: [ecoId], references: [id], onDelete: Cascade)

  @@index([ecoId])
  @@index([meetingDate])
  @@map("eco_crb_reviews")
}

/// ECO Relation - Relationships between ECOs
model ECORelation {
  id           String                 @id @default(cuid())
  parentEcoId  String
  relatedEcoId String
  relationType ECORelationType
  description  String?
  createdAt    DateTime               @default(now())
  parentEco    EngineeringChangeOrder @relation("ParentECO", fields: [parentEcoId], references: [id], onDelete: Cascade)
  relatedEco   EngineeringChangeOrder @relation("RelatedECO", fields: [relatedEcoId], references: [id], onDelete: Cascade)

  @@unique([parentEcoId, relatedEcoId])
  @@index([parentEcoId])
  @@index([relatedEcoId])
  @@map("eco_relations")
}

/// CRB Configuration - Change Review Board setup
model CRBConfiguration {
  id               String     @id @default(cuid())
  boardMembers     Json
  meetingFrequency String?
  meetingDay       String?
  meetingTime      String?
  votingRule       VotingRule @default(MAJORITY)
  quorumRequired   Int?
  preReviewDays    Int        @default(3)
  isActive         Boolean    @default(true)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  @@index([isActive])
  @@map("crb_configurations")
}

/// Document Comment - Threaded comments on documents
model DocumentComment {
  id               String              @id @default(cuid())
  documentType     String
  documentId       String
  contextType      CommentContextType?
  contextId        String?
  contextPath      String?
  commentText      String
  attachments      String[]
  parentCommentId  String?
  status           CommentStatus       @default(OPEN)
  priority         CommentPriority     @default(MEDIUM)
  tags             String[]
  isPinned         Boolean             @default(false)
  isResolved       Boolean             @default(false)
  resolvedAt       DateTime?
  resolvedById     String?
  authorId         String
  authorName       String
  mentionedUserIds String[]
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  editedAt         DateTime?
  reactions        CommentReaction[]
  parentComment    DocumentComment?    @relation("CommentThread", fields: [parentCommentId], references: [id], onDelete: Cascade)
  replies          DocumentComment[]   @relation("CommentThread")

  @@index([documentType, documentId])
  @@index([parentCommentId])
  @@index([authorId])
  @@index([status])
  @@index([createdAt])
  @@map("document_comments")
}

/// Comment Reaction - Reactions to comments
model CommentReaction {
  id           String          @id @default(cuid())
  commentId    String
  userId       String
  userName     String
  reactionType ReactionType
  createdAt    DateTime        @default(now())
  comment      DocumentComment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId, reactionType])
  @@index([commentId])
  @@map("comment_reactions")
}

/// Document Annotation - Visual annotations on media
model DocumentAnnotation {
  id             String         @id @default(cuid())
  documentType   String
  documentId     String
  mediaType      String?
  mediaUrl       String?
  annotationType AnnotationType
  annotationData Json
  text           String?
  color          String?
  strokeWidth    Int?
  opacity        Float?
  fontSize       Int?
  timestamp      Float?
  authorId       String
  authorName     String
  isResolved     Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@index([documentType, documentId])
  @@index([authorId])
  @@map("document_annotations")
}

/// Review Assignment - Document review assignments
model ReviewAssignment {
  id              String                @id @default(cuid())
  documentType    String
  documentId      String
  documentVersion String
  reviewerId      String
  reviewerName    String
  assignedById    String
  assignedByName  String
  assignedAt      DateTime              @default(now())
  reviewType      ReviewType
  instructions    String?
  focusAreas      String[]
  isRequired      Boolean               @default(true)
  deadline        DateTime?
  checklistItems  Json?
  status          ReviewStatus          @default(NOT_STARTED)
  startedAt       DateTime?
  completedAt     DateTime?
  recommendation  ReviewRecommendation?
  summary         String?
  timeSpent       Int?
  signatureId     String?
  signedOffAt     DateTime?

  @@unique([documentType, documentId, reviewerId])
  @@index([reviewerId])
  @@index([status])
  @@index([deadline])
  @@map("review_assignments")
}

/// Document Activity - Activity log for documents
model DocumentActivity {
  id              String       @id @default(cuid())
  documentType    String
  documentId      String
  activityType    ActivityType
  description     String
  changesSummary  Json?
  performedById   String
  performedByName String
  performedByRole String?
  metadata        Json?
  occurredAt      DateTime     @default(now())

  @@index([documentType, documentId])
  @@index([activityType])
  @@index([occurredAt])
  @@index([performedById])
  @@map("document_activities")
}

/// Document Subscription - User subscriptions to document updates
model DocumentSubscription {
  id               String   @id @default(cuid())
  userId           String
  documentType     String
  documentId       String
  notifyOnEdit     Boolean  @default(true)
  notifyOnComment  Boolean  @default(true)
  notifyOnApproval Boolean  @default(true)
  notifyOnVersion  Boolean  @default(true)
  subscribedAt     DateTime @default(now())

  @@unique([userId, documentType, documentId])
  @@index([userId])
  @@index([documentType, documentId])
  @@map("document_subscriptions")
}

/// User Notification - System notifications
model UserNotification {
  id               String           @id @default(cuid())
  userId           String
  notificationType NotificationType
  title            String
  message          String
  entityType       String?
  entityId         String?
  actionUrl        String?
  isRead           Boolean          @default(false)
  readAt           DateTime?
  createdAt        DateTime         @default(now())
  expiresAt        DateTime?

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@map("user_notifications")
}

/// Document Edit Session - Real-time collaboration sessions
model DocumentEditSession {
  id             String    @id @default(cuid())
  documentType   String
  documentId     String
  userId         String
  userName       String
  sessionId      String    @unique
  startedAt      DateTime  @default(now())
  lastActivityAt DateTime  @default(now())
  endedAt        DateTime?
  cursorPosition Json?
  lockedSections String[]
  isActive       Boolean   @default(true)

  @@index([documentType, documentId])
  @@index([userId])
  @@index([isActive])
  @@map("document_edit_sessions")
}

/// Conflict Resolution - Merge conflict resolutions
model ConflictResolution {
  id             String         @id @default(cuid())
  documentType   String
  documentId     String
  conflictPath   String
  baseVersion    String
  yourVersion    Json
  theirVersion   Json
  theirUserId    String
  resolution     ResolutionType
  mergedVersion  Json
  resolvedById   String
  resolvedByName String
  resolvedAt     DateTime       @default(now())

  @@index([documentType, documentId])
  @@index([resolvedById])
  @@map("conflict_resolutions")
}

/// Cloud storage file registry
/// Tracks all files stored in S3/MinIO with versioning, deduplication, and metadata
model StoredFile {
  id                  String              @id @default(uuid())
  storagePath         String              @unique
  storageProvider     String
  bucket              String
  fileName            String
  originalFileName    String
  fileSize            Int
  mimeType            String
  fileHash            String
  versionId           String?
  isLatestVersion     Boolean             @default(true)
  versionNumber       Int                 @default(1)
  storageClass        StorageClass        @default(HOT)
  transitionedAt      DateTime?
  metadata            Json?
  tags                String[]
  cdnUrl              String?
  cacheStatus         CacheStatus?
  lastCacheUpdate     DateTime?
  accessCount         Int                 @default(0)
  lastAccessedAt      DateTime?
  downloadCount       Int                 @default(0)
  documentType        String?
  documentId          String?
  attachmentType      FileAttachmentType?
  deduplicationRefs   Int                 @default(1)
  originalFileId      String?
  retentionPolicy     String?
  expiresAt           DateTime?
  autoDeleteAt        DateTime?
  isEncrypted         Boolean             @default(false)
  encryptionKeyId     String?
  encryptionAlgorithm String?
  uploadedById        String
  uploadedByName      String
  uploadedAt          DateTime            @default(now())
  uploadMethod        UploadMethod        @default(DIRECT)
  uploadSessionId     String?
  processingStatus    ProcessingStatus    @default(COMPLETED)
  processingError     String?
  thumbnailGenerated  Boolean             @default(false)
  thumbnailPath       String?
  backupEntries       BackupEntry[]
  accessLogs          FileAccessLog[]
  versions            FileVersion[]
  originalFile        StoredFile?         @relation("FileDuplicates", fields: [originalFileId], references: [id])
  duplicateFiles      StoredFile[]        @relation("FileDuplicates")

  @@index([storagePath])
  @@index([fileHash])
  @@index([documentType, documentId])
  @@index([storageClass])
  @@index([uploadedAt])
  @@index([isLatestVersion])
  @@index([originalFileId])
  @@map("stored_files")
}

/// File version history for comprehensive version tracking
model FileVersion {
  id                String            @id @default(uuid())
  fileId            String
  versionNumber     Int
  versionId         String
  storagePath       String
  fileSize          Int
  fileHash          String
  mimeType          String
  changeDescription String?
  changeType        VersionChangeType @default(UPDATE)
  storageClass      StorageClass      @default(HOT)
  metadata          Json?
  createdAt         DateTime          @default(now())
  createdById       String
  createdByName     String
  retentionPolicy   String?
  expiresAt         DateTime?
  file              StoredFile        @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@unique([fileId, versionNumber])
  @@index([fileId])
  @@index([createdAt])
  @@map("file_versions")
}

/// Backup schedules for automated backup management
model BackupSchedule {
  id                     String          @id @default(uuid())
  name                   String
  description            String?
  bucketName             String
  backupBucket           String?
  includePattern         String?
  excludePattern         String?
  frequency              BackupFrequency
  cronExpression         String?
  timezone               String          @default("UTC")
  retentionDays          Int             @default(30)
  maxBackups             Int?
  enableCompression      Boolean         @default(true)
  enableEncryption       Boolean         @default(true)
  crossRegionReplication Boolean         @default(false)
  isActive               Boolean         @default(true)
  lastBackupAt           DateTime?
  nextBackupAt           DateTime?
  lastSuccessAt          DateTime?
  lastFailureAt          DateTime?
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  createdById            String
  updatedById            String?
  backupHistory          BackupHistory[]

  @@index([isActive])
  @@index([nextBackupAt])
  @@map("backup_schedules")
}

/// Backup execution history and status tracking
model BackupHistory {
  id               String          @id @default(uuid())
  scheduleId       String?
  backupType       BackupType
  status           BackupStatus
  sourceBucket     String
  destBucket       String
  backupLocation   String
  fileCount        Int?
  totalSize        Int?
  compressedSize   Int?
  compressionRatio Float?
  startedAt        DateTime
  completedAt      DateTime?
  duration         Int?
  errorMessage     String?
  errorCode        String?
  checksumVerified Boolean         @default(false)
  verificationDate DateTime?
  metadata         Json?
  backupEntries    BackupEntry[]
  schedule         BackupSchedule? @relation(fields: [scheduleId], references: [id])

  @@index([scheduleId])
  @@index([status])
  @@index([startedAt])
  @@index([backupType])
  @@map("backup_history")
}

/// Backup entries linking files to backup instances
model BackupEntry {
  id               String        @id @default(uuid())
  backupId         String
  fileId           String
  backupPath       String
  originalPath     String
  checksum         String
  checksumVerified Boolean       @default(false)
  metadata         Json?
  backup           BackupHistory @relation(fields: [backupId], references: [id], onDelete: Cascade)
  file             StoredFile    @relation(fields: [fileId], references: [id])

  @@unique([backupId, fileId])
  @@index([backupId])
  @@index([fileId])
  @@map("backup_entries")
}

/// File access logging for security and analytics
model FileAccessLog {
  id             String     @id @default(uuid())
  fileId         String
  accessType     AccessType
  accessMethod   String
  userId         String?
  userName       String?
  userAgent      String?
  ipAddress      String?
  referrer       String?
  requestHeaders Json?
  responseCode   Int?
  responseSize   Int?
  accessedAt     DateTime   @default(now())
  duration       Int?
  country        String?
  region         String?
  city           String?
  cdnHit         Boolean?
  edgeLocation   String?
  file           StoredFile @relation(fields: [fileId], references: [id])

  @@index([fileId])
  @@index([accessedAt])
  @@index([userId])
  @@index([accessType])
  @@map("file_access_logs")
}

/// Storage analytics and metrics for monitoring
model StorageMetrics {
  id               String   @id @default(uuid())
  date             DateTime @unique
  hour             Int?
  totalFiles       Int      @default(0)
  totalSize        Int      @default(0)
  hotStorageFiles  Int      @default(0)
  hotStorageSize   Int      @default(0)
  warmStorageFiles Int      @default(0)
  warmStorageSize  Int      @default(0)
  coldStorageFiles Int      @default(0)
  coldStorageSize  Int      @default(0)
  archiveFiles     Int      @default(0)
  archiveSize      Int      @default(0)
  imageFiles       Int      @default(0)
  imageSize        Int      @default(0)
  videoFiles       Int      @default(0)
  videoSize        Int      @default(0)
  documentFiles    Int      @default(0)
  documentSize     Int      @default(0)
  cadFiles         Int      @default(0)
  cadSize          Int      @default(0)
  uploads          Int      @default(0)
  downloads        Int      @default(0)
  deletes          Int      @default(0)
  totalRequests    Int      @default(0)
  totalBandwidth   Int      @default(0)
  cdnHits          Int      @default(0)
  cdnMisses        Int      @default(0)
  duplicateFiles   Int      @default(0)
  spaceSaved       Int      @default(0)
  estimatedCost    Decimal? @db.Decimal(10, 2)

  @@index([date])
  @@index([hour])
  @@map("storage_metrics")
}

/// Multipart upload session tracking
model MultipartUpload {
  id             String       @id @default(uuid())
  uploadId       String       @unique
  fileName       String
  storagePath    String
  totalSize      Int
  chunkSize      Int
  totalChunks    Int
  uploadedChunks Int          @default(0)
  status         UploadStatus @default(IN_PROGRESS)
  parts          Json[]
  uploadedById   String
  uploadedByName String
  startedAt      DateTime     @default(now())
  lastActivityAt DateTime     @default(now())
  completedAt    DateTime?
  expiresAt      DateTime
  errorMessage   String?
  retryCount     Int          @default(0)
  metadata       Json?

  @@index([uploadId])
  @@index([status])
  @@index([uploadedById])
  @@index([expiresAt])
  @@map("multipart_uploads")
}

/// Enhanced Role model - Replaces placeholder in auth service
/// Supports both global and site-specific roles with flexible permission assignment
model Role {
  id            String           @id @default(cuid())
  roleCode      String           @unique
  roleName      String
  description   String?
  isActive      Boolean          @default(true)
  isGlobal      Boolean          @default(true)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  createdBy     String?
  permissions   RolePermission[]
  userRoles     UserRole[]
  userSiteRoles UserSiteRole[]

  // Role Template relationship
  templateInstance RoleTemplateInstance?

  @@index([roleCode])
  @@index([isActive])
  @@index([isGlobal])
  @@map("roles")
}

/// Enhanced Permission model - Replaces placeholder in auth service
/// Granular permissions with wildcard support and categorization
model Permission {
  id             String           @id @default(cuid())
  permissionCode String           @unique
  permissionName String
  description    String?
  category       String?
  isActive       Boolean          @default(true)
  isWildcard     Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  roles          RolePermission[]

  // Role Template relationship
  templatePermissions RoleTemplatePermission[]

  @@index([permissionCode])
  @@index([category])
  @@index([isActive])
  @@index([isWildcard])
  @@map("permissions")
}

/// Junction table: Role ↔ Permission (many-to-many)
/// Defines which permissions are assigned to each role
model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  grantedAt    DateTime   @default(now())
  grantedBy    String?
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
  @@map("role_permissions")
}

/// Junction table: User ↔ Role (many-to-many, global)
/// Assigns global roles to users that apply across all sites
model UserRole {
  id         String    @id @default(cuid())
  userId     String
  roleId     String
  assignedAt DateTime  @default(now())
  assignedBy String?
  expiresAt  DateTime?
  role       Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
  @@index([expiresAt])
  @@map("user_roles")
}

/// Junction table: User ↔ Role ↔ Site (many-to-many, site-specific)
/// Assigns site-specific roles to users for enhanced granular control
model UserSiteRole {
  id         String    @id @default(cuid())
  userId     String
  roleId     String
  siteId     String
  assignedAt DateTime  @default(now())
  assignedBy String?
  expiresAt  DateTime?
  role       Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  site       Site      @relation(fields: [siteId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId, siteId])
  @@index([userId])
  @@index([roleId])
  @@index([siteId])
  @@index([expiresAt])
  @@map("user_site_roles")
}

/// Time tracking configuration (site level)
/// Controls how time tracking behaves at each manufacturing site
model TimeTrackingConfiguration {
  id                     String                  @id @default(cuid())
  siteId                 String                  @unique
  timeTrackingEnabled    Boolean                 @default(true)
  trackingGranularity    TimeTrackingGranularity @default(OPERATION)
  costingModel           CostingModel            @default(LABOR_HOURS)
  allowMultiTasking      Boolean                 @default(false)
  multiTaskingMode       MultiTaskingMode?
  autoSubtractBreaks     Boolean                 @default(false)
  standardBreakMinutes   Int?
  requireBreakClockOut   Boolean                 @default(false)
  overtimeThresholdHours Float?                  @default(8.0)
  warnOnOvertime         Boolean                 @default(true)
  enableMachineTracking  Boolean                 @default(false)
  autoStartFromMachine   Boolean                 @default(false)
  autoStopFromMachine    Boolean                 @default(false)
  requireTimeApproval    Boolean                 @default(true)
  approvalFrequency      ApprovalFrequency       @default(DAILY)
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  createdBy              String
  site                   Site                    @relation(fields: [siteId], references: [id])

  @@index([siteId])
  @@map("time_tracking_configurations")
}

/// Labor time entry (operator clocking in/out)
/// Records when operators clock in and out for work orders, operations, or indirect activities
model LaborTimeEntry {
  id                   String              @id @default(cuid())
  userId               String
  workOrderId          String?
  operationId          String?
  indirectCodeId       String?
  timeType             TimeType
  clockInTime          DateTime
  clockOutTime         DateTime?
  duration             Float?
  entrySource          TimeEntrySource
  deviceId             String?
  location             String?
  status               TimeEntryStatus     @default(ACTIVE)
  approvedBy           String?
  approvedAt           DateTime?
  rejectionReason      String?
  costCenter           String?
  laborRate            Float?
  laborCost            Float?
  originalClockInTime  DateTime?
  originalClockOutTime DateTime?
  editedBy             String?
  editedAt             DateTime?
  editReason           String?
  exportedToSystem     String?
  exportedAt           DateTime?
  externalReferenceId  String?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  indirectCode         IndirectCostCode?   @relation(fields: [indirectCodeId], references: [id])
  operation            WorkOrderOperation? @relation(fields: [operationId], references: [id])
  user                 User                @relation(fields: [userId], references: [id])
  workOrder            WorkOrder?          @relation(fields: [workOrderId], references: [id])

  @@index([userId])
  @@index([workOrderId])
  @@index([operationId])
  @@index([status])
  @@index([clockInTime])
  @@index([timeType])
  @@map("labor_time_entries")
}

/// Machine time entry (equipment run time)
/// Records machine run time separately from labor for equipment-based costing
model MachineTimeEntry {
  id                 String              @id @default(cuid())
  equipmentId        String
  workOrderId        String?
  operationId        String?
  startTime          DateTime
  endTime            DateTime?
  duration           Float?
  entrySource        TimeEntrySource
  dataSource         String?
  cycleCount         Int?
  partCount          Int?
  machineUtilization Float?
  status             TimeEntryStatus     @default(ACTIVE)
  machineRate        Float?
  machineCost        Float?
  exportedToSystem   String?
  exportedAt         DateTime?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  equipment          Equipment           @relation(fields: [equipmentId], references: [id])
  operation          WorkOrderOperation? @relation(fields: [operationId], references: [id])
  workOrder          WorkOrder?          @relation(fields: [workOrderId], references: [id])

  @@index([equipmentId])
  @@index([workOrderId])
  @@index([operationId])
  @@index([status])
  @@index([startTime])
  @@map("machine_time_entries")
}

/// Indirect cost codes (non-productive time)
/// Defines categories for non-productive time like breaks, training, meetings
model IndirectCostCode {
  id           String           @id @default(cuid())
  code         String           @unique
  description  String
  category     IndirectCategory
  costCenter   String?
  glAccount    String?
  isActive     Boolean          @default(true)
  siteId       String?
  displayColor String?
  displayIcon  String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  createdBy    String
  site         Site?            @relation(fields: [siteId], references: [id])
  laborEntries LaborTimeEntry[]

  @@index([code])
  @@index([category])
  @@index([siteId])
  @@map("indirect_cost_codes")
}

/// Time entry validation rules (business logic)
/// Configurable rules for validating time entries and preventing common errors
model TimeEntryValidationRule {
  id           String                 @id @default(cuid())
  ruleName     String
  ruleType     TimeValidationRuleType
  condition    String
  errorMessage String
  severity     String
  isActive     Boolean                @default(true)
  siteId       String?
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt

  @@index([ruleType])
  @@index([siteId])
  @@map("time_entry_validation_rules")
}

/// SSO Provider Registry
/// Centralized registry of all configured SSO providers
model SsoProvider {
  id                   String                @id @default(cuid())
  name                 String                @unique
  type                 SsoProviderType
  configId             String
  priority             Int                   @default(0)
  isActive             Boolean               @default(true)
  isDefault            Boolean               @default(false)
  domainRestrictions   String[]
  groupRestrictions    String[]
  metadata             Json?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  authenticationEvents AuthenticationEvent[]
  homeRealmRules       HomeRealmDiscovery[]
  ssoSessions          SsoSession[]

  @@index([type])
  @@index([isActive])
  @@index([isDefault])
  @@index([priority])
  @@map("sso_providers")
}

/// SSO Session Management
/// Unified session handling across multiple providers
model SsoSession {
  id                String      @id @default(cuid())
  userId            String
  primaryProviderId String
  activeProviders   String[]
  sessionData       Json?
  expiresAt         DateTime?
  lastActivityAt    DateTime    @default(now())
  createdAt         DateTime    @default(now())
  primaryProvider   SsoProvider @relation(fields: [primaryProviderId], references: [id])
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([primaryProviderId])
  @@index([expiresAt])
  @@index([lastActivityAt])
  @@map("sso_sessions")
}

/// Authentication Analytics
/// Comprehensive tracking of authentication events and metrics
model AuthenticationEvent {
  id           String                  @id @default(cuid())
  userId       String?
  providerId   String
  eventType    AuthenticationEventType
  userAgent    String?
  ipAddress    String?
  location     String?
  responseTime Int?
  errorCode    String?
  errorMessage String?
  metadata     Json?
  createdAt    DateTime                @default(now())
  provider     SsoProvider             @relation(fields: [providerId], references: [id])
  user         User?                   @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([providerId])
  @@index([eventType])
  @@index([createdAt])
  @@index([ipAddress])
  @@map("authentication_events")
}

/// Home Realm Discovery Rules
/// Automatic provider selection based on user attributes
model HomeRealmDiscovery {
  id         String      @id @default(cuid())
  name       String
  pattern    String
  providerId String
  priority   Int         @default(0)
  isActive   Boolean     @default(true)
  createdAt  DateTime    @default(now())
  provider   SsoProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@index([pattern])
  @@index([providerId])
  @@index([priority])
  @@index([isActive])
  @@map("home_realm_discovery")
}

/// Permission Usage Tracking
/// Logs every permission check with full context for security monitoring
model PermissionUsageLog {
  id         String   @id @default(cuid())
  userId     String
  permission String
  endpoint   String?
  method     String?
  success    Boolean
  timestamp  DateTime @default(now())
  ip         String?
  userAgent  String?
  siteId     String?
  duration   Int?
  context    Json?
  site       Site?    @relation(fields: [siteId], references: [id])
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, timestamp])
  @@index([permission, timestamp])
  @@index([success, timestamp])
  @@index([siteId, timestamp])
  @@index([endpoint, method])
  @@map("permission_usage_logs")
}

/// Security Event Monitoring
/// Tracks security-related events for threat detection and compliance
model SecurityEvent {
  id             String            @id @default(cuid())
  eventType      SecurityEventType
  severity       SecuritySeverity
  userId         String?
  ip             String?
  userAgent      String?
  description    String
  metadata       Json?
  timestamp      DateTime          @default(now())
  resolved       Boolean           @default(false)
  resolvedBy     String?
  resolvedAt     DateTime?
  siteId         String?
  resolvedByUser User?             @relation("SecurityEventResolvedBy", fields: [resolvedBy], references: [id])
  site           Site?             @relation(fields: [siteId], references: [id])
  user           User?             @relation(fields: [userId], references: [id])

  @@index([eventType, timestamp])
  @@index([severity, resolved])
  @@index([userId, timestamp])
  @@index([ip, timestamp])
  @@index([siteId, timestamp])
  @@map("security_events")
}

/// User Session Tracking
/// Comprehensive session monitoring for analytics and security
model UserSessionLog {
  id           String    @id @default(cuid())
  userId       String
  sessionId    String    @unique
  ip           String?
  userAgent    String?
  startTime    DateTime  @default(now())
  endTime      DateTime?
  duration     Int?
  actionsCount Int       @default(0)
  siteAccess   String[]
  lastActivity DateTime  @default(now())
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, startTime])
  @@index([sessionId])
  @@index([ip, startTime])
  @@index([lastActivity])
  @@map("user_session_logs")
}

/// Audit Report Management
/// Tracks generated compliance and security reports
model AuditReport {
  id              String       @id @default(cuid())
  reportType      ReportType
  title           String
  parameters      Json
  generatedBy     String
  generatedAt     DateTime     @default(now())
  filePath        String?
  status          ReportStatus
  error           String?
  downloadCount   Int          @default(0)
  siteId          String?
  generatedByUser User         @relation(fields: [generatedBy], references: [id], onDelete: Cascade)
  site            Site?        @relation(fields: [siteId], references: [id])

  @@index([reportType, generatedAt])
  @@index([generatedBy, generatedAt])
  @@index([status])
  @@index([siteId, reportType])
  @@map("audit_reports")
}

/// Permission Change History
/// Tracks all changes to user permissions and roles for compliance
model PermissionChangeLog {
  id            String               @id @default(cuid())
  changeType    PermissionChangeType
  targetUserId  String
  targetRole    String?
  permission    String?
  oldValue      Json?
  newValue      Json?
  changedBy     String
  reason        String?
  timestamp     DateTime             @default(now())
  siteId        String?
  changedByUser User                 @relation("PermissionChangeChanger", fields: [changedBy], references: [id], onDelete: Cascade)
  site          Site?                @relation(fields: [siteId], references: [id])
  targetUser    User                 @relation("PermissionChangeTarget", fields: [targetUserId], references: [id], onDelete: Cascade)

  @@index([targetUserId, timestamp])
  @@index([changedBy, timestamp])
  @@index([changeType, timestamp])
  @@index([siteId, timestamp])
  @@map("permission_change_logs")
}

enum QualificationType {
  CERTIFICATION
  LICENSE
  TRAINING
  SKILL
}

enum CertificationStatus {
  ACTIVE
  EXPIRED
  SUSPENDED
  REVOKED
  PENDING
}

enum SkillCategory {
  MACHINING
  WELDING
  INSPECTION
  ASSEMBLY
  PROGRAMMING
  MAINTENANCE
  QUALITY
  SAFETY
  MANAGEMENT
  OTHER
}

enum CompetencyLevel {
  NOVICE
  ADVANCED_BEGINNER
  COMPETENT
  PROFICIENT
  EXPERT
}

enum AvailabilityType {
  AVAILABLE
  VACATION
  SICK_LEAVE
  TRAINING
  MEETING
  UNAVAILABLE
}

enum MaterialType {
  RAW_MATERIAL
  COMPONENT
  SUBASSEMBLY
  ASSEMBLY
  FINISHED_GOODS
  WIP
  CONSUMABLE
  PACKAGING
  TOOLING
  MAINTENANCE
}

enum MaterialPropertyType {
  PHYSICAL
  CHEMICAL
  MECHANICAL
  THERMAL
  ELECTRICAL
  OPTICAL
  REGULATORY
  OTHER
}

enum MaterialLotStatus {
  AVAILABLE
  RESERVED
  IN_USE
  DEPLETED
  QUARANTINED
  EXPIRED
  REJECTED
  RETURNED
  SCRAPPED
}

enum MaterialLotState {
  RECEIVED
  INSPECTED
  APPROVED
  ISSUED
  IN_PROCESS
  CONSUMED
  RETURNED
  DISPOSED
}

enum QualityLotStatus {
  PENDING
  IN_INSPECTION
  APPROVED
  REJECTED
  CONDITIONAL
}

enum SublotOperationType {
  SPLIT
  MERGE
  TRANSFER
  REWORK
}

enum GenealogyRelationType {
  CONSUMED_BY
  PRODUCED_FROM
  REWORKED_TO
  BLENDED_WITH
  SPLIT_FROM
  MERGED_INTO
  TRANSFERRED_TO
}

enum StateTransitionType {
  MANUAL
  AUTOMATIC
  SYSTEM
  SCHEDULED
  INTEGRATION
}

enum OperationType {
  PRODUCTION
  QUALITY
  MATERIAL_HANDLING
  MAINTENANCE
  SETUP
  CLEANING
  PACKAGING
  TESTING
  REWORK
  OTHER
}

enum OperationClassification {
  MAKE
  ASSEMBLY
  INSPECTION
  TEST
  REWORK
  SETUP
  SUBCONTRACT
  PACKING
}

enum ParameterType {
  INPUT
  OUTPUT
  SET_POINT
  MEASURED
  CALCULATED
}

enum ParameterDataType {
  NUMBER
  STRING
  BOOLEAN
  ENUM
  DATE
  JSON
}

enum ParameterGroupType {
  PROCESS
  QUALITY
  MATERIAL
  EQUIPMENT
  ENVIRONMENTAL
  CUSTOM
}

enum FormulaLanguage {
  JAVASCRIPT
  PYTHON
  SQL
}

enum EvaluationTrigger {
  ON_CHANGE
  SCHEDULED
  MANUAL
}

enum DependencyType {
  MUST_COMPLETE
  MUST_START
  OVERLAP_ALLOWED
  PARALLEL
}

enum DependencyTimingType {
  FINISH_TO_START
  START_TO_START
  FINISH_TO_FINISH
  START_TO_FINISH
}

enum ConsumptionType {
  PER_UNIT
  PER_BATCH
  FIXED
  SETUP
}

enum PhysicalAssetType {
  TOOLING
  FIXTURE
  GAUGE
  CONSUMABLE
  PPE
  MOLD
  PATTERN
  SOFTWARE
  OTHER
}

enum ProductType {
  MADE_TO_STOCK
  MADE_TO_ORDER
  ENGINEER_TO_ORDER
  CONFIGURE_TO_ORDER
  ASSEMBLE_TO_ORDER
}

enum ProductLifecycleState {
  DESIGN
  PROTOTYPE
  PILOT_PRODUCTION
  PRODUCTION
  MATURE
  PHASE_OUT
  OBSOLETE
  ARCHIVED
}

enum ConfigurationType {
  STANDARD
  VARIANT
  CUSTOM
  CONFIGURABLE
}

enum SpecificationType {
  PHYSICAL
  CHEMICAL
  MECHANICAL
  ELECTRICAL
  PERFORMANCE
  REGULATORY
  ENVIRONMENTAL
  SAFETY
  QUALITY
  OTHER
}

enum WorkOrderPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum WorkOrderStatus {
  CREATED
  RELEASED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum RoutingLifecycleState {
  DRAFT
  REVIEW
  RELEASED
  PRODUCTION
  OBSOLETE
}

enum RoutingType {
  PRIMARY
  ALTERNATE
  REWORK
  PROTOTYPE
  ENGINEERING
}

enum StepType {
  PROCESS
  INSPECTION
  DECISION
  PARALLEL_SPLIT
  PARALLEL_JOIN
  OSP
  LOT_SPLIT
  LOT_MERGE
  TELESCOPING
  START
  END
}

enum ControlType {
  LOT_CONTROLLED
  SERIAL_CONTROLLED
  MIXED
}

enum WorkOrderOperationStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  SKIPPED
}

enum ScheduleState {
  FORECAST
  RELEASED
  DISPATCHED
  RUNNING
  COMPLETED
  CLOSED
}

enum SchedulePriority {
  URGENT
  HIGH
  NORMAL
  LOW
}

enum ConstraintType {
  CAPACITY
  MATERIAL
  PERSONNEL
  EQUIPMENT
  DATE
  CUSTOM
}

enum WorkPerformanceType {
  LABOR
  MATERIAL
  EQUIPMENT
  QUALITY
  SETUP
  DOWNTIME
}

enum VarianceType {
  QUANTITY
  TIME
  COST
  EFFICIENCY
  YIELD
  MATERIAL
}

enum QualityToleranceType {
  BILATERAL
  UNILATERAL_PLUS
  UNILATERAL_MINUS
  NOMINAL
}

enum QualityInspectionStatus {
  CREATED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum QualityInspectionResult {
  PASS
  FAIL
  CONDITIONAL
}

enum NCRSeverity {
  MINOR
  MAJOR
  CRITICAL
}

enum NCRStatus {
  OPEN
  IN_REVIEW
  CORRECTIVE_ACTION
  CLOSED
}

enum EquipmentClass {
  PRODUCTION
  MAINTENANCE
  QUALITY
  MATERIAL_HANDLING
  LABORATORY
  STORAGE
  ASSEMBLY
}

enum EquipmentStatus {
  AVAILABLE
  IN_USE
  OPERATIONAL
  MAINTENANCE
  DOWN
  RETIRED
}

enum EquipmentState {
  IDLE
  RUNNING
  BLOCKED
  STARVED
  FAULT
  MAINTENANCE
  SETUP
  EMERGENCY
}

enum EquipmentLogType {
  MAINTENANCE
  REPAIR
  CALIBRATION
  STATUS_CHANGE
  USAGE
}

enum PerformancePeriodType {
  HOUR
  SHIFT
  DAY
  WEEK
  MONTH
  QUARTER
  YEAR
}

enum MaterialTransactionType {
  RECEIPT
  ISSUE
  RETURN
  ADJUSTMENT
  SCRAP
}

enum WorkInstructionStatus {
  DRAFT
  REVIEW
  APPROVED
  REJECTED
  SUPERSEDED
  ARCHIVED
}

enum WorkInstructionExecutionStatus {
  IN_PROGRESS
  COMPLETED
  PAUSED
  CANCELLED
}

enum ElectronicSignatureType {
  BASIC
  ADVANCED
  QUALIFIED
}

enum ElectronicSignatureLevel {
  OPERATOR
  SUPERVISOR
  QUALITY
  ENGINEER
  MANAGER
}

enum BiometricType {
  FINGERPRINT
  FACIAL
  IRIS
  VOICE
  NONE
}

enum FAIStatus {
  IN_PROGRESS
  REVIEW
  APPROVED
  REJECTED
  SUPERSEDED
}

enum IntegrationType {
  ERP
  PLM
  CMMS
  WMS
  QMS
  HISTORIAN
  DNC
  SFC
  SKILLS
  CALIBRATION
  PDM
  CMM
  CUSTOM
}

enum IntegrationDirection {
  INBOUND
  OUTBOUND
  BIDIRECTIONAL
}

enum IntegrationLogStatus {
  PENDING
  IN_PROGRESS
  SUCCESS
  FAILED
  PARTIAL
  TIMEOUT
  CANCELLED
}

enum ScheduleType {
  MASTER
  DETAILED
  DISPATCH
}

enum B2MMessageStatus {
  PENDING
  VALIDATED
  PROCESSING
  PROCESSED
  SENT
  CONFIRMED
  ACCEPTED
  FAILED
  REJECTED
  TIMEOUT
}

enum ERPTransactionType {
  ISSUE
  RECEIPT
  RETURN
  TRANSFER
  ADJUSTMENT
  SCRAP
  CONSUMPTION
}

enum PersonnelActionType {
  CREATE
  UPDATE
  DEACTIVATE
  SKILL_UPDATE
  SCHEDULE_UPDATE
}

enum DataCollectionType {
  SENSOR
  ALARM
  EVENT
  MEASUREMENT
  STATUS
  PERFORMANCE
}

enum CommandType {
  START
  STOP
  PAUSE
  RESUME
  RESET
  CONFIGURE
  LOAD_PROGRAM
  UNLOAD_PROGRAM
  DIAGNOSTIC
  CALIBRATE
  EMERGENCY_STOP
}

enum CommandStatus {
  PENDING
  SENT
  ACKNOWLEDGED
  EXECUTING
  COMPLETED
  FAILED
  TIMEOUT
  CANCELLED
}

enum SPCChartType {
  X_BAR_R
  X_BAR_S
  I_MR
  P_CHART
  NP_CHART
  C_CHART
  U_CHART
  EWMA
  CUSUM
}

enum LimitCalculationMethod {
  HISTORICAL_DATA
  SPEC_LIMITS
  MANUAL
}

enum SamplingPlanType {
  SINGLE
  DOUBLE
  MULTIPLE
  SEQUENTIAL
}

/// Work Instruction Format - Different content formats supported
enum WorkInstructionFormat {
  NATIVE
  IMPORTED_PDF
  IMPORTED_DOC
  IMPORTED_PPT
  HYBRID
}

/// Media Type - Types of media supported in work instructions
enum MediaType {
  IMAGE
  VIDEO
  DOCUMENT
  DIAGRAM
  CAD_MODEL
  ANIMATION
}

/// Relation Type - Types of relationships between work instructions
enum RelationType {
  PREREQUISITE
  SUPERSEDES
  RELATED_TO
  ALTERNATIVE_TO
  REFERENCED_BY
}

/// Export Template Type - Types of export templates
enum ExportTemplateType {
  WORK_INSTRUCTION
  SETUP_SHEET
  INSPECTION_PLAN
  SOP
}

/// Export Format - Supported export formats
enum ExportFormat {
  PDF
  DOCX
  PPTX
}

enum InspectionType {
  FIRST_ARTICLE
  IN_PROCESS
  FINAL
  RECEIVING
  AUDIT
  PATROL
}

enum InspectionFrequency {
  PER_PIECE
  PER_BATCH
  PER_LOT
  PERIODIC
  SAMPLING
  ON_DEMAND
}

enum MeasurementType {
  DIMENSIONAL
  VISUAL
  FUNCTIONAL
  MATERIAL
  SURFACE_FINISH
  GEOMETRIC_TOLERANCE
}

enum InspectionResult {
  PASS
  FAIL
  CONDITIONAL_PASS
  PENDING_REVIEW
}

enum Disposition {
  ACCEPT
  REJECT
  REWORK
  USE_AS_IS
  RETURN_TO_VENDOR
  SCRAP
}

enum SOPType {
  SAFETY
  QUALITY
  MAINTENANCE
  TRAINING
  EMERGENCY
  ENVIRONMENTAL
  SECURITY
  GENERAL
}

enum ToolType {
  CUTTING_TOOL
  GAGE
  FIXTURE
  JIG
  DIE
  MOLD
  HAND_TOOL
  MEASURING_INSTRUMENT
  WORK_HOLDING
  OTHER
}

enum MaintenanceType {
  PREVENTIVE
  CORRECTIVE
  PREDICTIVE
  BREAKDOWN
}

enum DocumentType {
  WORK_INSTRUCTION
  SETUP_SHEET
  INSPECTION_PLAN
  SOP
  TOOL_DRAWING
}

/// Layout Mode - Different layout modes for execution interface
enum LayoutMode {
  SPLIT_VERTICAL
  SPLIT_HORIZONTAL
  TABBED
  OVERLAY
  PICTURE_IN_PICTURE
}

/// Panel Position - Position of panels in the layout
enum PanelPosition {
  LEFT
  RIGHT
  TOP
  BOTTOM
  CENTER
}

enum WorkflowType {
  WORK_INSTRUCTION
  SETUP_SHEET
  INSPECTION_PLAN
  SOP
  TOOL_DRAWING
  ECO
  NCR
  CAPA
  CHANGE_REQUEST
  DOCUMENT_APPROVAL
  FAI_REPORT
  QUALITY_PROCESS
}

enum ApprovalType {
  ALL_REQUIRED
  ANY_ONE
  THRESHOLD
  PERCENTAGE
  WEIGHTED
}

enum AssignmentStrategy {
  MANUAL
  ROLE_BASED
  LOAD_BALANCED
  ROUND_ROBIN
}

enum ConditionOperator {
  EQUALS
  NOT_EQUALS
  GREATER_THAN
  LESS_THAN
  GREATER_THAN_OR_EQUAL
  LESS_THAN_OR_EQUAL
  IN
  NOT_IN
  CONTAINS
  REGEX_MATCH
}

enum RuleActionType {
  ADD_STAGE
  SKIP_STAGE
  CHANGE_APPROVERS
  SET_DEADLINE
  SEND_NOTIFICATION
  REQUIRE_SIGNATURE_TYPE
}

enum WorkflowStatus {
  IN_PROGRESS
  COMPLETED
  REJECTED
  CANCELLED
  ON_HOLD
}

enum Priority {
  LOW
  NORMAL
  HIGH
  CRITICAL
}

enum ImpactLevel {
  NONE
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum StageStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  SKIPPED
  ESCALATED
}

enum StageOutcome {
  APPROVED
  REJECTED
  CHANGES_REQUESTED
  DELEGATED
  SKIPPED
}

enum AssignmentType {
  REQUIRED
  OPTIONAL
  OBSERVER
}

enum ApprovalAction {
  APPROVED
  REJECTED
  CHANGES_REQUESTED
  DELEGATED
  SKIPPED
}

enum WorkflowEventType {
  WORKFLOW_STARTED
  STAGE_STARTED
  STAGE_COMPLETED
  APPROVAL_GRANTED
  APPROVAL_REJECTED
  CHANGES_REQUESTED
  DELEGATED
  ESCALATED
  DEADLINE_EXTENDED
  WORKFLOW_COMPLETED
  WORKFLOW_CANCELLED
  REMINDER_SENT
  RULE_EVALUATED
  STAGE_ADDED
  STAGE_SKIPPED
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  ESCALATED
  DELEGATED
}

/// ECO Type classification
enum ECOType {
  CORRECTIVE
  IMPROVEMENT
  COST_REDUCTION
  COMPLIANCE
  CUSTOMER_REQUEST
  ENGINEERING
  EMERGENCY
}

/// ECO Priority levels
enum ECOPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
  EMERGENCY
}

/// ECO Status lifecycle
enum ECOStatus {
  REQUESTED
  UNDER_REVIEW
  PENDING_CRB
  CRB_APPROVED
  IMPLEMENTATION
  VERIFICATION
  COMPLETED
  REJECTED
  CANCELLED
  ON_HOLD
}

/// Effectivity type definitions
enum EffectivityType {
  BY_DATE
  BY_SERIAL_NUMBER
  BY_WORK_ORDER
  BY_LOT_BATCH
  IMMEDIATE
}

/// Change Review Board decision options
enum CRBDecision {
  APPROVED
  REJECTED
  DEFERRED
  REQUEST_MORE_INFO
}

/// Document update status
enum DocUpdateStatus {
  PENDING
  IN_PROGRESS
  AWAITING_APPROVAL
  APPROVED
  COMPLETED
}

/// ECO Task type classification
enum ECOTaskType {
  DOCUMENT_UPDATE
  ROUTING_UPDATE
  BOM_UPDATE
  PART_MASTER_UPDATE
  TOOLING_CREATION
  EQUIPMENT_SETUP
  TRAINING
  VERIFICATION
  FIRST_ARTICLE
  PROCESS_VALIDATION
}

/// ECO Task status options
enum ECOTaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  BLOCKED
  CANCELLED
}

/// Attachment type classification
enum AttachmentType {
  SUPPORTING_DOC
  DRAWING_CURRENT
  DRAWING_PROPOSED
  CALCULATION
  TEST_RESULT
  SUPPLIER_DOC
  CUSTOMER_CORRESPONDENCE
  ANALYSIS_REPORT
  PHOTO
  OTHER
}

/// ECO Event types for audit trail
enum ECOEventType {
  ECO_CREATED
  STATUS_CHANGED
  CRB_REVIEW_SCHEDULED
  CRB_REVIEW_COMPLETED
  TASK_CREATED
  TASK_COMPLETED
  DOCUMENT_UPDATED
  EFFECTIVITY_SET
  ECO_COMPLETED
  ECO_CANCELLED
  COMMENT_ADDED
  ATTACHMENT_ADDED
}

/// ECO Relation types
enum ECORelationType {
  DEPENDS_ON
  BLOCKS
  RELATED_TO
  SUPERSEDES
  DUPLICATE_OF
  CHILD_OF
}

/// Voting rule options
enum VotingRule {
  UNANIMOUS
  MAJORITY
  SUPERMAJORITY
  CONSENSUS
}

/// Comment context types
enum CommentContextType {
  DOCUMENT
  STEP
  PARAMETER
  CHARACTERISTIC
  IMAGE
  VIDEO
  TEXT_SECTION
}

/// Comment status options
enum CommentStatus {
  OPEN
  RESOLVED
  ARCHIVED
}

/// Comment priority levels
enum CommentPriority {
  LOW
  MEDIUM
  HIGH
}

/// Reaction type options
enum ReactionType {
  LIKE
  AGREE
  DISAGREE
  HELPFUL
  QUESTION
}

/// Annotation type options
enum AnnotationType {
  ARROW
  CALLOUT
  HIGHLIGHT
  TEXT_LABEL
  FREEHAND
  RECTANGLE
  CIRCLE
  LINE
  BLUR
  STICKY_NOTE
  STRIKETHROUGH
  UNDERLINE
  STAMP
}

/// Review type options
enum ReviewType {
  TECHNICAL
  EDITORIAL
  QUALITY
  SAFETY
  COMPLIANCE
  GENERAL
}

/// Review status options
enum ReviewStatus {
  NOT_STARTED
  IN_PROGRESS
  FEEDBACK_PROVIDED
  COMPLETED
  OVERDUE
}

/// Review recommendation options
enum ReviewRecommendation {
  APPROVE
  REQUEST_CHANGES
  REJECT
  NO_RECOMMENDATION
}

/// Activity type options
enum ActivityType {
  CREATED
  EDITED
  COMMENTED
  ANNOTATED
  REVIEW_ASSIGNED
  REVIEW_COMPLETED
  APPROVED
  REJECTED
  VERSION_CREATED
  LINKED
  ECO_LINKED
  SHARED
  EXPORTED
  VIEWED
}

/// Notification type options
enum NotificationType {
  MENTION
  COMMENT_REPLY
  REVIEW_ASSIGNED
  DOCUMENT_UPDATED
  APPROVAL_GRANTED
  APPROVAL_REJECTED
  COMMENT_RESOLVED
  DEADLINE_APPROACHING
  REVIEW_COMPLETED
}

/// Conflict resolution type options
enum ResolutionType {
  ACCEPT_YOURS
  ACCEPT_THEIRS
  MANUAL_MERGE
  AUTO_MERGED
}

/// Storage class for lifecycle management
enum StorageClass {
  HOT
  WARM
  COLD
  ARCHIVE
}

/// CDN cache status
enum CacheStatus {
  CACHED
  NOT_CACHED
  INVALIDATED
  EXPIRED
}

/// File upload method
enum UploadMethod {
  DIRECT
  MULTIPART
  PRESIGNED
  RESUMABLE
}

/// File processing status
enum ProcessingStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
}

/// File attachment types for cloud storage
enum FileAttachmentType {
  PRIMARY
  ATTACHMENT
  THUMBNAIL
  PREVIEW
  EXPORT
  BACKUP
  TEMP
}

/// Version change types
enum VersionChangeType {
  CREATE
  UPDATE
  RENAME
  METADATA
  RESTORE
  MIGRATE
}

/// Backup frequency options
enum BackupFrequency {
  REAL_TIME
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
  CUSTOM
}

/// Backup types
enum BackupType {
  FULL
  INCREMENTAL
  DIFFERENTIAL
  SNAPSHOT
}

/// Backup status
enum BackupStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
  PARTIAL
}

/// File access types for logging
enum AccessType {
  READ
  WRITE
  DELETE
  METADATA
  LIST
  PREVIEW
}

/// Upload status for multipart uploads
enum UploadStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
  EXPIRED
}

enum TimeTrackingGranularity {
  NONE
  WORK_ORDER
  OPERATION
}

enum CostingModel {
  LABOR_HOURS
  MACHINE_HOURS
  BOTH
}

enum MultiTaskingMode {
  CONCURRENT
  SPLIT_ALLOCATION
}

enum ApprovalFrequency {
  DAILY
  WEEKLY
  BIWEEKLY
  NONE
}

enum TimeType {
  DIRECT_LABOR
  INDIRECT
  MACHINE
}

enum TimeEntrySource {
  MANUAL
  KIOSK
  MOBILE
  MACHINE_AUTO
  API
  HISTORIAN
}

enum TimeEntryStatus {
  ACTIVE
  COMPLETED
  PENDING_APPROVAL
  APPROVED
  REJECTED
  EXPORTED
}

enum IndirectCategory {
  BREAK
  LUNCH
  TRAINING
  MEETING
  MAINTENANCE
  SETUP
  CLEANUP
  WAITING
  ADMINISTRATIVE
  OTHER
}

enum TimeValidationRuleType {
  MAX_DURATION
  MIN_DURATION
  MISSING_CLOCK_OUT
  CONCURRENT_ENTRIES
  OVERTIME_THRESHOLD
  INVALID_TIME_RANGE
}

/// Types of security events that can be monitored
enum SecurityEventType {
  AUTH_FAILURE
  PRIVILEGE_ESCALATION
  EMERGENCY_ACCESS
  UNUSUAL_PATTERN
  MULTIPLE_SESSIONS
  PERMISSION_DENIED
  SUSPICIOUS_IP
  SESSION_HIJACK
  BRUTE_FORCE
  ACCOUNT_LOCKOUT
  DATA_EXPORT
  ADMIN_ACTION
  SYSTEM_ACCESS
}

/// Severity levels for security events
enum SecuritySeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

/// Types of audit reports that can be generated
enum ReportType {
  USER_ACCESS
  PERMISSION_CHANGES
  SECURITY_EVENTS
  SESSION_ANALYTICS
  COMPLIANCE_SOX
  COMPLIANCE_GDPR
  COMPLIANCE_ISO27001
  USAGE_ANALYTICS
  TREND_ANALYSIS
}

/// Status of report generation
enum ReportStatus {
  GENERATING
  COMPLETED
  FAILED
  EXPIRED
}

/// Types of permission changes that can occur
enum PermissionChangeType {
  ROLE_ASSIGNED
  ROLE_REMOVED
  PERMISSION_GRANTED
  PERMISSION_REVOKED
  ROLE_MODIFIED
  SITE_ACCESS_GRANTED
  SITE_ACCESS_REVOKED
  EMERGENCY_OVERRIDE
  BULK_CHANGE
}

enum SsoProviderType {
  SAML
  OIDC
  AZURE_AD
  LDAP
  INTERNAL
}

enum AuthenticationEventType {
  LOGIN
  LOGOUT
  REFRESH
  FAILURE
  PROVIDER_ERROR
  SESSION_TIMEOUT
  FORCED_LOGOUT
}

// ============================================================================
// ROLE TEMPLATE SYSTEM - GitHub Issue #125
// ============================================================================

/// Role Template Categories for Manufacturing
enum RoleTemplateCategory {
  PRODUCTION
  QUALITY
  MAINTENANCE
  MANAGEMENT
  ADMINISTRATION
  ENGINEERING
  SAFETY
  COMPLIANCE
  CUSTOM
}

/// Role Template Actions for Audit Trail
enum RoleTemplateAction {
  TEMPLATE_CREATED
  TEMPLATE_UPDATED
  TEMPLATE_DELETED
  TEMPLATE_ACTIVATED
  TEMPLATE_DEACTIVATED
  ROLE_INSTANTIATED
  ROLE_CUSTOMIZED
  PERMISSIONS_MODIFIED
  USER_ASSIGNED
  USER_REMOVED
}

/// Role Template - Master template definition for role configurations
model RoleTemplate {
  id              String                    @id @default(cuid())
  templateCode    String                    @unique
  templateName    String
  description     String?
  category        RoleTemplateCategory
  isActive        Boolean                   @default(true)
  isGlobal        Boolean                   @default(true)
  version         String                    @default("1.0.0")
  metadata        Json?                     // Manufacturing-specific configuration
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
  createdBy       String
  updatedBy       String?

  // Relationships
  permissions     RoleTemplatePermission[]
  instances       RoleTemplateInstance[]
  usageLogs       RoleTemplateUsageLog[]
  creator         User                      @relation("RoleTemplateCreator", fields: [createdBy], references: [id])
  updater         User?                     @relation("RoleTemplateUpdater", fields: [updatedBy], references: [id])

  @@index([templateCode])
  @@index([category])
  @@index([isActive])
  @@index([isGlobal])
  @@map("role_templates")
}

/// Role Template Permissions - Defines permissions included in each template
model RoleTemplatePermission {
  id           String       @id @default(cuid())
  templateId   String
  permissionId String
  isRequired   Boolean      @default(true)
  isOptional   Boolean      @default(false)
  metadata     Json?        // Additional permission context
  createdAt    DateTime     @default(now())

  // Relationships
  template     RoleTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  permission   Permission   @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([templateId, permissionId])
  @@index([templateId])
  @@index([permissionId])
  @@map("role_template_permissions")
}

/// Role Template Instance - Tracks when templates are instantiated into actual roles
model RoleTemplateInstance {
  id                String              @id @default(cuid())
  templateId        String
  roleId            String              @unique
  instanceName      String?
  siteId            String?
  customPermissions Json?               // Site-specific permission adjustments
  isActive          Boolean             @default(true)
  instantiatedAt    DateTime            @default(now())
  instantiatedBy    String
  metadata          Json?               // Instance-specific metadata

  // Relationships
  template          RoleTemplate        @relation(fields: [templateId], references: [id])
  role              Role                @relation(fields: [roleId], references: [id], onDelete: Cascade)
  site              Site?               @relation(fields: [siteId], references: [id])
  instantiator      User                @relation(fields: [instantiatedBy], references: [id])
  usageLogs         RoleTemplateUsageLog[]

  @@index([templateId])
  @@index([roleId])
  @@index([siteId])
  @@index([instantiatedBy])
  @@map("role_template_instances")
}

/// Role Template Usage Log - Audit trail for template operations
model RoleTemplateUsageLog {
  id            String                    @id @default(cuid())
  templateId    String?
  instanceId    String?
  action        RoleTemplateAction
  performedBy   String
  targetUserId  String?
  siteId        String?
  details       Json?
  timestamp     DateTime                  @default(now())

  // Relationships
  template      RoleTemplate?             @relation(fields: [templateId], references: [id])
  instance      RoleTemplateInstance?     @relation(fields: [instanceId], references: [id])
  performer     User                      @relation("RoleTemplateLogPerformer", fields: [performedBy], references: [id])
  targetUser    User?                     @relation("RoleTemplateLogTarget", fields: [targetUserId], references: [id])
  site          Site?                     @relation(fields: [siteId], references: [id])

  @@index([templateId])
  @@index([instanceId])
  @@index([performedBy])
  @@index([targetUserId])
  @@index([timestamp])
  @@map("role_template_usage_logs")
}

/// Unit types for different measurement categories
enum UnitType {
  QUANTITY        // Count/Each
  MASS           // Weight measurements
  LENGTH         // Distance/dimensional measurements
  VOLUME         // Volume/capacity measurements
  AREA           // Surface area measurements
  TIME           // Time duration measurements
  TEMPERATURE    // Temperature measurements
  PRESSURE       // Pressure measurements
  FORCE          // Force measurements
  ENERGY         // Energy measurements
  POWER          // Power measurements
  VELOCITY       // Speed measurements
  ANGLE          // Angular measurements
  OTHER          // Other measurement types
}

/// System of measurement classification
enum SystemOfMeasure {
  METRIC         // Metric system (SI)
  IMPERIAL       // Imperial/US customary system
  SI             // International System of Units
  OTHER          // Other measurement systems
}
