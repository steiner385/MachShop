generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../docs/erd.md"
  theme    = "default"
}

generator markdown {
  provider = "prisma-markdown"
  output   = "../docs/generated/prisma-markdown"
  title    = "MachShop MES Schema Documentation"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Enterprise {
  id             String   @id @default(cuid())
  enterpriseCode String   @unique
  enterpriseName String
  description    String?
  headquarters   String?
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  sites          Site[]

  @@map("enterprises")
}

model Site {
  id                        String                     @id @default(cuid())
  siteCode                  String                     @unique
  siteName                  String
  location                  String?
  enterpriseId              String?
  isActive                  Boolean                    @default(true)
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  areas                     Area[]
  auditReports              AuditReport[]
  equipment                 Equipment[]
  indirectCostCodes         IndirectCostCode[]
  ncrs                      NCR[]
  operations                Operation[]
  partAvailability          PartSiteAvailability[]
  permissionChangeLogs      PermissionChangeLog[]
  permissionUsageLogs       PermissionUsageLog[]
  productionSchedules       ProductionSchedule[]
  routingTemplates          RoutingTemplate[]
  routings                  Routing[]
  securityEvents            SecurityEvent[]
  enterprise                Enterprise?                @relation(fields: [enterpriseId], references: [id])
  timeTrackingConfiguration TimeTrackingConfiguration?
  userSiteRoles             UserSiteRole[]
  workOrders                WorkOrder[]

  // Role Template relationships
  roleTemplateInstances     RoleTemplateInstance[]
  roleTemplateUsageLogs     RoleTemplateUsageLog[]

  // Time Entry Management Relations (Issue #51)
  autoStopConfiguration     AutoStopConfiguration?

  // Location Management Relations (Issue #207)
  locations                 Location[]

  // Temporal permissions audit trail
  temporalAccessLogs        TemporalAccessLog[]

  // Department Management Relations (Issue #209)
  departments               Department[]

  // Workflow Configuration Relations (Issue #40)
  workflowConfiguration     SiteWorkflowConfiguration? @relation("SiteWorkflowConfig")

  // Andon System Relations (Issue #171)
  andonAlerts               AndonAlert[]
  andonIssueTypes           AndonIssueType[]
  andonEscalationRules      AndonEscalationRule[]
  andonSiteConfigurations   AndonSiteConfiguration[]
  andonNotificationTemplates AndonNotificationTemplate[]
  andonSystemSettings       AndonSystemSettings[]

  // Serial Number Format Configuration Relations (Issue #149)
  serialNumberFormatConfigs SerialNumberFormatConfig[]

  // NCR Workflow Configuration Relations (Issue #55)
  ncrWorkflowConfigs NCRWorkflowConfig[] @relation("NCRWorkflowConfigs")

  // Plugin System Relations (Issue #75)
  plugins               Plugin[]

  // Plugin Registry Relations (Issue #79)
  pluginInstallations   PluginInstallation[]

  // Quality Configuration Relations (Issue #44)
  ncrDispositionRules   NCRDispositionRule[]  @relation("NCRDispositionRules")
  electronicSignatureRequirements ElectronicSignatureRequirement[] @relation("ElectronicSignatureRequirements")

  // Quality Analytics Relations (Issue #58)
  qualityConfiguration  QualityConfiguration? @relation("QualityAnalyticsConfig")
  qualityMetrics        QualityMetric[]       @relation("QualityMetrics")
  paretoAnalysis        ParetoAnalysis[]      @relation("ParetoAnalysis")
  qualityAlerts         QualityAlert[]        @relation("QualityAlerts")
  qualityCoqTracking    QualityCoqTracking[]  @relation("QualityCoqTracking")

  // CAPA System Relations (Issue #56)
  capas                 CAPA[]                @relation("SiteCapas")

  // Material Movement & Logistics Management Relations (Issue #64)
  movementTypes         MovementType[]        @relation("MovementTypes")
  forklifts             Forklift[]            @relation("Forklifts")
  containers            Container[]           @relation("Containers")
  carrierAccounts       CarrierAccount[]      @relation("CarrierAccounts")

  // Test Cell & Engine Acceptance Testing Relations (Issue #233)
  testCells             TestCell[]            @relation("TestCells")

  // 8D Problem Solving Framework Relations (Issue #57)
  eightDConfigs         EightDConfig[]

  // MRP System Relations (Issue #84)
  mrpRuns               MRPRun[]              @relation("MRPRuns")

  @@index([enterpriseId])
  @@map("sites")
}

model Area {
  id          String       @id @default(cuid())
  areaCode    String       @unique
  areaName    String
  description String?
  siteId      String
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  site        Site         @relation(fields: [siteId], references: [id])
  equipment   Equipment[]
  workCenters WorkCenter[]
  stagingLocations StagingLocation[]
  locations   Location[]

  // Andon System Relations (Issue #171)
  andonAlerts AndonAlert[]

  @@index([siteId])
  @@map("areas")
}

model Department {
  id                String      @id @default(cuid())
  departmentCode    String      @unique   // e.g., "ENG", "QA", "PROD", "MFG"
  departmentName    String                 // e.g., "Engineering", "Quality Assurance"
  description       String?

  // Organizational hierarchy
  parentDepartmentId String?
  parentDepartment  Department? @relation("DepartmentHierarchy", fields: [parentDepartmentId], references: [id])
  childDepartments  Department[] @relation("DepartmentHierarchy")

  // Optional associations
  siteId            String?
  site              Site?       @relation(fields: [siteId], references: [id])

  // Cost center tracking
  costCenter        String?
  budgetCode        String?

  // Department manager
  managerId         String?     @unique
  manager           User?       @relation("DepartmentManager", fields: [managerId], references: [id])

  isActive          Boolean     @default(true)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relations back to entities
  users                       User[]                  @relation("UserDepartment")
  personnelInfoExchanges      PersonnelInfoExchange[] @relation("PersonnelDepartment")
  ecoRequestorDepts           EngineeringChangeOrder[] @relation("ECORequestorDept")
  ecoTaskAssignments          ECOTask[]               @relation("ECOTaskDept")
  icdChangeRequestDepts       ICDChangeRequest[]      @relation("ICDChangeRequestDept")

  @@index([departmentCode])
  @@index([siteId])
  @@index([parentDepartmentId])
  @@index([managerId])
  @@map("departments")
}

model User {
  id                        String                          @id @default(cuid())
  username                  String                          @unique
  email                     String                          @unique
  firstName                 String?
  lastName                  String?
  passwordHash              String
  isActive                  Boolean                         @default(true)
  roles                     String[]
  permissions               String[]
  lastLoginAt               DateTime?
  createdAt                 DateTime                        @default(now())
  updatedAt                 DateTime                        @updatedAt
  employeeNumber            String?                         @unique
  personnelClassId          String?
  hireDate                  DateTime?
  terminationDate           DateTime?
  phone                     String?
  emergencyContact          String?
  emergencyPhone            String?
  department                String?
  departmentId              String?
  supervisorId              String?
  costCenter                String?
  laborRate                 Float?
  auditLogs                 AuditLog[]
  generatedAuditReports     AuditReport[]

  // Role Template relationships
  createdRoleTemplates      RoleTemplate[]              @relation("RoleTemplateCreator")
  updatedRoleTemplates      RoleTemplate[]              @relation("RoleTemplateUpdater")
  instantiatedTemplates     RoleTemplateInstance[]
  templateUsageLogsAsPerformer RoleTemplateUsageLog[]   @relation("RoleTemplateLogPerformer")
  templateUsageLogsAsTarget    RoleTemplateUsageLog[]   @relation("RoleTemplateLogTarget")
  authenticationEvents      AuthenticationEvent[]
  dispatchedWorkOrders      DispatchLog[]                   @relation("DispatchAssignedTo")
  createdDocumentTemplates  DocumentTemplate[]              @relation("DocumentTemplateCreatedBy")
  updatedDocumentTemplates  DocumentTemplate[]              @relation("DocumentTemplateUpdatedBy")
  invalidatedSignatures     ElectronicSignature[]           @relation("ElectronicSignatureInvalidatedBy")
  electronicSignatures      ElectronicSignature[]           @relation("ElectronicSignatureUser")
  equipmentLogs             EquipmentLog[]
  inspectionExecutions      InspectionExecution[]           @relation("InspectionExecutionInspector")
  approvedInspectionPlans   InspectionPlan[]                @relation("InspectionPlanApprovedBy")
  createdInspectionPlans    InspectionPlan[]                @relation("InspectionPlanCreatedBy")
  updatedInspectionPlans    InspectionPlan[]                @relation("InspectionPlanUpdatedBy")
  laborTimeEntries          LaborTimeEntry[]
  assignedNcrs              NCR[]                           @relation("AssignedTo")
  ncrReports                NCR[]                           @relation("CreatedBy")
  permissionChangesChanger  PermissionChangeLog[]           @relation("PermissionChangeChanger")
  permissionChangesTarget   PermissionChangeLog[]           @relation("PermissionChangeTarget")
  permissionUsageLogs       PermissionUsageLog[]
  availability              PersonnelAvailability[]
  certifications            PersonnelCertification[]
  skills                    PersonnelSkillAssignment[]
  workCenterAssignments     PersonnelWorkCenterAssignment[]
  qualityInspections        QualityInspection[]
  routingTemplates          RoutingTemplate[]
  resolvedSecurityEvents    SecurityEvent[]                 @relation("SecurityEventResolvedBy")
  securityEvents            SecurityEvent[]
  completedSetupExecutions  SetupExecution[]                @relation("SetupExecutionCompletedBy")
  startedSetupExecutions    SetupExecution[]                @relation("SetupExecutionStartedBy")
  approvedSetupSheets       SetupSheet[]                    @relation("SetupSheetApprovedBy")
  createdSetupSheets        SetupSheet[]                    @relation("SetupSheetCreatedBy")
  updatedSetupSheets        SetupSheet[]                    @relation("SetupSheetUpdatedBy")
  sopAcknowledgments        SOPAcknowledgment[]             @relation("SOPAcknowledgmentUser")
  sopAudits                 SOPAudit[]                      @relation("SOPAuditAuditor")
  ssoSessions               SsoSession[]
  approvedSOPs              StandardOperatingProcedure[]    @relation("SOPApprovedBy")
  createdSOPs               StandardOperatingProcedure[]    @relation("SOPCreatedBy")
  updatedSOPs               StandardOperatingProcedure[]    @relation("SOPUpdatedBy")
  toolCalibrationRecords    ToolCalibrationRecord[]         @relation("ToolCalibrationPerformedBy")
  approvedToolDrawings      ToolDrawing[]                   @relation("ToolDrawingApprovedBy")
  createdToolDrawings       ToolDrawing[]                   @relation("ToolDrawingCreatedBy")
  updatedToolDrawings       ToolDrawing[]                   @relation("ToolDrawingUpdatedBy")
  toolMaintenanceRecords    ToolMaintenanceRecord[]         @relation("ToolMaintenancePerformedBy")
  toolUsageLogs             ToolUsageLog[]                  @relation("ToolUsageLogUsedBy")
  userRoles                 UserRole[]
  userSessionLogs           UserSessionLog[]
  userSiteRoles             UserSiteRole[]
  personnelClass            PersonnelClass?                 @relation(fields: [personnelClassId], references: [id])
  supervisor                User?                           @relation("SupervisorRelation", fields: [supervisorId], references: [id])
  subordinates              User[]                          @relation("SupervisorRelation")
  departmentRelation        Department?                     @relation("UserDepartment", fields: [departmentId], references: [id])
  workInstructionExecutions WorkInstructionExecution[]      @relation("WIExecutionOperator")
  signedStepExecutions      WorkInstructionStepExecution[]  @relation("WIStepExecutionSignedBy")
  approvedWorkInstructions  WorkInstruction[]               @relation("WorkInstructionApprovedBy")
  createdWorkInstructions   WorkInstruction[]               @relation("WorkInstructionCreatedBy")
  updatedWorkInstructions   WorkInstruction[]               @relation("WorkInstructionUpdatedBy")
  assignedWorkOrders        WorkOrder[]                     @relation("AssignedTo")
  createdWorkOrders         WorkOrder[]                     @relation("CreatedBy")
  workPerformanceRecords    WorkPerformance[]               @relation("WorkPerformancePersonnel")

  // Torque Management relationships
  createdTorqueSpecs        TorqueSpecification[]           @relation("TorqueSpecCreator")
  approvedTorqueSpecs       TorqueSpecification[]           @relation("TorqueSpecApprover")
  torqueEventOperations     TorqueEvent[]                   @relation("TorqueEventOperator")
  torqueEventSupervisions   TorqueEvent[]                   @relation("TorqueEventSupervisor")
  torqueEventReworks        TorqueEvent[]                   @relation("TorqueEventRework")

  // Kitting System relationships
  kitsCreated               Kit[]                           @relation("KitCreatedBy")
  kitsStaged                Kit[]                           @relation("KitStagedBy")
  kitsIssued                Kit[]                           @relation("KitIssuedBy")
  vendorKitInspections      VendorKitInspection[]
  vendorKitHistory          VendorKitHistory[]
  kitsReceived              Kit[]                           @relation("KitIssuedTo")
  kitsReturned              Kit[]                           @relation("KitReturnedBy")
  kitStatusChanges          KitStatusHistory[]              @relation("KitStatusChanged")
  shortageAlertsAssigned    KitShortageAlert[]              @relation("ShortageAssigned")
  shortageAlertsResolved    KitShortageAlert[]              @relation("ShortageResolved")

  // Expedite workflow relationships
  expeditRequestsCreated    ExpeditRequest[]                @relation("ExpeditRequestedBy")
  expeditRequestsApproved   ExpeditRequest[]                @relation("ExpeditApprovedBy")
  supplierCommunicationsSent SupplierCommunication[]
  shortageResolutionsCreated ShortageResolution[]
  expeditStatusChanges      ExpeditStatusHistory[]

  // OAuth/OIDC relationships
  oidcSessions              OidcSession[]
  // SAML relationships
  samlSessions              SamlSession[]

  // Saviynt Identity Governance relationships
  saviyntUserMapping        SaviyntUserMapping?

  // Build Record Relationships
  buildRecordsCreated       BuildRecord[]                   @relation("BuildRecordCreatedBy")
  buildRecordsAssigned      BuildRecord[]                   @relation("BuildRecordAssignedTo")
  buildRecordsQualityApproved BuildRecord[]                 @relation("BuildRecordQualityApprover")
  buildRecordsEngineeringApproved BuildRecord[]             @relation("BuildRecordEngineeringApprover")
  operationOperator         BuildRecordOperation[]          @relation("OperationOperator")
  operationInspector        BuildRecordOperation[]          @relation("OperationInspector")
  operationEngineeringApprover BuildRecordOperation[]       @relation("OperationEngineeringApprover")
  deviationsDetected        BuildDeviation[]                @relation("DeviationDetectedBy")
  deviationsEngineeringApproved BuildDeviation[]            @relation("DeviationEngineeringApprover")
  deviationsQualityApproved BuildDeviation[]               @relation("DeviationQualityApprover")
  deviationsClosed          BuildDeviation[]                @relation("DeviationClosedBy")
  photosCaptured            BuildRecordPhoto[]              @relation("PhotoCapturedBy")
  photosApproved            BuildRecordPhoto[]              @relation("PhotoApprovedBy")
  photosRejected            BuildRecordPhoto[]              @relation("PhotoRejectedBy")
  documentsUploaded         BuildRecordDocument[]           @relation("DocumentUploadedBy")
  documentsApproved         BuildRecordDocument[]           @relation("DocumentApprovedBy")
  statusChanges             BuildRecordStatusHistory[]      @relation("StatusChangedBy")
  buildRecordSignatures     BuildRecordSignature[]          @relation("BuildRecordSigner")
  buildRecordInvalidatedSignatures BuildRecordSignature[]    @relation("BuildRecordSignatureInvalidator")

  // Time Entry Management Relations (Issue #51)
  timeEntryEditsCreated     TimeEntryEdit[]                 @relation("TimeEntryEditEditor")
  timeEntryEditsApproved    TimeEntryEdit[]                 @relation("TimeEntryEditApprover")
  timeEntryApprovals        TimeEntryApproval[]
  timeEntryBatchesSubmitted TimeEntryBatch[]                @relation("TimeEntryBatchEmployee")
  timeEntryBatchesApproved  TimeEntryBatch[]                @relation("TimeEntryBatchApprover")
  timeEntryLocks            TimeEntryLock[]

  // Part Interchangeability Framework relationships
  createdInterchangeabilityGroups PartInterchangeabilityGroup[] @relation("InterchangeabilityGroupCreator")
  createdPartSubstitutions  PartSubstitution[]              @relation("PartSubstitutionCreator")
  requestedApprovals        InterchangeabilityApproval[]    @relation("ApprovalRequester")
  approvedApprovals         InterchangeabilityApproval[]    @relation("ApprovalApprover")
  approvedSubstitutions     WorkOrderPartSubstitution[]     @relation("SubstitutionApprover")
  createdSubstitutions      WorkOrderPartSubstitution[]     @relation("SubstitutionCreator")
  auditLogActions           InterchangeabilityAuditLog[]    @relation("AuditLogPerformer")

  // Temporal permissions audit trail
  temporalAccessLogs        TemporalAccessLog[]

  // Department Management Relations (Issue #209)
  managedDepartments             Department[]              @relation("DepartmentManager")

  // Equipment & Maintenance Management Relations (Issue #94)
  assignedMaintenanceWorkOrders  MaintenanceWorkOrder[]    @relation("MaintenanceWorkOrderAssignedTo")
  createdMaintenanceWorkOrders   MaintenanceWorkOrder[]    @relation("MaintenanceWorkOrderCreatedBy")
  updatedMaintenanceWorkOrders   MaintenanceWorkOrder[]    @relation("MaintenanceWorkOrderUpdatedBy")
  laborEntries                   LaborEntry[]              @relation("LaborEntryTechnician")
  reportedDowntimeEvents         DowntimeEvent[]           @relation("DowntimeEventReportedBy")

  // Andon System Relations (Issue #171)
  andonAlertsRaised         AndonAlert[]                    @relation("AndonAlertsRaised")
  andonAlertsAssigned       AndonAlert[]                    @relation("AndonAlertsAssigned")
  andonAlertsResolved       AndonAlert[]                    @relation("AndonAlertsResolved")
  andonIssueTypes           AndonIssueType[]
  andonEscalationRules      AndonEscalationRule[]
  andonConfigurations       AndonConfiguration[]
  andonSiteConfigurations   AndonSiteConfiguration[]
  andonSystemSettings       AndonSystemSettings[]

  // QMS Compliance Framework Relations (Issue #102)
  documentsApprovedBy       ControlledDocument[]            @relation("DocumentApprovedBy")
  documentDistribution      ControlledDocument[]            @relation("DocumentDistribution")
  documentsCreated          ControlledDocument[]            @relation("DocumentCreatedBy")
  documentApprovalsGiven    DocumentApproval[]
  coursesCreated            TrainingCourse[]                @relation("CourseCreatedBy")
  trainingRecordsAsTrainee  TrainingRecord[]                @relation("TrainingRecordTrainee")
  trainingRecordsAsInstructor TrainingRecord[]              @relation("TrainingRecordInstructor")

  // QMS Phase 2: Audit, CAPA, Management Review, Change Management
  auditsLead                InternalAudit[]                 @relation("AuditLeadAuditor")
  auditsAsAuditee           InternalAudit[]                 @relation("Auditee")
  auditsClosed              InternalAudit[]                 @relation("AuditClosedBy")
  auditsCreated             InternalAudit[]                 @relation("AuditCreatedBy")
  findingsVerified          AuditFinding[]
  capasAssigned             CorrectiveAction[]              @relation("CAAssignedTo")
  capasVerified             CorrectiveAction[]              @relation("CAVerifiedBy")
  capasCreated              CorrectiveAction[]              @relation("CACreatedBy")
  caAuditTrail              CorrectiveActionAudit[]
  caApprovalsApproved       CAApprovalRequest[]
  caApprovalsRequested      CAApprovalRequest[]             @relation("CAApprovalRequester")
  reviewsChaired            ManagementReview[]              @relation("ReviewChairperson")
  reviewActionsAssigned     ManagementReviewAction[]
  reviewsCreated            ManagementReview[]              @relation("ReviewCreatedBy")
  changesApproved           ChangeRequest[]                 @relation("ChangeApprovedBy")
  changesCreated            ChangeRequest[]                 @relation("ChangeCreatedBy")

  // Data Collection & Work Instructions Relations (Issue #45, #58, #59)
  dataCollectionFormsCreated     DataCollectionForm[]        @relation("DataCollectionFormCreated")
  dataCollectionSubmissions      DataCollectionSubmission[]  @relation("DataCollectionSubmissionCreated")
  workInstructionViews           WorkInstructionView[]       @relation("UserWorkInstructionViews")
  ospInspectionsPerformed        OSPInspection[]             @relation("OSPInspections")
  ospInspectionsApproved         OSPInspection[]             @relation("OSPInspectionApprovals")

  // CAPA System Relations (Issue #56)
  capasOwned                     CAPA[]                      @relation("CapaOwner")
  capasCreatedBy                 CAPA[]                      @relation("CapaCreatedBy")
  actionsOwned                   CapaAction[]                @relation("ActionOwner")
  verificationsPerformed         CapaVerification[]

  // Material Movement & Logistics Management Relations (Issue #64)
  forkliftRequestsAssigned       ForkliftMoveRequest[]       @relation("ForkliftOperator")
  forkliftCurrentOperation       Forklift[]                  @relation("ForkliftCurrentOperator")

  // Test Cell & Engine Acceptance Testing Relations (Issue #233)
  testRunsAsOperator             TestRun[]                   @relation("TestRunOperator")
  testRunsAsSupervisor           TestRun[]                   @relation("TestRunSupervisor")
  testRunsQualityApproved        TestRun[]                   @relation("TestRunQualityApprover")
  testCertificatesIssued         TestCertificate[]
  testRunStatusChanges           TestRunStatusHistory[]

  // 8D Problem Solving Framework Relations (Issue #57)
  eightDReportsCreated           EightDReport[]              @relation("EightDCreator")
  eightDReportsLed               EightDReport[]              @relation("EightDLeader")
  eightDTeamMemberships          EightDTeamMember[]
  eightDAttachmentsUploaded      EightDAttachment[]
  eightDApprovalsRequested       EightDApproval[]

  @@index([employeeNumber])
  @@index([personnelClassId])
  @@index([supervisorId])
  @@index([departmentId])
  @@map("users")
}

model PersonnelClass {
  id             String                   @id @default(cuid())
  classCode      String                   @unique
  className      String
  description    String?
  level          Int
  parentClassId  String?
  isActive       Boolean                  @default(true)
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt
  parentClass    PersonnelClass?          @relation("PersonnelClassHierarchy", fields: [parentClassId], references: [id])
  childClasses   PersonnelClass[]         @relation("PersonnelClassHierarchy")
  qualifications PersonnelQualification[]
  personnel      User[]

  @@index([parentClassId])
  @@index([level])
  @@map("personnel_classes")
}

model PersonnelQualification {
  id                   String                   @id @default(cuid())
  qualificationCode    String                   @unique
  qualificationName    String
  description          String?
  qualificationType    QualificationType
  issuingOrganization  String?
  validityPeriodMonths Int?
  requiresRenewal      Boolean                  @default(false)
  personnelClassId     String?
  isActive             Boolean                  @default(true)
  createdAt            DateTime                 @default(now())
  updatedAt            DateTime                 @updatedAt
  certifications       PersonnelCertification[]
  personnelClass       PersonnelClass?          @relation(fields: [personnelClassId], references: [id])

  @@index([personnelClassId])
  @@index([qualificationType])
  @@map("personnel_qualifications")
}

model PersonnelCertification {
  id                  String                 @id @default(cuid())
  personnelId         String
  qualificationId     String
  certificationNumber String?
  issuedDate          DateTime
  expirationDate      DateTime?
  status              CertificationStatus    @default(ACTIVE)
  attachmentUrls      String[]
  verifiedBy          String?
  verifiedAt          DateTime?
  notes               String?
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  personnel           User                   @relation(fields: [personnelId], references: [id])
  qualification       PersonnelQualification @relation(fields: [qualificationId], references: [id])

  @@unique([personnelId, qualificationId])
  @@index([personnelId])
  @@index([qualificationId])
  @@index([expirationDate])
  @@index([status])
  @@map("personnel_certifications")
}

model PersonnelSkill {
  id               String                     @id @default(cuid())
  skillCode        String                     @unique
  skillName        String
  description      String?
  skillCategory    SkillCategory
  isActive         Boolean                    @default(true)
  createdAt        DateTime                   @default(now())
  updatedAt        DateTime                   @updatedAt
  skillAssignments PersonnelSkillAssignment[]

  @@index([skillCategory])
  @@map("personnel_skills")
}

model PersonnelSkillAssignment {
  id              String          @id @default(cuid())
  personnelId     String
  skillId         String
  competencyLevel CompetencyLevel
  assessedBy      String?
  assessedAt      DateTime?
  lastUsedDate    DateTime?
  certifiedDate   DateTime?
  notes           String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  personnel       User            @relation(fields: [personnelId], references: [id])
  skill           PersonnelSkill  @relation(fields: [skillId], references: [id])

  @@unique([personnelId, skillId])
  @@index([personnelId])
  @@index([skillId])
  @@index([competencyLevel])
  @@map("personnel_skill_assignments")
}

model PersonnelWorkCenterAssignment {
  id            String     @id @default(cuid())
  personnelId   String
  workCenterId  String
  isPrimary     Boolean    @default(false)
  effectiveDate DateTime   @default(now())
  endDate       DateTime?
  certifiedDate DateTime?
  notes         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  personnel     User       @relation(fields: [personnelId], references: [id])
  workCenter    WorkCenter @relation(fields: [workCenterId], references: [id])

  @@unique([personnelId, workCenterId])
  @@index([personnelId])
  @@index([workCenterId])
  @@index([effectiveDate])
  @@map("personnel_work_center_assignments")
}

model PersonnelAvailability {
  id               String           @id @default(cuid())
  personnelId      String
  availabilityType AvailabilityType
  startDateTime    DateTime
  endDateTime      DateTime
  shiftCode        String?
  isRecurring      Boolean          @default(false)
  recurrenceRule   String?
  reason           String?
  approvedBy       String?
  approvedAt       DateTime?
  notes            String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  personnel        User             @relation(fields: [personnelId], references: [id])

  @@index([personnelId])
  @@index([startDateTime])
  @@index([availabilityType])
  @@map("personnel_availability")
}

/// Unit of Measure lookup table for standardizing measurement units across the system
model UnitOfMeasure {
  id                       String            @id @default(cuid())
  code                     String            @unique      // e.g., "EA", "KG", "LB", "M", "FT"
  name                     String                         // e.g., "Each", "Kilogram", "Pound"
  description              String?                        // Detailed description
  unitType                 UnitType                       // Category of measurement
  systemOfMeasure          SystemOfMeasure               // Metric, Imperial, etc.
  isBaseUnit               Boolean           @default(false) // True if this is the base unit for conversions
  conversionFactor         Decimal?                       // Factor to convert to base unit
  baseUnitId               String?                        // Reference to base unit for conversions
  symbol                   String?                        // e.g., "kg", "lb", "m"
  isActive                 Boolean           @default(true)
  sortOrder                Int?                           // For consistent display ordering
  createdAt                DateTime          @default(now())
  updatedAt                DateTime          @updatedAt

  // Self-referential relation for unit conversions
  baseUnit                 UnitOfMeasure?    @relation("UnitConversions", fields: [baseUnitId], references: [id])
  derivedUnits             UnitOfMeasure[]   @relation("UnitConversions")

  // Relations to entities using this UOM - only implemented models
  materialDefinitionsBase     MaterialDefinition[]        @relation("MaterialDefinitionBaseUOM")
  materialDefinitionsAlt      MaterialDefinition[]        @relation("MaterialDefinitionAlternateUOM")
  materialProperties          MaterialProperty[]          @relation("MaterialPropertyUOM")
  materialLots                MaterialLot[]               @relation("MaterialLotUOM")
  materialSublots             MaterialSublot[]            @relation("MaterialSublotUOM")
  materialLotGenealogies      MaterialLotGenealogy[]      @relation("MaterialLotGenealogyUOM")
  materialStateHistories      MaterialStateHistory[]      @relation("MaterialStateHistoryUOM")
  operationParameters         OperationParameter[]        @relation("OperationParameterUOM")
  materialOperationSpecs      MaterialOperationSpecification[] @relation("MaterialOperationSpecificationUOM")
  parts                       Part[]                      @relation("PartUOM")
  bomItems                    BOMItem[]                   @relation("BOMItemUOM")
  routingStepParameters       RoutingStepParameter[]      @relation("RoutingStepParameterUOM")
  scheduleEntries             ScheduleEntry[]             @relation("ScheduleEntryUOM")
  qualityCharacteristics      QualityCharacteristic[]     @relation("QualityCharacteristicUOM")
  productSpecifications       ProductSpecification[]      @relation("ProductSpecificationUOM")
  scheduleConstraints         ScheduleConstraint[]        @relation("ScheduleConstraintUOM")
  inventories                 Inventory[]                 @relation("InventoryUOM")
  materialTransactions        MaterialTransaction[]       @relation("MaterialTransactionUOM")
  kitItems                    KitItem[]                   @relation("KitItemUOM")
  vendorKitItems              VendorKitItem[]             @relation("VendorKitItemUOM")
  locationCapacityUnits       Location[]                  @relation("LocationCapacityUOM")
  locationDimensionUnits      Location[]                  @relation("LocationDimensionUOM")
  plannedOrders               PlannedOrder[]              @relation("PlannedOrderUOM")

  @@index([code])
  @@index([unitType])
  @@index([systemOfMeasure])
  @@index([isActive])
  @@map("units_of_measure")
}

model MaterialClass {
  id                     String               @id @default(cuid())
  classCode              String               @unique
  className              String
  description            String?
  level                  Int
  parentClassId          String?
  requiresLotTracking    Boolean              @default(true)
  requiresSerialTracking Boolean              @default(false)
  requiresExpirationDate Boolean              @default(false)
  shelfLifeDays          Int?
  storageRequirements    String?
  handlingInstructions   String?
  isActive               Boolean              @default(true)
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  parentClass            MaterialClass?       @relation("MaterialClassHierarchy", fields: [parentClassId], references: [id])
  childClasses           MaterialClass[]      @relation("MaterialClassHierarchy")
  materials              MaterialDefinition[]

  @@index([parentClassId])
  @@index([level])
  @@map("material_classes")
}

model MaterialDefinition {
  id                     String               @id @default(cuid())
  materialNumber         String               @unique
  materialName           String
  description            String?
  materialClassId        String
  baseUnitOfMeasure      String
  alternateUnitOfMeasure String?
  baseUnitOfMeasureId    String?              // FK to UnitOfMeasure
  alternateUnitOfMeasureId String?            // FK to UnitOfMeasure
  conversionFactor       Float?
  materialType           MaterialType
  materialGrade          String?
  specification          String?
  minimumStock           Float?
  reorderPoint           Float?
  reorderQuantity        Float?
  leadTimeDays           Int?
  requiresLotTracking    Boolean              @default(true)
  lotNumberFormat        String?
  defaultShelfLifeDays   Int?
  standardCost           Float?
  currency               String?              @default("USD")    // Legacy field (to be deprecated)
  currencyId             String?                                 // FK to Currency
  requiresInspection     Boolean              @default(false)
  inspectionFrequency    String?
  primarySupplierId      String?
  supplierPartNumber     String?
  drawingNumber          String?
  revision               String?
  msdsUrl                String?
  imageUrl               String?
  isActive               Boolean              @default(true)
  isPhantom              Boolean              @default(false)
  isObsolete             Boolean              @default(false)
  obsoleteDate           DateTime?
  replacementMaterialId  String?
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  materialClass          MaterialClass        @relation(fields: [materialClassId], references: [id])
  replacementMaterial    MaterialDefinition?  @relation("MaterialReplacement", fields: [replacementMaterialId], references: [id])
  replacedMaterials      MaterialDefinition[] @relation("MaterialReplacement")
  baseUnitOfMeasureRef   UnitOfMeasure?       @relation("MaterialDefinitionBaseUOM", fields: [baseUnitOfMeasureId], references: [id])
  alternateUnitOfMeasureRef UnitOfMeasure?    @relation("MaterialDefinitionAlternateUOM", fields: [alternateUnitOfMeasureId], references: [id])
  currencyRef            Currency?            @relation("MaterialDefinitionCurrency", fields: [currencyId], references: [id])
  lots                   MaterialLot[]
  properties             MaterialProperty[]

  @@index([materialClassId])
  @@index([materialType])
  @@index([isActive])
  @@index([baseUnitOfMeasureId])
  @@index([alternateUnitOfMeasureId])
  @@index([materialNumber])
  @@map("material_definitions")
}

model MaterialProperty {
  id            String               @id @default(cuid())
  materialId    String
  propertyName  String
  propertyType  MaterialPropertyType
  propertyValue String
  propertyUnit  String?
  propertyUnitId String?              // FK to UnitOfMeasure
  testMethod    String?
  nominalValue  Float?
  minValue      Float?
  maxValue      Float?
  isRequired    Boolean              @default(false)
  isCritical    Boolean              @default(false)
  notes         String?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  material      MaterialDefinition   @relation(fields: [materialId], references: [id])
  unitOfMeasureRef UnitOfMeasure?    @relation("MaterialPropertyUOM", fields: [propertyUnitId], references: [id])

  @@unique([materialId, propertyName])
  @@index([materialId])
  @@index([propertyUnitId])
  @@index([propertyType])
  @@map("material_properties")
}

model MaterialLot {
  id                  String                 @id @default(cuid())
  persistentUuid      String?                @default(uuid()) // Material traceability UUID for supply chain tracking
  lotNumber           String                 @unique
  materialId          String
  supplierLotNumber   String?
  purchaseOrderNumber String?
  heatNumber          String?
  serialNumber        String?
  originalQuantity    Float
  currentQuantity     Float
  unitOfMeasure       String
  unitOfMeasureId     String?              // FK to UnitOfMeasure
  location            String?              // Legacy location field (to be deprecated)
  locationId          String?              // FK to Location
  warehouseId         String?
  manufactureDate     DateTime?
  receivedDate        DateTime
  expirationDate      DateTime?
  shelfLifeDays       Int?
  firstUsedDate       DateTime?
  lastUsedDate        DateTime?
  status              MaterialLotStatus      @default(AVAILABLE)
  state               MaterialLotState       @default(RECEIVED)
  isQuarantined       Boolean                @default(false)
  quarantineReason    String?
  quarantinedAt       DateTime?
  qualityStatus       QualityLotStatus       @default(PENDING)
  inspectionId        String?
  certificationUrls   String[]
  supplierId          String?
  supplierName        String?
  manufacturerId      String?
  manufacturerName    String?
  countryOfOrigin     String?
  unitCost            Float?
  totalCost           Float?
  currency            String?                @default("USD")    // Legacy field (to be deprecated)
  currencyId          String?                                   // FK to Currency
  parentLotId         String?
  isSplit             Boolean                @default(false)
  isMerged            Boolean                @default(false)
  notes               String?
  customAttributes    Json?
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  genealogyAsChild    MaterialLotGenealogy[] @relation("ChildLot")
  genealogyAsParent   MaterialLotGenealogy[] @relation("ParentLot")
  material            MaterialDefinition     @relation(fields: [materialId], references: [id])
  parentLot           MaterialLot?           @relation("LotGenealogy", fields: [parentLotId], references: [id])
  childLots           MaterialLot[]          @relation("LotGenealogy")
  unitOfMeasureRef    UnitOfMeasure?         @relation("MaterialLotUOM", fields: [unitOfMeasureId], references: [id])
  locationRef         Location?              @relation(fields: [locationId], references: [id])
  currencyRef         Currency?              @relation("MaterialLotCurrency", fields: [currencyId], references: [id])
  stateHistory        MaterialStateHistory[]
  sublots             MaterialSublot[]
  kitItems            KitItem[]

  @@index([materialId])
  @@index([lotNumber])
  @@index([persistentUuid])
  @@index([status])
  @@index([state])
  @@index([expirationDate])
  @@index([qualityStatus])
  @@index([parentLotId])
  @@index([unitOfMeasureId])
  @@map("material_lots")
}

model MaterialSublot {
  id            String              @id @default(cuid())
  sublotNumber  String              @unique
  parentLotId   String
  operationType SublotOperationType
  quantity      Float
  unitOfMeasure String
  unitOfMeasureId String?              // FK to UnitOfMeasure
  workOrderId   String?
  operationId   String?
  reservedFor   String?
  location      String?
  status        MaterialLotStatus   @default(AVAILABLE)
  isActive      Boolean             @default(true)
  splitReason   String?
  createdById   String?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  parentLot     MaterialLot         @relation(fields: [parentLotId], references: [id])
  unitOfMeasureRef UnitOfMeasure?    @relation("MaterialSublotUOM", fields: [unitOfMeasureId], references: [id])

  @@index([parentLotId])
  @@index([sublotNumber])
  @@index([workOrderId])
  @@index([unitOfMeasureId])
  @@map("material_sublots")
}

model MaterialLotGenealogy {
  id               String                @id @default(cuid())
  parentLotId      String
  childLotId       String
  relationshipType GenealogyRelationType
  quantityConsumed Float
  quantityProduced Float?
  unitOfMeasure    String
  unitOfMeasureId  String?              // FK to UnitOfMeasure
  workOrderId      String?
  operationId      String?
  processDate      DateTime
  operatorId       String?
  notes            String?
  createdAt        DateTime              @default(now())
  childLot         MaterialLot           @relation("ChildLot", fields: [childLotId], references: [id])
  parentLot        MaterialLot           @relation("ParentLot", fields: [parentLotId], references: [id])
  unitOfMeasureRef UnitOfMeasure?        @relation("MaterialLotGenealogyUOM", fields: [unitOfMeasureId], references: [id])

  @@unique([parentLotId, childLotId, processDate])
  @@index([parentLotId])
  @@index([childLotId])
  @@index([workOrderId])
  @@index([processDate])
  @@index([unitOfMeasureId])
  @@map("material_lot_genealogy")
}

model MaterialStateHistory {
  id             String              @id @default(cuid())
  lotId          String
  previousState  MaterialLotState?
  newState       MaterialLotState
  previousStatus MaterialLotStatus?
  newStatus      MaterialLotStatus?
  reason         String?
  transitionType StateTransitionType
  quantity       Float?
  unitOfMeasure  String?
  unitOfMeasureId String?              // FK to UnitOfMeasure
  workOrderId    String?
  operationId    String?
  inspectionId   String?
  changedById    String?
  changedAt      DateTime            @default(now())
  fromLocation   String?             // Legacy location field (to be deprecated)
  fromLocationId String?             // FK to Location
  toLocation     String?             // Legacy location field (to be deprecated)
  toLocationId   String?             // FK to Location
  qualityNotes   String?
  notes          String?
  metadata       Json?
  createdAt      DateTime            @default(now())
  lot            MaterialLot         @relation(fields: [lotId], references: [id])
  unitOfMeasureRef UnitOfMeasure?     @relation("MaterialStateHistoryUOM", fields: [unitOfMeasureId], references: [id])
  fromLocationRef  Location?          @relation("FromLocation", fields: [fromLocationId], references: [id])
  toLocationRef    Location?          @relation("ToLocation", fields: [toLocationId], references: [id])

  @@index([lotId])
  @@index([changedAt])
  @@index([newState])
  @@index([unitOfMeasureId])
  @@index([newStatus])
  @@map("material_state_history")
}

model Operation {
  id                        String                                @id @default(cuid())
  persistentUuid            String?                               @default(uuid()) // Operation UUID for manufacturing process traceability
  description               String?
  siteId                    String?
  isStandardOperation       Boolean                               @default(false)
  operationCode             String                                @unique
  operationName             String
  operationClassification   OperationClassification?
  standardWorkInstructionId String?
  level                     Int                                   @default(1)
  parentOperationId         String?
  operationType             OperationType
  category                  String?
  duration                  Int?
  setupTime                 Int?
  teardownTime              Int?
  minCycleTime              Int?
  maxCycleTime              Int?
  version                   String                                @default("1.0")
  effectiveDate             DateTime?
  expirationDate            DateTime?
  isActive                  Boolean                               @default(true)
  requiresApproval          Boolean                               @default(false)
  approvedBy                String?
  approvedAt                DateTime?
  createdAt                 DateTime                              @default(now())
  updatedAt                 DateTime                              @updatedAt
  bomItems                  BOMItem[]
  equipmentSpecs            EquipmentOperationSpecification[]
  materialSpecs             MaterialOperationSpecification[]
  dependencies              OperationDependency[]                 @relation("DependentOperation")
  prerequisiteFor           OperationDependency[]                 @relation("PrerequisiteOperation")
  parameters                OperationParameter[]
  parentOperation           Operation?                            @relation("OperationHierarchy", fields: [parentOperationId], references: [id])
  childOperations           Operation[]                           @relation("OperationHierarchy")
  site                      Site?                                 @relation(fields: [siteId], references: [id])
  standardWorkInstruction   WorkInstruction?                      @relation("OperationStandardWI", fields: [standardWorkInstructionId], references: [id])
  personnelSpecs            PersonnelOperationSpecification[]
  assetSpecs                PhysicalAssetOperationSpecification[]
  routingSteps              RoutingStep[]
  samplingPlans             SamplingPlan[]
  torqueSpecifications      TorqueSpecification[]
  kits                      Kit[]
  // Part Interchangeability Framework relationships
  partSubstitutions         WorkOrderPartSubstitution[]

  // Workflow Configuration Relations (Issue #40)
  workflowConfiguration     OperationWorkflowConfiguration? @relation("OperationWorkflowConfig")

  // Andon System Relations (Issue #171)
  andonAlerts AndonAlert[]

  // STEP AP242 Integration (Issue #220)
  stepInstructionUuid       String?                                   // UUID of work instruction in CAD
  pmiAnnotationIds          String[]                  @default([])    // Associated PMI annotation IDs
  viewOrientationData       Json?                                     // 3D camera view data

  // PMI-Based Specifications
  pmiTolerances             Json?                                     // GD&T from CAD model
  pmiDimensions             Json?                                     // Dimensions from PMI

  // 3D Model View States (one operation can have multiple views)
  modelViewStates           ModelViewState[]

  // Relationships
  digitalThreadTraces       DigitalThreadTrace[]     @relation("OperationDigitalThreads")

  // Quality Configuration Relations (Issue #44)
  qualityConfiguration     OperationQualityConfiguration? @relation("OperationQualityConfig")

  // OSP (Outside Processing) Relations (Issue #58, #59)
  ospCapabilities          OSPCapability[]
  ospOperations            OSPOperation[]

  @@index([parentOperationId])
  @@index([persistentUuid])
  @@index([operationType])
  @@index([level])
  @@index([isActive])
  @@index([siteId])
  @@index([isStandardOperation])
  @@index([stepInstructionUuid])
  @@map("operations")
}

model OperationParameter {
  id                   String            @id @default(cuid())
  operationId          String
  parameterName        String
  parameterType        ParameterType
  dataType             ParameterDataType
  defaultValue         String?
  unitOfMeasure        String?
  unitOfMeasureId      String?           // FK to UnitOfMeasure
  minValue             Float?
  maxValue             Float?
  allowedValues        String[]
  isRequired           Boolean           @default(false)
  isCritical           Boolean           @default(false)
  requiresVerification Boolean           @default(false)
  displayOrder         Int?
  notes                String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  parameterGroupId     String?
  operation            Operation         @relation(fields: [operationId], references: [id], onDelete: Cascade)
  parameterGroup       ParameterGroup?   @relation("ParameterGrouping", fields: [parameterGroupId], references: [id])
  formula              ParameterFormula? @relation("FormulaOutput")
  limits               ParameterLimits?
  samplingPlans        SamplingPlan[]
  spcConfiguration     SPCConfiguration?
  unitOfMeasureRef     UnitOfMeasure?    @relation("OperationParameterUOM", fields: [unitOfMeasureId], references: [id])

  @@unique([operationId, parameterName])
  @@index([operationId])
  @@index([parameterType])
  @@index([unitOfMeasureId])
  @@map("operation_parameters")
}

model ParameterLimits {
  id             String             @id @default(cuid())
  parameterId    String             @unique
  engineeringMin Float?
  engineeringMax Float?
  operatingMin   Float?
  operatingMax   Float?
  LSL            Float?
  USL            Float?
  nominalValue   Float?
  highHighAlarm  Float?
  highAlarm      Float?
  lowAlarm       Float?
  lowLowAlarm    Float?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  parameter      OperationParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)

  @@map("parameter_limits")
}

model ParameterGroup {
  id            String               @id @default(cuid())
  groupName     String
  parentGroupId String?
  groupType     ParameterGroupType
  description   String?
  tags          String[]
  displayOrder  Int?
  icon          String?
  color         String?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  parameters    OperationParameter[] @relation("ParameterGrouping")
  parentGroup   ParameterGroup?      @relation("GroupHierarchy", fields: [parentGroupId], references: [id], onDelete: Cascade)
  childGroups   ParameterGroup[]     @relation("GroupHierarchy")

  @@index([parentGroupId])
  @@index([groupType])
  @@map("parameter_groups")
}

model ParameterFormula {
  id                 String             @id @default(cuid())
  formulaName        String
  outputParameterId  String             @unique
  formulaExpression  String
  formulaLanguage    FormulaLanguage    @default(JAVASCRIPT)
  inputParameterIds  String[]
  evaluationTrigger  EvaluationTrigger  @default(ON_CHANGE)
  evaluationSchedule String?
  testCases          Json?
  isActive           Boolean            @default(true)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  createdBy          String
  lastModifiedBy     String?
  outputParameter    OperationParameter @relation("FormulaOutput", fields: [outputParameterId], references: [id], onDelete: Cascade)

  @@index([outputParameterId])
  @@map("parameter_formulas")
}

model OperationDependency {
  id                      String               @id @default(cuid())
  dependentOperationId    String
  prerequisiteOperationId String
  dependencyType          DependencyType
  timingType              DependencyTimingType
  lagTime                 Int?
  leadTime                Int?
  condition               String?
  isOptional              Boolean              @default(false)
  notes                   String?
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt
  dependentOperation      Operation            @relation("DependentOperation", fields: [dependentOperationId], references: [id], onDelete: Cascade)
  prerequisiteOperation   Operation            @relation("PrerequisiteOperation", fields: [prerequisiteOperationId], references: [id], onDelete: Cascade)

  @@unique([dependentOperationId, prerequisiteOperationId])
  @@index([dependentOperationId])
  @@index([prerequisiteOperationId])
  @@map("operation_dependencies")
}

model PersonnelOperationSpecification {
  id                     String           @id @default(cuid())
  operationId            String
  personnelClassId       String?
  skillId                String?
  minimumCompetency      CompetencyLevel?
  requiredCertifications String[]
  quantity               Int              @default(1)
  isOptional             Boolean          @default(false)
  roleName               String?
  roleDescription        String?
  notes                  String?
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  operation              Operation        @relation(fields: [operationId], references: [id], onDelete: Cascade)

  @@index([operationId])
  @@index([personnelClassId])
  @@map("personnel_operation_specifications")
}

model EquipmentOperationSpecification {
  id                   String          @id @default(cuid())
  operationId          String
  equipmentClass       EquipmentClass?
  equipmentType        String?
  specificEquipmentId  String?
  requiredCapabilities String[]
  minimumCapacity      Float?
  quantity             Int             @default(1)
  isOptional           Boolean         @default(false)
  setupRequired        Boolean         @default(false)
  setupTime            Int?
  notes                String?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  operation            Operation       @relation(fields: [operationId], references: [id], onDelete: Cascade)

  @@index([operationId])
  @@index([equipmentClass])
  @@map("equipment_operation_specifications")
}

model MaterialOperationSpecification {
  id                   String          @id @default(cuid())
  operationId          String
  materialDefinitionId String?
  materialClassId      String?
  materialType         MaterialType?
  quantity             Float
  unitOfMeasure        String
  unitOfMeasureId      String?          // FK to UnitOfMeasure
  consumptionType      ConsumptionType
  requiredProperties   String[]
  qualityRequirements  String?
  isOptional           Boolean         @default(false)
  allowSubstitutes     Boolean         @default(false)
  notes                String?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  operation            Operation       @relation(fields: [operationId], references: [id], onDelete: Cascade)
  unitOfMeasureRef     UnitOfMeasure?  @relation("MaterialOperationSpecificationUOM", fields: [unitOfMeasureId], references: [id])

  @@index([operationId])
  @@index([materialDefinitionId])
  @@index([unitOfMeasureId])
  @@map("material_operation_specifications")
}

model PhysicalAssetOperationSpecification {
  id                  String            @id @default(cuid())
  operationId         String
  assetType           PhysicalAssetType
  assetCode           String?
  assetName           String
  specifications      Json?
  quantity            Int               @default(1)
  isOptional          Boolean           @default(false)
  requiresCalibration Boolean           @default(false)
  calibrationInterval Int?
  estimatedLifeCycles Int?
  notes               String?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  operation           Operation         @relation(fields: [operationId], references: [id], onDelete: Cascade)

  @@index([operationId])
  @@index([assetType])
  @@map("physical_asset_operation_specifications")
}

model Part {
  id                         String                      @id @default(cuid())
  persistentUuid             String?                     @default(uuid()) // MBE/STEP/Traceability UUID for NIST AMS 300-12 compliance
  partNumber                 String                      @unique
  partName                   String
  description                String?
  partType                   String
  productType                ProductType                 @default(MADE_TO_STOCK)
  lifecycleState             ProductLifecycleState       @default(PRODUCTION)
  unitOfMeasure              String
  unitOfMeasureId            String?                     // FK to UnitOfMeasure
  weight                     Float?
  weightUnit                 String?
  drawingNumber              String?
  revision                   String?
  cadModelUrl                String?
  releaseDate                DateTime?
  obsoleteDate               DateTime?
  replacementPartId          String?
  makeOrBuy                  String?                     @default("MAKE")
  leadTimeDays               Int?
  lotSizeMin                 Int?
  lotSizeMultiple            Int?
  standardCost               Float?
  targetCost                 Float?
  currency                   String?                     @default("USD")    // Legacy field (to be deprecated)
  currencyId                 String?                                        // FK to Currency
  isActive                   Boolean                     @default(true)
  isConfigurable             Boolean                     @default(false)
  requiresFAI                Boolean                     @default(false)
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt
  componentItems             BOMItem[]                   @relation("ComponentPart")
  bomItems                   BOMItem[]                   @relation("ParentPart")
  equipmentMaterialMovements EquipmentMaterialMovement[]
  erpMaterialTransactions    ERPMaterialTransaction[]
  inventoryItems             Inventory[]
  siteAvailability           PartSiteAvailability[]
  replacementPart            Part?                       @relation("PartReplacement", fields: [replacementPartId], references: [id])
  replacedParts              Part[]                      @relation("PartReplacement")
  configurations             ProductConfiguration[]
  lifecycleHistory           ProductLifecycle[]
  specifications             ProductSpecification[]
  productionScheduleRequests ProductionScheduleRequest[]
  qualityPlans               QualityPlan[]
  routings                   Routing[]
  scheduleEntries            ScheduleEntry[]
  serializedParts            SerializedPart[]
  workOrders                 WorkOrder[]
  unitOfMeasureRef           UnitOfMeasure?              @relation("PartUOM", fields: [unitOfMeasureId], references: [id])
  currencyRef                Currency?                   @relation("PartCurrency", fields: [currencyId], references: [id])
  torqueSpecifications       TorqueSpecification[]
  // Part Interchangeability Framework relationships
  primarySubstitutions       PartSubstitution[]          @relation("PrimaryPartSubstitutions")
  substituteSubstitutions    PartSubstitution[]          @relation("SubstitutePartSubstitutions")
  approvals                  InterchangeabilityApproval[] @relation("PartApprovals")
  originalPartSubstitutions  WorkOrderPartSubstitution[] @relation("OriginalPartSubstitutions")
  substitutedPartSubstitutions WorkOrderPartSubstitution[] @relation("SubstitutedPartSubstitutions")

  // Life-Limited Parts (LLP) Fields
  isLifeLimited              Boolean                     @default(false)
  llpCriticalityLevel        LLPCriticalityLevel?
  llpRetirementType          LLPRetirementType?
  llpCycleLimit              Int?                        // Maximum cycles before retirement
  llpTimeLimit               Int?                        // Maximum years before retirement
  llpInspectionInterval      Int?                        // Cycles between inspections
  llpRegulatoryReference     String?                     // FAA AD, OEM bulletin, etc.
  llpCertificationRequired   Boolean                     @default(false)
  llpNotes                   String?                     // LLP-specific notes

  // Kitting System relationships
  kitItems                   KitItem[]
  shortageAlerts             KitShortageAlert[]
  vendorKitItems             VendorKitItem[]

  // Expedite workflow relationships
  expeditRequests            ExpeditRequest[]
  supplierCommunications     SupplierCommunication[]
  alternativePartResolutions ShortageResolution[]         @relation("AlternativePartUsed")
  partShortageAnalytics      PartShortageAnalytics[]

  // ICD System relationships
  icdImplementations         ICDPartImplementation[]     @relation("PartICDImplementations")
  icdConsumptions            ICDPartConsumption[]        @relation("PartICDConsumptions")
  icdComplianceChecks        ICDComplianceCheck[]        @relation("PartICDComplianceChecks")

  // Serial Number Format Assignments (Issue #149)
  serialFormatAssignments    SerialFormatPartAssignment[]

  // STEP AP242 Integration (Issue #220)
  stepAp242Uuid             String?                     @unique                         // UUID from STEP file
  stepAp242FileUrl          String?                                                     // URL to STEP file
  stepAp242Version          String?                                                     // STEP file version
  stepAp242Checksum         String?                                                     // SHA256 checksum
  stepAp242LastSync         DateTime?                                                   // Last PLM sync

  // CAD Model Metadata
  cadModelUuid              String?                     @unique                         // CAD system UUID
  cadModelRevision          String?                                                     // Revision (A, B, C, etc.)
  cadModelFormat            String?                     // STEP, JT, 3DPDF, OTHER
  cadSystemSource           String?                     // NX, CATIA, Creo, SolidWorks, etc.

  // Product Manufacturing Information
  hasPMI                    Boolean                     @default(false)                 // Has PMI data
  pmiExtractionDate         DateTime?                                                   // When PMI was extracted
  pmiCharacteristics        Json?                                                       // Extracted PMI data structure

  // PLM System Integration
  plmSystemName             String?                     // Teamcenter, Windchill, ENOVIA, Aras
  plmItemId                 String?                                                     // PLM item ID
  plmRevisionId             String?                                                     // PLM revision ID
  plmLastModified           DateTime?                                                   // PLM modification date

  // Relationships
  digitalThreadTraces       DigitalThreadTrace[]

  // MRP System relationships (Issue #84)
  plannedOrders            PlannedOrder[]         @relation("PlannedOrderParts")
  mrpPeggingDemands        MRPPegging[]           @relation("MRPPeggingDemand")
  mrpPeggingSupplies       MRPPegging[]           @relation("MRPPeggingSupply")
  mrpExceptions            MRPException[]         @relation("MRPExceptions")

  // Issue #150: Advanced Serialization Workflows
  vendorSerials             VendorSerial[]
  serialAssignmentTriggers  SerialAssignmentTrigger[]
  lateAssignmentPlaceholders LateAssignmentPlaceholder[]
  serialUniquenessScopes    SerialUniquenessScope[]

  @@index([productType])
  @@index([lifecycleState])
  @@index([isActive])
  @@index([partNumber])
  @@index([persistentUuid])
  @@index([unitOfMeasureId])
  @@index([isLifeLimited])
  @@index([llpCriticalityLevel])
  @@map("parts")
}

model PartSiteAvailability {
  id             String    @id @default(cuid())
  partId         String
  siteId         String
  isPreferred    Boolean   @default(false)
  isActive       Boolean   @default(true)
  leadTimeDays   Int?
  minimumLotSize Int?
  maximumLotSize Int?
  standardCost   Float?
  setupCost      Float?
  effectiveDate  DateTime?
  expirationDate DateTime?
  notes          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  part           Part      @relation(fields: [partId], references: [id], onDelete: Cascade)
  site           Site      @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@unique([partId, siteId])
  @@index([siteId])
  @@index([isActive])
  @@map("part_site_availability")
}

model BOMItem {
  id                  String     @id @default(cuid())
  persistentUuid      String     @unique @default(uuid()) // BOM structure UUID for configuration management
  parentPartId        String
  componentPartId     String
  quantity            Float
  unitOfMeasure       String
  unitOfMeasureId     String?    // FK to UnitOfMeasure
  scrapFactor         Float?     @default(0)
  sequence            Int?
  findNumber          String?
  referenceDesignator String?
  operationId         String?
  operationNumber     Int?
  effectiveDate       DateTime?
  obsoleteDate        DateTime?
  ecoNumber           String?
  isOptional          Boolean    @default(false)
  isCritical          Boolean    @default(false)
  notes               String?
  isActive            Boolean    @default(true)
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  componentPart       Part       @relation("ComponentPart", fields: [componentPartId], references: [id])
  operation           Operation? @relation(fields: [operationId], references: [id])
  parentPart          Part       @relation("ParentPart", fields: [parentPartId], references: [id])
  unitOfMeasureRef    UnitOfMeasure? @relation("BOMItemUOM", fields: [unitOfMeasureId], references: [id])
  kitItems            KitItem[]

  @@index([parentPartId])
  @@index([componentPartId])
  @@index([persistentUuid])
  @@index([operationId])
  @@index([unitOfMeasureId])
  @@index([effectiveDate])
  @@map("bom_items")
}

model ProductSpecification {
  id                  String            @id @default(cuid())
  partId              String
  specificationName   String
  specificationType   SpecificationType
  specificationValue  String?
  nominalValue        Float?
  minValue            Float?
  maxValue            Float?
  unitOfMeasure       String?
  unitOfMeasureId     String?           // FK to UnitOfMeasure
  testMethod          String?
  inspectionFrequency String?
  isCritical          Boolean           @default(false)
  isRegulatory        Boolean           @default(false)
  documentReferences  String[]
  notes               String?
  isActive            Boolean           @default(true)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  part                Part              @relation(fields: [partId], references: [id], onDelete: Cascade)
  unitOfMeasureRef    UnitOfMeasure?    @relation("ProductSpecificationUOM", fields: [unitOfMeasureId], references: [id])

  @@index([partId])
  @@index([specificationType])
  @@index([isCritical])
  @@index([unitOfMeasureId])
  @@map("product_specifications")
}

model ProductConfiguration {
  id                String                @id @default(cuid())
  partId            String
  configurationName String
  configurationType ConfigurationType
  description       String?
  configurationCode String?
  attributes        Json?
  priceModifier     Float?                @default(0)
  costModifier      Float?                @default(0)
  leadTimeDelta     Int?                  @default(0)
  isAvailable       Boolean               @default(true)
  effectiveDate     DateTime?
  obsoleteDate      DateTime?
  isDefault         Boolean               @default(false)
  marketingName     String?
  imageUrl          String?
  isActive          Boolean               @default(true)
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  options           ConfigurationOption[]
  part              Part                  @relation(fields: [partId], references: [id], onDelete: Cascade)

  @@index([partId])
  @@index([configurationType])
  @@index([isDefault])
  @@map("product_configurations")
}

model ConfigurationOption {
  id              String               @id @default(cuid())
  configurationId String
  optionName      String
  optionCode      String?
  description     String?
  optionCategory  String?
  optionValue     String?
  isRequired      Boolean              @default(false)
  isDefault       Boolean              @default(false)
  addedPartIds    String[]
  removedPartIds  String[]
  priceModifier   Float?               @default(0)
  costModifier    Float?               @default(0)
  displayOrder    Int?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  configuration   ProductConfiguration @relation(fields: [configurationId], references: [id], onDelete: Cascade)

  @@index([configurationId])
  @@map("configuration_options")
}

model ProductLifecycle {
  id                String                 @id @default(cuid())
  partId            String
  previousState     ProductLifecycleState?
  newState          ProductLifecycleState
  transitionDate    DateTime               @default(now())
  reason            String?
  ecoNumber         String?
  approvedBy        String?
  approvedAt        DateTime?
  notificationsSent Boolean                @default(false)
  impactAssessment  String?
  notes             String?
  metadata          Json?
  createdAt         DateTime               @default(now())
  part              Part                   @relation(fields: [partId], references: [id], onDelete: Cascade)

  @@index([partId])
  @@index([newState])
  @@index([transitionDate])
  @@map("product_lifecycle")
}

model WorkOrder {
  id                           String                        @id @default(cuid())
  persistentUuid               String?                       @default(uuid()) // Work order lifecycle UUID for MBE compliance
  workOrderNumber              String                        @unique
  partId                       String
  partNumber                   String?
  quantity                     Int
  quantityCompleted            Int                           @default(0)
  quantityScrapped             Int                           @default(0)
  priority                     WorkOrderPriority
  status                       WorkOrderStatus
  dueDate                      DateTime?
  customerOrder                String?
  routingId                    String?
  siteId                       String?
  createdById                  String
  assignedToId                 String?
  startedAt                    DateTime?
  actualStartDate              DateTime?
  completedAt                  DateTime?
  actualEndDate                DateTime?
  createdAt                    DateTime                      @default(now())
  updatedAt                    DateTime                      @updatedAt
  dispatchLogs                 DispatchLog[]
  equipmentCommands            EquipmentCommand[]
  equipmentDataCollections     EquipmentDataCollection[]
  equipmentMaterialMovements   EquipmentMaterialMovement[]
  erpMaterialTransactions      ERPMaterialTransaction[]
  laborTimeEntries             LaborTimeEntry[]
  machineTimeEntries           MachineTimeEntry[]
  materialTransactions         MaterialTransaction[]
  ncrs                         NCR[]
  processDataCollections       ProcessDataCollection[]
  productionPerformanceActuals ProductionPerformanceActual[]
  productionScheduleRequests   ProductionScheduleRequest[]
  variances                    ProductionVariance[]
  qifMeasurementPlans          QIFMeasurementPlan[]
  qifMeasurementResults        QIFMeasurementResult[]
  qualityInspections           QualityInspection[]
  scheduleEntry                ScheduleEntry?
  operations                   WorkOrderOperation[]
  statusHistory                WorkOrderStatusHistory[]
  assignedTo                   User?                         @relation("AssignedTo", fields: [assignedToId], references: [id])
  createdBy                    User                          @relation("CreatedBy", fields: [createdById], references: [id])
  part                         Part                          @relation(fields: [partId], references: [id])
  routing                      Routing?                      @relation(fields: [routingId], references: [id])
  site                         Site?                         @relation(fields: [siteId], references: [id])
  workPerformance              WorkPerformance[]
  torqueEvents                 TorqueEvent[]
  kits                         Kit[]
  buildRecord                  BuildRecord?
  // Part Interchangeability Framework relationships
  partSubstitutions            WorkOrderPartSubstitution[]

  // Workflow Configuration Relations (Issue #40)
  workflowConfiguration        WorkOrderWorkflowConfiguration? @relation("WorkOrderWorkflowConfig")

  // Workflow Enforcement Audit (Issue #41)
  enforcementAudits            WorkflowEnforcementAudit[]      @relation("WorkflowEnforcementAudit")

  // Andon System Relations (Issue #171)
  andonAlerts AndonAlert[]

  // OSP (Outside Processing) Relations (Issue #58, #59)
  ospOperations OSPOperation[]

  // MRP System Relations (Issue #84)
  plannedOrderConversions PlannedOrder[]      @relation("PlannedOrderToWorkOrder")
  mrpPeggingSupplies      MRPPegging[]        @relation("MRPPeggingFromWO")

  @@index([persistentUuid])
  @@map("work_orders")
}

model Routing {
  id              String                @id @default(cuid())
  persistentUuid  String?               @default(uuid()) // Routing UUID for manufacturing process sequencing
  routingNumber   String                @unique
  partId          String?
  siteId          String?
  version         String                @default("1.0")
  lifecycleState  RoutingLifecycleState @default(DRAFT)
  description     String?
  isPrimaryRoute  Boolean               @default(false)
  isActive        Boolean               @default(true)
  effectiveDate   DateTime?
  expirationDate  DateTime?
  routingType     RoutingType           @default(PRIMARY)
  alternateForId  String?
  priority        Int                   @default(1)
  approvedBy      String?
  approvedAt      DateTime?
  visualData      Json?
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  createdBy       String?
  notes           String?
  operations      RoutingOperation[]
  steps           RoutingStep[]
  templateSources RoutingTemplate[]     @relation("TemplateSource")
  alternateFor    Routing?              @relation("AlternateRoutes", fields: [alternateForId], references: [id])
  alternateRoutes Routing[]             @relation("AlternateRoutes")
  part            Part?                 @relation(fields: [partId], references: [id])
  site            Site?                 @relation(fields: [siteId], references: [id])
  scheduleEntries ScheduleEntry[]
  workOrders      WorkOrder[]
  workflowConfiguration RoutingWorkflowConfiguration? @relation("RoutingWorkflowConfig")
  qualityConfiguration RoutingQualityConfiguration? @relation("RoutingQualityConfig")

  @@unique([partId, siteId, version])
  @@index([siteId])
  @@index([partId])
  @@index([persistentUuid])
  @@index([lifecycleState])
  @@index([isActive])
  @@index([partId, siteId, routingType])
  @@index([alternateForId])
  @@map("routings")
}

model RoutingOperation {
  id              String               @id @default(cuid())
  routingId       String
  operationNumber Int
  operationName   String
  description     String?
  setupTime       Float?
  cycleTime       Float?
  workCenterId    String?
  isActive        Boolean              @default(true)
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  routing         Routing              @relation(fields: [routingId], references: [id])
  workCenter      WorkCenter?          @relation(fields: [workCenterId], references: [id])
  workOrderOps    WorkOrderOperation[]
  torqueSpecifications TorqueSpecification[]
  dataCollectionForms DataCollectionForm[] @relation("DataCollectionForms")  // Issue #45: Data collection forms for this operation

  @@map("routing_operations")
}

model RoutingStep {
  id                   String                  @id @default(cuid())
  routingId            String
  stepNumber           Int
  operationId          String
  workCenterId         String?
  stepType             StepType                @default(PROCESS)
  controlType          ControlType?
  setupTimeOverride    Int?
  cycleTimeOverride    Int?
  teardownTimeOverride Int?
  isOptional           Boolean                 @default(false)
  isQualityInspection  Boolean                 @default(false)
  isCriticalPath       Boolean                 @default(false)
  workInstructionId    String?
  stepInstructions     String?
  notes                String?
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
  dependencies         RoutingStepDependency[] @relation("DependentStep")
  prerequisites        RoutingStepDependency[] @relation("PrerequisiteStep")
  parameterOverrides   RoutingStepParameter[]
  operation            Operation               @relation(fields: [operationId], references: [id])
  routing              Routing                 @relation(fields: [routingId], references: [id], onDelete: Cascade)
  workCenter           WorkCenter?             @relation(fields: [workCenterId], references: [id])
  workInstruction      WorkInstruction?        @relation("RoutingStepWorkInstruction", fields: [workInstructionId], references: [id])
  workOrderOperations  WorkOrderOperation[]

  @@unique([routingId, stepNumber])
  @@index([routingId])
  @@index([operationId])
  @@index([workCenterId])
  @@map("routing_steps")
}

model RoutingStepDependency {
  id                 String               @id @default(cuid())
  dependentStepId    String
  prerequisiteStepId String
  dependencyType     DependencyType
  timingType         DependencyTimingType
  lagTime            Int?
  leadTime           Int?
  createdAt          DateTime             @default(now())
  dependentStep      RoutingStep          @relation("DependentStep", fields: [dependentStepId], references: [id], onDelete: Cascade)
  prerequisiteStep   RoutingStep          @relation("PrerequisiteStep", fields: [prerequisiteStepId], references: [id], onDelete: Cascade)

  @@unique([dependentStepId, prerequisiteStepId])
  @@index([dependentStepId])
  @@index([prerequisiteStepId])
  @@map("routing_step_dependencies")
}

model RoutingStepParameter {
  id             String      @id @default(cuid())
  routingStepId  String
  parameterName  String
  parameterValue String
  unitOfMeasure  String?
  unitOfMeasureId String?     // FK to UnitOfMeasure
  notes          String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  routingStep    RoutingStep @relation(fields: [routingStepId], references: [id], onDelete: Cascade)
  unitOfMeasureRef UnitOfMeasure? @relation("RoutingStepParameterUOM", fields: [unitOfMeasureId], references: [id])

  @@unique([routingStepId, parameterName])
  @@index([routingStepId])
  @@index([unitOfMeasureId])
  @@map("routing_step_parameters")
}

model RoutingTemplate {
  id              String   @id @default(cuid())
  name            String
  number          String   @unique @default(cuid())
  category        String?
  description     String?
  tags            String[]
  isPublic        Boolean  @default(false)
  isFavorite      Boolean  @default(false)
  usageCount      Int      @default(0)
  rating          Float?
  visualData      Json?
  sourceRoutingId String?
  createdById     String
  siteId          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       User     @relation(fields: [createdById], references: [id])
  site            Site     @relation(fields: [siteId], references: [id])
  sourceRouting   Routing? @relation("TemplateSource", fields: [sourceRoutingId], references: [id])

  @@index([siteId])
  @@index([createdById])
  @@index([category])
  @@index([isFavorite])
  @@map("routing_templates")
}

model WorkCenter {
  id                   String                          @id @default(cuid())
  name                 String                          @unique
  description          String?
  capacity             Float?
  areaId               String?
  isActive             Boolean                         @default(true)
  createdAt            DateTime                        @default(now())
  updatedAt            DateTime                        @updatedAt
  dispatchLogs         DispatchLog[]                   @relation("DispatchWorkCenter")
  equipment            Equipment[]
  personnelAssignments PersonnelWorkCenterAssignment[]
  operations           RoutingOperation[]
  routingSteps         RoutingStep[]
  scheduleEntries      ScheduleEntry[]
  area                 Area?                           @relation(fields: [areaId], references: [id])
  workUnits            WorkUnit[]
  buildRecordOperations BuildRecordOperation[]

  // Andon System Relations (Issue #171)
  andonAlerts AndonAlert[]

  @@index([areaId])
  @@map("work_centers")
}

model WorkUnit {
  id           String      @id @default(cuid())
  workUnitCode String      @unique
  workUnitName String
  description  String?
  workCenterId String
  isActive     Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  equipment    Equipment[]
  workCenter   WorkCenter  @relation(fields: [workCenterId], references: [id])

  @@index([workCenterId])
  @@map("work_units")
}

model WorkOrderOperation {
  id                 String                   @id @default(cuid())
  workOrderId        String
  routingOperationId String
  status             WorkOrderOperationStatus
  quantity           Int
  quantityCompleted  Int                      @default(0)
  quantityScrap      Int                      @default(0)
  startedAt          DateTime?
  completedAt        DateTime?
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  routingStepId      String?
  laborTimeEntries   LaborTimeEntry[]
  machineTimeEntries MachineTimeEntry[]
  variances          ProductionVariance[]
  routingOperation   RoutingOperation         @relation(fields: [routingOperationId], references: [id])
  RoutingStep        RoutingStep?             @relation(fields: [routingStepId], references: [id])
  workOrder          WorkOrder                @relation(fields: [workOrderId], references: [id])
  workPerformance    WorkPerformance[]
  buildRecordOperations BuildRecordOperation[]
  dataCollectionSubmissions DataCollectionSubmission[] @relation("DataCollectionSubmissions")  // Issue #45: Data collected for this operation
  workInstructionViews WorkInstructionView[] @relation("WorkOrderOperationViews")  // Issue #45: Work instruction views for this operation

  @@map("work_order_operations")
}

model ProductionSchedule {
  id               String                 @id @default(cuid())
  scheduleNumber   String                 @unique
  scheduleName     String
  description      String?
  periodStart      DateTime
  periodEnd        DateTime
  periodType       String                 @default("MONTHLY")
  siteId           String?
  areaId           String?
  state            ScheduleState          @default(FORECAST)
  stateChangedAt   DateTime               @default(now())
  stateChangedBy   String?
  priority         SchedulePriority       @default(NORMAL)
  plannedBy        String?
  approvedBy       String?
  approvedAt       DateTime?
  dispatchedCount  Int                    @default(0)
  totalEntries     Int                    @default(0)
  isLocked         Boolean                @default(false)
  isFeasible       Boolean                @default(true)
  feasibilityNotes String?
  notes            String?
  metadata         Json?
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  site             Site?                  @relation(fields: [siteId], references: [id])
  entries          ScheduleEntry[]
  stateHistory     ScheduleStateHistory[]
  mrpRuns          MRPRun[]               @relation("MRPRunForSchedule")

  @@index([siteId])
  @@index([state])
  @@index([periodStart])
  @@index([periodEnd])
  @@map("production_schedules")
}

model ScheduleEntry {
  id                 String               @id @default(cuid())
  scheduleId         String
  entryNumber        Int
  partId             String
  partNumber         String
  description        String?
  plannedQuantity    Float
  dispatchedQuantity Float                @default(0)
  completedQuantity  Float                @default(0)
  unitOfMeasure      String               @default("EA")
  unitOfMeasureId    String?              // FK to UnitOfMeasure
  plannedStartDate   DateTime
  plannedEndDate     DateTime
  actualStartDate    DateTime?
  actualEndDate      DateTime?
  priority           SchedulePriority     @default(NORMAL)
  sequenceNumber     Int?
  estimatedDuration  Int?
  workCenterId       String?
  routingId          String?
  customerOrder      String?
  customerDueDate    DateTime?
  salesOrder         String?
  isDispatched       Boolean              @default(false)
  dispatchedAt       DateTime?
  dispatchedBy       String?
  workOrderId        String?              @unique
  isCancelled        Boolean              @default(false)
  cancelledAt        DateTime?
  cancelledReason    String?
  notes              String?
  metadata           Json?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  constraints        ScheduleConstraint[]
  part               Part                 @relation(fields: [partId], references: [id])
  routing            Routing?             @relation(fields: [routingId], references: [id])
  schedule           ProductionSchedule   @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  workCenter         WorkCenter?          @relation(fields: [workCenterId], references: [id])
  workOrder          WorkOrder?           @relation(fields: [workOrderId], references: [id])
  unitOfMeasureRef   UnitOfMeasure?       @relation("ScheduleEntryUOM", fields: [unitOfMeasureId], references: [id])

  @@unique([scheduleId, entryNumber])
  @@index([scheduleId])
  @@index([partId])
  @@index([plannedStartDate])
  @@index([plannedEndDate])
  @@index([priority])
  @@index([isDispatched])
  @@index([workOrderId])
  @@index([unitOfMeasureId])
  @@map("schedule_entries")
}

model ScheduleConstraint {
  id                String         @id @default(cuid())
  entryId           String
  constraintType    ConstraintType
  constraintName    String
  description       String?
  resourceId        String?
  resourceType      String?
  requiredQuantity  Float?
  availableQuantity Float?
  unitOfMeasure     String?
  unitOfMeasureId   String?        // FK to UnitOfMeasure
  constraintDate    DateTime?
  leadTimeDays      Int?
  isViolated        Boolean        @default(false)
  violationSeverity String?
  violationMessage  String?
  isResolved        Boolean        @default(false)
  resolvedAt        DateTime?
  resolvedBy        String?
  resolutionNotes   String?
  notes             String?
  metadata          Json?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  entry             ScheduleEntry  @relation(fields: [entryId], references: [id], onDelete: Cascade)
  unitOfMeasureRef  UnitOfMeasure? @relation("ScheduleConstraintUOM", fields: [unitOfMeasureId], references: [id])

  @@index([entryId])
  @@index([constraintType])
  @@index([isViolated])
  @@index([constraintDate])
  @@index([unitOfMeasureId])
  @@map("schedule_constraints")
}

model ScheduleStateHistory {
  id                String             @id @default(cuid())
  scheduleId        String
  previousState     ScheduleState?
  newState          ScheduleState
  transitionDate    DateTime           @default(now())
  reason            String?
  changedBy         String?
  entriesAffected   Int?
  notificationsSent Boolean            @default(false)
  notes             String?
  metadata          Json?
  createdAt         DateTime           @default(now())
  schedule          ProductionSchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  @@index([scheduleId])
  @@index([newState])
  @@index([transitionDate])
  @@map("schedule_state_history")
}

model WorkOrderStatusHistory {
  id                   String           @id @default(cuid())
  workOrderId          String
  previousStatus       WorkOrderStatus?
  newStatus            WorkOrderStatus
  transitionDate       DateTime         @default(now())
  reason               String?
  changedBy            String?
  notes                String?
  quantityAtTransition Int?
  scrapAtTransition    Int?
  metadata             Json?
  createdAt            DateTime         @default(now())
  workOrder            WorkOrder        @relation(fields: [workOrderId], references: [id], onDelete: Cascade)

  @@index([workOrderId])
  @@index([newStatus])
  @@index([transitionDate])
  @@map("work_order_status_history")
}

model DispatchLog {
  id                 String             @id @default(cuid())
  workOrderId        String
  dispatchedAt       DateTime           @default(now())
  dispatchedBy       String?
  dispatchedFrom     String?
  assignedToId       String?
  workCenterId       String?
  priorityOverride   WorkOrderPriority?
  expectedStartDate  DateTime?
  expectedEndDate    DateTime?
  quantityDispatched Int
  materialReserved   Boolean            @default(false)
  toolingReserved    Boolean            @default(false)
  dispatchNotes      String?
  metadata           Json?
  createdAt          DateTime           @default(now())
  assignedTo         User?              @relation("DispatchAssignedTo", fields: [assignedToId], references: [id])
  workCenter         WorkCenter?        @relation("DispatchWorkCenter", fields: [workCenterId], references: [id])
  workOrder          WorkOrder          @relation(fields: [workOrderId], references: [id], onDelete: Cascade)

  @@index([workOrderId])
  @@index([dispatchedAt])
  @@index([assignedToId])
  @@index([workCenterId])
  @@map("dispatch_logs")
}

model WorkPerformance {
  id               String              @id @default(cuid())
  workOrderId      String
  operationId      String?
  performanceType  WorkPerformanceType
  recordedAt       DateTime            @default(now())
  recordedBy       String?
  personnelId      String?
  laborHours       Float?
  laborCost        Float?
  laborEfficiency  Float?
  partId           String?
  quantityConsumed Float?
  quantityPlanned  Float?
  materialVariance Float?
  unitCost         Float?
  totalCost        Float?
  equipmentId      String?
  setupTime        Float?
  runTime          Float?
  plannedSetupTime Float?
  plannedRunTime   Float?
  quantityProduced Int?
  quantityGood     Int?
  quantityScrap    Int?
  quantityRework   Int?
  yieldPercentage  Float?
  scrapReason      String?
  downtimeMinutes  Float?
  downtimeReason   String?
  downtimeCategory String?
  notes            String?
  metadata         Json?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  operation        WorkOrderOperation? @relation(fields: [operationId], references: [id], onDelete: Cascade)
  personnel        User?               @relation("WorkPerformancePersonnel", fields: [personnelId], references: [id])
  workOrder        WorkOrder           @relation(fields: [workOrderId], references: [id], onDelete: Cascade)

  @@index([workOrderId])
  @@index([operationId])
  @@index([performanceType])
  @@index([recordedAt])
  @@index([personnelId])
  @@map("work_performance")
}

model ProductionVariance {
  id               String              @id @default(cuid())
  workOrderId      String
  operationId      String?
  varianceType     VarianceType
  varianceName     String
  plannedValue     Float
  actualValue      Float
  variance         Float
  variancePercent  Float
  isFavorable      Boolean             @default(false)
  costImpact       Float?
  rootCause        String?
  correctiveAction String?
  responsibleParty String?
  calculatedAt     DateTime            @default(now())
  periodStart      DateTime?
  periodEnd        DateTime?
  isResolved       Boolean             @default(false)
  resolvedAt       DateTime?
  resolvedBy       String?
  notes            String?
  metadata         Json?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  operation        WorkOrderOperation? @relation(fields: [operationId], references: [id], onDelete: Cascade)
  workOrder        WorkOrder           @relation(fields: [workOrderId], references: [id], onDelete: Cascade)

  @@index([workOrderId])
  @@index([operationId])
  @@index([varianceType])
  @@index([isFavorable])
  @@index([calculatedAt])
  @@map("production_variances")
}

model QualityPlan {
  id              String                  @id @default(cuid())
  planNumber      String                  @unique
  planName        String
  partId          String
  operation       String?
  description     String?
  isActive        Boolean                 @default(true)
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  characteristics QualityCharacteristic[]
  inspections     QualityInspection[]
  part            Part                    @relation(fields: [partId], references: [id])

  @@map("quality_plans")
}

model QualityCharacteristic {
  id               String               @id @default(cuid())
  planId           String
  characteristic   String
  specification    String
  toleranceType    QualityToleranceType
  nominalValue     Float?
  upperLimit       Float?
  lowerLimit       Float?
  unitOfMeasure    String?
  unitOfMeasureId  String?              // FK to UnitOfMeasure
  inspectionMethod String?
  isActive         Boolean              @default(true)
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  plan             QualityPlan          @relation(fields: [planId], references: [id])
  measurements     QualityMeasurement[]
  unitOfMeasureRef UnitOfMeasure?       @relation("QualityCharacteristicUOM", fields: [unitOfMeasureId], references: [id])

  // STEP AP242 Integration (Issue #220)
  pmiFeatureUuid        String?                                       // UUID of PMI feature in CAD
  pmiAnnotationId       String?                                       // PMI annotation ID
  cadDatumReferences    String[]                  @default([])        // Datum references

  // GD&T from STEP
  gdtType               String?                   // FLATNESS, POSITION, PERPENDICULAR, etc.
  gdtTolerance          Float?
  gdtToleranceUnit      String?                   // mm, inch, etc.
  gdtModifier           String?                   // MMC, LMC, RFS

  // Feature Geometry
  featureGeometry       Json?                                         // Geometric properties

  // As-Built Comparison
  actualValue           Float?                                        // As-manufactured
  deviation             Float?                                        // nominalValue - actualValue

  // Relationships
  digitalThreadTraces   DigitalThreadTrace[]     @relation("CharacteristicDigitalThreads")

  @@index([planId])
  @@index([unitOfMeasureId])
  @@index([pmiFeatureUuid])
  @@index([gdtType])
  @@map("quality_characteristics")
}

model QualityInspection {
  id               String                   @id @default(cuid())
  inspectionNumber String                   @unique
  workOrderId      String
  planId           String
  inspectorId      String
  status           QualityInspectionStatus
  result           QualityInspectionResult?
  quantity         Int
  startedAt        DateTime?
  completedAt      DateTime?
  notes            String?
  createdAt        DateTime                 @default(now())
  updatedAt        DateTime                 @updatedAt
  ncrs             NCR[]
  inspector        User                     @relation(fields: [inspectorId], references: [id])
  plan             QualityPlan              @relation(fields: [planId], references: [id])
  workOrder        WorkOrder                @relation(fields: [workOrderId], references: [id])
  measurements     QualityMeasurement[]

  @@map("quality_inspections")
}

model QualityMeasurement {
  id               String                @id @default(cuid())
  inspectionId     String
  characteristicId String
  measuredValue    Float
  result           String
  notes            String?
  createdAt        DateTime              @default(now())
  characteristic   QualityCharacteristic @relation(fields: [characteristicId], references: [id])
  inspection       QualityInspection     @relation(fields: [inspectionId], references: [id])

  @@map("quality_measurements")
}

// ============================================================================
// HIERARCHICAL CAUSE CODE SYSTEM (Issue #54)
// ============================================================================

/// Cause Code Category - Top-level grouping (e.g., Material, Equipment, Process)
model CauseCodeCategory {
  id          String   @id @default(cuid())
  code        String              // E.g., "MAT", "EQP", "PRO"
  name        String              // E.g., "Material", "Equipment", "Process"
  description String?

  // Hierarchy
  parentId    String?
  parent      CauseCodeCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children    CauseCodeCategory[] @relation("CategoryHierarchy")

  // Metadata
  enabled     Boolean             @default(true)
  sortOrder   Int                 @default(0)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  createdBy   String

  // Relations
  causeCodes  CauseCode[]

  @@index([parentId])
  @@index([enabled])
  @@map("cause_code_categories")
}

/// Cause Code - Detailed root cause classification (hierarchical)
model CauseCode {
  id          String   @id @default(cuid())
  code        String              // E.g., "MAT-001", "MAT-001-A"
  name        String              // Display name
  description String?             // Detailed description

  // Hierarchy - can have parent cause codes (e.g., MAT > MAT-001 > MAT-001-A)
  parentId    String?
  parent      CauseCode?         @relation("CauseCodeHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children    CauseCode[]        @relation("CauseCodeHierarchy")

  // Classification
  categoryId  String
  category    CauseCodeCategory  @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  // Properties
  enabled     Boolean            @default(true)
  level       Int                // Depth in hierarchy (1 = top, 2 = subcategory, etc.)
  sortOrder   Int                @default(0)

  // Statistics (cached for performance)
  usageCount  Int                @default(0)
  lastUsedAt  DateTime?

  // Metadata
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  createdBy   String

  // Relations
  ncrRootCauses         NCR[]              @relation("RootCause")
  causeCodeHistory      CauseCodeHistory[]

  @@index([categoryId])
  @@index([parentId])
  @@index([level])
  @@index([enabled])
  @@unique([code])
  @@map("cause_codes")
}

/// Cause Code Change History - Audit trail for cause code modifications
model CauseCodeHistory {
  id           String   @id @default(cuid())
  causeCodeId  String
  causeCode    CauseCode  @relation(fields: [causeCodeId], references: [id], onDelete: Cascade)

  // Change tracking
  changeType   String   // "CREATED", "UPDATED", "ENABLED", "DISABLED", "HIERARCHY_CHANGED"
  oldValue     String?  // JSON of previous values
  newValue     String?  // JSON of new values
  changeReason String?

  // Metadata
  changedAt    DateTime @default(now())
  changedBy    String

  @@index([causeCodeId])
  @@index([changedAt])
  @@map("cause_code_history")
}

model NCR {
  id               String             @id @default(cuid())
  ncrNumber        String             @unique
  workOrderId      String?
  inspectionId     String?
  siteId           String?
  partNumber       String
  operation        String?
  defectType       String
  description      String
  severity         NCRSeverity
  status           NCRStatus
  quantity         Int
  createdById      String
  assignedToId     String?
  dueDate          DateTime?
  rootCauseId      String?            // Hierarchical cause code (Issue #54)
  correctiveAction String?
  preventiveAction String?
  closedAt         DateTime?

  // ✅ ISSUE #55: Enhanced NCR Workflow - Phase 1-2
  // Disposition fields
  disposition      NCRDisposition?
  dispositionJustification String?
  dispositionApprovedBy String?
  dispositionApprovedAt DateTime?

  // CTP (Continue to Process) fields
  ctpAuthorized    Boolean? @default(false)
  ctpApprovedBy    String?
  ctpApprovedAt    DateTime?
  ctpJustification String?
  ctpConditions    String?
  ctpOperations    String?            // JSON array of operations material proceeded through

  // DDR (Delayed Disposition) fields
  ddrExpectedDate  DateTime?
  ddrPendingItems  String?            // JSON array of pending items with status
  ddrEscalated     Boolean? @default(false)
  ddrEscalatedAt   DateTime?

  // MRB (Material Review Board) fields
  mrbRequired      Boolean? @default(false)
  mrbMeetingDate   DateTime?
  mrbAttendees     String?            // JSON array of user IDs
  mrbDecision      String?
  mrbVotes         String?            // JSON array of {userId, vote, comments}
  mrbMinutes       String?            // Meeting minutes or attachment link

  // Cost tracking fields (Issue #55 & #58)
  estimatedCost      Decimal?           @db.Decimal(15, 2)
  actualCost         Decimal?           @db.Decimal(15, 2)
  scrapCost          Decimal?           @db.Decimal(15, 2)
  reworkCost         Decimal?           @db.Decimal(15, 2)
  sortingCost        Decimal?           @db.Decimal(15, 2)
  engineeringCost    Decimal?           @db.Decimal(15, 2)
  customerCost       Decimal?           @db.Decimal(15, 2)  // External failure cost
  currencyCode       String?            @default("USD")
  costApprovedBy     String?
  costApprovedAt     DateTime?

  // Detection and escape tracking (Issue #58)
  detectionPoint     DetectionPoint?
  escapePoint        String?            // Where defect was discovered after production
  isEscapedDefect    Boolean?           @default(false)

  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  // Relations
  assignedTo       User?              @relation("AssignedTo", fields: [assignedToId], references: [id])
  createdBy        User               @relation("CreatedBy", fields: [createdById], references: [id])
  inspection       QualityInspection? @relation(fields: [inspectionId], references: [id])
  site             Site?              @relation(fields: [siteId], references: [id])
  workOrder        WorkOrder?         @relation(fields: [workOrderId], references: [id])
  rootCause        CauseCode?         @relation("RootCause", fields: [rootCauseId], references: [id])

  // Workflow relations (Issue #55)
  stateHistory     NCRStateHistory[]
  approvalRequests NCRApprovalRequest[]
  buildDeviations  BuildDeviation[]

  // Quality Analytics Relations (Issue #58)
  qualityAlerts    QualityAlert[]     @relation("QualityAlerts")

  // 8D Problem Solving Framework Relations (Issue #57)
  eightDReports    EightDReport[]

  @@map("ncrs")
}

/// ✅ ISSUE #55: NCR State History - Track all state transitions
model NCRStateHistory {
  id              String   @id @default(cuid())
  ncrId           String
  fromState       NCRStatus?
  toState         NCRStatus
  changedBy       String
  changeReason    String?
  approvalRequired Boolean
  approvedBy      String?
  approvedAt      DateTime?
  timestamp       DateTime @default(now())

  // Relations
  ncr             NCR      @relation(fields: [ncrId], references: [id], onDelete: Cascade)

  @@index([ncrId])
  @@index([timestamp])
  @@map("ncr_state_history")
}

/// ✅ ISSUE #55: NCR Approval Requests - Track pending approvals
model NCRApprovalRequest {
  id              String   @id @default(cuid())
  ncrId           String
  requestType     NCRApprovalRequestType
  requestedBy     String
  requestedAt     DateTime @default(now())
  approverUserId  String
  status          NCRApprovalStatus
  approvalNotes   String?
  approvedAt      DateTime?
  dueDate         DateTime?
  escalated       Boolean  @default(false)
  escalatedAt     DateTime?

  // Relations
  ncr             NCR      @relation(fields: [ncrId], references: [id], onDelete: Cascade)

  @@index([ncrId])
  @@index([approverUserId])
  @@index([status])
  @@index([dueDate])
  @@map("ncr_approval_requests")
}

/// ✅ ISSUE #55: NCR Workflow Configuration - Per-site and per-severity workflow rules
model NCRWorkflowConfig {
  id                        String   @id @default(cuid())
  siteId                    String?
  severityLevel             NCRSeverity?  // null = applies to all severity levels

  // State configuration (JSON serialized)
  enabledStates             String        // JSON array of enabled states
  initialState              NCRStatus
  stateTransitions          String        // JSON: {fromState: [allowedToStates]}
  requiredFieldsByState     String?       // JSON: {state: [requiredFields]}

  // CTP configuration
  ctpEnabled                Boolean       @default(true)
  ctpApprovalRole           String?       // Role required to approve CTP
  ctpPreventFinalShip       Boolean       @default(true)

  // DDR configuration
  ddrEnabled                Boolean       @default(true)
  ddrAutoTriggerHours       Int?          // Auto-DDR if no disposition after X hours
  ddrEscalationThreshold    Int           @default(24)  // Hours before escalation

  // MRB configuration
  mrbEnabled                Boolean       @default(true)
  mrbValueThreshold         Decimal?      @db.Decimal(15, 2)  // Trigger if cost > $X
  mrbTriggerConditions      String?       // JSON array of conditions
  mrbRequiredAttendees      String?       // JSON array of role IDs
  mrbVotingMethod           NCRMRBVotingMethod @default(UNANIMOUS)

  // Disposition rules (JSON serialized)
  allowedDispositions       String        // JSON array of allowed dispositions
  dispositionApprovalRules  String?       // JSON: {disposition: {minRole, requiresMRB}}

  // Metadata
  isActive                  Boolean       @default(true)
  createdAt                 DateTime      @default(now())
  updatedAt                 DateTime      @updatedAt
  createdBy                 String

  // Relations
  site                      Site?         @relation("NCRWorkflowConfigs", fields: [siteId], references: [id], onDelete: Cascade)

  @@unique([siteId, severityLevel])
  @@index([siteId])
  @@index([severityLevel])
  @@map("ncr_workflow_configs")
}

model Equipment {
  id                         String                      @id @default(cuid())
  equipmentNumber            String                      @unique
  name                       String
  description                String?
  equipmentClass             EquipmentClass
  equipmentType              String?
  equipmentLevel             Int                         @default(1)
  parentEquipmentId          String?
  manufacturer               String?
  model                      String?
  serialNumber               String?
  installDate                DateTime?
  commissionDate             DateTime?
  siteId                     String?
  areaId                     String?
  workCenterId               String?
  workUnitId                 String?
  status                     EquipmentStatus
  currentState               EquipmentState              @default(IDLE)
  stateChangedAt             DateTime                    @default(now())
  utilizationRate            Float?                      @default(0)
  availability               Float?                      @default(0)
  performance                Float?                      @default(0)
  quality                    Float?                      @default(0)
  oee                        Float?                      @default(0)
  ratedCapacity              Float?
  currentCapacity            Float?

  // Enhanced maintenance fields for Issue #94
  equipmentTypeId            String?
  assetTag                   String?                     @unique
  purchaseDate               DateTime?
  warrantyExpiration         DateTime?
  criticality                CriticalityLevel            @default(MEDIUM)
  capacityUnit               String?
  acquisitionCost            Decimal?
  currentValue               Decimal?
  depreciationMethod         String?
  maintenanceInterval        Int?                        // Days
  lastMaintenanceDate        DateTime?
  nextMaintenanceDate        DateTime?
  totalRunTime               Int                         @default(0) // Minutes
  totalDownTime              Int                         @default(0) // Minutes
  mtbf                       Decimal?                    // Mean Time Between Failures (hours)
  mttr                       Decimal?                    // Mean Time To Repair (hours)
  requiresCalibration        Boolean                     @default(false)

  isActive                   Boolean                     @default(true)
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt
  area                       Area?                       @relation(fields: [areaId], references: [id])
  parentEquipment            Equipment?                  @relation("EquipmentHierarchy", fields: [parentEquipmentId], references: [id])
  childEquipment             Equipment[]                 @relation("EquipmentHierarchy")
  site                       Site?                       @relation(fields: [siteId], references: [id])
  workCenter                 WorkCenter?                 @relation(fields: [workCenterId], references: [id])
  workUnit                   WorkUnit?                   @relation(fields: [workUnitId], references: [id])

  // Enhanced maintenance relations for Issue #94
  equipmentTypeRef           EquipmentType?              @relation("EquipmentToEquipmentType", fields: [equipmentTypeId], references: [id])
  downtimeEvents             DowntimeEvent[]             @relation("EquipmentDowntimeEvents")

  capabilities               EquipmentCapability[]
  equipmentCommands          EquipmentCommand[]
  equipmentDataCollections   EquipmentDataCollection[]
  logs                       EquipmentLog[]
  equipmentMaterialMovements EquipmentMaterialMovement[]
  performanceData            EquipmentPerformanceLog[]
  stateHistory               EquipmentStateHistory[]
  machineTimeEntries         MachineTimeEntry[]
  maintenanceWorkOrders      MaintenanceWorkOrder[]
  processDataCollections     ProcessDataCollection[]
  productionScheduleRequests ProductionScheduleRequest[]

  // Andon System Relations (Issue #171)
  andonAlerts AndonAlert[]

  @@index([parentEquipmentId])
  @@index([workUnitId])
  @@index([workCenterId])
  @@index([areaId])
  @@index([siteId])
  @@index([currentState])
  @@index([equipmentClass])
  @@index([equipmentTypeId])
  @@index([criticality])
  @@index([nextMaintenanceDate])
  @@index([assetTag])
  @@map("equipment")
}

model EquipmentCapability {
  id             String    @id @default(cuid())
  equipmentId    String
  capabilityType String
  capability     String
  description    String?
  parameters     Json?
  certifiedDate  DateTime?
  expiryDate     DateTime?
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  equipment      Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)

  @@index([equipmentId])
  @@index([capabilityType])
  @@index([capability])
  @@map("equipment_capabilities")
}

model EquipmentLog {
  id          String           @id @default(cuid())
  equipmentId String
  logType     EquipmentLogType
  description String
  userId      String?
  loggedAt    DateTime         @default(now())
  equipment   Equipment        @relation(fields: [equipmentId], references: [id])
  user        User?            @relation(fields: [userId], references: [id])

  @@map("equipment_logs")
}

model EquipmentStateHistory {
  id             String          @id @default(cuid())
  equipmentId    String
  previousState  EquipmentState?
  newState       EquipmentState
  reason         String?
  changedBy      String?
  stateStartTime DateTime        @default(now())
  stateEndTime   DateTime?
  duration       Int?
  workOrderId    String?
  operationId    String?
  downtime       Boolean         @default(false)
  createdAt      DateTime        @default(now())
  equipment      Equipment       @relation(fields: [equipmentId], references: [id])

  @@index([equipmentId])
  @@index([stateStartTime])
  @@index([newState])
  @@map("equipment_state_history")
}

model EquipmentPerformanceLog {
  id                    String                @id @default(cuid())
  equipmentId           String
  periodStart           DateTime
  periodEnd             DateTime
  periodType            PerformancePeriodType @default(SHIFT)
  plannedProductionTime Int
  operatingTime         Int
  downtime              Int
  availability          Float
  idealCycleTime        Float?
  actualCycleTime       Float?
  totalUnitsProduced    Int
  targetProduction      Int?
  performance           Float
  goodUnits             Int
  rejectedUnits         Int
  scrapUnits            Int
  reworkUnits           Int
  quality               Float
  oee                   Float
  workOrderId           String?
  partId                String?
  operatorId            String?
  teep                  Float?
  utilizationRate       Float?
  notes                 String?
  hasAnomalies          Boolean               @default(false)
  createdAt             DateTime              @default(now())
  calculatedAt          DateTime              @default(now())
  equipment             Equipment             @relation(fields: [equipmentId], references: [id])

  @@index([equipmentId])
  @@index([periodStart])
  @@index([periodType])
  @@index([oee])
  @@map("equipment_performance_logs")
}

model Inventory {
  id            String                @id @default(cuid())
  partId        String
  location      String               // Legacy location field (to be deprecated)
  locationId    String?              // FK to Location
  lotNumber     String?
  quantity      Float
  unitOfMeasure String
  unitOfMeasureId String?                // FK to UnitOfMeasure
  unitCost      Float?
  receivedDate  DateTime?
  expiryDate    DateTime?
  isActive      Boolean               @default(true)
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  part          Part                  @relation(fields: [partId], references: [id])
  transactions  MaterialTransaction[]
  unitOfMeasureRef UnitOfMeasure?      @relation("InventoryUOM", fields: [unitOfMeasureId], references: [id])
  locationRef   Location?             @relation(fields: [locationId], references: [id])
  kitItems      KitItem[]

  @@index([partId])
  @@index([location])
  @@index([unitOfMeasureId])
  @@map("inventory")
}

model MaterialTransaction {
  id              String                  @id @default(cuid())
  inventoryId     String
  workOrderId     String?
  transactionType MaterialTransactionType
  quantity        Float
  unitOfMeasure   String
  unitOfMeasureId String?                 // FK to UnitOfMeasure
  reference       String?
  transactionDate DateTime                @default(now())
  createdAt       DateTime                @default(now())
  inventory       Inventory               @relation(fields: [inventoryId], references: [id])
  workOrder       WorkOrder?              @relation(fields: [workOrderId], references: [id])
  unitOfMeasureRef UnitOfMeasure?         @relation("MaterialTransactionUOM", fields: [unitOfMeasureId], references: [id])

  @@index([inventoryId])
  @@index([workOrderId])
  @@index([transactionType])
  @@index([unitOfMeasureId])
  @@map("material_transactions")
}

model SerializedPart {
  id                    String                 @id @default(cuid())
  persistentUuid        String?                @default(uuid()) // Aerospace traceability UUID for lifecycle tracking
  serialNumber          String                 @unique
  partId                String
  workOrderId           String?
  lotNumber             String?
  status                String
  currentLocation       String?              // Legacy location field (to be deprecated)
  currentLocationId     String?              // FK to Location
  manufactureDate       DateTime?
  shipDate              DateTime?
  customerInfo          String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  inspectionRecords     InspectionRecord[]
  components            PartGenealogy[]        @relation("ComponentPart")
  genealogy             PartGenealogy[]        @relation("ParentPart")
  qifMeasurementResults QIFMeasurementResult[]
  part                  Part                   @relation(fields: [partId], references: [id])
  currentLocationRef    Location?              @relation(fields: [currentLocationId], references: [id])

  // Life-Limited Parts (LLP) Relationships
  llpLifeHistory        LLPLifeHistory[]
  llpAlerts             LLPAlert[]
  llpCertifications     LLPCertification[]

  // Build Record Relationships
  buildRecords          BuildRecord[]

  // Issue #150: Advanced Serialization Workflows
  vendorSerial          VendorSerial?
  sourcePropagations    SerialPropagation[]        @relation("SourcePropagation")
  targetPropagations    SerialPropagation[]        @relation("TargetPropagation")
  lateAssignmentPlaceholder LateAssignmentPlaceholder?

  @@index([persistentUuid])
  @@map("serialized_parts")
}

model PartGenealogy {
  id               String         @id @default(cuid())
  persistentUuid   String?        @unique @default(uuid()) // Part assembly UUID for genealogy traceability
  parentPartId     String
  componentPartId  String
  assemblyDate     DateTime?
  assemblyOperator String?
  createdAt        DateTime       @default(now())
  componentPart    SerializedPart @relation("ComponentPart", fields: [componentPartId], references: [id])
  parentPart       SerializedPart @relation("ParentPart", fields: [parentPartId], references: [id])

  @@index([persistentUuid])
  @@map("part_genealogy")
}

model WorkInstruction {
  id                   String                    @id @default(cuid())
  title                String
  description          String?
  partId               String?
  operationId          String?
  version              String                    @default("1.0.0")
  status               WorkInstructionStatus     @default(DRAFT)
  effectiveDate        DateTime?
  supersededDate       DateTime?
  ecoNumber            String?
  approvedById         String?
  approvedAt           DateTime?
  approvalHistory      Json?
  createdById          String
  updatedById          String
  createdAt            DateTime                  @default(now())
  updatedAt            DateTime                  @updatedAt
  operationType        String?
  requiredForExecution Boolean                   @default(false)
  contentFormat        WorkInstructionFormat     @default(NATIVE)
  nativeContent        Json?
  importedFromFile     String?
  exportTemplateId     String?
  tags                 String[]
  categories           String[]
  keywords             String[]
  thumbnailUrl         String?
  operationStandard    Operation[]               @relation("OperationStandardWI")
  routingStepOverrides RoutingStep[]             @relation("RoutingStepWorkInstruction")
  mediaLibraryItems    WorkInstructionMedia[]
  relatedDocuments     WorkInstructionRelation[] @relation("ParentInstruction")
  steps                WorkInstructionStep[]
  approvedBy           User?                     @relation("WorkInstructionApprovedBy", fields: [approvedById], references: [id])
  createdBy            User                      @relation("WorkInstructionCreatedBy", fields: [createdById], references: [id])
  exportTemplate       ExportTemplate?           @relation(fields: [exportTemplateId], references: [id])
  updatedBy            User                      @relation("WorkInstructionUpdatedBy", fields: [updatedById], references: [id])

  // STEP AP242 Integration (Issue #220)
  stepModelUuid         String?                                       // 3D model UUID
  pmiViewStates         String[]                  @default([])        // Saved 3D view state IDs
  annotatedModelUrl     String?                                       // URL to annotated 3D model

  // 3D Model View Reference
  modelViewStates       ModelViewState[]

  // Issue #45: Work instruction view tracking
  workInstructionViews  WorkInstructionView[] @relation("WorkInstructionViewTracking")

  @@index([status])
  @@index([partId])
  @@index([contentFormat])
  @@index([tags])
  @@index([categories])
  @@index([stepModelUuid])
  @@map("work_instructions")
}

model WorkInstructionStep {
  id                String          @id @default(cuid())
  workInstructionId String
  stepNumber        Int
  title             String
  content           String
  imageUrls         String[]
  videoUrls         String[]
  attachmentUrls    String[]
  estimatedDuration Int?
  isCritical        Boolean         @default(false)
  requiresSignature Boolean         @default(false)
  dataEntryFields   Json?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  workInstruction   WorkInstruction @relation(fields: [workInstructionId], references: [id], onDelete: Cascade)

  @@unique([workInstructionId, stepNumber])
  @@index([workInstructionId])
  @@map("work_instruction_steps")
}

model WorkInstructionExecution {
  id                String                         @id @default(cuid())
  workInstructionId String
  workOrderId       String
  operationId       String?
  operatorId        String
  currentStepNumber Int                            @default(1)
  status            WorkInstructionExecutionStatus @default(IN_PROGRESS)
  startedAt         DateTime                       @default(now())
  completedAt       DateTime?
  createdAt         DateTime                       @default(now())
  updatedAt         DateTime                       @updatedAt
  operator          User                           @relation("WIExecutionOperator", fields: [operatorId], references: [id])
  stepExecutions    WorkInstructionStepExecution[]

  @@index([workOrderId])
  @@index([operatorId])
  @@map("work_instruction_executions")
}

model WorkInstructionStepExecution {
  id          String                   @id @default(cuid())
  executionId String
  stepNumber  Int
  status      String                   @default("PENDING")
  dataEntered Json?
  notes       String?
  signedById  String?
  signedAt    DateTime?
  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  execution   WorkInstructionExecution @relation(fields: [executionId], references: [id], onDelete: Cascade)
  signedBy    User?                    @relation("WIStepExecutionSignedBy", fields: [signedById], references: [id])

  @@unique([executionId, stepNumber])
  @@index([executionId])
  @@map("work_instruction_step_executions")
}

model ElectronicSignature {
  id                 String                   @id @default(cuid())
  signatureType      ElectronicSignatureType
  signatureLevel     ElectronicSignatureLevel
  userId             String
  signedEntityType   String
  signedEntityId     String
  signatureReason    String?
  signatureData      Json
  ipAddress          String
  userAgent          String
  timestamp          DateTime                 @default(now())
  biometricType      BiometricType?
  biometricTemplate  String?
  biometricScore     Float?
  signatureHash      String
  isValid            Boolean                  @default(true)
  invalidatedAt      DateTime?
  invalidatedById    String?
  invalidationReason String?
  signedDocument     Json?
  certificateId      String?
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  invalidatedBy      User?                    @relation("ElectronicSignatureInvalidatedBy", fields: [invalidatedById], references: [id])
  user               User                     @relation("ElectronicSignatureUser", fields: [userId], references: [id])

  @@index([userId])
  @@index([signedEntityType, signedEntityId])
  @@index([timestamp])
  @@map("electronic_signatures")
}

model FAIReport {
  id                    String                 @id @default(cuid())
  faiNumber             String                 @unique
  partId                String
  workOrderId           String?
  inspectionId          String?
  status                FAIStatus              @default(IN_PROGRESS)
  revisionLevel         String?
  form1Data             Json?
  form2Data             Json?
  createdById           String?
  reviewedById          String?
  approvedById          String?
  reviewedAt            DateTime?
  approvedAt            DateTime?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  characteristics       FAICharacteristic[]
  qifMeasurementPlans   QIFMeasurementPlan[]
  qifMeasurementResults QIFMeasurementResult[]

  @@index([partId])
  @@index([status])
  @@map("fai_reports")
}

model FAICharacteristic {
  id                   String    @id @default(cuid())
  faiReportId          String
  characteristicNumber Int
  characteristic       String
  specification        String
  requirement          String?
  toleranceType        String?
  nominalValue         Float?
  upperLimit           Float?
  lowerLimit           Float?
  unitOfMeasure        String?
  inspectionMethod     String?
  inspectionFrequency  String?
  measuredValues       Json
  actualValue          Float?
  deviation            Float?
  result               String?
  notes                String?
  verifiedById         String?
  verifiedAt           DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  faiReport            FAIReport @relation(fields: [faiReportId], references: [id], onDelete: Cascade)

  @@unique([faiReportId, characteristicNumber])
  @@index([faiReportId])
  @@map("fai_characteristics")
}

model AuditLog {
  id        String   @id @default(cuid())
  tableName String
  recordId  String
  action    String
  oldValues Json?
  newValues Json?
  userId    String?
  ipAddress String?
  userAgent String?
  timestamp DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

/// Enhanced maintenance work order model for comprehensive maintenance management (Issue #94)
model MaintenanceWorkOrder {
  id                      String            @id @default(cuid())
  workOrderNumber         String            @unique
  externalWorkOrderNumber String?           @unique
  equipmentId             String

  // Work order classification
  type                    MaintenanceType
  priority                Priority          @default(NORMAL)
  status                  MaintenanceStatus @default(PENDING)

  // Scheduling
  scheduledDate           DateTime?
  dueDate                 DateTime?
  startedAt               DateTime?
  completedAt             DateTime?

  // Description and analysis
  description             String
  problemDescription      String?
  rootCause               String?
  correctiveAction        String?
  workPerformed           String?
  notes                   String?

  // Assignment
  assignedToId            String?
  assignedTeam            String?

  // Labor tracking
  estimatedLaborHours     Decimal?
  actualLaborHours        Decimal?

  // Parts tracking
  estimatedPartsCost      Decimal?
  actualPartsCost         Decimal?

  // Downtime impact
  causedDowntime          Boolean           @default(false)
  downtimeMinutes         Int?

  // Follow-up tracking
  requiresFollowUp        Boolean           @default(false)
  followUpDate            DateTime?
  followUpWorkOrderId     String?

  // Legacy fields for backwards compatibility
  workType                String?
  scheduledStart          DateTime?
  scheduledFinish         DateTime?
  actualStart             DateTime?
  actualFinish            DateTime?
  failureCode             String?
  problemCode             String?
  causeCode               String?
  remedyCode              String?
  lastSyncedAt            DateTime?

  // Audit fields
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  createdById             String
  updatedById             String

  // Relations
  equipment               Equipment         @relation(fields: [equipmentId], references: [id])
  assignedTo              User?             @relation("MaintenanceWorkOrderAssignedTo", fields: [assignedToId], references: [id])
  laborEntries            LaborEntry[]      @relation("MaintenanceWorkOrderLabor")
  partsUsed               MaintenancePart[] @relation("MaintenanceWorkOrderParts")
  downtimeEvents          DowntimeEvent[]   @relation("DowntimeToMaintenanceWorkOrder")
  followUpWorkOrder       MaintenanceWorkOrder? @relation("FollowUpWorkOrder", fields: [followUpWorkOrderId], references: [id])
  parentWorkOrders        MaintenanceWorkOrder[] @relation("FollowUpWorkOrder")
  createdBy               User              @relation("MaintenanceWorkOrderCreatedBy", fields: [createdById], references: [id])
  updatedBy               User              @relation("MaintenanceWorkOrderUpdatedBy", fields: [updatedById], references: [id])

  @@index([workOrderNumber])
  @@index([externalWorkOrderNumber])
  @@index([equipmentId])
  @@index([status])
  @@index([type])
  @@index([priority])
  @@index([assignedToId])
  @@index([dueDate])
  @@index([scheduledDate])
  @@map("maintenance_work_orders")
}

model MeasurementEquipment {
  id                         String                      @id @default(cuid())
  externalGaugeId            String?                     @unique
  description                String
  manufacturer               String?
  model                      String?
  serialNumber               String?
  gaugeType                  String
  measurementType            String
  measurementRange           String?
  resolution                 Float?
  accuracy                   Float?
  location                   String?
  calibrationFrequency       Int?
  lastCalibrationDate        DateTime?
  nextCalibrationDate        DateTime?
  calibrationStatus          String                      @default("IN_CAL")
  isActive                   Boolean                     @default(true)
  lastSyncedAt               DateTime?
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt
  inspectionRecords          InspectionRecord[]
  operationGaugeRequirements OperationGaugeRequirement[]
  qifMeasurementResults      QIFMeasurementResult[]

  @@index([externalGaugeId])
  @@index([calibrationStatus])
  @@index([nextCalibrationDate])
  @@map("measurement_equipment")
}

model InspectionRecord {
  id                     String                @id @default(cuid())
  serializedPartId       String?
  measurementEquipmentId String?
  characteristic         String
  nominalValue           Float
  actualValue            Float
  lowerTolerance         Float
  upperTolerance         Float
  unit                   String
  result                 String
  inspectionDate         DateTime              @default(now())
  createdAt              DateTime              @default(now())
  measurementEquipment   MeasurementEquipment? @relation(fields: [measurementEquipmentId], references: [id])
  serializedPart         SerializedPart?       @relation(fields: [serializedPartId], references: [id])

  @@index([serializedPartId])
  @@index([measurementEquipmentId])
  @@index([result])
  @@map("inspection_records")
}

model CNCProgram {
  id                  String               @id @default(cuid())
  externalProgramId   String?              @unique
  programName         String
  partNumber          String
  operationCode       String
  revision            String
  revisionDate        DateTime
  status              String
  machineType         String?
  postProcessor       String?
  toolList            String?
  setupSheetUrl       String?
  approvedBy          String?
  approvalDate        DateTime?
  ecoNumber           String?
  effectiveDate       DateTime?
  firstPieceRequired  Boolean              @default(false)
  firstPieceApproved  Boolean              @default(false)
  firstPieceDate      DateTime?
  programUrl          String?
  stepAP242Url        String?
  pmiDataUrl          String?
  teamcenterItemId    String?
  lastSyncedAt        DateTime?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  programDownloadLogs ProgramDownloadLog[]

  @@index([programName])
  @@index([partNumber])
  @@index([status])
  @@index([revision])
  @@map("cnc_programs")
}

model ProgramDownloadLog {
  id                  String      @id @default(cuid())
  programId           String?
  programName         String
  revision            String
  machineId           String
  operatorBadgeNumber String
  workOrderNumber     String?
  downloadDate        DateTime    @default(now())
  authorized          Boolean
  authorizationMethod String
  createdAt           DateTime    @default(now())
  cncProgram          CNCProgram? @relation(fields: [programId], references: [id])

  @@index([programName])
  @@index([machineId])
  @@index([operatorBadgeNumber])
  @@index([downloadDate])
  @@map("program_download_logs")
}

model ProgramLoadAuthorization {
  id                    String   @id @default(cuid())
  authorizationId       String   @unique
  operatorBadgeNumber   String
  machineId             String
  programName           String
  programRevision       String
  partNumber            String
  workOrderNumber       String?
  authorized            Boolean
  authorizationDate     DateTime @default(now())
  operatorAuthenticated Boolean
  workOrderValid        Boolean
  certificationValid    Boolean
  programVersionValid   Boolean
  gaugeCalibrationValid Boolean
  failureReasons        String?
  validationDetails     Json?
  supervisorNotified    Boolean  @default(false)
  overrideReason        String?
  electronicSignature   String?
  createdAt             DateTime @default(now())

  @@index([authorizationId])
  @@index([operatorBadgeNumber])
  @@index([machineId])
  @@index([authorized])
  @@index([authorizationDate])
  @@map("program_load_authorizations")
}

model OperationGaugeRequirement {
  id                     String               @id @default(cuid())
  partNumber             String
  operationCode          String
  measurementEquipmentId String
  required               Boolean              @default(true)
  createdAt              DateTime             @default(now())
  measurementEquipment   MeasurementEquipment @relation(fields: [measurementEquipmentId], references: [id])

  @@unique([partNumber, operationCode, measurementEquipmentId])
  @@index([partNumber])
  @@index([operationCode])
  @@map("operation_gauge_requirements")
}

model Alert {
  id         String    @id @default(cuid())
  alertType  String
  severity   String
  message    String
  details    Json?
  resolved   Boolean   @default(false)
  resolvedBy String?
  resolvedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([alertType])
  @@index([severity])
  @@index([resolved])
  @@index([createdAt])
  @@map("alerts")
}

// ============================================================================
// ANDON SYSTEM MODELS (GitHub Issue #171)
// ============================================================================

model AndonAlert {
  id                    String              @id @default(cuid())
  alertNumber           String              @unique // Auto-generated sequential alert number
  title                 String              // Brief alert title
  description           String?             // Detailed description

  // Classification
  issueTypeId           String
  issueType             AndonIssueType      @relation(fields: [issueTypeId], references: [id])
  severity              AndonSeverity       // CRITICAL, HIGH, MEDIUM, LOW
  priority              AndonPriority       // URGENT, HIGH, NORMAL, LOW

  // Location context
  siteId                String?
  site                  Site?               @relation(fields: [siteId], references: [id])
  areaId                String?
  area                  Area?               @relation(fields: [areaId], references: [id])
  workCenterId          String?
  workCenter            WorkCenter?         @relation(fields: [workCenterId], references: [id])
  equipmentId           String?
  equipment             Equipment?          @relation(fields: [equipmentId], references: [id])

  // Work Order context (if applicable)
  workOrderId           String?
  workOrder             WorkOrder?          @relation(fields: [workOrderId], references: [id])
  operationId           String?
  operation             Operation?          @relation(fields: [operationId], references: [id])

  // Personnel
  raisedById            String              // User who raised the alert
  raisedBy              User                @relation("AndonAlertsRaised", fields: [raisedById], references: [id])
  assignedToId          String?             // Current assignee
  assignedTo            User?               @relation("AndonAlertsAssigned", fields: [assignedToId], references: [id])

  // Status tracking
  status                AndonAlertStatus    // OPEN, IN_PROGRESS, ESCALATED, RESOLVED, CLOSED
  statusHistory         Json[]              // Array of status changes with timestamps

  // Escalation tracking
  currentEscalationLevel Int                @default(0)
  nextEscalationAt      DateTime?           // When next escalation should occur
  escalationHistory     Json[]              // Array of escalation events

  // Resolution
  resolvedAt            DateTime?
  resolvedById          String?
  resolvedBy            User?               @relation("AndonAlertsResolved", fields: [resolvedById], references: [id])
  resolutionNotes       String?
  resolutionActionTaken String?

  // Timing
  responseTime          Int?                // Minutes from raised to first response
  resolutionTime        Int?                // Minutes from raised to resolution

  // Metadata and attachments
  metadata              Json?               // Flexible data storage
  attachments           Json[]              // File references, photos, etc.

  // Audit trail
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  // Relations
  escalationRuleResults AndonEscalationRuleResult[]

  @@index([alertNumber])
  @@index([status])
  @@index([severity])
  @@index([priority])
  @@index([issueTypeId])
  @@index([raisedById])
  @@index([assignedToId])
  @@index([siteId])
  @@index([createdAt])
  @@index([nextEscalationAt])
  @@map("andon_alerts")
}

model AndonIssueType {
  id                    String              @id @default(cuid())
  typeCode              String              @unique // QUALITY, SAFETY, EQUIPMENT, MATERIAL, etc.
  typeName              String              // Display name
  description           String?             // Detailed description

  // Configuration
  defaultSeverity       AndonSeverity       @default(MEDIUM)
  defaultPriority       AndonPriority       @default(NORMAL)
  requiresAttachment    Boolean             @default(false)
  requiresWorkOrder     Boolean             @default(false)
  requiresEquipment     Boolean             @default(false)

  // Auto-assignment rules
  autoAssignRole        String?             // Auto-assign to users with this role
  autoAssignUserId      String?             // Auto-assign to specific user
  autoAssignUser        User?               @relation(fields: [autoAssignUserId], references: [id])

  // Escalation behavior
  enableEscalation      Boolean             @default(true)
  escalationTimeoutMins Int?                @default(30) // Minutes before first escalation

  // Site-specific configuration
  siteId                String?             // null = global, specific site ID = site-specific
  site                  Site?               @relation(fields: [siteId], references: [id])

  // Visual configuration
  iconName              String?             // Icon for UI display
  colorCode             String?             // Color code for visual distinction

  // Status
  isActive              Boolean             @default(true)
  displayOrder          Int?                // Sort order in UI

  // Audit trail
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  createdBy             String
  updatedBy             String?

  // Relations
  alerts                AndonAlert[]
  escalationRules       AndonEscalationRule[]

  @@index([typeCode])
  @@index([siteId])
  @@index([isActive])
  @@index([displayOrder])
  @@map("andon_issue_types")
}

model AndonEscalationRule {
  id                    String              @id @default(cuid())
  ruleName              String              // Display name for the rule
  description           String?             // Rule description

  // Rule scope
  siteId                String?             // null = global, specific site ID = site-specific
  site                  Site?               @relation(fields: [siteId], references: [id])
  issueTypeId           String?             // null = all types, specific ID = type-specific
  issueType             AndonIssueType?     @relation(fields: [issueTypeId], references: [id])

  // Trigger conditions
  triggerSeverity       AndonSeverity[]     // Which severities trigger this rule
  triggerAfterMinutes   Int                 // Minutes after alert creation to trigger
  escalationLevel       Int                 // Which escalation level this rule applies to (0, 1, 2, etc.)

  // Escalation actions
  notifyUserIds         String[]            // User IDs to notify
  notifyRoles           String[]            // Role names to notify
  notifyChannels        String[]            // EMAIL, SMS, PUSH, etc.
  assignToUserId        String?             // Reassign alert to this user
  assignToUser          User?               @relation(fields: [assignToUserId], references: [id])
  assignToRole          String?             // Reassign to user with this role

  // Advanced conditions (JSON for flexibility)
  conditions            Json?               // Complex rule conditions

  // Rule execution tracking
  isActive              Boolean             @default(true)
  executionCount        Int                 @default(0)
  lastExecutedAt        DateTime?

  // Rule priority (for conflict resolution)
  priority              Int                 @default(100)

  // Audit trail
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  createdBy             String
  updatedBy             String?

  // Relations
  results               AndonEscalationRuleResult[]

  @@index([siteId])
  @@index([issueTypeId])
  @@index([escalationLevel])
  @@index([isActive])
  @@index([priority])
  @@map("andon_escalation_rules")
}

model AndonEscalationRuleResult {
  id                    String              @id @default(cuid())
  alertId               String
  alert                 AndonAlert          @relation(fields: [alertId], references: [id], onDelete: Cascade)
  ruleId                String
  rule                  AndonEscalationRule @relation(fields: [ruleId], references: [id])

  // Execution details
  executedAt            DateTime            @default(now())
  escalationLevel       Int
  success               Boolean             @default(true)
  errorMessage          String?

  // Actions taken
  actionsTaken          Json                // Details of notifications sent, assignments made, etc.
  notifiedUsers         String[]            // User IDs that were notified

  @@index([alertId])
  @@index([ruleId])
  @@index([executedAt])
  @@map("andon_escalation_rule_results")
}

model AndonConfiguration {
  id                    String              @id @default(cuid())
  configKey             String              @unique // Unique configuration key
  configValue           Json                // Configuration value (flexible JSON)
  description           String?             // Description of the configuration
  dataType              String              // STRING, NUMBER, BOOLEAN, JSON, ARRAY
  category              String              // GENERAL, ESCALATION, NOTIFICATION, UI, etc.

  // Validation
  isRequired            Boolean             @default(false)
  validationRules       Json?               // Validation constraints
  defaultValue          Json?               // Default value for the configuration

  // Security and access
  isEncrypted           Boolean             @default(false)
  accessLevel           String              @default("ADMIN") // ADMIN, MANAGER, SUPERVISOR

  // Status
  isActive              Boolean             @default(true)

  // Audit trail
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  lastModifiedBy        String
  lastModifiedByUser    User                @relation(fields: [lastModifiedBy], references: [id])

  @@index([configKey])
  @@index([category])
  @@index([isActive])
  @@map("andon_configurations")
}

model AndonSiteConfiguration {
  id                    String              @id @default(cuid())
  siteId                String
  site                  Site                @relation(fields: [siteId], references: [id], onDelete: Cascade)
  configKey             String              // References AndonConfiguration.configKey
  configValue           Json                // Site-specific override value

  // Override behavior
  isOverride            Boolean             @default(true) // Whether this overrides global config
  inheritFromGlobal     Boolean             @default(false) // Whether to inherit when not explicitly set

  // Status
  isActive              Boolean             @default(true)

  // Audit trail
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  lastModifiedBy        String
  lastModifiedByUser    User                @relation(fields: [lastModifiedBy], references: [id])

  @@unique([siteId, configKey]) // Ensures one override per site per config key
  @@index([siteId])
  @@index([configKey])
  @@index([isActive])
  @@map("andon_site_configurations")
}

model AndonNotificationTemplate {
  id                    String              @id @default(cuid())
  templateKey           String              @unique // ALERT_CREATED, ESCALATED, RESOLVED, etc.
  templateName          String              // Display name
  description           String?             // Template description

  // Template content
  subject               String              // Email subject or notification title
  bodyTemplate          String              // Template body with placeholders
  variables             Json                // Available template variables

  // Channel-specific templates
  emailTemplate         String?             // HTML email template
  smsTemplate           String?             // SMS message template
  pushTemplate          String?             // Push notification template

  // Site-specific template
  siteId                String?             // null = global, specific site ID = site-specific
  site                  Site?               @relation(fields: [siteId], references: [id])

  // Template settings
  isActive              Boolean             @default(true)
  priority              Int                 @default(100) // Priority for template selection

  // Audit trail
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  createdBy             String
  updatedBy             String?

  @@index([templateKey])
  @@index([siteId])
  @@index([isActive])
  @@map("andon_notification_templates")
}

model AndonSystemSettings {
  id                    String              @id @default(cuid())
  siteId                String?             // null = global, specific site ID = site-specific
  site                  Site?               @relation(fields: [siteId], references: [id])

  // Core feature toggles
  andonEnabled          Boolean             @default(true)
  escalationEnabled     Boolean             @default(true)
  notificationsEnabled  Boolean             @default(true)

  // Default behaviors
  defaultSeverity       AndonSeverity       @default(MEDIUM)
  defaultPriority       AndonPriority       @default(NORMAL)
  autoAssignEnabled     Boolean             @default(false)

  // Timing settings
  defaultResponseTimeMin Int?               @default(15) // Default response time target in minutes
  maxEscalationLevels   Int                 @default(3)
  baseEscalationDelayMin Int                @default(30) // Base escalation delay in minutes

  // UI/UX settings
  enableMobileAccess    Boolean             @default(true)
  enableKioskMode       Boolean             @default(true)
  requireComments       Boolean             @default(false)
  allowAnonymousReports Boolean             @default(false)

  // Integration settings
  integrationSettings   Json?               // Settings for external integrations

  // Audit trail
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  lastModifiedBy        String
  lastModifiedByUser    User                @relation(fields: [lastModifiedBy], references: [id])

  @@unique([siteId]) // One settings record per site (null for global)
  @@index([siteId])
  @@map("andon_system_settings")
}

model IntegrationConfig {
  id                           String                        @id @default(cuid())
  name                         String                        @unique
  displayName                  String
  type                         IntegrationType
  enabled                      Boolean                       @default(true)
  config                       Json
  lastSync                     DateTime?
  lastSyncStatus               String?
  lastError                    String?
  errorCount                   Int                           @default(0)
  totalSyncs                   Int                           @default(0)
  successCount                 Int                           @default(0)
  failureCount                 Int                           @default(0)
  syncSchedule                 Json?
  createdAt                    DateTime                      @default(now())
  updatedAt                    DateTime                      @updatedAt
  erpMaterialTransactions      ERPMaterialTransaction[]
  logs                         IntegrationLog[]
  webhooks                     ERPWebhookEndpoint[]
  personnelInfoExchanges       PersonnelInfoExchange[]
  productionPerformanceActuals ProductionPerformanceActual[]
  productionScheduleRequests   ProductionScheduleRequest[]

  @@index([name])
  @@index([type])
  @@index([enabled])
  @@map("integration_configs")
}

model IntegrationLog {
  id           String               @id @default(cuid())
  configId     String
  operation    String
  direction    IntegrationDirection
  status       IntegrationLogStatus
  recordCount  Int                  @default(0)
  successCount Int                  @default(0)
  errorCount   Int                  @default(0)
  duration     Int
  requestData  Json?
  responseData Json?
  errors       Json?
  details      Json?
  startedAt    DateTime             @default(now())
  completedAt  DateTime?
  createdAt    DateTime             @default(now())
  config       IntegrationConfig    @relation(fields: [configId], references: [id], onDelete: Cascade)

  @@index([configId])
  @@index([status])
  @@index([startedAt])
  @@index([operation])
  @@map("integration_logs")
}

/// Webhook Endpoints for ERP Integration Real-Time Notifications
/// Manages webhook registration, delivery, and event subscriptions
model ERPWebhookEndpoint {
  id                String                  @id @default(cuid())
  integrationId     String
  integration       IntegrationConfig       @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  // Webhook configuration
  url               String
  eventTypes        String[]                // Array of subscribed event types
  description       String?
  secret            String                  // HMAC secret for signature verification

  // Status and metrics
  isActive          Boolean                 @default(true)
  failureCount      Int                     @default(0)
  lastDeliveryAt    DateTime?
  lastErrorMessage  String?

  // Relationships
  deliveries        ERPWebhookDelivery[]

  // Audit trail
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt

  @@index([integrationId])
  @@index([isActive])
  @@index([createdAt])
  @@map("erp_webhook_endpoints")
}

/// Webhook Events - Records of events that were emitted
model ERPWebhookEvent {
  id                String                  @id @default(cuid())
  eventId           String                  @unique
  deliveries        ERPWebhookDelivery[]

  // Event details
  eventType         String
  integrationId     String
  payload           Json
  metadata          Json?

  // Audit trail
  createdAt         DateTime                @default(now())

  @@index([eventId])
  @@index([eventType])
  @@index([integrationId])
  @@index([createdAt])
  @@map("erp_webhook_events")
}

/// Webhook Deliveries - Records of delivery attempts with retry tracking
model ERPWebhookDelivery {
  id                String                  @id @default(cuid())
  webhookId         String
  webhook           ERPWebhookEndpoint      @relation(fields: [webhookId], references: [id], onDelete: Cascade)
  eventId           String
  event             ERPWebhookEvent         @relation(fields: [eventId], references: [eventId], onDelete: Cascade)

  // Delivery tracking
  status            String                  // PENDING, DELIVERED, FAILED, RETRYING
  attempt           Int                     @default(0)
  maxAttempts       Int                     @default(6)

  // Response data
  httpStatusCode    Int?
  responseBody      String?
  lastError         String?

  // Timing
  nextRetryAt       DateTime?
  lastAttemptAt     DateTime?
  deliveredAt       DateTime?

  // Audit trail
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt

  @@index([webhookId])
  @@index([eventId])
  @@index([status])
  @@index([nextRetryAt])
  @@index([createdAt])
  @@map("erp_webhook_deliveries")
}

model ProductionScheduleRequest {
  id                    String                      @id @default(cuid())
  messageId             String                      @unique
  configId              String
  scheduleType          ScheduleType
  priority              SchedulePriority
  requestedBy           String
  requestedDate         DateTime                    @default(now())
  effectiveStartDate    DateTime
  effectiveEndDate      DateTime
  workOrderId           String?
  externalWorkOrderId   String
  partId                String?
  partNumber            String?
  quantity              Float
  unitOfMeasure         String
  unitOfMeasureId       String?             // FK to UnitOfMeasure
  dueDate               DateTime
  workCenterId          String?
  equipmentRequirements Json?
  personnelRequirements Json?
  materialRequirements  Json?
  status                B2MMessageStatus
  processedAt           DateTime?
  errorMessage          String?
  validationErrors      Json?
  requestPayload        Json
  responsePayload       Json?
  createdAt             DateTime                    @default(now())
  updatedAt             DateTime                    @updatedAt
  config                IntegrationConfig           @relation(fields: [configId], references: [id], onDelete: Cascade)
  part                  Part?                       @relation(fields: [partId], references: [id])
  workCenter            Equipment?                  @relation(fields: [workCenterId], references: [id])
  workOrder             WorkOrder?                  @relation(fields: [workOrderId], references: [id])
  response              ProductionScheduleResponse?

  @@index([configId])
  @@index([status])
  @@index([externalWorkOrderId])
  @@index([requestedDate])
  @@map("production_schedule_requests")
}

model ProductionScheduleResponse {
  id                 String                    @id @default(cuid())
  requestId          String                    @unique
  messageId          String                    @unique
  accepted           Boolean
  confirmedStartDate DateTime?
  confirmedEndDate   DateTime?
  confirmedQuantity  Float?
  rejectionReason    String?
  modifications      Json?
  constraints        Json?
  proposedStartDate  DateTime?
  proposedEndDate    DateTime?
  proposedQuantity   Float?
  respondedBy        String
  respondedAt        DateTime                  @default(now())
  sentToERP          Boolean                   @default(false)
  sentAt             DateTime?
  responsePayload    Json
  createdAt          DateTime                  @default(now())
  request            ProductionScheduleRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)

  @@index([requestId])
  @@index([respondedAt])
  @@map("production_schedule_responses")
}

model ProductionPerformanceActual {
  id                   String            @id @default(cuid())
  messageId            String            @unique
  configId             String
  workOrderId          String
  externalWorkOrderId  String
  operationId          String?
  reportingPeriodStart DateTime
  reportingPeriodEnd   DateTime
  quantityProduced     Float
  quantityGood         Float
  quantityScrap        Float
  quantityRework       Float
  yieldPercentage      Float?
  setupTimeActual      Float?
  runTimeActual        Float?
  downtimeActual       Float?
  laborHoursActual     Float?
  laborCostActual      Float?
  materialCostActual   Float?
  overheadCostActual   Float?
  totalCostActual      Float?
  quantityVariance     Float?
  timeVariance         Float?
  costVariance         Float?
  efficiencyVariance   Float?
  personnelActuals     Json?
  equipmentActuals     Json?
  materialActuals      Json?
  status               B2MMessageStatus
  sentToERP            Boolean           @default(false)
  sentAt               DateTime?
  erpConfirmation      String?
  errorMessage         String?
  messagePayload       Json
  createdBy            String
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  config               IntegrationConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  workOrder            WorkOrder         @relation(fields: [workOrderId], references: [id], onDelete: Cascade)

  @@index([configId])
  @@index([workOrderId])
  @@index([externalWorkOrderId])
  @@index([status])
  @@index([sentToERP])
  @@index([reportingPeriodStart])
  @@map("production_performance_actuals")
}

model ERPMaterialTransaction {
  id                  String               @id @default(cuid())
  messageId           String               @unique
  configId            String
  transactionType     ERPTransactionType
  direction           IntegrationDirection
  transactionDate     DateTime             @default(now())
  partId              String?
  externalPartId      String
  fromLocation        String?
  toLocation          String?
  workOrderId         String?
  externalWorkOrderId String?
  quantity            Float
  unitOfMeasure       String
  unitOfMeasureId     String?              // FK to UnitOfMeasure
  lotNumber           String?
  serialNumber        String?
  unitCost            Float?
  totalCost           Float?
  currency            String?              @default("USD")    // Legacy field (to be deprecated)
  currencyId          String?                                 // FK to Currency
  movementType        String
  reasonCode          String?
  status              B2MMessageStatus
  processedAt         DateTime?
  erpTransactionId    String?
  errorMessage        String?
  messagePayload      Json
  createdBy           String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  config              IntegrationConfig    @relation(fields: [configId], references: [id], onDelete: Cascade)
  part                Part?                @relation(fields: [partId], references: [id])
  workOrder           WorkOrder?           @relation(fields: [workOrderId], references: [id])
  currencyRef         Currency?            @relation("ERPTransactionCurrency", fields: [currencyId], references: [id])

  @@index([configId])
  @@index([transactionType])
  @@index([status])
  @@index([externalPartId])
  @@index([transactionDate])
  @@map("erp_material_transactions")
}

model PersonnelInfoExchange {
  id                  String               @id @default(cuid())
  messageId           String               @unique
  configId            String
  personnelId         String?
  externalPersonnelId String
  actionType          PersonnelActionType
  direction           IntegrationDirection
  firstName           String?
  lastName            String?
  email               String?
  employeeNumber      String?
  department          String?
  departmentId        String?
  jobTitle            String?
  skills              Json?
  certifications      Json?
  qualifications      Json?
  shiftCode           String?
  workCalendar        String?
  availableFrom       DateTime?
  availableTo         DateTime?
  employmentStatus    String?
  lastWorkDate        DateTime?
  status              B2MMessageStatus
  processedAt         DateTime?
  errorMessage        String?
  messagePayload      Json
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  config              IntegrationConfig    @relation(fields: [configId], references: [id], onDelete: Cascade)
  departmentRelation  Department?          @relation("PersonnelDepartment", fields: [departmentId], references: [id])

  @@index([configId])
  @@index([actionType])
  @@index([status])
  @@index([externalPersonnelId])
  @@index([personnelId])
  @@index([departmentId])
  @@map("personnel_info_exchanges")
}

model EquipmentDataCollection {
  id                  String             @id @default(cuid())
  equipmentId         String
  dataCollectionType  DataCollectionType
  collectionTimestamp DateTime           @default(now())
  dataPointName       String
  dataPointId         String?
  numericValue        Float?
  stringValue         String?
  booleanValue        Boolean?
  jsonValue           Json?
  unitOfMeasure       String?
  quality             String?
  workOrderId         String?
  operationId         String?
  productionRunId     String?
  equipmentState      String?
  protocol            String?
  sourceAddress       String?
  createdAt           DateTime           @default(now())
  equipment           Equipment          @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  workOrder           WorkOrder?         @relation(fields: [workOrderId], references: [id])

  @@index([equipmentId])
  @@index([dataCollectionType])
  @@index([collectionTimestamp])
  @@index([workOrderId])
  @@index([dataPointName])
  @@map("equipment_data_collections")
}

model EquipmentCommand {
  id              String        @id @default(cuid())
  equipmentId     String
  commandType     CommandType
  commandStatus   CommandStatus @default(PENDING)
  commandName     String
  commandPayload  Json?
  workOrderId     String?
  operationId     String?
  issuedAt        DateTime      @default(now())
  sentAt          DateTime?
  acknowledgedAt  DateTime?
  completedAt     DateTime?
  responsePayload Json?
  responseCode    String?
  responseMessage String?
  timeoutSeconds  Int           @default(30)
  retryCount      Int           @default(0)
  maxRetries      Int           @default(3)
  priority        Int           @default(5)
  issuedBy        String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  equipment       Equipment     @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  workOrder       WorkOrder?    @relation(fields: [workOrderId], references: [id])

  @@index([equipmentId])
  @@index([commandType])
  @@index([commandStatus])
  @@index([workOrderId])
  @@index([issuedAt])
  @@index([priority])
  @@map("equipment_commands")
}

model EquipmentMaterialMovement {
  id                String     @id @default(cuid())
  equipmentId       String
  partId            String?
  partNumber        String
  lotNumber         String?
  serialNumber      String?
  movementType      String
  quantity          Float
  unitOfMeasure     String
  unitOfMeasureId   String?    // FK to UnitOfMeasure
  movementTimestamp DateTime   @default(now())
  workOrderId       String?
  operationId       String?
  fromLocation      String?
  toLocation        String?
  qualityStatus     String?
  upstreamTraceId   String?
  downstreamTraceId String?
  recordedBy        String
  createdAt         DateTime   @default(now())
  equipment         Equipment  @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  part              Part?      @relation(fields: [partId], references: [id])
  workOrder         WorkOrder? @relation(fields: [workOrderId], references: [id])

  @@index([equipmentId])
  @@index([partId])
  @@index([partNumber])
  @@index([lotNumber])
  @@index([serialNumber])
  @@index([workOrderId])
  @@index([movementTimestamp])
  @@index([movementType])
  @@map("equipment_material_movements")
}

model ProcessDataCollection {
  id                 String     @id @default(cuid())
  equipmentId        String
  processName        String
  processStepNumber  Int?
  startTimestamp     DateTime
  endTimestamp       DateTime?
  duration           Float?
  workOrderId        String?
  operationId        String?
  partNumber         String?
  lotNumber          String?
  serialNumber       String?
  parameters         Json
  quantityProduced   Float?
  quantityGood       Float?
  quantityScrap      Float?
  inSpecCount        Int?
  outOfSpecCount     Int?
  averageUtilization Float?
  peakUtilization    Float?
  alarmCount         Int        @default(0)
  criticalAlarmCount Int        @default(0)
  operatorId         String?
  supervisorId       String?
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  equipment          Equipment  @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  workOrder          WorkOrder? @relation(fields: [workOrderId], references: [id])

  @@index([equipmentId])
  @@index([processName])
  @@index([workOrderId])
  @@index([startTimestamp])
  @@index([partNumber])
  @@index([lotNumber])
  @@index([serialNumber])
  @@map("process_data_collections")
}

model QIFMeasurementPlan {
  id                  String                 @id @default(cuid())
  qifPlanUuid         String                 @unique @default(uuid()) /// QIF plan UUID per NIST AMS 300-12 standards
  qifPlanId           String?                @unique /// Legacy QIF plan ID (deprecated, use qifPlanUuid)
  partNumber          String
  partRevision        String
  planVersion         String
  planName            String?
  description         String?
  createdDate         DateTime               @default(now())
  createdBy           String?
  qifXmlContent       String
  qifVersion          String                 @default("3.0.0")
  characteristicCount Int                    @default(0)
  workOrderId         String?
  faiReportId         String?
  status              String                 @default("ACTIVE")
  supersededBy        String?
  lastSyncedAt        DateTime?
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  characteristics     QIFCharacteristic[]
  faiReport           FAIReport?             @relation(fields: [faiReportId], references: [id])
  workOrder           WorkOrder?             @relation(fields: [workOrderId], references: [id])
  measurementResults  QIFMeasurementResult[]

  @@index([partNumber])
  @@index([partRevision])
  @@index([qifPlanUuid])
  @@index([qifPlanId])
  @@index([workOrderId])
  @@index([faiReportId])
  @@index([status])
  @@map("qif_measurement_plans")
}

model QIFCharacteristic {
  id                   String             @id @default(cuid())
  qifMeasurementPlanId String
  characteristicUuid   String             @unique @default(uuid()) /// QIF characteristic UUID per NIST AMS 300-12 standards
  characteristicId     String?            /// Legacy characteristic ID (deprecated, use characteristicUuid)
  balloonNumber        String?
  characteristicName   String?
  description          String?
  nominalValue         Float?
  upperTolerance       Float?
  lowerTolerance       Float?
  toleranceType        String?
  gdtType              String?
  datumReferenceFrame  String?
  materialCondition    String?
  measurementMethod    String?
  samplingRequired     Boolean            @default(false)
  sampleSize           Int?
  sequenceNumber       Int?
  createdAt            DateTime           @default(now())
  qifMeasurementPlan   QIFMeasurementPlan @relation(fields: [qifMeasurementPlanId], references: [id], onDelete: Cascade)
  measurements         QIFMeasurement[]

  @@index([qifMeasurementPlanId])
  @@index([characteristicUuid])
  @@index([characteristicId])
  @@index([balloonNumber])
  @@map("qif_characteristics")
}

model QIFMeasurementResult {
  id                   String                @id @default(cuid())
  qifResultsUuid       String                @unique @default(uuid()) /// QIF measurement results UUID per NIST AMS 300-12 standards
  qifResultsId         String?               @unique /// Legacy QIF results ID (deprecated, use qifResultsUuid)
  qifMeasurementPlanId String?
  partNumber           String
  serialNumber         String?
  lotNumber            String?
  inspectionDate       DateTime
  inspectedBy          String
  inspectionType       String?
  overallStatus        String
  totalMeasurements    Int                   @default(0)
  passedMeasurements   Int                   @default(0)
  failedMeasurements   Int                   @default(0)
  qifXmlContent        String
  qifVersion           String                @default("3.0.0")
  workOrderId          String?
  serializedPartId     String?
  faiReportId          String?
  measurementDeviceId  String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  faiReport            FAIReport?            @relation(fields: [faiReportId], references: [id])
  measurementDevice    MeasurementEquipment? @relation(fields: [measurementDeviceId], references: [id])
  qifMeasurementPlan   QIFMeasurementPlan?   @relation(fields: [qifMeasurementPlanId], references: [id])
  serializedPart       SerializedPart?       @relation(fields: [serializedPartId], references: [id])
  workOrder            WorkOrder?            @relation(fields: [workOrderId], references: [id])
  measurements         QIFMeasurement[]

  @@index([qifResultsUuid])
  @@index([qifResultsId])
  @@index([qifMeasurementPlanId])
  @@index([partNumber])
  @@index([serialNumber])
  @@index([inspectionDate])
  @@index([overallStatus])
  @@index([workOrderId])
  @@index([faiReportId])
  @@map("qif_measurement_results")
}

model QIFMeasurement {
  id                     String               @id @default(cuid())
  qifMeasurementResultId String
  qifCharacteristicId    String?
  characteristicUuidRef  String?              /// QIF characteristic UUID reference per NIST AMS 300-12 standards
  characteristicId       String?              /// Legacy characteristic ID (deprecated, use characteristicUuidRef)
  balloonNumber          String?
  measuredValue          Float
  deviation              Float?
  status                 String
  measurementDate        DateTime?
  measuredBy             String?
  measurementDevice      String?
  uncertainty            Float?
  uncertaintyK           Float?
  notes                  String?
  createdAt              DateTime             @default(now())
  qifCharacteristic      QIFCharacteristic?   @relation(fields: [qifCharacteristicId], references: [id])
  qifMeasurementResult   QIFMeasurementResult @relation(fields: [qifMeasurementResultId], references: [id], onDelete: Cascade)

  @@index([qifMeasurementResultId])
  @@index([qifCharacteristicId])
  @@index([characteristicUuidRef])
  @@index([characteristicId])
  @@index([status])
  @@map("qif_measurements")
}

model SPCConfiguration {
  id                 String                 @id @default(cuid())
  parameterId        String                 @unique
  chartType          SPCChartType
  subgroupSize       Int?
  UCL                Float?
  centerLine         Float?
  LCL                Float?
  rangeUCL           Float?
  rangeCL            Float?
  rangeLCL           Float?
  USL                Float?
  LSL                Float?
  targetValue        Float?
  limitsBasedOn      LimitCalculationMethod
  historicalDataDays Int?
  lastCalculatedAt   DateTime?
  enabledRules       Json
  ruleSensitivity    String                 @default("NORMAL")
  enableCapability   Boolean                @default(true)
  confidenceLevel    Float                  @default(0.95)
  isActive           Boolean                @default(true)
  createdBy          String
  lastModifiedBy     String?
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  parameter          OperationParameter     @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  violations         SPCRuleViolation[]

  @@map("spc_configurations")
}

model SPCRuleViolation {
  id              String           @id @default(cuid())
  configurationId String
  ruleNumber      Int
  ruleName        String
  severity        String
  dataPointId     String?
  value           Float
  timestamp       DateTime
  subgroupNumber  Int?
  UCL             Float?
  LCL             Float?
  centerLine      Float?
  deviationSigma  Float?
  acknowledged    Boolean          @default(false)
  acknowledgedBy  String?
  acknowledgedAt  DateTime?
  resolution      String?

  // CAPA Integration - Link to corrective action
  correctiveActionId String?
  correctiveAction   CorrectiveAction? @relation(fields: [correctiveActionId], references: [id], onDelete: SetNull)

  createdAt       DateTime         @default(now())
  configuration   SPCConfiguration @relation(fields: [configurationId], references: [id], onDelete: Cascade)

  @@index([configurationId, timestamp])
  @@index([acknowledged])
  @@index([correctiveActionId])
  @@map("spc_rule_violations")
}

model SamplingPlan {
  id                        String                     @id @default(cuid())
  planName                  String
  planType                  SamplingPlanType
  parameterId               String?
  operationId               String?
  inspectionLevel           String
  AQL                       Float
  lotSizeMin                Int?
  lotSizeMax                Int?
  sampleSizeNormal          Int
  acceptanceNumber          Int
  rejectionNumber           Int
  sampleSizeTightened       Int?
  acceptanceNumberTightened Int?
  sampleSizeReduced         Int?
  acceptanceNumberReduced   Int?
  sampleSize2               Int?
  acceptanceNumber2         Int?
  rejectionNumber2          Int?
  currentInspectionLevel    String                     @default("NORMAL")
  consecutiveAccepted       Int                        @default(0)
  consecutiveRejected       Int                        @default(0)
  isActive                  Boolean                    @default(true)
  createdBy                 String
  lastModifiedBy            String?
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  inspectionResults         SamplingInspectionResult[]
  operation                 Operation?                 @relation(fields: [operationId], references: [id])
  parameter                 OperationParameter?        @relation(fields: [parameterId], references: [id])

  @@map("sampling_plans")
}

model SamplingInspectionResult {
  id              String       @id @default(cuid())
  planId          String
  lotNumber       String
  lotSize         Int
  inspectionDate  DateTime
  sampleSize      Int
  defectsFound    Int
  decision        String
  inspectionLevel String
  inspectorId     String
  notes           String?
  createdAt       DateTime     @default(now())
  plan            SamplingPlan @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@index([planId, inspectionDate])
  @@map("sampling_inspection_results")
}

/// Work Instruction Media - Enhanced media library for work instructions
model WorkInstructionMedia {
  id            String          @id @default(cuid())
  instructionId String
  mediaType     MediaType
  fileName      String
  fileUrl       String
  fileSize      Int
  mimeType      String
  title         String?
  description   String?
  tags          String[]
  annotations   Json?
  usageCount    Int             @default(0)
  lastUsedAt    DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  instruction   WorkInstruction @relation(fields: [instructionId], references: [id], onDelete: Cascade)

  @@index([instructionId])
  @@index([mediaType])
  @@map("work_instruction_media")
}

/// Work Instruction Relation - Relationships between work instructions
model WorkInstructionRelation {
  id           String          @id @default(cuid())
  parentId     String
  relatedId    String
  relationType RelationType
  description  String?
  createdAt    DateTime        @default(now())
  parent       WorkInstruction @relation("ParentInstruction", fields: [parentId], references: [id], onDelete: Cascade)

  @@unique([parentId, relatedId, relationType])
  @@index([parentId])
  @@index([relatedId])
  @@map("work_instruction_relations")
}

/// Export Template - Templates for exporting work instructions
model ExportTemplate {
  id             String             @id @default(cuid())
  name           String
  description    String?
  templateType   ExportTemplateType
  templateFormat ExportFormat
  headerTemplate String?
  footerTemplate String?
  styles         Json?
  layout         Json?
  isDefault      Boolean            @default(false)
  isActive       Boolean            @default(true)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  createdById    String
  updatedById    String
  instructions   WorkInstruction[]

  @@index([templateType])
  @@index([templateFormat])
  @@map("export_templates")
}

/// Data Collection Field Template - Reusable field templates
model DataCollectionFieldTemplate {
  id              String   @id @default(cuid())
  name            String
  description     String?
  fieldSchema     Json
  validationRules Json?
  category        String?
  tags            String[]
  usageCount      Int      @default(0)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdById     String

  @@index([category])
  @@index([tags])
  @@map("data_collection_field_templates")
}

model SetupSheet {
  id                 String                @id @default(cuid())
  documentNumber     String                @unique
  title              String
  description        String?
  version            String                @default("1.0.0")
  status             WorkInstructionStatus @default(DRAFT)
  effectiveDate      DateTime?
  supersededDate     DateTime?
  ecoNumber          String?
  equipmentId        String?
  operationId        String?
  partId             String?
  workCenterId       String?
  estimatedSetupTime Int?
  safetyChecklist    Json?
  requiredPPE        String[]
  imageUrls          String[]
  videoUrls          String[]
  attachmentUrls     String[]
  tags               String[]
  categories         String[]
  keywords           String[]
  thumbnailUrl       String?
  parentVersionId    String?
  approvalWorkflowId String?
  approvedById       String?
  approvedAt         DateTime?
  approvalHistory    Json?
  isActive           Boolean               @default(true)
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  createdById        String
  updatedById        String
  executions         SetupExecution[]
  parameters         SetupParameter[]
  approvedBy         User?                 @relation("SetupSheetApprovedBy", fields: [approvedById], references: [id])
  createdBy          User                  @relation("SetupSheetCreatedBy", fields: [createdById], references: [id])
  parentVersion      SetupSheet?           @relation("SetupSheetVersionHistory", fields: [parentVersionId], references: [id])
  childVersions      SetupSheet[]          @relation("SetupSheetVersionHistory")
  updatedBy          User                  @relation("SetupSheetUpdatedBy", fields: [updatedById], references: [id])
  steps              SetupStep[]
  toolList           SetupTool[]

  @@index([documentNumber])
  @@index([status])
  @@index([equipmentId])
  @@index([operationId])
  @@index([partId])
  @@map("setup_sheets")
}

model SetupStep {
  id                   String     @id @default(cuid())
  setupSheetId         String
  stepNumber           Int
  title                String
  instructions         String
  imageUrls            String[]
  videoUrls            String[]
  estimatedDuration    Int?
  isCritical           Boolean    @default(false)
  requiresVerification Boolean    @default(false)
  setupSheet           SetupSheet @relation(fields: [setupSheetId], references: [id], onDelete: Cascade)

  @@unique([setupSheetId, stepNumber])
  @@index([setupSheetId])
  @@map("setup_steps")
}

model SetupParameter {
  id                 String     @id @default(cuid())
  setupSheetId       String
  parameterName      String
  targetValue        String
  tolerance          String?
  unit               String?
  equipmentSetting   String?
  verificationMethod String?
  setupSheet         SetupSheet @relation(fields: [setupSheetId], references: [id], onDelete: Cascade)

  @@index([setupSheetId])
  @@map("setup_parameters")
}

model SetupTool {
  id           String     @id @default(cuid())
  setupSheetId String
  toolId       String?
  toolName     String
  toolNumber   String?
  quantity     Int        @default(1)
  toolOffset   String?
  notes        String?
  setupSheet   SetupSheet @relation(fields: [setupSheetId], references: [id], onDelete: Cascade)

  @@index([setupSheetId])
  @@index([toolId])
  @@map("setup_tools")
}

model SetupExecution {
  id                String                         @id @default(cuid())
  setupSheetId      String
  workOrderId       String?
  operationId       String?
  startedById       String
  startedAt         DateTime                       @default(now())
  completedById     String?
  completedAt       DateTime?
  actualSetupTime   Int?
  verificationData  Json?
  firstPieceResults Json?
  status            WorkInstructionExecutionStatus @default(IN_PROGRESS)
  completedBy       User?                          @relation("SetupExecutionCompletedBy", fields: [completedById], references: [id])
  setupSheet        SetupSheet                     @relation(fields: [setupSheetId], references: [id])
  startedBy         User                           @relation("SetupExecutionStartedBy", fields: [startedById], references: [id])

  @@index([setupSheetId])
  @@index([workOrderId])
  @@map("setup_executions")
}

model InspectionPlan {
  id                 String                     @id @default(cuid())
  documentNumber     String                     @unique
  title              String
  description        String?
  version            String                     @default("1.0.0")
  status             WorkInstructionStatus      @default(DRAFT)
  effectiveDate      DateTime?
  supersededDate     DateTime?
  ecoNumber          String?
  partId             String?
  operationId        String?
  inspectionType     InspectionType
  frequency          InspectionFrequency
  samplingPlan       Json?
  dispositionRules   Json?
  gageRRRequired     Boolean                    @default(false)
  gageRRFrequency    String?
  imageUrls          String[]
  videoUrls          String[]
  attachmentUrls     String[]
  tags               String[]
  categories         String[]
  keywords           String[]
  thumbnailUrl       String?
  parentVersionId    String?
  approvalWorkflowId String?
  approvedById       String?
  approvedAt         DateTime?
  approvalHistory    Json?
  isActive           Boolean                    @default(true)
  createdAt          DateTime                   @default(now())
  updatedAt          DateTime                   @updatedAt
  createdById        String
  updatedById        String
  characteristics    InspectionCharacteristic[]
  executions         InspectionExecution[]
  approvedBy         User?                      @relation("InspectionPlanApprovedBy", fields: [approvedById], references: [id])
  createdBy          User                       @relation("InspectionPlanCreatedBy", fields: [createdById], references: [id])
  parentVersion      InspectionPlan?            @relation("InspectionPlanVersionHistory", fields: [parentVersionId], references: [id])
  childVersions      InspectionPlan[]           @relation("InspectionPlanVersionHistory")
  updatedBy          User                       @relation("InspectionPlanUpdatedBy", fields: [updatedById], references: [id])
  steps              InspectionStep[]

  @@index([documentNumber])
  @@index([status])
  @@index([partId])
  @@index([operationId])
  @@index([inspectionType])
  @@map("inspection_plans")
}

model InspectionCharacteristic {
  id                   String          @id @default(cuid())
  inspectionPlanId     String
  characteristicNumber Int
  characteristicName   String
  measurementType      MeasurementType
  nominal              Float?
  upperLimit           Float?
  lowerLimit           Float?
  unit                 String?
  measurementMethod    String?
  gageType             String?
  isCritical           Boolean         @default(false)
  inspectionPlan       InspectionPlan  @relation(fields: [inspectionPlanId], references: [id], onDelete: Cascade)

  @@unique([inspectionPlanId, characteristicNumber])
  @@index([inspectionPlanId])
  @@map("inspection_characteristics")
}

model InspectionStep {
  id                 String         @id @default(cuid())
  inspectionPlanId   String
  stepNumber         Int
  title              String
  instructions       String
  characteristicRefs Int[]
  imageUrls          String[]
  inspectionPlan     InspectionPlan @relation(fields: [inspectionPlanId], references: [id], onDelete: Cascade)

  @@unique([inspectionPlanId, stepNumber])
  @@index([inspectionPlanId])
  @@map("inspection_steps")
}

model InspectionExecution {
  id               String           @id @default(cuid())
  inspectionPlanId String
  workOrderId      String?
  operationId      String?
  lotNumber        String?
  serialNumber     String?
  inspectorId      String
  inspectedAt      DateTime         @default(now())
  results          Json
  overallResult    InspectionResult
  defectsFound     Json?
  disposition      Disposition?
  signatureId      String?
  inspectionPlan   InspectionPlan   @relation(fields: [inspectionPlanId], references: [id])
  inspector        User             @relation("InspectionExecutionInspector", fields: [inspectorId], references: [id])

  @@index([inspectionPlanId])
  @@index([workOrderId])
  @@index([inspectedAt])
  @@map("inspection_executions")
}

model StandardOperatingProcedure {
  id                 String                       @id @default(cuid())
  documentNumber     String                       @unique
  title              String
  description        String?
  version            String                       @default("1.0.0")
  status             WorkInstructionStatus        @default(DRAFT)
  effectiveDate      DateTime?
  supersededDate     DateTime?
  ecoNumber          String?
  sopType            SOPType
  scope              String
  applicability      String?
  responsibleRoles   String[]
  references         Json?
  safetyWarnings     String[]
  requiredPPE        String[]
  emergencyProcedure String?
  trainingRequired   Boolean                      @default(false)
  trainingFrequency  String?
  reviewFrequency    String?
  nextReviewDate     DateTime?
  imageUrls          String[]
  videoUrls          String[]
  attachmentUrls     String[]
  tags               String[]
  categories         String[]
  keywords           String[]
  thumbnailUrl       String?
  parentVersionId    String?
  approvalWorkflowId String?
  approvedById       String?
  approvedAt         DateTime?
  approvalHistory    Json?
  isActive           Boolean                      @default(true)
  createdAt          DateTime                     @default(now())
  updatedAt          DateTime                     @updatedAt
  createdById        String
  updatedById        String
  acknowledgments    SOPAcknowledgment[]
  audits             SOPAudit[]
  steps              SOPStep[]
  approvedBy         User?                        @relation("SOPApprovedBy", fields: [approvedById], references: [id])
  createdBy          User                         @relation("SOPCreatedBy", fields: [createdById], references: [id])
  parentVersion      StandardOperatingProcedure?  @relation("SOPVersionHistory", fields: [parentVersionId], references: [id])
  childVersions      StandardOperatingProcedure[] @relation("SOPVersionHistory")
  updatedBy          User                         @relation("SOPUpdatedBy", fields: [updatedById], references: [id])

  @@index([documentNumber])
  @@index([status])
  @@index([sopType])
  @@index([nextReviewDate])
  @@map("standard_operating_procedures")
}

model SOPStep {
  id           String                     @id @default(cuid())
  sopId        String
  stepNumber   Int
  title        String
  instructions String
  isWarning    Boolean                    @default(false)
  isCritical   Boolean                    @default(false)
  imageUrls    String[]
  videoUrls    String[]
  sop          StandardOperatingProcedure @relation(fields: [sopId], references: [id], onDelete: Cascade)

  @@unique([sopId, stepNumber])
  @@index([sopId])
  @@map("sop_steps")
}

model SOPAcknowledgment {
  id                  String                     @id @default(cuid())
  sopId               String
  userId              String
  userName            String
  acknowledgedAt      DateTime                   @default(now())
  trainingCompletedAt DateTime?
  assessmentScore     Float?
  assessmentPassed    Boolean?
  signatureId         String?
  sop                 StandardOperatingProcedure @relation(fields: [sopId], references: [id])
  user                User                       @relation("SOPAcknowledgmentUser", fields: [userId], references: [id])

  @@unique([sopId, userId])
  @@index([sopId])
  @@index([userId])
  @@map("sop_acknowledgments")
}

model SOPAudit {
  id                String                     @id @default(cuid())
  sopId             String
  auditDate         DateTime
  auditorId         String
  auditorName       String
  complianceChecks  Json
  overallCompliance Boolean
  findingsCount     Int                        @default(0)
  findings          String?
  correctiveActions Json?
  auditor           User                       @relation("SOPAuditAuditor", fields: [auditorId], references: [id])
  sop               StandardOperatingProcedure @relation(fields: [sopId], references: [id])

  @@index([sopId])
  @@index([auditDate])
  @@map("sop_audits")
}

model ToolDrawing {
  id                   String                  @id @default(cuid())
  documentNumber       String                  @unique
  title                String
  description          String?
  version              String                  @default("1.0.0")
  status               WorkInstructionStatus   @default(DRAFT)
  effectiveDate        DateTime?
  supersededDate       DateTime?
  ecoNumber            String?
  toolType             ToolType
  toolSubtype          String?
  dimensions           Json?
  material             String?
  weight               Float?
  weightUnit           String?
  vendorId             String?
  vendorName           String?
  vendorPartNumber     String?
  catalogNumber        String?
  cost                 Float?
  costCurrency         String?                     // Legacy field (to be deprecated)
  costCurrencyId       String?                     // FK to Currency
  applicablePartIds    String[]
  applicableOperations String[]
  usageInstructions    String?
  maintenanceProcedure String?
  requiresCalibration  Boolean                 @default(false)
  calibrationInterval  Int?
  lastCalibrationDate  DateTime?
  nextCalibrationDate  DateTime?
  storageLocation      String?
  quantityOnHand       Int?
  minimumQuantity      Int?
  cadFileUrls          String[]
  imageUrls            String[]
  videoUrls            String[]
  attachmentUrls       String[]
  tags                 String[]
  categories           String[]
  keywords             String[]
  thumbnailUrl         String?
  parentVersionId      String?
  approvalWorkflowId   String?
  approvedById         String?
  approvedAt           DateTime?
  approvalHistory      Json?
  isActive             Boolean                 @default(true)
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
  createdById          String
  updatedById          String
  calibrationRecords   ToolCalibrationRecord[]
  approvedBy           User?                   @relation("ToolDrawingApprovedBy", fields: [approvedById], references: [id])
  createdBy            User                    @relation("ToolDrawingCreatedBy", fields: [createdById], references: [id])
  parentVersion        ToolDrawing?            @relation("ToolDrawingVersionHistory", fields: [parentVersionId], references: [id])
  childVersions        ToolDrawing[]           @relation("ToolDrawingVersionHistory")
  updatedBy            User                    @relation("ToolDrawingUpdatedBy", fields: [updatedById], references: [id])
  maintenanceRecords   ToolMaintenanceRecord[]
  usageLogs            ToolUsageLog[]
  costCurrencyRef      Currency?               @relation("ToolDrawingCostCurrency", fields: [costCurrencyId], references: [id])

  @@index([documentNumber])
  @@index([status])
  @@index([toolType])
  @@index([vendorId])
  @@index([nextCalibrationDate])
  @@map("tool_drawings")
}

model ToolMaintenanceRecord {
  id                  String          @id @default(cuid())
  toolDrawingId       String
  maintenanceDate     DateTime
  performedById       String
  performedByName     String
  maintenanceType     MaintenanceType
  description         String
  partsReplaced       Json?
  cost                Float?
  toolConditionBefore String?
  toolConditionAfter  String?
  performedBy         User            @relation("ToolMaintenancePerformedBy", fields: [performedById], references: [id])
  toolDrawing         ToolDrawing     @relation(fields: [toolDrawingId], references: [id])

  @@index([toolDrawingId])
  @@index([maintenanceDate])
  @@map("tool_maintenance_records")
}

model ToolCalibrationRecord {
  id                  String      @id @default(cuid())
  toolDrawingId       String
  calibrationDate     DateTime
  performedById       String
  performedByName     String
  calibrationResults  Json
  passed              Boolean
  certificationNumber String?
  certificateUrl      String?
  nextDueDate         DateTime
  performedBy         User        @relation("ToolCalibrationPerformedBy", fields: [performedById], references: [id])
  toolDrawing         ToolDrawing @relation(fields: [toolDrawingId], references: [id])

  @@index([toolDrawingId])
  @@index([calibrationDate])
  @@map("tool_calibration_records")
}

model ToolUsageLog {
  id                String      @id @default(cuid())
  toolDrawingId     String
  usedAt            DateTime    @default(now())
  usedById          String
  usedByName        String
  workOrderId       String?
  operationId       String?
  usageDuration     Int?
  conditionAfterUse String?
  toolDrawing       ToolDrawing @relation(fields: [toolDrawingId], references: [id])
  usedBy            User        @relation("ToolUsageLogUsedBy", fields: [usedById], references: [id])

  @@index([toolDrawingId])
  @@index([usedAt])
  @@map("tool_usage_logs")
}

model DocumentTemplate {
  id               String       @id @default(cuid())
  name             String
  description      String?
  documentType     DocumentType
  templateData     Json
  defaultValues    Json?
  isPublic         Boolean      @default(false)
  isSystemTemplate Boolean      @default(false)
  tags             String[]
  category         String?
  usageCount       Int          @default(0)
  isActive         Boolean      @default(true)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  createdById      String
  updatedById      String
  createdBy        User         @relation("DocumentTemplateCreatedBy", fields: [createdById], references: [id])
  updatedBy        User         @relation("DocumentTemplateUpdatedBy", fields: [updatedById], references: [id])

  @@index([documentType])
  @@index([isPublic])
  @@index([category])
  @@map("document_templates")
}

/// User Workstation Preference - Manages user layout preferences for work instruction execution
model UserWorkstationPreference {
  id                    String         @id @default(cuid())
  userId                String
  workstationId         String?
  layoutMode            LayoutMode     @default(SPLIT_VERTICAL)
  splitRatio            Float?         @default(0.6)
  panelPosition         PanelPosition? @default(LEFT)
  autoAdvanceSteps      Boolean        @default(false)
  showStepTimer         Boolean        @default(true)
  compactMode           Boolean        @default(false)
  useSecondMonitor      Boolean        @default(false)
  secondMonitorPosition Json?
  isActive              Boolean        @default(true)
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt

  @@unique([userId, workstationId])
  @@index([userId])
  @@index([workstationId])
  @@map("user_workstation_preferences")
}

/// Workstation Display Config - Physical display configuration for workstations
model WorkstationDisplayConfig {
  id                String      @id @default(cuid())
  workstationId     String      @unique
  screenWidth       Int?
  screenHeight      Int?
  isMultiMonitor    Boolean     @default(false)
  monitorCount      Int         @default(1)
  forcedLayout      LayoutMode?
  allowUserOverride Boolean     @default(true)
  isTouchScreen     Boolean     @default(false)
  touchTargetSize   Int?        @default(48)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  updatedById       String

  @@index([workstationId])
  @@map("workstation_display_configs")
}

model WorkflowDefinition {
  id           String             @id @default(cuid())
  name         String
  description  String?
  workflowType WorkflowType
  version      String             @default("1.0.0")
  structure    Json
  isActive     Boolean            @default(true)
  isTemplate   Boolean            @default(false)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  createdById  String
  updatedById  String
  instances    WorkflowInstance[]
  rules        WorkflowRule[]
  stages       WorkflowStage[]

  @@index([workflowType])
  @@index([isActive])
  @@map("workflow_definitions")
}

model WorkflowStage {
  id                 String                  @id @default(cuid())
  workflowId         String
  stageNumber        Int
  stageName          String
  description        String?
  approvalType       ApprovalType            @default(ALL_REQUIRED)
  minimumApprovals   Int?
  approvalThreshold  Float?
  requiredRoles      String[]
  optionalRoles      String[]
  assignmentStrategy AssignmentStrategy      @default(MANUAL)
  deadlineHours      Int?
  escalationRules    Json?
  allowDelegation    Boolean                 @default(true)
  allowSkip          Boolean                 @default(false)
  skipConditions     Json?
  requiresSignature  Boolean                 @default(false)
  signatureType      String?
  stageInstances     WorkflowStageInstance[]
  workflow           WorkflowDefinition      @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@unique([workflowId, stageNumber])
  @@index([workflowId])
  @@map("workflow_stages")
}

model WorkflowRule {
  id                String             @id @default(cuid())
  workflowId        String
  ruleName          String
  description       String?
  conditionField    String
  conditionOperator ConditionOperator
  conditionValue    Json
  actionType        RuleActionType
  actionConfig      Json
  priority          Int                @default(0)
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  workflow          WorkflowDefinition @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@index([workflowId])
  @@index([priority])
  @@map("workflow_rules")
}

model WorkflowInstance {
  id                 String                  @id @default(cuid())
  workflowId         String
  entityType         String
  entityId           String
  status             WorkflowStatus          @default(IN_PROGRESS)
  currentStageNumber Int?
  contextData        Json?
  startedAt          DateTime                @default(now())
  completedAt        DateTime?
  deadline           DateTime?
  priority           Priority                @default(NORMAL)
  impactLevel        ImpactLevel?
  createdById        String
  history            WorkflowHistory[]
  workflow           WorkflowDefinition      @relation(fields: [workflowId], references: [id])
  stageInstances     WorkflowStageInstance[]

  @@unique([entityType, entityId])
  @@index([workflowId])
  @@index([status])
  @@index([deadline])
  @@index([createdById])
  @@map("workflow_instances")
}

model WorkflowStageInstance {
  id                   String                         @id @default(cuid())
  workflowInstanceId   String
  stageId              String
  stageNumber          Int
  stageName            String
  status               StageStatus                    @default(PENDING)
  startedAt            DateTime?
  completedAt          DateTime?
  deadline             DateTime?
  outcome              StageOutcome?
  notes                String?
  assignments          WorkflowAssignment[]
  parallelCoordination WorkflowParallelCoordination[]
  stage                WorkflowStage                  @relation(fields: [stageId], references: [id])
  workflowInstance     WorkflowInstance               @relation(fields: [workflowInstanceId], references: [id], onDelete: Cascade)

  @@unique([workflowInstanceId, stageNumber])
  @@index([workflowInstanceId])
  @@index([status])
  @@index([deadline])
  @@map("workflow_stage_instances")
}

model WorkflowAssignment {
  id               String                @id @default(cuid())
  stageInstanceId  String
  assignedToId     String
  assignedToRole   String?
  assignmentType   AssignmentType        @default(REQUIRED)
  delegatedFromId  String?
  delegationReason String?
  delegationExpiry DateTime?
  action           ApprovalAction?
  actionTakenAt    DateTime?
  comments         String?
  signatureId      String?
  signatureType    String?
  assignedAt       DateTime              @default(now())
  dueDate          DateTime?
  escalationLevel  Int                   @default(0)
  escalatedAt      DateTime?
  escalatedToId    String?
  stageInstance    WorkflowStageInstance @relation(fields: [stageInstanceId], references: [id], onDelete: Cascade)

  @@index([stageInstanceId])
  @@index([assignedToId])
  @@index([dueDate])
  @@index([action])
  @@map("workflow_assignments")
}

model WorkflowHistory {
  id                 String            @id @default(cuid())
  workflowInstanceId String
  eventType          WorkflowEventType
  eventDescription   String
  stageNumber        Int?
  fromStatus         String?
  toStatus           String?
  performedById      String
  performedByName    String
  performedByRole    String?
  details            Json?
  occurredAt         DateTime          @default(now())
  workflowInstance   WorkflowInstance  @relation(fields: [workflowInstanceId], references: [id], onDelete: Cascade)

  @@index([workflowInstanceId])
  @@index([eventType])
  @@index([occurredAt])
  @@map("workflow_history")
}

model WorkflowDelegation {
  id                 String        @id @default(cuid())
  delegatorId        String
  delegateeId        String
  workflowType       WorkflowType?
  specificWorkflowId String?
  startDate          DateTime
  endDate            DateTime?
  reason             String
  isActive           Boolean       @default(true)
  createdAt          DateTime      @default(now())

  @@index([delegatorId])
  @@index([delegateeId])
  @@index([isActive])
  @@map("workflow_delegations")
}

model WorkflowTemplate {
  id                 String       @id @default(cuid())
  name               String
  description        String?
  workflowType       WorkflowType
  category           String       @default("STANDARD")
  templateDefinition Json
  usageCount         Int          @default(0)
  lastUsedAt         DateTime?
  isActive           Boolean      @default(true)
  isBuiltIn          Boolean      @default(false)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  createdById        String

  @@index([workflowType])
  @@index([category])
  @@index([isActive])
  @@map("workflow_templates")
}

model WorkflowTask {
  id                 String     @id @default(cuid())
  assignmentId       String     @unique
  assignedToId       String
  workflowInstanceId String
  stageNumber        Int
  entityType         String
  entityId           String
  taskTitle          String
  taskDescription    String?
  priority           Priority   @default(NORMAL)
  status             TaskStatus @default(PENDING)
  createdAt          DateTime   @default(now())
  dueDate            DateTime?
  lastReminderSent   DateTime?
  reminderCount      Int        @default(0)

  @@index([assignedToId, status])
  @@index([dueDate])
  @@index([priority])
  @@index([workflowInstanceId])
  @@map("workflow_tasks")
}

model WorkflowMetrics {
  id                 String        @id @default(cuid())
  periodStart        DateTime
  periodEnd          DateTime
  workflowId         String?
  stageId            String?
  workflowType       WorkflowType?
  userId             String?
  roleId             String?
  totalAssignments   Int           @default(0)
  completedOnTime    Int           @default(0)
  completedLate      Int           @default(0)
  avgCompletionHours Float?
  escalationCount    Int           @default(0)
  rejectionCount     Int           @default(0)
  onTimePercentage   Float?
  avgResponseHours   Float?
  updatedAt          DateTime      @updatedAt

  @@index([periodStart, periodEnd])
  @@index([workflowType])
  @@index([userId])
  @@map("workflow_metrics")
}

model WorkflowParallelCoordination {
  id                   String                @id @default(cuid())
  stageInstanceId      String
  groupId              String
  groupName            String?
  groupType            String
  completionType       String
  thresholdValue       Int?
  totalAssignments     Int                   @default(0)
  completedAssignments Int                   @default(0)
  approvedAssignments  Int                   @default(0)
  rejectedAssignments  Int                   @default(0)
  groupStatus          String                @default("PENDING")
  groupDecision        String?
  completedAt          DateTime?
  metadata             Json?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  stageInstance        WorkflowStageInstance @relation(fields: [stageInstanceId], references: [id], onDelete: Cascade)

  @@unique([stageInstanceId, groupId])
  @@index([stageInstanceId])
  @@index([groupStatus])
  @@map("workflow_parallel_coordination")
}

/// Engineering Change Order - Core ECO entity for formal change management
model EngineeringChangeOrder {
  id                     String                @id @default(cuid())
  ecoNumber              String                @unique
  title                  String
  description            String
  ecoType                ECOType
  priority               ECOPriority
  status                 ECOStatus             @default(REQUESTED)
  currentState           String
  proposedChange         String
  reasonForChange        String
  benefitsExpected       String?
  risksIfNotImplemented  String?
  requestorId            String
  requestorName          String
  requestorDept          String?
  requestorDeptId        String?
  requestDate            DateTime              @default(now())
  sponsorId              String?
  sponsorName            String?
  impactAnalysis         Json?
  affectedParts          String[]
  affectedOperations     String[]
  estimatedCost          Float?
  actualCost             Float?
  estimatedSavings       Float?
  actualSavings          Float?
  costCurrency           String                @default("USD")    // Legacy field (to be deprecated)
  costCurrencyId         String?                                  // FK to Currency
  requestedEffectiveDate DateTime?
  plannedEffectiveDate   DateTime?
  actualEffectiveDate    DateTime?
  effectivityType        EffectivityType?
  effectivityValue       String?
  isInterchangeable      Boolean               @default(false)
  crbReviewDate          DateTime?
  crbDecision            CRBDecision?
  crbNotes               String?
  completedDate          DateTime?
  verifiedDate           DateTime?
  closedDate             DateTime?
  closedById             String?
  isActive               Boolean               @default(true)
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  affectedDocuments      ECOAffectedDocument[]
  attachments            ECOAttachment[]
  crbReviews             ECOCRBReview[]
  history                ECOHistory[]
  relatedECOs            ECORelation[]         @relation("ParentECO")
  parentRelations        ECORelation[]         @relation("RelatedECO")
  tasks                  ECOTask[]
  costCurrencyRef        Currency?             @relation("ECOCostCurrency", fields: [costCurrencyId], references: [id])

  // ICD System relationships
  icdHistory             ICDHistory[]          @relation("ICDHistoryECO")
  icdChangeRequests      ICDChangeRequest[]    @relation("ICDChangeRequestECO")
  requestorDepartment    Department?           @relation("ECORequestorDept", fields: [requestorDeptId], references: [id])

  @@index([ecoNumber])
  @@index([status])
  @@index([priority])
  @@index([requestDate])
  @@index([requestorId])
  @@index([requestorDeptId])
  @@map("engineering_change_orders")
}

/// ECO Affected Document - Links ECOs to documents that need updates
model ECOAffectedDocument {
  id                String                 @id @default(cuid())
  ecoId             String
  documentType      String
  documentId        String
  documentTitle     String
  currentVersion    String?
  targetVersion     String?
  status            DocUpdateStatus        @default(PENDING)
  assignedToId      String?
  assignedToName    String?
  updateStartedAt   DateTime?
  updateCompletedAt DateTime?
  approvedAt        DateTime?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  eco               EngineeringChangeOrder @relation(fields: [ecoId], references: [id], onDelete: Cascade)

  @@unique([ecoId, documentType, documentId])
  @@index([ecoId])
  @@index([status])
  @@index([assignedToId])
  @@map("eco_affected_documents")
}

/// ECO Task - Implementation tasks for ECO completion
model ECOTask {
  id                String                 @id @default(cuid())
  ecoId             String
  taskName          String
  description       String?
  taskType          ECOTaskType
  assignedToId      String?
  assignedToName    String?
  assignedToDept    String?
  assignedToDeptId  String?
  status            ECOTaskStatus          @default(PENDING)
  dueDate           DateTime?
  startedAt         DateTime?
  completedAt       DateTime?
  prerequisiteTasks String[]
  completionNotes   String?
  verifiedById      String?
  verifiedAt        DateTime?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  eco               EngineeringChangeOrder @relation(fields: [ecoId], references: [id], onDelete: Cascade)
  assignedDepartment Department?           @relation("ECOTaskDept", fields: [assignedToDeptId], references: [id])

  @@index([ecoId])
  @@index([assignedToId])
  @@index([status])
  @@index([dueDate])
  @@index([assignedToDeptId])
  @@map("eco_tasks")
}

/// ECO Attachment - Supporting documents for ECOs
model ECOAttachment {
  id             String                 @id @default(cuid())
  ecoId          String
  fileName       String
  fileUrl        String
  fileSize       Int
  mimeType       String
  attachmentType AttachmentType
  description    String?
  uploadedById   String
  uploadedByName String
  uploadedAt     DateTime               @default(now())
  eco            EngineeringChangeOrder @relation(fields: [ecoId], references: [id], onDelete: Cascade)

  @@index([ecoId])
  @@index([attachmentType])
  @@map("eco_attachments")
}

/// ECO History - Complete audit trail for ECO changes
model ECOHistory {
  id               String                 @id @default(cuid())
  ecoId            String
  eventType        ECOEventType
  eventDescription String
  fromStatus       ECOStatus?
  toStatus         ECOStatus?
  details          Json?
  performedById    String
  performedByName  String
  performedByRole  String?
  occurredAt       DateTime               @default(now())
  eco              EngineeringChangeOrder @relation(fields: [ecoId], references: [id], onDelete: Cascade)

  @@index([ecoId])
  @@index([eventType])
  @@index([occurredAt])
  @@map("eco_history")
}

/// ECO CRB Review - Change Review Board meeting records
model ECOCRBReview {
  id                String                 @id @default(cuid())
  ecoId             String
  meetingDate       DateTime
  meetingAgenda     String?
  members           Json
  discussionNotes   String?
  questionsConcerns String?
  decision          CRBDecision
  decisionRationale String?
  votesFor          Int?
  votesAgainst      Int?
  votesAbstain      Int?
  conditions        String?
  actionItems       Json?
  nextReviewDate    DateTime?
  createdById       String
  createdAt         DateTime               @default(now())
  eco               EngineeringChangeOrder @relation(fields: [ecoId], references: [id], onDelete: Cascade)

  @@index([ecoId])
  @@index([meetingDate])
  @@map("eco_crb_reviews")
}

/// ECO Relation - Relationships between ECOs
model ECORelation {
  id           String                 @id @default(cuid())
  parentEcoId  String
  relatedEcoId String
  relationType ECORelationType
  description  String?
  createdAt    DateTime               @default(now())
  parentEco    EngineeringChangeOrder @relation("ParentECO", fields: [parentEcoId], references: [id], onDelete: Cascade)
  relatedEco   EngineeringChangeOrder @relation("RelatedECO", fields: [relatedEcoId], references: [id], onDelete: Cascade)

  @@unique([parentEcoId, relatedEcoId])
  @@index([parentEcoId])
  @@index([relatedEcoId])
  @@map("eco_relations")
}

/// CRB Configuration - Change Review Board setup
model CRBConfiguration {
  id               String     @id @default(cuid())
  boardMembers     Json
  meetingFrequency String?
  meetingDay       String?
  meetingTime      String?
  votingRule       VotingRule @default(MAJORITY)
  quorumRequired   Int?
  preReviewDays    Int        @default(3)
  isActive         Boolean    @default(true)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  @@index([isActive])
  @@map("crb_configurations")
}

/// Document Comment - Threaded comments on documents
model DocumentComment {
  id               String              @id @default(cuid())
  documentType     String
  documentId       String
  contextType      CommentContextType?
  contextId        String?
  contextPath      String?
  commentText      String
  attachments      String[]
  parentCommentId  String?
  status           CommentStatus       @default(OPEN)
  priority         CommentPriority     @default(MEDIUM)
  tags             String[]
  isPinned         Boolean             @default(false)
  isResolved       Boolean             @default(false)
  resolvedAt       DateTime?
  resolvedById     String?
  authorId         String
  authorName       String
  mentionedUserIds String[]
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  editedAt         DateTime?
  reactions        CommentReaction[]
  parentComment    DocumentComment?    @relation("CommentThread", fields: [parentCommentId], references: [id], onDelete: Cascade)
  replies          DocumentComment[]   @relation("CommentThread")

  @@index([documentType, documentId])
  @@index([parentCommentId])
  @@index([authorId])
  @@index([status])
  @@index([createdAt])
  @@map("document_comments")
}

/// Comment Reaction - Reactions to comments
model CommentReaction {
  id           String          @id @default(cuid())
  commentId    String
  userId       String
  userName     String
  reactionType ReactionType
  createdAt    DateTime        @default(now())
  comment      DocumentComment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId, reactionType])
  @@index([commentId])
  @@map("comment_reactions")
}

/// Document Annotation - Visual annotations on media
model DocumentAnnotation {
  id             String         @id @default(cuid())
  documentType   String
  documentId     String
  mediaType      String?
  mediaUrl       String?
  annotationType AnnotationType
  annotationData Json
  text           String?
  color          String?
  strokeWidth    Int?
  opacity        Float?
  fontSize       Int?
  timestamp      Float?
  authorId       String
  authorName     String
  isResolved     Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@index([documentType, documentId])
  @@index([authorId])
  @@map("document_annotations")
}

/// Review Assignment - Document review assignments
model ReviewAssignment {
  id              String                @id @default(cuid())
  documentType    String
  documentId      String
  documentVersion String
  reviewerId      String
  reviewerName    String
  assignedById    String
  assignedByName  String
  assignedAt      DateTime              @default(now())
  reviewType      ReviewType
  instructions    String?
  focusAreas      String[]
  isRequired      Boolean               @default(true)
  deadline        DateTime?
  checklistItems  Json?
  status          ReviewStatus          @default(NOT_STARTED)
  startedAt       DateTime?
  completedAt     DateTime?
  recommendation  ReviewRecommendation?
  summary         String?
  timeSpent       Int?
  signatureId     String?
  signedOffAt     DateTime?

  @@unique([documentType, documentId, reviewerId])
  @@index([reviewerId])
  @@index([status])
  @@index([deadline])
  @@map("review_assignments")
}

/// Document Activity - Activity log for documents
model DocumentActivity {
  id              String       @id @default(cuid())
  documentType    String
  documentId      String
  activityType    ActivityType
  description     String
  changesSummary  Json?
  performedById   String
  performedByName String
  performedByRole String?
  metadata        Json?
  occurredAt      DateTime     @default(now())

  @@index([documentType, documentId])
  @@index([activityType])
  @@index([occurredAt])
  @@index([performedById])
  @@map("document_activities")
}

/// Document Subscription - User subscriptions to document updates
model DocumentSubscription {
  id               String   @id @default(cuid())
  userId           String
  documentType     String
  documentId       String
  notifyOnEdit     Boolean  @default(true)
  notifyOnComment  Boolean  @default(true)
  notifyOnApproval Boolean  @default(true)
  notifyOnVersion  Boolean  @default(true)
  subscribedAt     DateTime @default(now())

  @@unique([userId, documentType, documentId])
  @@index([userId])
  @@index([documentType, documentId])
  @@map("document_subscriptions")
}

/// User Notification - System notifications
model UserNotification {
  id               String           @id @default(cuid())
  userId           String
  notificationType NotificationType
  title            String
  message          String
  entityType       String?
  entityId         String?
  actionUrl        String?
  isRead           Boolean          @default(false)
  readAt           DateTime?
  createdAt        DateTime         @default(now())
  expiresAt        DateTime?

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@map("user_notifications")
}

/// Document Edit Session - Real-time collaboration sessions
model DocumentEditSession {
  id             String    @id @default(cuid())
  documentType   String
  documentId     String
  userId         String
  userName       String
  sessionId      String    @unique
  startedAt      DateTime  @default(now())
  lastActivityAt DateTime  @default(now())
  endedAt        DateTime?
  cursorPosition Json?
  lockedSections String[]
  isActive       Boolean   @default(true)

  @@index([documentType, documentId])
  @@index([userId])
  @@index([isActive])
  @@map("document_edit_sessions")
}

/// Conflict Resolution - Merge conflict resolutions
model ConflictResolution {
  id             String         @id @default(cuid())
  documentType   String
  documentId     String
  conflictPath   String
  baseVersion    String
  yourVersion    Json
  theirVersion   Json
  theirUserId    String
  resolution     ResolutionType
  mergedVersion  Json
  resolvedById   String
  resolvedByName String
  resolvedAt     DateTime       @default(now())

  @@index([documentType, documentId])
  @@index([resolvedById])
  @@map("conflict_resolutions")
}

/// Cloud storage file registry
/// Tracks all files stored in S3/MinIO with versioning, deduplication, and metadata
model StoredFile {
  id                  String              @id @default(uuid())
  storagePath         String              @unique
  storageProvider     String
  bucket              String
  fileName            String
  originalFileName    String
  fileSize            Int
  mimeType            String
  fileHash            String
  versionId           String?
  isLatestVersion     Boolean             @default(true)
  versionNumber       Int                 @default(1)
  storageClass        StorageClass        @default(HOT)
  transitionedAt      DateTime?
  metadata            Json?
  tags                String[]
  cdnUrl              String?
  cacheStatus         CacheStatus?
  lastCacheUpdate     DateTime?
  accessCount         Int                 @default(0)
  lastAccessedAt      DateTime?
  downloadCount       Int                 @default(0)
  documentType        String?
  documentId          String?
  attachmentType      FileAttachmentType?
  deduplicationRefs   Int                 @default(1)
  originalFileId      String?
  retentionPolicy     String?
  expiresAt           DateTime?
  autoDeleteAt        DateTime?
  isEncrypted         Boolean             @default(false)
  encryptionKeyId     String?
  encryptionAlgorithm String?
  uploadedById        String
  uploadedByName      String
  uploadedAt          DateTime            @default(now())
  uploadMethod        UploadMethod        @default(DIRECT)
  uploadSessionId     String?
  processingStatus    ProcessingStatus    @default(COMPLETED)
  processingError     String?
  thumbnailGenerated  Boolean             @default(false)
  thumbnailPath       String?
  backupEntries       BackupEntry[]
  accessLogs          FileAccessLog[]
  versions            FileVersion[]
  originalFile        StoredFile?         @relation("FileDuplicates", fields: [originalFileId], references: [id])
  duplicateFiles      StoredFile[]        @relation("FileDuplicates")

  @@index([storagePath])
  @@index([fileHash])
  @@index([documentType, documentId])
  @@index([storageClass])
  @@index([uploadedAt])
  @@index([isLatestVersion])
  @@index([originalFileId])
  @@map("stored_files")
}

/// File version history for comprehensive version tracking
model FileVersion {
  id                String            @id @default(uuid())
  fileId            String
  versionNumber     Int
  versionId         String
  storagePath       String
  fileSize          Int
  fileHash          String
  mimeType          String
  changeDescription String?
  changeType        VersionChangeType @default(UPDATE)
  storageClass      StorageClass      @default(HOT)
  metadata          Json?
  createdAt         DateTime          @default(now())
  createdById       String
  createdByName     String
  retentionPolicy   String?
  expiresAt         DateTime?
  file              StoredFile        @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@unique([fileId, versionNumber])
  @@index([fileId])
  @@index([createdAt])
  @@map("file_versions")
}

/// Backup schedules for automated backup management
model BackupSchedule {
  id                     String          @id @default(uuid())
  name                   String
  description            String?
  bucketName             String
  backupBucket           String?
  includePattern         String?
  excludePattern         String?
  frequency              BackupFrequency
  cronExpression         String?
  timezone               String          @default("UTC")
  retentionDays          Int             @default(30)
  maxBackups             Int?
  enableCompression      Boolean         @default(true)
  enableEncryption       Boolean         @default(true)
  crossRegionReplication Boolean         @default(false)
  isActive               Boolean         @default(true)
  lastBackupAt           DateTime?
  nextBackupAt           DateTime?
  lastSuccessAt          DateTime?
  lastFailureAt          DateTime?
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  createdById            String
  updatedById            String?
  backupHistory          BackupHistory[]

  @@index([isActive])
  @@index([nextBackupAt])
  @@map("backup_schedules")
}

/// Backup execution history and status tracking
model BackupHistory {
  id               String          @id @default(uuid())
  scheduleId       String?
  backupType       BackupType
  status           BackupStatus
  sourceBucket     String
  destBucket       String
  backupLocation   String
  fileCount        Int?
  totalSize        Int?
  compressedSize   Int?
  compressionRatio Float?
  startedAt        DateTime
  completedAt      DateTime?
  duration         Int?
  errorMessage     String?
  errorCode        String?
  checksumVerified Boolean         @default(false)
  verificationDate DateTime?
  metadata         Json?
  backupEntries    BackupEntry[]
  schedule         BackupSchedule? @relation(fields: [scheduleId], references: [id])

  @@index([scheduleId])
  @@index([status])
  @@index([startedAt])
  @@index([backupType])
  @@map("backup_history")
}

/// Backup entries linking files to backup instances
model BackupEntry {
  id               String        @id @default(uuid())
  backupId         String
  fileId           String
  backupPath       String
  originalPath     String
  checksum         String
  checksumVerified Boolean       @default(false)
  metadata         Json?
  backup           BackupHistory @relation(fields: [backupId], references: [id], onDelete: Cascade)
  file             StoredFile    @relation(fields: [fileId], references: [id])

  @@unique([backupId, fileId])
  @@index([backupId])
  @@index([fileId])
  @@map("backup_entries")
}

/// File access logging for security and analytics
model FileAccessLog {
  id             String     @id @default(uuid())
  fileId         String
  accessType     AccessType
  accessMethod   String
  userId         String?
  userName       String?
  userAgent      String?
  ipAddress      String?
  referrer       String?
  requestHeaders Json?
  responseCode   Int?
  responseSize   Int?
  accessedAt     DateTime   @default(now())
  duration       Int?
  country        String?
  region         String?
  city           String?
  cdnHit         Boolean?
  edgeLocation   String?
  file           StoredFile @relation(fields: [fileId], references: [id])

  @@index([fileId])
  @@index([accessedAt])
  @@index([userId])
  @@index([accessType])
  @@map("file_access_logs")
}

/// Storage analytics and metrics for monitoring
model StorageMetrics {
  id               String   @id @default(uuid())
  date             DateTime @unique
  hour             Int?
  totalFiles       Int      @default(0)
  totalSize        Int      @default(0)
  hotStorageFiles  Int      @default(0)
  hotStorageSize   Int      @default(0)
  warmStorageFiles Int      @default(0)
  warmStorageSize  Int      @default(0)
  coldStorageFiles Int      @default(0)
  coldStorageSize  Int      @default(0)
  archiveFiles     Int      @default(0)
  archiveSize      Int      @default(0)
  imageFiles       Int      @default(0)
  imageSize        Int      @default(0)
  videoFiles       Int      @default(0)
  videoSize        Int      @default(0)
  documentFiles    Int      @default(0)
  documentSize     Int      @default(0)
  cadFiles         Int      @default(0)
  cadSize          Int      @default(0)
  uploads          Int      @default(0)
  downloads        Int      @default(0)
  deletes          Int      @default(0)
  totalRequests    Int      @default(0)
  totalBandwidth   Int      @default(0)
  cdnHits          Int      @default(0)
  cdnMisses        Int      @default(0)
  duplicateFiles   Int      @default(0)
  spaceSaved       Int      @default(0)
  estimatedCost    Decimal? @db.Decimal(10, 2)

  @@index([date])
  @@index([hour])
  @@map("storage_metrics")
}

/// Multipart upload session tracking
model MultipartUpload {
  id             String       @id @default(uuid())
  uploadId       String       @unique
  fileName       String
  storagePath    String
  totalSize      Int
  chunkSize      Int
  totalChunks    Int
  uploadedChunks Int          @default(0)
  status         UploadStatus @default(IN_PROGRESS)
  parts          Json[]
  uploadedById   String
  uploadedByName String
  startedAt      DateTime     @default(now())
  lastActivityAt DateTime     @default(now())
  completedAt    DateTime?
  expiresAt      DateTime
  errorMessage   String?
  retryCount     Int          @default(0)
  metadata       Json?

  @@index([uploadId])
  @@index([status])
  @@index([uploadedById])
  @@index([expiresAt])
  @@map("multipart_uploads")
}

/// Enhanced Role model - Replaces placeholder in auth service
/// Supports both global and site-specific roles with flexible permission assignment
model Role {
  id            String           @id @default(cuid())
  roleCode      String           @unique
  roleName      String
  description   String?
  isActive      Boolean          @default(true)
  isGlobal      Boolean          @default(true)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  createdBy     String?
  permissions   RolePermission[]
  userRoles     UserRole[]
  userSiteRoles UserSiteRole[]

  // Role Template relationship
  templateInstance RoleTemplateInstance?

  // Saviynt Identity Governance relationships
  saviyntRoleMappings  SaviyntRoleMapping[]

  // Temporal permissions audit trail
  temporalAccessLogs   TemporalAccessLog[]

  @@index([roleCode])
  @@index([isActive])
  @@index([isGlobal])
  @@map("roles")
}

/// Enhanced Permission model - Replaces placeholder in auth service
/// Granular permissions with wildcard support and categorization
model Permission {
  id             String           @id @default(cuid())
  permissionCode String           @unique
  permissionName String
  description    String?
  category       String?
  isActive       Boolean          @default(true)
  isWildcard     Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  roles          RolePermission[]

  // Role Template relationship
  templatePermissions RoleTemplatePermission[]

  @@index([permissionCode])
  @@index([category])
  @@index([isActive])
  @@index([isWildcard])
  @@map("permissions")
}

/// Junction table: Role ↔ Permission (many-to-many)
/// Defines which permissions are assigned to each role
model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  grantedAt    DateTime   @default(now())
  grantedBy    String?
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
  @@map("role_permissions")
}

/// Junction table: User ↔ Role (many-to-many, global)
/// Assigns global roles to users that apply across all sites
model UserRole {
  id          String    @id @default(cuid())
  userId      String
  roleId      String
  assignedAt  DateTime  @default(now())
  assignedBy  String?
  validFrom   DateTime? // When the role becomes active (temporal permissions)
  expiresAt   DateTime? // When the role expires (temporal permissions)
  isTemporary Boolean   @default(false) // Flag for temporary vs permanent assignment
  grantReason String?   // Reason for temporal assignment (e.g., "contractor", "emergency")
  role        Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
  @@index([expiresAt])
  @@index([validFrom])
  @@index([isTemporary])
  @@map("user_roles")
}

/// Junction table: User ↔ Role ↔ Site (many-to-many, site-specific)
/// Assigns site-specific roles to users for enhanced granular control
model UserSiteRole {
  id          String    @id @default(cuid())
  userId      String
  roleId      String
  siteId      String
  assignedAt  DateTime  @default(now())
  assignedBy  String?
  validFrom   DateTime? // When the role becomes active (temporal permissions)
  expiresAt   DateTime? // When the role expires (temporal permissions)
  isTemporary Boolean   @default(false) // Flag for temporary vs permanent assignment
  grantReason String?   // Reason for temporal assignment (e.g., "contractor", "emergency")
  role        Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  site        Site      @relation(fields: [siteId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId, siteId])
  @@index([userId])
  @@index([roleId])
  @@index([siteId])
  @@index([expiresAt])
  @@index([validFrom])
  @@index([isTemporary])
  @@map("user_site_roles")
}

/// Temporal Access Log for auditing temporal permission activities
/// Tracks all temporal permission grants, revocations, expirations, and emergency access
model TemporalAccessLog {
  id          String   @id @default(cuid())
  userId      String   // User whose permissions were affected
  roleId      String   // Role that was granted/revoked
  siteId      String?  // Site ID (null for global roles)
  accessType  String   // 'granted', 'revoked', 'expired', 'emergency', 'extended', 'cleanup'
  reason      String?  // Reason for the temporal access change
  grantedBy   String   // User ID who performed the action (system for automatic actions)
  timestamp   DateTime @default(now()) // When the action occurred

  // Additional context fields
  validFrom   DateTime? // When the permission was/will be active
  expiresAt   DateTime? // When the permission expires/expired
  isEmergency Boolean   @default(false) // Was this emergency access?
  metadata    Json?     // Additional metadata about the action

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  role        Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  site        Site?     @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([roleId])
  @@index([siteId])
  @@index([accessType])
  @@index([timestamp])
  @@index([isEmergency])
  @@map("temporal_access_logs")
}

/// Time tracking configuration (site level)
/// Controls how time tracking behaves at each manufacturing site
model TimeTrackingConfiguration {
  id                     String                  @id @default(cuid())
  siteId                 String                  @unique
  timeTrackingEnabled    Boolean                 @default(true)
  trackingGranularity    TimeTrackingGranularity @default(OPERATION)
  costingModel           CostingModel            @default(LABOR_HOURS)
  allowMultiTasking      Boolean                 @default(false)
  multiTaskingMode       MultiTaskingMode?
  autoSubtractBreaks     Boolean                 @default(false)
  standardBreakMinutes   Int?
  requireBreakClockOut   Boolean                 @default(false)
  overtimeThresholdHours Float?                  @default(8.0)
  warnOnOvertime         Boolean                 @default(true)
  enableMachineTracking  Boolean                 @default(false)
  autoStartFromMachine   Boolean                 @default(false)
  autoStopFromMachine    Boolean                 @default(false)
  requireTimeApproval    Boolean                 @default(true)
  approvalFrequency      ApprovalFrequency       @default(DAILY)

  // Time Entry Management Configuration (Issue #51)
  operatorEditWindowHours Int                    @default(24)
  supervisorEditWindowHours Int                  @default(168)
  editReasonRequired     Boolean                 @default(true)
  autoApproveEnabled     Boolean                 @default(true)
  autoApproveDurationThreshold Int               @default(5)
  autoApproveWithinShift Boolean                 @default(true)
  autoApproveCostCodeOnly Boolean                @default(true)
  approvalNotificationsEnabled Boolean           @default(true)
  notificationEmail      Boolean                 @default(true)
  notificationInApp      Boolean                 @default(true)

  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  createdBy              String
  site                   Site                    @relation(fields: [siteId], references: [id])

  @@index([siteId])
  @@map("time_tracking_configurations")
}

/// Labor time entry (operator clocking in/out)
/// Records when operators clock in and out for work orders, operations, or indirect activities
model LaborTimeEntry {
  id                   String              @id @default(cuid())
  userId               String
  workOrderId          String?
  operationId          String?
  indirectCodeId       String?
  timeType             TimeType
  clockInTime          DateTime
  clockOutTime         DateTime?
  duration             Float?
  entrySource          TimeEntrySource
  deviceId             String?
  location             String?
  status               TimeEntryStatus     @default(ACTIVE)
  approvedBy           String?
  approvedAt           DateTime?
  rejectionReason      String?
  costCenter           String?
  laborRate            Float?
  laborCost            Float?
  originalClockInTime  DateTime?
  originalClockOutTime DateTime?
  editedBy             String?
  editedAt             DateTime?
  editReason           String?
  exportedToSystem     String?
  exportedAt           DateTime?
  externalReferenceId  String?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  indirectCode         IndirectCostCode?   @relation(fields: [indirectCodeId], references: [id])
  operation            WorkOrderOperation? @relation(fields: [operationId], references: [id])
  user                 User                @relation(fields: [userId], references: [id])
  workOrder            WorkOrder?          @relation(fields: [workOrderId], references: [id])

  // Time Entry Management Relations (Issue #51)
  edits                TimeEntryEdit[]
  locks                TimeEntryLock[]
  batch                TimeEntryBatch?     @relation(fields: [batchId], references: [id])
  batchId              String?

  @@index([userId])
  @@index([workOrderId])
  @@index([operationId])
  @@index([status])
  @@index([clockInTime])
  @@index([timeType])
  @@index([batchId])
  @@map("labor_time_entries")
}

/// Machine time entry (equipment run time)
/// Records machine run time separately from labor for equipment-based costing
model MachineTimeEntry {
  id                 String              @id @default(cuid())
  equipmentId        String
  workOrderId        String?
  operationId        String?
  startTime          DateTime
  endTime            DateTime?
  duration           Float?
  entrySource        TimeEntrySource
  dataSource         String?
  cycleCount         Int?
  partCount          Int?
  machineUtilization Float?
  status             TimeEntryStatus     @default(ACTIVE)
  machineRate        Float?
  machineCost        Float?
  exportedToSystem   String?
  exportedAt         DateTime?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  equipment          Equipment           @relation(fields: [equipmentId], references: [id])
  operation          WorkOrderOperation? @relation(fields: [operationId], references: [id])
  workOrder          WorkOrder?          @relation(fields: [workOrderId], references: [id])

  // Time Entry Management Relations (Issue #51)
  edits              TimeEntryEdit[]
  locks              TimeEntryLock[]

  @@index([equipmentId])
  @@index([workOrderId])
  @@index([operationId])
  @@index([status])
  @@index([startTime])
  @@map("machine_time_entries")
}

/// Indirect cost codes (non-productive time)
/// Defines categories for non-productive time like breaks, training, meetings
model IndirectCostCode {
  id           String           @id @default(cuid())
  code         String           @unique
  description  String
  category     IndirectCategory
  costCenter   String?
  glAccount    String?
  isActive     Boolean          @default(true)
  siteId       String?
  displayColor String?
  displayIcon  String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  createdBy    String
  site         Site?            @relation(fields: [siteId], references: [id])
  laborEntries LaborTimeEntry[]

  @@index([code])
  @@index([category])
  @@index([siteId])
  @@map("indirect_cost_codes")
}

/// Time entry validation rules (business logic)
/// Configurable rules for validating time entries and preventing common errors
model TimeEntryValidationRule {
  id           String                 @id @default(cuid())
  ruleName     String
  ruleType     TimeValidationRuleType
  condition    String
  errorMessage String
  severity     String
  isActive     Boolean                @default(true)
  siteId       String?
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt

  @@index([ruleType])
  @@index([siteId])
  @@map("time_entry_validation_rules")
}

// ============================================================================
// TIME ENTRY MANAGEMENT & APPROVALS (Issue #51)
// ============================================================================

/// Time Entry Edit History
/// Tracks all modifications to time entries for audit and approval purposes
model TimeEntryEdit {
  id                String            @id @default(cuid())
  timeEntryId       String
  timeEntryType     TimeEntryType
  editType          EditType
  originalValues    Json
  newValues         Json
  changedFields     String[]
  reason            String
  reasonCategory    EditReasonCategory
  editedBy          String
  editedAt          DateTime          @default(now())
  approvalRequired  Boolean           @default(false)
  approvalStatus    ApprovalStatus?
  approvedBy        String?
  approvedAt        DateTime?
  rejectionReason   String?
  autoApproved      Boolean           @default(false)

  // Relations
  laborTimeEntry    LaborTimeEntry?   @relation(fields: [timeEntryId], references: [id], onDelete: Cascade, map: "time_entry_edits_labor_fkey")
  machineTimeEntry  MachineTimeEntry? @relation(fields: [timeEntryId], references: [id], onDelete: Cascade, map: "time_entry_edits_machine_fkey")
  editor            User              @relation("TimeEntryEditEditor", fields: [editedBy], references: [id])
  approver          User?             @relation("TimeEntryEditApprover", fields: [approvedBy], references: [id])
  approvals         TimeEntryApproval[]

  @@index([timeEntryId])
  @@index([timeEntryType])
  @@index([editType])
  @@index([editedBy])
  @@index([editedAt])
  @@index([approvalStatus])
  @@index([approvalRequired])
  @@map("time_entry_edits")
}

/// Time Entry Approval Workflow
/// Manages the approval process for time entry modifications
model TimeEntryApproval {
  id                String           @id @default(cuid())
  timeEntryEditId   String
  approverUserId    String
  status            ApprovalStatus
  approvalNotes     String?
  requestedChanges  String?
  approvedAt        DateTime         @default(now())
  notificationSent  Boolean          @default(false)
  escalationLevel   Int              @default(0)
  dueDate           DateTime?

  // Relations
  timeEntryEdit     TimeEntryEdit    @relation(fields: [timeEntryEditId], references: [id], onDelete: Cascade)
  approver          User             @relation(fields: [approverUserId], references: [id])

  @@index([timeEntryEditId])
  @@index([approverUserId])
  @@index([status])
  @@index([approvedAt])
  @@index([dueDate])
  @@index([escalationLevel])
  @@map("time_entry_approvals")
}

/// Time Entry Batch Management
/// Groups time entries for batch approval (weekly/daily timesheets)
model TimeEntryBatch {
  id              String               @id @default(cuid())
  batchNumber     String               @unique
  employeeId      String
  batchType       TimeEntryBatchType
  periodStart     DateTime
  periodEnd       DateTime
  status          TimeEntryBatchStatus @default(PENDING_APPROVAL)
  submittedAt     DateTime?
  approvedBy      String?
  approvedAt      DateTime?
  rejectionReason String?
  totalHours      Float                @default(0)
  totalCost       Float                @default(0)
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt

  // Relations
  employee        User                 @relation("TimeEntryBatchEmployee", fields: [employeeId], references: [id])
  approver        User?                @relation("TimeEntryBatchApprover", fields: [approvedBy], references: [id])
  timeEntries     LaborTimeEntry[]

  @@index([employeeId])
  @@index([batchType])
  @@index([status])
  @@index([periodStart])
  @@index([periodEnd])
  @@index([submittedAt])
  @@map("time_entry_batches")
}

/// Auto-Stop Configuration
/// Configures when and how to automatically stop time entries
model AutoStopConfiguration {
  id                    String           @id @default(cuid())
  siteId                String           @unique
  autoStopOnClockOut    Boolean          @default(true)
  autoStopBehavior      AutoStopBehavior @default(STOP_ALL)
  gracePeriodMinutes    Int              @default(5)
  autoStopOnShiftEnd    Boolean          @default(true)
  autoStopOnBreakStart  Boolean          @default(false)
  warningMinutesBefore  Int              @default(5)
  enableExternalSignals Boolean          @default(false)
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt

  // Relations
  site                  Site             @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@map("auto_stop_configurations")
}

/// Time Entry Lock Management
/// Manages locked time entries that cannot be edited
model TimeEntryLock {
  id              String     @id @default(cuid())
  timeEntryId     String     @unique
  timeEntryType   TimeEntryType
  lockedBy        String
  lockedAt        DateTime   @default(now())
  lockReason      String
  lockType        LockType
  unlockRequests  Json[]     @default([])

  // Relations
  laborTimeEntry  LaborTimeEntry?   @relation(fields: [timeEntryId], references: [id], onDelete: Cascade, map: "time_entry_locks_labor_fkey")
  machineTimeEntry MachineTimeEntry? @relation(fields: [timeEntryId], references: [id], onDelete: Cascade, map: "time_entry_locks_machine_fkey")
  locker          User              @relation(fields: [lockedBy], references: [id])

  @@index([timeEntryId])
  @@index([timeEntryType])
  @@index([lockedBy])
  @@index([lockType])
  @@map("time_entry_locks")
}

/// SSO Provider Registry
/// Centralized registry of all configured SSO providers
model SsoProvider {
  id                   String                @id @default(cuid())
  name                 String                @unique
  type                 SsoProviderType
  configId             String
  priority             Int                   @default(0)
  isActive             Boolean               @default(true)
  isDefault            Boolean               @default(false)
  domainRestrictions   String[]
  groupRestrictions    String[]
  metadata             Json?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  authenticationEvents AuthenticationEvent[]
  homeRealmRules       HomeRealmDiscovery[]
  ssoSessions          SsoSession[]

  @@index([type])
  @@index([isActive])
  @@index([isDefault])
  @@index([priority])
  @@map("sso_providers")
}

/// SSO Session Management
/// Unified session handling across multiple providers
model SsoSession {
  id                String      @id @default(cuid())
  userId            String
  primaryProviderId String
  activeProviders   String[]
  sessionData       Json?
  expiresAt         DateTime?
  lastActivityAt    DateTime    @default(now())
  createdAt         DateTime    @default(now())
  primaryProvider   SsoProvider @relation(fields: [primaryProviderId], references: [id])
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([primaryProviderId])
  @@index([expiresAt])
  @@index([lastActivityAt])
  @@map("sso_sessions")
}

/// Authentication Analytics
/// Comprehensive tracking of authentication events and metrics
model AuthenticationEvent {
  id           String                  @id @default(cuid())
  userId       String?
  providerId   String
  eventType    AuthenticationEventType
  userAgent    String?
  ipAddress    String?
  location     String?
  responseTime Int?
  errorCode    String?
  errorMessage String?
  metadata     Json?
  createdAt    DateTime                @default(now())
  provider     SsoProvider             @relation(fields: [providerId], references: [id])
  user         User?                   @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([providerId])
  @@index([eventType])
  @@index([createdAt])
  @@index([ipAddress])
  @@map("authentication_events")
}

/// Home Realm Discovery Rules
/// Automatic provider selection based on user attributes
model HomeRealmDiscovery {
  id         String      @id @default(cuid())
  name       String
  pattern    String
  providerId String
  priority   Int         @default(0)
  isActive   Boolean     @default(true)
  createdAt  DateTime    @default(now())
  provider   SsoProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@index([pattern])
  @@index([providerId])
  @@index([priority])
  @@index([isActive])
  @@map("home_realm_discovery")
}

/// Permission Usage Tracking
/// Logs every permission check with full context for security monitoring
model PermissionUsageLog {
  id         String   @id @default(cuid())
  userId     String
  permission String
  endpoint   String?
  method     String?
  success    Boolean
  timestamp  DateTime @default(now())
  ip         String?
  userAgent  String?
  siteId     String?
  duration   Int?
  context    Json?
  site       Site?    @relation(fields: [siteId], references: [id])
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, timestamp])
  @@index([permission, timestamp])
  @@index([success, timestamp])
  @@index([siteId, timestamp])
  @@index([endpoint, method])
  @@map("permission_usage_logs")
}

/// Security Event Monitoring
/// Tracks security-related events for threat detection and compliance
model SecurityEvent {
  id             String            @id @default(cuid())
  eventType      SecurityEventType
  severity       SecuritySeverity
  userId         String?
  ip             String?
  userAgent      String?
  description    String
  metadata       Json?
  timestamp      DateTime          @default(now())
  resolved       Boolean           @default(false)
  resolvedBy     String?
  resolvedAt     DateTime?
  siteId         String?
  resolvedByUser User?             @relation("SecurityEventResolvedBy", fields: [resolvedBy], references: [id])
  site           Site?             @relation(fields: [siteId], references: [id])
  user           User?             @relation(fields: [userId], references: [id])

  @@index([eventType, timestamp])
  @@index([severity, resolved])
  @@index([userId, timestamp])
  @@index([ip, timestamp])
  @@index([siteId, timestamp])
  @@map("security_events")
}

/// User Session Tracking
/// Comprehensive session monitoring for analytics and security
model UserSessionLog {
  id           String    @id @default(cuid())
  userId       String
  sessionId    String    @unique
  ip           String?
  userAgent    String?
  startTime    DateTime  @default(now())
  endTime      DateTime?
  duration     Int?
  actionsCount Int       @default(0)
  siteAccess   String[]
  lastActivity DateTime  @default(now())
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, startTime])
  @@index([sessionId])
  @@index([ip, startTime])
  @@index([lastActivity])
  @@map("user_session_logs")
}

/// Audit Report Management
/// Tracks generated compliance and security reports
model AuditReport {
  id              String       @id @default(cuid())
  reportType      ReportType
  title           String
  parameters      Json
  generatedBy     String
  generatedAt     DateTime     @default(now())
  filePath        String?
  status          ReportStatus
  error           String?
  downloadCount   Int          @default(0)
  siteId          String?
  generatedByUser User         @relation(fields: [generatedBy], references: [id], onDelete: Cascade)
  site            Site?        @relation(fields: [siteId], references: [id])

  @@index([reportType, generatedAt])
  @@index([generatedBy, generatedAt])
  @@index([status])
  @@index([siteId, reportType])
  @@map("audit_reports")
}

/// Permission Change History
/// Tracks all changes to user permissions and roles for compliance
model PermissionChangeLog {
  id            String               @id @default(cuid())
  changeType    PermissionChangeType
  targetUserId  String
  targetRole    String?
  permission    String?
  oldValue      Json?
  newValue      Json?
  changedBy     String
  reason        String?
  timestamp     DateTime             @default(now())
  siteId        String?
  changedByUser User                 @relation("PermissionChangeChanger", fields: [changedBy], references: [id], onDelete: Cascade)
  site          Site?                @relation(fields: [siteId], references: [id])
  targetUser    User                 @relation("PermissionChangeTarget", fields: [targetUserId], references: [id], onDelete: Cascade)

  @@index([targetUserId, timestamp])
  @@index([changedBy, timestamp])
  @@index([changeType, timestamp])
  @@index([siteId, timestamp])
  @@map("permission_change_logs")
}

// BUILD RECORD & ELECTRONIC BUILD BOOK MODELS
// Comprehensive electronic build book system for engine assembly
// AS9100 and FAA Part 43 compliance requirement

model BuildRecord {
  id                        String                @id @default(cuid())
  buildRecordNumber         String                @unique // Auto-generated unique identifier
  workOrderId               String                @unique // One build record per work order
  serializedPartId          String?               // Optional link to serialized part
  engineModel               String                // Engine model (e.g., "GE9X-105B1A")
  serialNumber              String                // Engine serial number
  customerName              String?               // Customer information
  contractNumber            String?               // Customer contract reference
  buildStartDate            DateTime              // When build started
  buildEndDate              DateTime?             // When build completed
  targetCompletionDate      DateTime?             // Target completion date
  actualCompletionDate      DateTime?             // Actual completion date
  status                    BuildRecordStatus     // ACTIVE, COMPLETE, ON_HOLD, CANCELLED
  finalDisposition          FinalDisposition?     // ACCEPTED, REJECTED, REWORK_REQUIRED
  isCompliant               Boolean               @default(true) // AS9100 compliance status
  hasDeviations             Boolean               @default(false) // Flag for deviations
  buildBookGenerated        Boolean               @default(false) // PDF build book generated
  buildBookGeneratedAt      DateTime?             // When PDF was generated
  buildBookPath             String?               // Path to generated PDF
  buildBookVersion          Int                   @default(1) // Build book version number
  qualityApprovalRequired   Boolean               @default(true) // Requires quality sign-off
  qualityApproved           Boolean               @default(false) // Quality approved
  qualityApprovedAt         DateTime?             // Quality approval timestamp
  qualityApprovedById       String?               // Quality approver
  engineeringApprovalRequired Boolean             @default(false) // Requires engineering approval
  engineeringApproved       Boolean               @default(false) // Engineering approved
  engineeringApprovedAt     DateTime?             // Engineering approval timestamp
  engineeringApprovedById   String?               // Engineering approver
  customerApprovalRequired  Boolean               @default(false) // Customer approval required
  customerApproved          Boolean               @default(false) // Customer approved
  customerApprovedAt        DateTime?             // Customer approval timestamp
  customerApprovedBy        String?               // Customer approver name
  createdById               String                // Creator user ID
  assignedToId              String?               // Assigned build engineer
  notes                     String?               // General notes
  complianceNotes           String?               // Compliance-specific notes
  createdAt                 DateTime              @default(now())
  updatedAt                 DateTime              @updatedAt

  // Relationships
  workOrder                 WorkOrder             @relation(fields: [workOrderId], references: [id])
  serializedPart            SerializedPart?       @relation(fields: [serializedPartId], references: [id])
  createdBy                 User                  @relation("BuildRecordCreatedBy", fields: [createdById], references: [id])
  assignedTo                User?                 @relation("BuildRecordAssignedTo", fields: [assignedToId], references: [id])
  qualityApprovedBy         User?                 @relation("BuildRecordQualityApprover", fields: [qualityApprovedById], references: [id])
  engineeringApprovedBy     User?                 @relation("BuildRecordEngineeringApprover", fields: [engineeringApprovedById], references: [id])

  // Child relationships
  operations                BuildRecordOperation[]
  deviations                BuildDeviation[]
  photos                    BuildRecordPhoto[]
  documents                 BuildRecordDocument[]
  statusHistory             BuildRecordStatusHistory[]
  signatures                BuildRecordSignature[]
  testRuns                  TestRun[]

  @@index([workOrderId])
  @@index([serialNumber])
  @@index([status])
  @@index([buildStartDate])
  @@index([finalDisposition])
  @@map("build_records")
}

model BuildRecordOperation {
  id                        String                      @id @default(cuid())
  buildRecordId             String
  workOrderOperationId      String?                     // Link to work order operation
  operationNumber           String                      // Operation sequence number
  operationName             String                      // Operation description
  routingStepId             String?                     // Link to routing step
  plannedStartDate          DateTime?                   // Planned start from routing
  plannedEndDate            DateTime?                   // Planned end from routing
  actualStartDate           DateTime?                   // Actual start timestamp
  actualEndDate             DateTime?                   // Actual end timestamp
  plannedDuration           Int?                        // Planned duration in minutes
  actualDuration            Int?                        // Actual duration in minutes
  status                    OperationStatus             // NOT_STARTED, IN_PROGRESS, COMPLETE, ON_HOLD, SKIPPED
  quantityPlanned           Int                         // Planned quantity
  quantityCompleted         Int                         @default(0) // Actual quantity completed
  quantityScrap             Int                         @default(0) // Quantity scrapped
  operatorId                String?                     // Primary operator
  inspectorId               String?                     // Quality inspector
  workCenterId              String?                     // Work center used
  equipmentUsed             String?                     // Equipment/tools used
  actualPartsUsed           Json?                       // Actual parts used (BOM comparison)
  actualMaterials           Json?                       // Actual materials consumed
  qualityCheckRequired      Boolean                     @default(false) // Requires quality check
  qualityCheckComplete      Boolean                     @default(false) // Quality check done
  qualityCheckDate          DateTime?                   // Quality check date
  operatorSignedOff         Boolean                     @default(false) // Operator sign-off
  operatorSignOffDate       DateTime?                   // Operator sign-off date
  inspectorSignedOff        Boolean                     @default(false) // Inspector sign-off
  inspectorSignOffDate      DateTime?                   // Inspector sign-off date
  hasDeviations             Boolean                     @default(false) // Operation has deviations
  requiresEngApproval       Boolean                     @default(false) // Requires engineering approval
  engineeringApproved       Boolean                     @default(false) // Engineering approved
  engineeringApprovedAt     DateTime?                   // Engineering approval date
  engineeringApprovedById   String?                     // Engineering approver
  torqueSpecsApplied        Boolean                     @default(false) // Torque specs applied
  torqueValues              Json?                       // Actual torque values captured
  toolsUsed                 Json?                       // Tools and fixtures used
  calibrationVerified       Boolean                     @default(false) // Tool calibration verified
  workInstructions          String?                     // Work instruction reference
  specialInstructions       String?                     // Special instructions
  operationNotes            String?                     // Operation-specific notes
  reworkRequired            Boolean                     @default(false) // Rework needed
  reworkReason              String?                     // Reason for rework
  reworkCompleted           Boolean                     @default(false) // Rework completed
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt

  // Relationships
  buildRecord               BuildRecord                 @relation(fields: [buildRecordId], references: [id], onDelete: Cascade)
  workOrderOperation        WorkOrderOperation?         @relation(fields: [workOrderOperationId], references: [id])
  operator                  User?                       @relation("OperationOperator", fields: [operatorId], references: [id])
  inspector                 User?                       @relation("OperationInspector", fields: [inspectorId], references: [id])
  engineeringApprovedBy     User?                       @relation("OperationEngineeringApprover", fields: [engineeringApprovedById], references: [id])
  workCenter                WorkCenter?                 @relation(fields: [workCenterId], references: [id])

  // Child relationships
  photos                    BuildRecordPhoto[]
  signatures                BuildRecordSignature[]
  deviations                BuildDeviation[]

  @@index([buildRecordId])
  @@index([operationNumber])
  @@index([status])
  @@index([actualStartDate])
  @@index([workOrderOperationId])
  @@map("build_record_operations")
}

model BuildDeviation {
  id                        String                    @id @default(cuid())
  buildRecordId             String
  operationId               String?                   // Optional link to specific operation
  ncrId                     String?                   // Link to NCR if applicable
  deviationType             DeviationType             // PART_SUBSTITUTION, DIMENSION_DEVIATION, PROCESS_DEVIATION, etc.
  deviationCategory         DeviationCategory         // MAJOR, MINOR, CRITICAL
  title                     String                    // Brief description
  description               String                    // Detailed description
  detectedBy                String                    // Who detected the deviation
  detectedAt                DateTime                  // When detected
  partNumber                String?                   // Affected part number
  serialNumber              String?                   // Affected serial number
  operationNumber           String?                   // Affected operation
  asDesigned                String?                   // As-designed specification
  asBuilt                   String?                   // As-built actual
  variance                  String?                   // Variance amount/description
  severity                  DeviationSeverity         // LOW, MEDIUM, HIGH, CRITICAL
  status                    DeviationStatus           // OPEN, UNDER_REVIEW, APPROVED, REJECTED, CLOSED
  disposition               DeviationDisposition?     // USE_AS_IS, REPAIR, REWORK, SCRAP, RETURN_TO_VENDOR
  dispositionReason         String?                   // Justification for disposition
  engineeringReview         Boolean                   @default(false) // Engineering reviewed
  engineeringApproval       Boolean                   @default(false) // Engineering approved
  engineeringApprovedBy     String?                   // Engineering approver
  engineeringApprovedAt     DateTime?                 // Engineering approval date
  engineeringComments       String?                   // Engineering comments
  qualityReview             Boolean                   @default(false) // Quality reviewed
  qualityApproval           Boolean                   @default(false) // Quality approved
  qualityApprovedBy         String?                   // Quality approver
  qualityApprovedAt         DateTime?                 // Quality approval date
  qualityComments           String?                   // Quality comments
  customerNotificationReq   Boolean                   @default(false) // Customer notification required
  customerNotified          Boolean                   @default(false) // Customer notified
  customerApprovalReq       Boolean                   @default(false) // Customer approval required
  customerApproved          Boolean                   @default(false) // Customer approved
  customerApprovedBy        String?                   // Customer approver
  customerApprovedAt        DateTime?                 // Customer approval date
  correctiveAction          String?                   // Corrective action taken
  preventiveAction          String?                   // Preventive action plan
  rootCause                 String?                   // Root cause analysis
  impactAssessment          String?                   // Impact on performance/safety
  costImpact                Decimal?                  // Cost impact estimate
  scheduleImpact            Int?                      // Schedule impact in days
  closedBy                  String?                   // Who closed the deviation
  closedAt                  DateTime?                 // When closed
  createdAt                 DateTime                  @default(now())
  updatedAt                 DateTime                  @updatedAt

  // Relationships
  buildRecord               BuildRecord               @relation(fields: [buildRecordId], references: [id], onDelete: Cascade)
  operation                 BuildRecordOperation?     @relation(fields: [operationId], references: [id])
  ncr                       NCR?                      @relation(fields: [ncrId], references: [id])
  detectedByUser            User                      @relation("DeviationDetectedBy", fields: [detectedBy], references: [id])
  engineeringApprover       User?                     @relation("DeviationEngineeringApprover", fields: [engineeringApprovedBy], references: [id])
  qualityApprover           User?                     @relation("DeviationQualityApprover", fields: [qualityApprovedBy], references: [id])
  closedByUser              User?                     @relation("DeviationClosedBy", fields: [closedBy], references: [id])

  // Child relationships
  photos                    BuildRecordPhoto[]
  documents                 BuildRecordDocument[]

  @@index([buildRecordId])
  @@index([deviationType])
  @@index([status])
  @@index([severity])
  @@index([detectedAt])
  @@map("build_deviations")
}

model BuildRecordPhoto {
  id                        String                  @id @default(cuid())
  buildRecordId             String
  operationId               String?                 // Optional link to operation
  deviationId               String?                 // Optional link to deviation
  photoType                 PhotoType               // BEFORE, AFTER, INSPECTION, DEVIATION, ASSEMBLY, etc.
  title                     String                  // Photo title/description
  description               String?                 // Detailed description
  filePath                  String                  // File storage path
  fileName                  String                  // Original file name
  fileSize                  Int                     // File size in bytes
  mimeType                  String                  // File MIME type
  imageWidth                Int?                    // Image width in pixels
  imageHeight               Int?                    // Image height in pixels
  capturedBy                String                  // User who captured photo
  capturedAt                DateTime                // When photo was captured
  locationCaptured          String?                 // Where photo was taken
  operationNumber           String?                 // Associated operation number
  partNumber                String?                 // Associated part number
  serialNumber              String?                 // Associated serial number
  equipmentUsed             String?                 // Camera/equipment used
  annotations               Json?                   // Photo annotations/markup
  metadata                  Json?                   // Additional metadata
  qualityControlPhoto       Boolean                 @default(false) // QC photo flag
  mandatoryPhoto            Boolean                 @default(false) // Required photo flag
  approved                  Boolean                 @default(false) // Photo approved
  approvedBy                String?                 // Who approved photo
  approvedAt                DateTime?               // When approved
  rejected                  Boolean                 @default(false) // Photo rejected
  rejectedBy                String?                 // Who rejected photo
  rejectedAt                DateTime?               // When rejected
  rejectionReason           String?                 // Reason for rejection
  isArchived                Boolean                 @default(false) // Archived flag
  tags                      String[]                // Photo tags for search
  createdAt                 DateTime                @default(now())
  updatedAt                 DateTime                @updatedAt

  // Relationships
  buildRecord               BuildRecord             @relation(fields: [buildRecordId], references: [id], onDelete: Cascade)
  operation                 BuildRecordOperation?   @relation(fields: [operationId], references: [id])
  deviation                 BuildDeviation?         @relation(fields: [deviationId], references: [id])
  capturedByUser            User                    @relation("PhotoCapturedBy", fields: [capturedBy], references: [id])
  approvedByUser            User?                   @relation("PhotoApprovedBy", fields: [approvedBy], references: [id])
  rejectedByUser            User?                   @relation("PhotoRejectedBy", fields: [rejectedBy], references: [id])

  @@index([buildRecordId])
  @@index([operationId])
  @@index([photoType])
  @@index([capturedAt])
  @@index([partNumber])
  @@map("build_record_photos")
}

model BuildRecordDocument {
  id                        String                  @id @default(cuid())
  buildRecordId             String
  deviationId               String?                 // Optional link to deviation
  documentType              BuildRecordDocumentType // MATERIAL_CERT, TEST_REPORT, CALIBRATION_CERT, etc.
  title                     String                  // Document title
  description               String?                 // Document description
  filePath                  String                  // File storage path
  fileName                  String                  // Original file name
  fileSize                  Int                     // File size in bytes
  mimeType                  String                  // File MIME type
  documentNumber            String?                 // Document control number
  version                   String?                 // Document version
  issueDate                 DateTime?               // Document issue date
  expirationDate            DateTime?               // Document expiration
  supplier                  String?                 // Supplier/vendor name
  partNumber                String?                 // Associated part number
  lotNumber                 String?                 // Associated lot number
  serialNumber              String?                 // Associated serial number
  certificationNumber       String?                 // Certification number
  isOriginal                Boolean                 @default(true) // Original vs copy
  requiresApproval          Boolean                 @default(false) // Requires approval
  approved                  Boolean                 @default(false) // Document approved
  approvedBy                String?                 // Who approved
  approvedAt                DateTime?               // When approved
  compliance                Json?                   // Compliance information
  uploadedBy                String                  // Who uploaded document
  uploadedAt                DateTime                // When uploaded
  tags                      String[]                // Document tags
  metadata                  Json?                   // Additional metadata
  createdAt                 DateTime                @default(now())
  updatedAt                 DateTime                @updatedAt

  // Relationships
  buildRecord               BuildRecord             @relation(fields: [buildRecordId], references: [id], onDelete: Cascade)
  deviation                 BuildDeviation?         @relation(fields: [deviationId], references: [id])
  uploadedByUser            User                    @relation("DocumentUploadedBy", fields: [uploadedBy], references: [id])
  approvedByUser            User?                   @relation("DocumentApprovedBy", fields: [approvedBy], references: [id])

  @@index([buildRecordId])
  @@index([documentType])
  @@index([partNumber])
  @@index([certificationNumber])
  @@map("build_record_documents")
}

model BuildRecordStatusHistory {
  id                        String                  @id @default(cuid())
  buildRecordId             String
  previousStatus            BuildRecordStatus?      // Previous status
  newStatus                 BuildRecordStatus       // New status
  changedBy                 String                  // User who changed status
  changedAt                 DateTime                @default(now()) // When changed
  reason                    String?                 // Reason for change
  notes                     String?                 // Additional notes
  automaticChange           Boolean                 @default(false) // System vs manual change
  ipAddress                 String?                 // IP address of change
  userAgent                 String?                 // User agent string

  // Relationships
  buildRecord               BuildRecord             @relation(fields: [buildRecordId], references: [id], onDelete: Cascade)
  changedByUser             User                    @relation("StatusChangedBy", fields: [changedBy], references: [id])

  @@index([buildRecordId])
  @@index([changedAt])
  @@map("build_record_status_history")
}

model BuildRecordSignature {
  id                        String                  @id @default(cuid())
  buildRecordId             String
  operationId               String?                 // Optional link to operation
  signatureType             BuildSignatureType      // OPERATOR, INSPECTOR, ENGINEER, QUALITY, CUSTOMER
  signatureLevel            SignatureLevel          // OPERATION, BUILD_RECORD, FINAL_APPROVAL
  userId                    String                  // Who signed
  signatureRole             String                  // Role at time of signing
  signatureReason           String                  // Reason for signature
  signatureData             Json                    // Electronic signature data
  timestamp                 DateTime                @default(now()) // When signed
  ipAddress                 String                  // IP address
  userAgent                 String                  // User agent
  biometricType             BiometricType?          // Biometric authentication
  biometricScore            Float?                  // Biometric match score
  signatureHash             String                  // Signature hash for integrity
  isValid                   Boolean                 @default(true) // Signature validity
  invalidatedAt             DateTime?               // When invalidated
  invalidatedBy             String?                 // Who invalidated
  invalidationReason        String?                 // Reason for invalidation
  operationNumber           String?                 // Associated operation
  partNumber                String?                 // Associated part
  serialNumber              String?                 // Associated serial
  complianceLevel           String?                 // Compliance requirement level

  // Relationships
  buildRecord               BuildRecord             @relation(fields: [buildRecordId], references: [id], onDelete: Cascade)
  operation                 BuildRecordOperation?   @relation(fields: [operationId], references: [id])
  user                      User                    @relation("BuildRecordSigner", fields: [userId], references: [id])
  invalidatedByUser         User?                   @relation("BuildRecordSignatureInvalidator", fields: [invalidatedBy], references: [id])

  @@index([buildRecordId])
  @@index([operationId])
  @@index([signatureType])
  @@index([timestamp])
  @@index([userId])
  @@map("build_record_signatures")
}

enum QualificationType {
  CERTIFICATION
  LICENSE
  TRAINING
  SKILL
}

enum CertificationStatus {
  ACTIVE
  EXPIRED
  SUSPENDED
  REVOKED
  PENDING
}

enum SkillCategory {
  MACHINING
  WELDING
  INSPECTION
  ASSEMBLY
  PROGRAMMING
  MAINTENANCE
  QUALITY
  SAFETY
  MANAGEMENT
  OTHER
}

enum CompetencyLevel {
  NOVICE
  ADVANCED_BEGINNER
  COMPETENT
  PROFICIENT
  EXPERT
}

enum AvailabilityType {
  AVAILABLE
  VACATION
  SICK_LEAVE
  TRAINING
  MEETING
  UNAVAILABLE
}

enum MaterialType {
  RAW_MATERIAL
  COMPONENT
  SUBASSEMBLY
  ASSEMBLY
  FINISHED_GOODS
  WIP
  CONSUMABLE
  PACKAGING
  TOOLING
  MAINTENANCE
}

enum MaterialPropertyType {
  PHYSICAL
  CHEMICAL
  MECHANICAL
  THERMAL
  ELECTRICAL
  OPTICAL
  REGULATORY
  OTHER
}

enum MaterialLotStatus {
  AVAILABLE
  RESERVED
  IN_USE
  DEPLETED
  QUARANTINED
  EXPIRED
  REJECTED
  RETURNED
  SCRAPPED
}

enum MaterialLotState {
  RECEIVED
  INSPECTED
  APPROVED
  ISSUED
  IN_PROCESS
  CONSUMED
  RETURNED
  DISPOSED
}

enum QualityLotStatus {
  PENDING
  IN_INSPECTION
  APPROVED
  REJECTED
  CONDITIONAL
}

enum SublotOperationType {
  SPLIT
  MERGE
  TRANSFER
  REWORK
}

enum GenealogyRelationType {
  CONSUMED_BY
  PRODUCED_FROM
  REWORKED_TO
  BLENDED_WITH
  SPLIT_FROM
  MERGED_INTO
  TRANSFERRED_TO
}

enum StateTransitionType {
  MANUAL
  AUTOMATIC
  SYSTEM
  SCHEDULED
  INTEGRATION
}

enum OperationType {
  PRODUCTION
  QUALITY
  MATERIAL_HANDLING
  MAINTENANCE
  SETUP
  CLEANING
  PACKAGING
  TESTING
  REWORK
  OTHER
}

enum OperationClassification {
  MAKE
  ASSEMBLY
  INSPECTION
  TEST
  REWORK
  SETUP
  SUBCONTRACT
  PACKING
}

enum ParameterType {
  INPUT
  OUTPUT
  SET_POINT
  MEASURED
  CALCULATED
}

enum ParameterDataType {
  NUMBER
  STRING
  BOOLEAN
  ENUM
  DATE
  JSON
}

enum ParameterGroupType {
  PROCESS
  QUALITY
  MATERIAL
  EQUIPMENT
  ENVIRONMENTAL
  CUSTOM
}

enum FormulaLanguage {
  JAVASCRIPT
  PYTHON
  SQL
}

enum EvaluationTrigger {
  ON_CHANGE
  SCHEDULED
  MANUAL
}

enum DependencyType {
  MUST_COMPLETE
  MUST_START
  OVERLAP_ALLOWED
  PARALLEL
}

enum DependencyTimingType {
  FINISH_TO_START
  START_TO_START
  FINISH_TO_FINISH
  START_TO_FINISH
}

enum ConsumptionType {
  PER_UNIT
  PER_BATCH
  FIXED
  SETUP
}

enum PhysicalAssetType {
  TOOLING
  FIXTURE
  GAUGE
  CONSUMABLE
  PPE
  MOLD
  PATTERN
  SOFTWARE
  OTHER
}

enum ProductType {
  MADE_TO_STOCK
  MADE_TO_ORDER
  ENGINEER_TO_ORDER
  CONFIGURE_TO_ORDER
  ASSEMBLE_TO_ORDER
}

enum ProductLifecycleState {
  DESIGN
  PROTOTYPE
  PILOT_PRODUCTION
  PRODUCTION
  MATURE
  PHASE_OUT
  OBSOLETE
  ARCHIVED
}

enum ConfigurationType {
  STANDARD
  VARIANT
  CUSTOM
  CONFIGURABLE
}

enum SpecificationType {
  PHYSICAL
  CHEMICAL
  MECHANICAL
  ELECTRICAL
  PERFORMANCE
  REGULATORY
  ENVIRONMENTAL
  SAFETY
  QUALITY
  OTHER
}

enum WorkOrderPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum WorkOrderStatus {
  CREATED
  RELEASED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum RoutingLifecycleState {
  DRAFT
  REVIEW
  RELEASED
  PRODUCTION
  OBSOLETE
}

enum RoutingType {
  PRIMARY
  ALTERNATE
  REWORK
  PROTOTYPE
  ENGINEERING
}

enum StepType {
  PROCESS
  INSPECTION
  DECISION
  PARALLEL_SPLIT
  PARALLEL_JOIN
  OSP
  LOT_SPLIT
  LOT_MERGE
  TELESCOPING
  START
  END
}

enum ControlType {
  LOT_CONTROLLED
  SERIAL_CONTROLLED
  MIXED
}

enum WorkOrderOperationStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  SKIPPED
}

enum ScheduleState {
  FORECAST
  RELEASED
  DISPATCHED
  RUNNING
  COMPLETED
  CLOSED
}

enum SchedulePriority {
  URGENT
  HIGH
  NORMAL
  LOW
}

enum ConstraintType {
  CAPACITY
  MATERIAL
  PERSONNEL
  EQUIPMENT
  DATE
  CUSTOM
}

enum WorkPerformanceType {
  LABOR
  MATERIAL
  EQUIPMENT
  QUALITY
  SETUP
  DOWNTIME
}

enum VarianceType {
  QUANTITY
  TIME
  COST
  EFFICIENCY
  YIELD
  MATERIAL
}

enum QualityToleranceType {
  BILATERAL
  UNILATERAL_PLUS
  UNILATERAL_MINUS
  NOMINAL
}

enum QualityInspectionStatus {
  CREATED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum QualityInspectionResult {
  PASS
  FAIL
  CONDITIONAL
}

enum NCRSeverity {
  MINOR
  MAJOR
  CRITICAL
}

enum NCRStatus {
  // Basic states
  DRAFT
  SUBMITTED

  // Investigation states
  UNDER_INVESTIGATION
  CONTAINMENT

  // Disposition states
  PENDING_DISPOSITION

  // Advanced dispositions
  CTP // Continue to Process
  DDR // Delayed Disposition Required
  MRB // Material Review Board

  // Final states
  CORRECTIVE_ACTION
  VERIFICATION
  CLOSED
  CANCELLED

  // Legacy support (deprecated)
  OPEN
  IN_REVIEW
  DISPOSITION_SET
}

enum NCRDisposition {
  REWORK
  REPAIR
  SCRAP
  USE_AS_IS
  RETURN_TO_SUPPLIER
  SORT_AND_SEGREGATE
  RETURN_TO_STOCK
  ENGINEER_USE_ONLY
}

enum NCRApprovalRequestType {
  STATE_TRANSITION
  DISPOSITION
  CTP_AUTHORIZATION
  MRB_DECISION
  CLOSURE
}

enum NCRApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  DELEGATED
  EXPIRED
}

enum NCRMRBVotingMethod {
  UNANIMOUS
  MAJORITY
  CHAIR_DECIDES
  NO_VOTE
}

// ============================================================================
// Quality Analytics Enums (Issue #58)
// ============================================================================

enum QualityMetricType {
  NCR_RATE
  FIRST_PASS_YIELD
  DPMO
  COPQ_PERCENT
  SCRAP_RATE
  REWORK_RATE
  CUSTOMER_COMPLAINT_RATE
  CAPA_EFFECTIVENESS
  ESCAPED_DEFECTS
  SUPPLIER_QUALITY_INDEX
}

enum ParetoAnalysisType {
  DEFECT_TYPE
  ROOT_CAUSE
  PRODUCT
  SUPPLIER
  WORK_CENTER
  OPERATION
  CUSTOMER
  SEVERITY
  DISPOSITION
  DETECTION_POINT
  COST_RANGE
}

enum QualityAlertType {
  THRESHOLD_EXCEEDED
  TREND_DEGRADATION
  SPC_OUT_OF_CONTROL
  ESCAPED_DEFECT
  SUPPLIER_PERFORMANCE
  CAPA_OVERDUE
  TREND_IMPROVEMENT
  ANOMALY_DETECTED
}

enum AlertSeverity {
  INFO
  WARNING
  CRITICAL
  URGENT
}

enum DetectionPoint {
  IN_PROCESS
  FINAL_INSPECTION
  RECEIVING
  ASSEMBLY
  SHIPPING
  CUSTOMER
  INTERNAL_AUDIT
  SUPPLIER_AUDIT
}

enum EquipmentClass {
  PRODUCTION
  MAINTENANCE
  QUALITY
  MATERIAL_HANDLING
  LABORATORY
  STORAGE
  ASSEMBLY
}

enum EquipmentStatus {
  AVAILABLE
  IN_USE
  OPERATIONAL
  MAINTENANCE
  DOWN
  RETIRED
}

enum EquipmentState {
  IDLE
  RUNNING
  BLOCKED
  STARVED
  FAULT
  MAINTENANCE
  SETUP
  EMERGENCY
}

enum EquipmentLogType {
  MAINTENANCE
  REPAIR
  CALIBRATION
  STATUS_CHANGE
  USAGE
}

enum PerformancePeriodType {
  HOUR
  SHIFT
  DAY
  WEEK
  MONTH
  QUARTER
  YEAR
}

enum MaterialTransactionType {
  RECEIPT
  ISSUE
  RETURN
  ADJUSTMENT
  SCRAP
}

enum WorkInstructionStatus {
  DRAFT
  REVIEW
  APPROVED
  REJECTED
  SUPERSEDED
  ARCHIVED
}

enum WorkInstructionExecutionStatus {
  IN_PROGRESS
  COMPLETED
  PAUSED
  CANCELLED
}

enum ElectronicSignatureType {
  BASIC
  ADVANCED
  QUALIFIED
}

enum ElectronicSignatureLevel {
  OPERATOR
  SUPERVISOR
  QUALITY
  ENGINEER
  MANAGER
}

enum BiometricType {
  FINGERPRINT
  FACIAL
  IRIS
  VOICE
  NONE
}

enum FAIStatus {
  IN_PROGRESS
  REVIEW
  APPROVED
  REJECTED
  SUPERSEDED
}

enum IntegrationType {
  ERP
  PLM
  CMMS
  WMS
  QMS
  HISTORIAN
  DNC
  SFC
  SKILLS
  CALIBRATION
  PDM
  CMM
  CUSTOM
}

enum IntegrationDirection {
  INBOUND
  OUTBOUND
  BIDIRECTIONAL
}

enum IntegrationLogStatus {
  PENDING
  IN_PROGRESS
  SUCCESS
  FAILED
  PARTIAL
  TIMEOUT
  CANCELLED
}

enum ScheduleType {
  MASTER
  DETAILED
  DISPATCH
}

enum B2MMessageStatus {
  PENDING
  VALIDATED
  PROCESSING
  PROCESSED
  SENT
  CONFIRMED
  ACCEPTED
  FAILED
  REJECTED
  TIMEOUT
}

enum ERPTransactionType {
  ISSUE
  RECEIPT
  RETURN
  TRANSFER
  ADJUSTMENT
  SCRAP
  CONSUMPTION
}

enum PersonnelActionType {
  CREATE
  UPDATE
  DEACTIVATE
  SKILL_UPDATE
  SCHEDULE_UPDATE
}

enum DataCollectionType {
  SENSOR
  ALARM
  EVENT
  MEASUREMENT
  STATUS
  PERFORMANCE
}

enum CommandType {
  START
  STOP
  PAUSE
  RESUME
  RESET
  CONFIGURE
  LOAD_PROGRAM
  UNLOAD_PROGRAM
  DIAGNOSTIC
  CALIBRATE
  EMERGENCY_STOP
}

enum CommandStatus {
  PENDING
  SENT
  ACKNOWLEDGED
  EXECUTING
  COMPLETED
  FAILED
  TIMEOUT
  CANCELLED
}

enum SPCChartType {
  X_BAR_R
  X_BAR_S
  I_MR
  P_CHART
  NP_CHART
  C_CHART
  U_CHART
  EWMA
  CUSUM
}

enum LimitCalculationMethod {
  HISTORICAL_DATA
  SPEC_LIMITS
  MANUAL
}

enum SamplingPlanType {
  SINGLE
  DOUBLE
  MULTIPLE
  SEQUENTIAL
}

/// Work Instruction Format - Different content formats supported
enum WorkInstructionFormat {
  NATIVE
  IMPORTED_PDF
  IMPORTED_DOC
  IMPORTED_PPT
  HYBRID
}

/// Media Type - Types of media supported in work instructions
enum MediaType {
  IMAGE
  VIDEO
  DOCUMENT
  DIAGRAM
  CAD_MODEL
  ANIMATION
}

/// Relation Type - Types of relationships between work instructions
enum RelationType {
  PREREQUISITE
  SUPERSEDES
  RELATED_TO
  ALTERNATIVE_TO
  REFERENCED_BY
}

/// Export Template Type - Types of export templates
enum ExportTemplateType {
  WORK_INSTRUCTION
  SETUP_SHEET
  INSPECTION_PLAN
  SOP
}

/// Export Format - Supported export formats
enum ExportFormat {
  PDF
  DOCX
  PPTX
}

enum InspectionType {
  FIRST_ARTICLE
  IN_PROCESS
  FINAL
  RECEIVING
  AUDIT
  PATROL
}

enum InspectionFrequency {
  PER_PIECE
  PER_BATCH
  PER_LOT
  PERIODIC
  SAMPLING
  ON_DEMAND
}

enum MeasurementType {
  DIMENSIONAL
  VISUAL
  FUNCTIONAL
  MATERIAL
  SURFACE_FINISH
  GEOMETRIC_TOLERANCE
}

enum InspectionResult {
  PASS
  FAIL
  CONDITIONAL_PASS
  PENDING_REVIEW
}

enum Disposition {
  ACCEPT
  REJECT
  REWORK
  USE_AS_IS
  RETURN_TO_VENDOR
  SCRAP
}

enum SOPType {
  SAFETY
  QUALITY
  MAINTENANCE
  TRAINING
  EMERGENCY
  ENVIRONMENTAL
  SECURITY
  GENERAL
}

enum ToolType {
  CUTTING_TOOL
  GAGE
  FIXTURE
  JIG
  DIE
  MOLD
  HAND_TOOL
  MEASURING_INSTRUMENT
  WORK_HOLDING
  OTHER
}

enum MaintenanceType {
  PREVENTIVE
  CORRECTIVE
  PREDICTIVE
  BREAKDOWN
}

enum DocumentType {
  WORK_INSTRUCTION
  SETUP_SHEET
  INSPECTION_PLAN
  SOP
  TOOL_DRAWING
}

/// Layout Mode - Different layout modes for execution interface
enum LayoutMode {
  SPLIT_VERTICAL
  SPLIT_HORIZONTAL
  TABBED
  OVERLAY
  PICTURE_IN_PICTURE
}

/// Panel Position - Position of panels in the layout
enum PanelPosition {
  LEFT
  RIGHT
  TOP
  BOTTOM
  CENTER
}

enum WorkflowType {
  WORK_INSTRUCTION
  SETUP_SHEET
  INSPECTION_PLAN
  SOP
  TOOL_DRAWING
  ECO
  NCR
  CAPA
  CHANGE_REQUEST
  DOCUMENT_APPROVAL
  FAI_REPORT
  QUALITY_PROCESS
}

enum ApprovalType {
  ALL_REQUIRED
  ANY_ONE
  THRESHOLD
  PERCENTAGE
  WEIGHTED
}

enum AssignmentStrategy {
  MANUAL
  ROLE_BASED
  LOAD_BALANCED
  ROUND_ROBIN
}

enum ConditionOperator {
  EQUALS
  NOT_EQUALS
  GREATER_THAN
  LESS_THAN
  GREATER_THAN_OR_EQUAL
  LESS_THAN_OR_EQUAL
  IN
  NOT_IN
  CONTAINS
  REGEX_MATCH
}

enum RuleActionType {
  ADD_STAGE
  SKIP_STAGE
  CHANGE_APPROVERS
  SET_DEADLINE
  SEND_NOTIFICATION
  REQUIRE_SIGNATURE_TYPE
}

enum WorkflowStatus {
  IN_PROGRESS
  COMPLETED
  REJECTED
  CANCELLED
  ON_HOLD
}

enum Priority {
  LOW
  NORMAL
  HIGH
  CRITICAL
}

enum ImpactLevel {
  NONE
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum StageStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  SKIPPED
  ESCALATED
}

enum StageOutcome {
  APPROVED
  REJECTED
  CHANGES_REQUESTED
  DELEGATED
  SKIPPED
}

enum AssignmentType {
  REQUIRED
  OPTIONAL
  OBSERVER
}

enum ApprovalAction {
  APPROVED
  REJECTED
  CHANGES_REQUESTED
  DELEGATED
  SKIPPED
}

enum WorkflowEventType {
  WORKFLOW_STARTED
  STAGE_STARTED
  STAGE_COMPLETED
  APPROVAL_GRANTED
  APPROVAL_REJECTED
  CHANGES_REQUESTED
  DELEGATED
  ESCALATED
  DEADLINE_EXTENDED
  WORKFLOW_COMPLETED
  WORKFLOW_CANCELLED
  REMINDER_SENT
  RULE_EVALUATED
  STAGE_ADDED
  STAGE_SKIPPED
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  ESCALATED
  DELEGATED
}

/// ECO Type classification
enum ECOType {
  CORRECTIVE
  IMPROVEMENT
  COST_REDUCTION
  COMPLIANCE
  CUSTOMER_REQUEST
  ENGINEERING
  EMERGENCY
}

/// ECO Priority levels
enum ECOPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
  EMERGENCY
}

/// ECO Status lifecycle
enum ECOStatus {
  REQUESTED
  UNDER_REVIEW
  PENDING_CRB
  CRB_APPROVED
  IMPLEMENTATION
  VERIFICATION
  COMPLETED
  REJECTED
  CANCELLED
  ON_HOLD
}

/// Effectivity type definitions
enum EffectivityType {
  BY_DATE
  BY_SERIAL_NUMBER
  BY_WORK_ORDER
  BY_LOT_BATCH
  IMMEDIATE
}

/// Change Review Board decision options
enum CRBDecision {
  APPROVED
  REJECTED
  DEFERRED
  REQUEST_MORE_INFO
}

/// Document update status
enum DocUpdateStatus {
  PENDING
  IN_PROGRESS
  AWAITING_APPROVAL
  APPROVED
  COMPLETED
}

/// ECO Task type classification
enum ECOTaskType {
  DOCUMENT_UPDATE
  ROUTING_UPDATE
  BOM_UPDATE
  PART_MASTER_UPDATE
  TOOLING_CREATION
  EQUIPMENT_SETUP
  TRAINING
  VERIFICATION
  FIRST_ARTICLE
  PROCESS_VALIDATION
}

/// ECO Task status options
enum ECOTaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  BLOCKED
  CANCELLED
}

/// Attachment type classification
enum AttachmentType {
  SUPPORTING_DOC
  DRAWING_CURRENT
  DRAWING_PROPOSED
  CALCULATION
  TEST_RESULT
  SUPPLIER_DOC
  CUSTOMER_CORRESPONDENCE
  ANALYSIS_REPORT
  PHOTO
  OTHER
}

/// ECO Event types for audit trail
enum ECOEventType {
  ECO_CREATED
  STATUS_CHANGED
  CRB_REVIEW_SCHEDULED
  CRB_REVIEW_COMPLETED
  TASK_CREATED
  TASK_COMPLETED
  DOCUMENT_UPDATED
  EFFECTIVITY_SET
  ECO_COMPLETED
  ECO_CANCELLED
  COMMENT_ADDED
  ATTACHMENT_ADDED
}

/// ECO Relation types
enum ECORelationType {
  DEPENDS_ON
  BLOCKS
  RELATED_TO
  SUPERSEDES
  DUPLICATE_OF
  CHILD_OF
}

/// Voting rule options
enum VotingRule {
  UNANIMOUS
  MAJORITY
  SUPERMAJORITY
  CONSENSUS
}

/// Comment context types
enum CommentContextType {
  DOCUMENT
  STEP
  PARAMETER
  CHARACTERISTIC
  IMAGE
  VIDEO
  TEXT_SECTION
}

/// Comment status options
enum CommentStatus {
  OPEN
  RESOLVED
  ARCHIVED
}

/// Comment priority levels
enum CommentPriority {
  LOW
  MEDIUM
  HIGH
}

/// Reaction type options
enum ReactionType {
  LIKE
  AGREE
  DISAGREE
  HELPFUL
  QUESTION
}

/// Annotation type options
enum AnnotationType {
  ARROW
  CALLOUT
  HIGHLIGHT
  TEXT_LABEL
  FREEHAND
  RECTANGLE
  CIRCLE
  LINE
  BLUR
  STICKY_NOTE
  STRIKETHROUGH
  UNDERLINE
  STAMP
}

/// Review type options
enum ReviewType {
  TECHNICAL
  EDITORIAL
  QUALITY
  SAFETY
  COMPLIANCE
  GENERAL
}

/// Review status options
enum ReviewStatus {
  NOT_STARTED
  IN_PROGRESS
  FEEDBACK_PROVIDED
  COMPLETED
  OVERDUE
}

/// Review recommendation options
enum ReviewRecommendation {
  APPROVE
  REQUEST_CHANGES
  REJECT
  NO_RECOMMENDATION
}

/// Activity type options
enum ActivityType {
  CREATED
  EDITED
  COMMENTED
  ANNOTATED
  REVIEW_ASSIGNED
  REVIEW_COMPLETED
  APPROVED
  REJECTED
  VERSION_CREATED
  LINKED
  ECO_LINKED
  SHARED
  EXPORTED
  VIEWED
}

/// Notification type options
enum NotificationType {
  MENTION
  COMMENT_REPLY
  REVIEW_ASSIGNED
  DOCUMENT_UPDATED
  APPROVAL_GRANTED
  APPROVAL_REJECTED
  COMMENT_RESOLVED
  DEADLINE_APPROACHING
  REVIEW_COMPLETED
  // Kit shortage and expedite notifications
  MATERIAL_SHORTAGE_DETECTED
  EXPEDITE_REQUEST_CREATED
  EXPEDITE_REQUEST_APPROVED
  EXPEDITE_REQUEST_REJECTED
  SUPPLIER_RESPONSE_RECEIVED
  MATERIAL_ARRIVAL_EXPECTED
  CRITICAL_SHORTAGE_ALERT
  SHORTAGE_RESOLVED
  PARTIAL_KIT_RELEASED
}

/// Conflict resolution type options
enum ResolutionType {
  ACCEPT_YOURS
  ACCEPT_THEIRS
  MANUAL_MERGE
  AUTO_MERGED
}

/// Storage class for lifecycle management
enum StorageClass {
  HOT
  WARM
  COLD
  ARCHIVE
}

/// CDN cache status
enum CacheStatus {
  CACHED
  NOT_CACHED
  INVALIDATED
  EXPIRED
}

/// File upload method
enum UploadMethod {
  DIRECT
  MULTIPART
  PRESIGNED
  RESUMABLE
}

/// File processing status
enum ProcessingStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
}

/// File attachment types for cloud storage
enum FileAttachmentType {
  PRIMARY
  ATTACHMENT
  THUMBNAIL
  PREVIEW
  EXPORT
  BACKUP
  TEMP
}

/// Version change types
enum VersionChangeType {
  CREATE
  UPDATE
  RENAME
  METADATA
  RESTORE
  MIGRATE
}

/// Backup frequency options
enum BackupFrequency {
  REAL_TIME
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
  CUSTOM
}

/// Backup types
enum BackupType {
  FULL
  INCREMENTAL
  DIFFERENTIAL
  SNAPSHOT
}

/// Backup status
enum BackupStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
  PARTIAL
}

/// File access types for logging
enum AccessType {
  READ
  WRITE
  DELETE
  METADATA
  LIST
  PREVIEW
}

/// Upload status for multipart uploads
enum UploadStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
  EXPIRED
}

enum TimeTrackingGranularity {
  NONE
  WORK_ORDER
  OPERATION
}

enum CostingModel {
  LABOR_HOURS
  MACHINE_HOURS
  BOTH
}

enum MultiTaskingMode {
  CONCURRENT
  SPLIT_ALLOCATION
}

enum ApprovalFrequency {
  DAILY
  WEEKLY
  BIWEEKLY
  NONE
}

enum TimeType {
  DIRECT_LABOR
  INDIRECT
  MACHINE
}

enum TimeEntrySource {
  MANUAL
  KIOSK
  MOBILE
  MACHINE_AUTO
  API
  HISTORIAN
}

enum TimeEntryStatus {
  ACTIVE
  COMPLETED
  PENDING_APPROVAL
  APPROVED
  REJECTED
  EXPORTED
}

enum IndirectCategory {
  BREAK
  LUNCH
  TRAINING
  MEETING
  MAINTENANCE
  SETUP
  CLEANUP
  WAITING
  ADMINISTRATIVE
  OTHER
}

enum TimeValidationRuleType {
  MAX_DURATION
  MIN_DURATION
  MISSING_CLOCK_OUT
  CONCURRENT_ENTRIES
  OVERTIME_THRESHOLD
  INVALID_TIME_RANGE
}

enum TimeEntryType {
  LABOR
  MACHINE
}

// ============================================================================
// TIME ENTRY MANAGEMENT ENUMS (Issue #51)
// ============================================================================

enum EditType {
  CREATED
  MODIFIED
  DELETED
  SPLIT
  MERGED
  TRANSFERRED
  LOCKED
  UNLOCKED
}

enum EditReasonCategory {
  CLOCK_FORGOT
  WRONG_WORK_ORDER
  WRONG_OPERATION
  SYSTEM_ERROR
  SUPERVISOR_DIRECTED
  BREAK_ADJUSTMENT
  OVERTIME_CORRECTION
  PAYROLL_CORRECTION
  OTHER
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  MORE_INFO_NEEDED
  ESCALATED
  AUTO_APPROVED
}

enum TimeEntryBatchType {
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
  CUSTOM
}

enum TimeEntryBatchStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  REJECTED
  LOCKED
  EXPORTED
}

enum AutoStopBehavior {
  STOP_ALL
  STOP_DIRECT_ONLY
  PROMPT_OPERATOR
  DO_NOTHING
}

enum LockType {
  MANUAL
  PAYROLL_EXPORT
  AUDIT_REVIEW
  COMPLIANCE_HOLD
  SYSTEM_MAINTENANCE
}

/// Types of security events that can be monitored
enum SecurityEventType {
  AUTH_FAILURE
  PRIVILEGE_ESCALATION
  EMERGENCY_ACCESS
  UNUSUAL_PATTERN
  MULTIPLE_SESSIONS
  PERMISSION_DENIED
  SUSPICIOUS_IP
  SESSION_HIJACK
  BRUTE_FORCE
  ACCOUNT_LOCKOUT
  DATA_EXPORT
  ADMIN_ACTION
  SYSTEM_ACCESS
}

/// Severity levels for security events
enum SecuritySeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

/// Types of audit reports that can be generated
enum ReportType {
  USER_ACCESS
  PERMISSION_CHANGES
  SECURITY_EVENTS
  SESSION_ANALYTICS
  COMPLIANCE_SOX
  COMPLIANCE_GDPR
  COMPLIANCE_ISO27001
  USAGE_ANALYTICS
  TREND_ANALYSIS
}

/// Status of report generation
enum ReportStatus {
  GENERATING
  COMPLETED
  FAILED
  EXPIRED
}

/// Types of permission changes that can occur
enum PermissionChangeType {
  ROLE_ASSIGNED
  ROLE_REMOVED
  PERMISSION_GRANTED
  PERMISSION_REVOKED
  ROLE_MODIFIED
  SITE_ACCESS_GRANTED
  SITE_ACCESS_REVOKED
  EMERGENCY_OVERRIDE
  BULK_CHANGE
}

enum SsoProviderType {
  SAML
  OIDC
  AZURE_AD
  LDAP
  INTERNAL
}

enum AuthenticationEventType {
  LOGIN
  LOGOUT
  REFRESH
  FAILURE
  PROVIDER_ERROR
  SESSION_TIMEOUT
  FORCED_LOGOUT
}

// ROLE TEMPLATE SYSTEM - GitHub Issue #125

/// Role Template Categories for Manufacturing
enum RoleTemplateCategory {
  PRODUCTION
  QUALITY
  MAINTENANCE
  MANAGEMENT
  ADMINISTRATION
  ENGINEERING
  SAFETY
  COMPLIANCE
  CUSTOM
}

/// Role Template Actions for Audit Trail
enum RoleTemplateAction {
  TEMPLATE_CREATED
  TEMPLATE_UPDATED
  TEMPLATE_DELETED
  TEMPLATE_ACTIVATED
  TEMPLATE_DEACTIVATED
  ROLE_INSTANTIATED
  ROLE_CUSTOMIZED
  PERMISSIONS_MODIFIED
  USER_ASSIGNED
  USER_REMOVED
}

/// Role Template - Master template definition for role configurations
model RoleTemplate {
  id              String                    @id @default(cuid())
  templateCode    String                    @unique
  templateName    String
  description     String?
  category        RoleTemplateCategory
  isActive        Boolean                   @default(true)
  isGlobal        Boolean                   @default(true)
  version         String                    @default("1.0.0")
  metadata        Json?                     // Manufacturing-specific configuration
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
  createdBy       String
  updatedBy       String?

  // Relationships
  permissions     RoleTemplatePermission[]
  instances       RoleTemplateInstance[]
  usageLogs       RoleTemplateUsageLog[]
  creator         User                      @relation("RoleTemplateCreator", fields: [createdBy], references: [id])
  updater         User?                     @relation("RoleTemplateUpdater", fields: [updatedBy], references: [id])

  @@index([templateCode])
  @@index([category])
  @@index([isActive])
  @@index([isGlobal])
  @@map("role_templates")
}

/// Role Template Permissions - Defines permissions included in each template
model RoleTemplatePermission {
  id           String       @id @default(cuid())
  templateId   String
  permissionId String
  isRequired   Boolean      @default(true)
  isOptional   Boolean      @default(false)
  metadata     Json?        // Additional permission context
  createdAt    DateTime     @default(now())

  // Relationships
  template     RoleTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  permission   Permission   @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([templateId, permissionId])
  @@index([templateId])
  @@index([permissionId])
  @@map("role_template_permissions")
}

/// Role Template Instance - Tracks when templates are instantiated into actual roles
model RoleTemplateInstance {
  id                String              @id @default(cuid())
  templateId        String
  roleId            String              @unique
  instanceName      String?
  siteId            String?
  customPermissions Json?               // Site-specific permission adjustments
  isActive          Boolean             @default(true)
  instantiatedAt    DateTime            @default(now())
  instantiatedBy    String
  metadata          Json?               // Instance-specific metadata

  // Relationships
  template          RoleTemplate        @relation(fields: [templateId], references: [id])
  role              Role                @relation(fields: [roleId], references: [id], onDelete: Cascade)
  site              Site?               @relation(fields: [siteId], references: [id])
  instantiator      User                @relation(fields: [instantiatedBy], references: [id])
  usageLogs         RoleTemplateUsageLog[]

  @@index([templateId])
  @@index([roleId])
  @@index([siteId])
  @@index([instantiatedBy])
  @@map("role_template_instances")
}

/// Role Template Usage Log - Audit trail for template operations
model RoleTemplateUsageLog {
  id            String                    @id @default(cuid())
  templateId    String?
  instanceId    String?
  action        RoleTemplateAction
  performedBy   String
  targetUserId  String?
  siteId        String?
  details       Json?
  timestamp     DateTime                  @default(now())

  // Relationships
  template      RoleTemplate?             @relation(fields: [templateId], references: [id])
  instance      RoleTemplateInstance?     @relation(fields: [instanceId], references: [id])
  performer     User                      @relation("RoleTemplateLogPerformer", fields: [performedBy], references: [id])
  targetUser    User?                     @relation("RoleTemplateLogTarget", fields: [targetUserId], references: [id])
  site          Site?                     @relation(fields: [siteId], references: [id])

  @@index([templateId])
  @@index([instanceId])
  @@index([performedBy])
  @@index([targetUserId])
  @@index([timestamp])
  @@map("role_template_usage_logs")
}

// TORQUE MANAGEMENT SYSTEM
// Digital torque management for engine assembly operations

/// Torque Specification - defines torque requirements for specific parts/operations
model TorqueSpecification {
  id                    String              @id @default(cuid())
  torqueSpecCode        String              @unique   /// Unique identifier for this torque spec
  name                  String                        /// Human-readable name (e.g., "Turbine Disk TD-9876 Bolts")
  description           String?                       /// Detailed description of the torque specification

  // Torque Requirements
  targetTorque          Float                         /// Target torque value (e.g., 175.0)
  tolerancePlus         Float                         /// Positive tolerance (e.g., 2.0 for +2 Nm)
  toleranceMinus        Float                         /// Negative tolerance (e.g., 2.0 for -2 Nm)
  torqueUnit            String              @default("Nm") /// Units: Nm, ft-lbs, in-lbs

  // Fastener Information
  fastenerType          String                        /// M12x1.5, 1/4-20, etc.
  fastenerGrade         String?                       /// Grade 12.9, Grade 8, etc.
  fastenerCount         Int                           /// Number of fasteners (e.g., 48 bolts)

  // Tightening Method
  tighteningMethod      TorqueMethod        @default(TORQUE_ONLY)
  numberOfPasses        Int                 @default(1)    /// Number of tightening passes
  passPercentages       Json?                         /// [30, 70, 100] for 3-pass tightening

  // Pattern and Sequence
  sequencePattern       TorquePattern       @default(LINEAR)
  customSequence        Json?                         /// Custom sequence array [1,5,3,7,2,6,4,8]

  // Part/Operation Associations
  partId                String?                       /// Associated part (optional)
  operationId           String?                       /// Associated operation (optional)
  routingOperationId    String?                       /// Associated routing operation (optional)
  workCenter            String?                       /// Work center where performed

  // Engineering and Approval
  engineerApprovedBy    String?                       /// Engineer who approved this spec
  engineerApprovedAt    DateTime?                     /// When it was approved
  revision              String              @default("A")  /// Revision level
  effectiveDate         DateTime?                     /// When this spec becomes effective
  expirationDate        DateTime?                     /// When this spec expires

  // Metadata
  isActive              Boolean             @default(true)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  createdBy             String                        /// User who created this spec

  // Relationships
  part                  Part?               @relation(fields: [partId], references: [id])
  operation             Operation?          @relation(fields: [operationId], references: [id])
  routingOperation      RoutingOperation?   @relation(fields: [routingOperationId], references: [id])
  creator               User                @relation("TorqueSpecCreator", fields: [createdBy], references: [id])
  approver              User?               @relation("TorqueSpecApprover", fields: [engineerApprovedBy], references: [id])

  // Related entities
  sequences             TorqueSequence[]
  events                TorqueEvent[]

  @@index([partId])
  @@index([operationId])
  @@index([routingOperationId])
  @@index([isActive])
  @@index([effectiveDate])
  @@map("torque_specifications")
}

/// Torque Sequence - defines the specific bolt tightening sequence and pattern
model TorqueSequence {
  id                    String              @id @default(cuid())
  torqueSpecId          String                        /// Reference to parent torque specification
  sequenceName          String                        /// Name like "Star Pattern" or "Linear Sequence"

  // Sequence Definition
  boltPositions         Json                          /// Array of bolt position definitions
  sequenceOrder         Json                          /// Order array [1,5,3,7,2,6,4,8]
  passNumber            Int                           /// Which pass this sequence applies to (1, 2, 3)
  passPercentage        Float                         /// Percentage of target torque (30, 70, 100)

  // Visual Guidance Data
  visualPattern         Json?                         /// Coordinates/visual representation data
  instructions          String?                       /// Human-readable instructions

  // Metadata
  isActive              Boolean             @default(true)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  // Relationships
  torqueSpec            TorqueSpecification @relation(fields: [torqueSpecId], references: [id], onDelete: Cascade)
  events                TorqueEvent[]

  @@index([torqueSpecId])
  @@index([passNumber])
  @@map("torque_sequences")
}

/// Torque Event - captured actual torque values from digital torque wrenches
model TorqueEvent {
  id                    String              @id @default(cuid())

  // Work Context
  workOrderId           String                        /// Work order being executed
  torqueSpecId          String                        /// Torque specification being followed
  sequenceId            String?                       /// Specific sequence step
  serialNumber          String?                       /// Serial number being assembled

  // Torque Measurement
  actualTorque          Float                         /// Actual measured torque value
  targetTorque          Float                         /// Target torque for this measurement
  tolerancePlus         Float                         /// Upper tolerance limit
  toleranceMinus        Float                         /// Lower tolerance limit
  torqueUnit            String              @default("Nm")

  // Position and Pass Info
  boltPosition          Int                           /// Which bolt/fastener (1-48)
  passNumber            Int                           /// Which tightening pass (1, 2, 3)
  passPercentage        Float                         /// Target percentage for this pass

  // Validation Results
  isInSpec              Boolean                       /// Whether torque is within specification
  deviationPercent      Float?                        /// Percentage deviation from target
  requiresRework        Boolean             @default(false)

  // Digital Tool Information
  digitalWrenchId       String?                       /// ID of the digital torque wrench used
  wrenchSerialNumber    String?                       /// Serial number of the torque wrench
  wrenchCalibrationDate DateTime?                     /// Last calibration date of the wrench

  // Operator and Timing
  operatorId            String                        /// User who performed the torque
  timestamp             DateTime            @default(now()) /// When the torque was applied
  duration              Int?                          /// How long the operation took (seconds)

  // Quality and Approval
  supervisorReviewId    String?                       /// Supervisor who reviewed (for out-of-spec)
  supervisorReviewAt    DateTime?                     /// When supervisor reviewed
  reviewComments        String?                       /// Comments from supervisor review
  reworkRequired        Boolean             @default(false)
  reworkCompleted       Boolean             @default(false)
  reworkBy              String?                       /// User who performed rework
  reworkAt              DateTime?                     /// When rework was completed

  // Metadata
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  // Relationships
  workOrder             WorkOrder           @relation(fields: [workOrderId], references: [id])
  torqueSpec            TorqueSpecification @relation(fields: [torqueSpecId], references: [id])
  sequence              TorqueSequence?     @relation(fields: [sequenceId], references: [id])
  operator              User                @relation("TorqueEventOperator", fields: [operatorId], references: [id])
  supervisorReviewer    User?               @relation("TorqueEventSupervisor", fields: [supervisorReviewId], references: [id])
  reworkUser            User?               @relation("TorqueEventRework", fields: [reworkBy], references: [id])

  @@index([workOrderId])
  @@index([torqueSpecId])
  @@index([operatorId])
  @@index([timestamp])
  @@index([isInSpec])
  @@index([serialNumber])
  @@index([boltPosition, passNumber])
  @@map("torque_events")
}

/// Torque Method - how torque is applied
enum TorqueMethod {
  TORQUE_ONLY       /// Standard torque-only method
  TORQUE_ANGLE      /// Torque plus angle method
  TORQUE_TO_YIELD   /// Torque-to-yield method
  ANGLE_ONLY        /// Angle-only method (after snug tight)
}

/// Torque Pattern - bolt tightening sequence pattern
enum TorquePattern {
  LINEAR            /// Sequential: 1, 2, 3, 4, 5, 6, 7, 8
  STAR              /// Star pattern: 1, 5, 3, 7, 2, 6, 4, 8 (opposing bolts)
  SPIRAL            /// Spiral pattern: outward spiral from center
  CROSS             /// Cross pattern: cross-wise tightening
  CUSTOM            /// Custom sequence defined in customSequence field
}

/// Unit types for different measurement categories
enum UnitType {
  QUANTITY        // Count/Each
  MASS           // Weight measurements
  LENGTH         // Distance/dimensional measurements
  VOLUME         // Volume/capacity measurements
  AREA           // Surface area measurements
  TIME           // Time duration measurements
  TEMPERATURE    // Temperature measurements
  PRESSURE       // Pressure measurements
  FORCE          // Force measurements
  ENERGY         // Energy measurements
  POWER          // Power measurements
  VELOCITY       // Speed measurements
  ANGLE          // Angular measurements
  OTHER          // Other measurement types
}

/// System of measurement classification
enum SystemOfMeasure {
  METRIC         // Metric system (SI)
  IMPERIAL       // Imperial/US customary system
  SI             // International System of Units
  OTHER          // Other measurement systems
}

// LIFE-LIMITED PARTS (LLP) SYSTEM

/// LLP criticality levels for safety classification
enum LLPCriticalityLevel {
  SAFETY_CRITICAL     // Must be retired at exact limit - catastrophic failure risk
  MONITORED          // Closely monitored but some tolerance allowed
  TRACKED            // Tracked for maintenance planning
}

/// LLP retirement criteria types
enum LLPRetirementType {
  CYCLES_OR_TIME     // Whichever occurs first (typical)
  CYCLES_ONLY        // Cycles-based retirement only
  TIME_ONLY          // Calendar time-based retirement only
  CYCLES_AND_TIME    // Both must be met
}

/// LLP status for tracking current state
enum LLPStatus {
  ACTIVE             // Currently in service
  RETIRED            // Permanently retired from service
  QUARANTINED        // Temporarily removed pending investigation
  UNDER_REPAIR       // In shop for maintenance/repair
  AWAITING_INSTALL   // Ready for installation
  SCRAPPED           // Destroyed/disposed
}

/// LLP alert severity levels
enum LLPAlertSeverity {
  INFO               // Informational (>80% life remaining)
  WARNING            // Warning (80-90% life consumed)
  CRITICAL           // Critical (90-95% life consumed)
  URGENT             // Urgent (95-100% life consumed)
  EXPIRED            // Past retirement limit
}

/// LLP certification document types
enum LLPCertificationType {
  FORM_1             // Authorized Release Certificate
  MATERIAL_CERT      // Material certification
  TEST_REPORT        // Test results (tensile, hardness, etc.)
  TRACEABILITY_CERT  // OEM traceability certificate
  HEAT_LOT_CERT      // Heat lot certification
  NDT_REPORT         // Non-destructive testing report
  OEM_CERT           // Original equipment manufacturer certification
}

/// Life-Limited Parts life history tracking - complete back-to-birth record
model LLPLifeHistory {
  id                    String               @id @default(cuid())
  serializedPartId      String
  eventType             String               // INSTALL, REMOVE, REPAIR, INSPECT, MANUFACTURE
  eventDate             DateTime
  cyclesAtEvent         Int?                 // Total cycles at this event
  hoursAtEvent          Float?               // Total flight hours at this event
  parentAssemblyId      String?              // Which engine/assembly installed in
  parentSerialNumber    String?              // Serial number of parent assembly
  workOrderId           String?              // Associated work order
  operationId           String?              // Specific operation
  performedBy           String?              // Technician/operator
  location              String?              // Where event occurred
  notes                 String?              // Event-specific notes
  certificationUrls     String[]             // Links to certification documents
  inspectionResults     Json?                // Inspection findings (JSON)
  repairDetails         Json?                // Repair work performed (JSON)
  metadata              Json?                // Additional event metadata
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt

  serializedPart        SerializedPart       @relation(fields: [serializedPartId], references: [id], onDelete: Cascade)

  @@index([serializedPartId])
  @@index([eventDate])
  @@index([eventType])
  @@index([parentAssemblyId])
  @@map("llp_life_history")
}

/// LLP alert management for retirement and inspection notifications
model LLPAlert {
  id                    String               @id @default(cuid())
  serializedPartId      String
  alertType             String               // RETIREMENT_WARNING, INSPECTION_DUE, RETIRED
  severity              LLPAlertSeverity
  triggerCycles         Int?                 // Cycles that triggered the alert
  triggerDate           DateTime?            // Date that triggered the alert
  thresholdPercentage   Float?               // Percentage of life consumed (0-100)
  message               String               // Alert message
  isActive              Boolean              @default(true)
  acknowledgedBy        String?              // Who acknowledged the alert
  acknowledgedAt        DateTime?            // When acknowledged
  resolvedBy            String?              // Who resolved the alert
  resolvedAt            DateTime?            // When resolved
  actionRequired        String?              // Required action description
  dueDate               DateTime?            // When action is due
  escalationLevel       Int                  @default(1)
  notificationsSent     Int                  @default(0)
  metadata              Json?                // Additional alert data
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt

  serializedPart        SerializedPart       @relation(fields: [serializedPartId], references: [id], onDelete: Cascade)

  @@index([serializedPartId])
  @@index([severity])
  @@index([isActive])
  @@index([dueDate])
  @@index([alertType])
  @@map("llp_alerts")
}

/// LLP certification document storage and management
model LLPCertification {
  id                    String               @id @default(cuid())
  serializedPartId      String
  certificationType     LLPCertificationType
  documentName          String               // Original document name
  documentUrl           String               // Storage URL/path
  documentHash          String?              // Document integrity hash
  issuedBy              String?              // Issuing organization
  issuedDate            DateTime?            // When certificate was issued
  expirationDate        DateTime?            // When certificate expires
  certificationNumber   String?              // Certificate number
  batchNumber           String?              // Heat lot/batch number
  testResults           Json?                // Test data (JSON)
  complianceStandards   String[]             // Applicable standards (FAA, EASA, etc.)
  verifiedBy            String?              // Who verified the document
  verifiedAt            DateTime?            // When verified
  isActive              Boolean              @default(true)
  notes                 String?              // Additional notes
  metadata              Json?                // Additional certification data
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt

  serializedPart        SerializedPart       @relation(fields: [serializedPartId], references: [id], onDelete: Cascade)

  @@index([serializedPartId])
  @@index([certificationType])
  @@index([issuedDate])
  @@index([expirationDate])
  @@index([isActive])
  @@map("llp_certifications")
}

// KITTING & MATERIAL STAGING SYSTEM

model Kit {
  id                 String           @id @default(cuid())
  kitNumber          String           @unique
  kitName            String?
  workOrderId        String
  operationId        String?
  assemblyStage      String?          // Fan, Compressor, Combustor, Turbine, Integration
  workCellId         String?
  status             KitStatus        @default(PLANNED)
  priority           KitPriority      @default(NORMAL)

  // Staging information
  stagingLocationId  String?
  stagedAt           DateTime?
  stagedById         String?

  // Issue tracking
  issuedAt           DateTime?
  issuedById         String?
  issuedToId         String?

  // Consumption tracking
  isPartiallyConsumed Boolean         @default(false)
  completionPercent   Float?          @default(0)

  // Return processing
  returnedAt         DateTime?
  returnedById       String?
  returnReason       String?

  // Vendor kitting
  isVendorKit        Boolean          @default(false)
  vendorId           String?
  vendorKitNumber    String?
  vendorReceivedAt   DateTime?

  // Planning and generation
  autoGenerated      Boolean          @default(false)
  generatedFromBOM   Boolean          @default(false)
  scrapFactor        Float?           @default(0.05)  // 5% default scrap allowance

  // Scheduling
  requiredByDate     DateTime?
  plannedStageDate   DateTime?
  plannedIssueDate   DateTime?

  // Audit and compliance
  notes              String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  createdById        String

  // Relationships
  workOrder          WorkOrder        @relation(fields: [workOrderId], references: [id])
  operation          Operation?       @relation(fields: [operationId], references: [id])
  stagingLocation    StagingLocation? @relation(fields: [stagingLocationId], references: [id])
  createdBy          User             @relation("KitCreatedBy", fields: [createdById], references: [id])
  stagedBy           User?            @relation("KitStagedBy", fields: [stagedById], references: [id])
  issuedBy           User?            @relation("KitIssuedBy", fields: [issuedById], references: [id])
  issuedTo           User?            @relation("KitIssuedTo", fields: [issuedToId], references: [id])
  returnedBy         User?            @relation("KitReturnedBy", fields: [returnedById], references: [id])

  // Child relationships
  kitItems           KitItem[]
  statusHistory      KitStatusHistory[]
  shortageAlerts     KitShortageAlert[]
  vendorKits         VendorKit[]

  @@index([workOrderId])
  @@index([status])
  @@index([stagingLocationId])
  @@index([requiredByDate])
  @@index([operationId])
  @@map("kits")
}

model KitItem {
  id                 String            @id @default(cuid())
  kitId              String
  partId             String?           // For parts
  materialLotId      String?           // For specific material lots
  inventoryId        String?           // For general inventory
  toolId             String?           // For tools and equipment

  // Quantity information
  requiredQuantity   Float
  stagedQuantity     Float             @default(0)
  issuedQuantity     Float             @default(0)
  consumedQuantity   Float             @default(0)
  returnedQuantity   Float             @default(0)
  shortageQuantity   Float             @default(0)

  unitOfMeasure      String
  unitOfMeasureId    String?           // FK to UnitOfMeasure

  // BOM reference
  bomItemId          String?           // Reference to source BOM item
  sequence           Int?              // Picking sequence
  findNumber         String?           // Engineering find number
  referenceDesignator String?          // Component reference

  // Status tracking
  status             KitItemStatus     @default(PLANNED)
  isPicked           Boolean           @default(false)
  isStaged           Boolean           @default(false)
  isIssued           Boolean           @default(false)

  // Location tracking
  pickLocationId     String?
  stagedLocationId   String?

  // Special handling
  isCritical         Boolean           @default(false)
  isHazardous        Boolean           @default(false)
  specialInstructions String?

  // Vendor information
  preferredSupplierId String?
  supplierPartNumber  String?

  // Audit
  notes              String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt

  // Relationships
  kit                Kit               @relation(fields: [kitId], references: [id], onDelete: Cascade)
  part               Part?             @relation(fields: [partId], references: [id])
  materialLot        MaterialLot?      @relation(fields: [materialLotId], references: [id])
  inventory          Inventory?        @relation(fields: [inventoryId], references: [id])
  bomItem            BOMItem?          @relation(fields: [bomItemId], references: [id])
  unitOfMeasureRef   UnitOfMeasure?    @relation("KitItemUOM", fields: [unitOfMeasureId], references: [id])

  @@index([kitId])
  @@index([partId])
  @@index([status])
  @@index([isPicked])
  @@index([isStaged])
  @@map("kit_items")
}

model StagingLocation {
  id                 String              @id @default(cuid())
  locationCode       String              @unique
  locationName       String
  description        String?

  // Physical characteristics
  areaId             String?
  zoneCode           String?
  coordinates        String?             // Physical coordinates (x,y,z or GPS)
  maxCapacity        Int?                // Max number of kits
  currentOccupancy   Int                 @default(0)

  // Location type and capabilities
  locationType       StagingLocationType @default(GENERAL)
  securityLevel      SecurityLevel       @default(STANDARD)
  hasClimateControl  Boolean             @default(false)
  hasSecurityCamera  Boolean             @default(false)
  hasAccessControl   Boolean             @default(false)

  // Work cell proximity
  nearWorkCells      String[]            // Array of work cell IDs for optimization
  proximityScore     Float?              // Distance-based scoring for assignment

  // Environmental conditions
  temperatureMin     Float?
  temperatureMax     Float?
  humidityMax        Float?
  isCleanRoom        Boolean             @default(false)
  esdProtected       Boolean             @default(false)

  // Operational status
  isActive           Boolean             @default(true)
  isAvailable        Boolean             @default(true)
  maintenanceMode    Boolean             @default(false)

  // Barcode/RFID integration
  barcodeId          String?
  rfidTagId          String?

  // Audit
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  // Relationships
  area               Area?               @relation(fields: [areaId], references: [id])
  kits               Kit[]

  @@index([areaId])
  @@index([locationType])
  @@index([isActive])
  @@index([isAvailable])
  @@map("staging_locations")
}

model KitStatusHistory {
  id              String      @id @default(cuid())
  kitId           String
  fromStatus      KitStatus?
  toStatus        KitStatus
  changedAt       DateTime    @default(now())
  changedById     String
  reason          String?
  notes           String?

  kit             Kit         @relation(fields: [kitId], references: [id], onDelete: Cascade)
  changedBy       User        @relation("KitStatusChanged", fields: [changedById], references: [id])

  @@index([kitId])
  @@index([changedAt])
  @@map("kit_status_history")
}

model KitShortageAlert {
  id              String           @id @default(cuid())
  kitId           String
  kitItemId       String?
  partId          String
  shortageQuantity Float
  requiredByDate  DateTime?
  priority        AlertPriority    @default(NORMAL)
  status          AlertStatus      @default(OPEN)

  // Alert details
  alertMessage    String
  actionRequired  String?
  assignedToId    String?

  // Resolution
  resolvedAt      DateTime?
  resolvedById    String?
  resolution      String?

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  kit             Kit              @relation(fields: [kitId], references: [id], onDelete: Cascade)
  part            Part             @relation(fields: [partId], references: [id])
  assignedTo      User?            @relation("ShortageAssigned", fields: [assignedToId], references: [id])
  resolvedBy      User?            @relation("ShortageResolved", fields: [resolvedById], references: [id])

  // New expedite workflow relationships
  expeditRequests ExpeditRequest[]
  resolutionRecord ShortageResolution?

  @@index([kitId])
  @@index([status])
  @@index([priority])
  @@index([requiredByDate])
  @@map("kit_shortage_alerts")
}

// Kitting System Enums
enum KitStatus {
  PLANNED           // Kit created but not yet staged
  STAGING           // Being picked and staged
  STAGED            // Ready for issue at staging location
  ISSUED            // Issued to production
  PARTIAL           // Partially consumed
  CONSUMED          // Fully consumed
  RETURNED          // Returned unused materials
  CANCELLED         // Kit cancelled
  ON_HOLD           // Temporarily on hold
}

enum KitPriority {
  LOW
  NORMAL
  HIGH
  URGENT
  CRITICAL
}

enum KitItemStatus {
  PLANNED           // Item identified but not yet picked
  PICKING           // Being picked from inventory
  PICKED            // Picked and ready for staging
  STAGED            // Staged at kit location
  ISSUED            // Issued with kit
  CONSUMED          // Used in production
  RETURNED          // Returned unused
  SHORT             // Shortage identified
  SUBSTITUTED       // Substituted with alternate part
}

enum StagingLocationType {
  GENERAL           // General purpose staging
  CLEAN_ROOM        // Clean room environment
  HAZMAT            // Hazardous materials
  TOOL_CRIB         // Tool and equipment staging
  VENDOR_KIT        // Vendor-supplied kits
  QUARANTINE        // Quarantine area
  HIGH_VALUE        // High-value items
  BULK_MATERIAL     // Bulk materials
}

enum SecurityLevel {
  OPEN              // Open access
  STANDARD          // Standard security
  RESTRICTED        // Restricted access
  CLASSIFIED        // Classified/secure area
}

enum AlertPriority {
  LOW
  NORMAL
  HIGH
  URGENT
  CRITICAL
}

enum AlertStatus {
  OPEN
  ASSIGNED
  IN_PROGRESS
  RESOLVED
  CLOSED
  CANCELLED
}

// Vendor Kitting Support Models (GitHub Issue #229)

model Vendor {
  id                    String                     @id @default(cuid())
  code                  String                     @unique
  name                  String
  contactEmail          String?
  contactPhone          String?
  address               String?
  qualityRating         Float                      @default(0.0) // 0-100 scale
  onTimeDeliveryRate    Float                      @default(0.0) // 0-100 percentage
  certifications        String[]                   // AS9100, NADCAP, etc.
  approvedParts         String[]                   // Approved part numbers
  isActive              Boolean                    @default(true)
  preferredVendor       Boolean                    @default(false)
  contractStartDate     DateTime?
  contractEndDate       DateTime?
  notes                 String?
  createdAt             DateTime                   @default(now())
  updatedAt             DateTime                   @updatedAt

  // Relationships
  vendorKits            VendorKit[]
  performanceMetrics    VendorPerformanceMetric[]

  // Expedite workflow relationships
  expeditRequests       ExpeditRequest[]
  supplierCommunications SupplierCommunication[]
  preferredSupplierAnalytics PartShortageAnalytics[] @relation("PreferredSupplier")
  bestPerformingAnalytics PartShortageAnalytics[]    @relation("BestPerformingSupplier")

  // OSP (Outside Processing) Relations (Issue #58, #59)
  ospCapabilities       OSPCapability[]
  ospOperations         OSPOperation[]
  outboundShipments     OSPShipment[] @relation("OutboundSupplier")
  inboundShipments      OSPShipment[] @relation("InboundSupplier")
  supplierMetrics       SupplierPerformanceMetric[]

  @@index([code])
  @@index([isActive])
  @@index([preferredVendor])
  @@map("vendors")
}

model VendorKit {
  id                    String                     @id @default(cuid())
  vendorId              String
  vendorKitNumber       String                     // Vendor's internal kit ID
  kitId                 String?                    // Link to internal Kit if applicable
  requestId             String                     @unique // Unique request identifier
  partNumbers           String[]                   // Parts included in this vendor kit
  quantityOrdered       Int
  quantityReceived      Int                        @default(0)
  unitCost              Float?
  totalCost             Float?
  currency              String                     @default("USD")    // Legacy field (to be deprecated)
  currencyId            String?                                       // FK to Currency
  status                VendorKitStatus            @default(REQUESTED)
  priority              VendorKitPriority          @default(NORMAL)
  requiredDate          DateTime
  promisedDate          DateTime?
  actualShipDate        DateTime?
  actualReceiveDate     DateTime?
  trackingNumber        String?
  shippingMethod        String?
  deliveryNotes         String?
  qualityRequirements   String?                    // Special quality or certification requirements
  createdAt             DateTime                   @default(now())
  updatedAt             DateTime                   @updatedAt

  // Relationships
  vendor                Vendor                     @relation(fields: [vendorId], references: [id])
  kit                   Kit?                       @relation(fields: [kitId], references: [id])
  items                 VendorKitItem[]
  inspections           VendorKitInspection[]
  history               VendorKitHistory[]
  currencyRef           Currency?                  @relation("VendorKitCurrency", fields: [currencyId], references: [id])

  @@index([vendorId])
  @@index([kitId])
  @@index([status])
  @@index([requiredDate])
  @@index([requestId])
  @@map("vendor_kits")
}

model VendorKitItem {
  id                    String                     @id @default(cuid())
  vendorKitId           String
  partId                String
  partNumber            String                     // Vendor's part number (may differ from internal)
  description           String?
  quantityOrdered       Float
  quantityReceived      Float                      @default(0)
  unitOfMeasure         String
  unitOfMeasureId       String?
  unitCost              Float?
  totalCost             Float?
  lotNumber             String?
  serialNumbers         String[]                   // For serialized parts
  certificationRequired Boolean                    @default(false)
  inspectionRequired    Boolean                    @default(false)
  status                VendorKitItemStatus        @default(ORDERED)
  notes                 String?
  createdAt             DateTime                   @default(now())
  updatedAt             DateTime                   @updatedAt

  // Relationships
  vendorKit             VendorKit                  @relation(fields: [vendorKitId], references: [id])
  part                  Part                       @relation(fields: [partId], references: [id])
  unitOfMeasureRef      UnitOfMeasure?             @relation("VendorKitItemUOM", fields: [unitOfMeasureId], references: [id])

  @@index([vendorKitId])
  @@index([partId])
  @@index([status])
  @@index([unitOfMeasureId])
  @@map("vendor_kit_items")
}

model VendorKitInspection {
  id                    String                     @id @default(cuid())
  vendorKitId           String
  inspectorId           String?
  inspectionType        VendorInspectionType
  inspectionDate        DateTime                   @default(now())
  result                VendorInspectionResult
  conformingQuantity    Int                        @default(0)
  nonConformingQuantity Int                        @default(0)
  notes                 String?
  correctionRequired    Boolean                    @default(false)
  correctionNotes       String?
  certificatesReceived  Boolean                    @default(false)
  attachments           String[]                   // File paths or URLs
  createdAt             DateTime                   @default(now())
  updatedAt             DateTime                   @updatedAt

  // Relationships
  vendorKit             VendorKit                  @relation(fields: [vendorKitId], references: [id])
  inspector             User?                      @relation(fields: [inspectorId], references: [id])

  @@index([vendorKitId])
  @@index([inspectorId])
  @@index([inspectionDate])
  @@index([result])
  @@map("vendor_kit_inspections")
}

model VendorKitHistory {
  id                    String                     @id @default(cuid())
  vendorKitId           String
  userId                String?
  action                VendorKitAction
  fromStatus            VendorKitStatus?
  toStatus              VendorKitStatus?
  notes                 String?
  timestamp             DateTime                   @default(now())
  metadata              Json?                      // Additional context data

  // Relationships
  vendorKit             VendorKit                  @relation(fields: [vendorKitId], references: [id])
  user                  User?                      @relation(fields: [userId], references: [id])

  @@index([vendorKitId])
  @@index([userId])
  @@index([timestamp])
  @@index([action])
  @@map("vendor_kit_history")
}

model VendorPerformanceMetric {
  id                    String                     @id @default(cuid())
  vendorId              String
  metricType            VendorMetricType
  metricPeriod          DateTime                   // Start of measurement period
  periodType            VendorMetricPeriod         @default(MONTHLY)
  value                 Float
  target                Float?
  unit                  String?                    // %, days, count, etc.
  notes                 String?
  calculatedAt          DateTime                   @default(now())

  // Relationships
  vendor                Vendor                     @relation(fields: [vendorId], references: [id])

  @@index([vendorId])
  @@index([metricType])
  @@index([metricPeriod])
  @@index([periodType])
  @@map("vendor_performance_metrics")
}

// Vendor Kitting Enums

enum VendorKitStatus {
  REQUESTED
  ACKNOWLEDGED
  IN_PRODUCTION
  SHIPPED
  RECEIVED
  INSPECTING
  ACCEPTED
  REJECTED
  CANCELLED
}

enum VendorKitPriority {
  LOW
  NORMAL
  HIGH
  URGENT
  EXPEDITE
}

enum VendorKitItemStatus {
  ORDERED
  CONFIRMED
  IN_PRODUCTION
  SHIPPED
  RECEIVED
  INSPECTED
  ACCEPTED
  REJECTED
}

enum VendorInspectionType {
  RECEIVING
  FIRST_ARTICLE
  SAMPLING
  FULL_INSPECTION
  CERTIFICATION_REVIEW
  DIMENSIONAL
  MATERIAL_VERIFICATION
}

enum VendorInspectionResult {
  PASS
  PASS_WITH_DEVIATION
  FAIL
  PENDING
  WAIVED
}

enum VendorKitAction {
  CREATED
  REQUESTED
  ACKNOWLEDGED
  PRODUCTION_STARTED
  SHIPPED
  RECEIVED
  INSPECTION_STARTED
  INSPECTION_COMPLETED
  ACCEPTED
  REJECTED
  CANCELLED
  STATUS_UPDATED
  NOTES_ADDED
}

enum VendorMetricType {
  ON_TIME_DELIVERY
  QUALITY_RATING
  COST_PERFORMANCE
  LEAD_TIME
  DEFECT_RATE
  DELIVERY_PERFORMANCE
  RESPONSIVENESS
  CERTIFICATION_COMPLIANCE
}

enum VendorMetricPeriod {
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

// ====================================================================
// KIT SHORTAGE & EXPEDITE WORKFLOW MODELS
// Supporting automatic shortage detection, notification, and expedite workflow
// ====================================================================

model ExpeditRequest {
  id                    String               @id @default(cuid())
  shortageAlertId       String?              // Link to original shortage alert
  partId                String
  requiredQuantity      Float
  urgencyLevel          ExpeditUrgency       @default(NORMAL)
  requestedByDate       DateTime

  // Request details
  justification         String
  impactAssessment      String?              // Business impact description
  costImpact            Float?               // Estimated cost of delay
  alternativesSuggested String[]             // List of alternative parts considered

  // Request lifecycle
  status                ExpeditStatus        @default(REQUESTED)
  requestedById         String
  approvedById          String?
  approvedAt            DateTime?
  rejectedAt            DateTime?
  rejectionReason       String?

  // Supplier coordination
  vendorId              String?
  vendorResponse        String?
  vendorCommitmentDate  DateTime?
  estimatedDeliveryDate DateTime?
  actualDeliveryDate    DateTime?

  // Cost tracking
  expediteFee           Float?
  totalCost             Float?
  approvedCost          Float?

  // Resolution
  resolvedAt            DateTime?
  resolution            ExpeditResolution?
  resolutionNotes       String?

  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt

  // Relationships
  shortageAlert         KitShortageAlert?    @relation(fields: [shortageAlertId], references: [id])
  part                  Part                 @relation(fields: [partId], references: [id])
  requestedBy           User                 @relation("ExpeditRequestedBy", fields: [requestedById], references: [id])
  approvedBy            User?                @relation("ExpeditApprovedBy", fields: [approvedById], references: [id])
  vendor                Vendor?              @relation(fields: [vendorId], references: [id])

  // Child relationships
  communications        SupplierCommunication[]
  statusHistory         ExpeditStatusHistory[]
  resolutions           ShortageResolution[]

  @@index([shortageAlertId])
  @@index([partId])
  @@index([status])
  @@index([urgencyLevel])
  @@index([requestedByDate])
  @@index([vendorId])
  @@map("expedite_requests")
}

model SupplierCommunication {
  id                    String               @id @default(cuid())
  expeditRequestId      String?              // Optional: for expedite-related communication
  vendorId              String
  partId                String?              // Part this communication relates to

  // Communication details
  communicationType     CommunicationType
  direction             CommunicationDirection
  subject               String
  message               String
  priority              CommunicationPriority @default(NORMAL)

  // Contact information
  contactName           String?
  contactEmail          String?
  contactPhone          String?

  // Response tracking
  responseRequired      Boolean              @default(false)
  responseDeadline      DateTime?
  responseReceived      Boolean              @default(false)
  responseDate          DateTime?
  responseMessage       String?

  // Delivery tracking
  deliveryCommitment    DateTime?            // Supplier's delivery commitment
  confirmationReceived  Boolean              @default(false)

  // Status
  status                CommunicationStatus  @default(SENT)

  // Audit
  sentById              String?
  sentAt                DateTime?
  readAt                DateTime?

  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt

  // Relationships
  expeditRequest        ExpeditRequest?      @relation(fields: [expeditRequestId], references: [id])
  vendor                Vendor               @relation(fields: [vendorId], references: [id])
  part                  Part?                @relation(fields: [partId], references: [id])
  sentBy                User?                @relation(fields: [sentById], references: [id])

  @@index([expeditRequestId])
  @@index([vendorId])
  @@index([partId])
  @@index([status])
  @@index([sentAt])
  @@index([responseDeadline])
  @@map("supplier_communications")
}

model ShortageResolution {
  id                    String               @id @default(cuid())
  shortageAlertId       String               @unique // Each shortage can only have one resolution
  expeditRequestId      String?              // If resolved via expedite

  // Resolution details
  resolutionType        ResolutionType_      // How the shortage was resolved
  resolutionDate        DateTime             @default(now())
  resolvedById          String

  // Alternative part usage
  alternativePartId     String?              // If resolved using alternative part
  substitutionApproved  Boolean              @default(false)
  substitutionReason    SubstitutionReason?
  engineeringApproval   String?              // Engineering approval reference

  // Partial kit handling
  partialKitReleased    Boolean              @default(false)
  partialQuantity       Float?               // Quantity released in partial kit
  blockedOperations     String[]             // Operations blocked by shortage

  // Supply resolution
  supplierUsed          String?              // Supplier that resolved shortage
  actualDeliveryDate    DateTime?
  quantityReceived      Float?
  receivedCondition     String?              // GOOD, DAMAGED, PARTIAL, etc.

  // Cost impact
  expediteCost          Float?
  totalAdditionalCost   Float?
  laborImpactHours      Float?               // Labor hours lost due to shortage

  // Quality tracking
  qualityImpact         Boolean              @default(false)
  qualityNotes          String?

  // Lessons learned
  rootCause             String?
  preventiveActions     String?
  supplierFeedback      String?

  notes                 String?
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt

  // Relationships
  shortageAlert         KitShortageAlert     @relation(fields: [shortageAlertId], references: [id])
  expeditRequest        ExpeditRequest?      @relation(fields: [expeditRequestId], references: [id])
  alternativePart       Part?                @relation("AlternativePartUsed", fields: [alternativePartId], references: [id])
  resolvedBy            User                 @relation(fields: [resolvedById], references: [id])

  @@index([shortageAlertId])
  @@index([expeditRequestId])
  @@index([resolutionType])
  @@index([resolutionDate])
  @@index([alternativePartId])
  @@map("shortage_resolutions")
}

model ExpeditStatusHistory {
  id                    String               @id @default(cuid())
  expeditRequestId      String
  fromStatus            ExpeditStatus?
  toStatus              ExpeditStatus
  changedById           String?
  reason                String?
  notes                 String?
  metadata              Json?                // Additional context data
  changedAt             DateTime             @default(now())

  // Relationships
  expeditRequest        ExpeditRequest       @relation(fields: [expeditRequestId], references: [id])
  changedBy             User?                @relation(fields: [changedById], references: [id])

  @@index([expeditRequestId])
  @@index([changedAt])
  @@map("expedite_status_history")
}

model PartShortageAnalytics {
  id                    String               @id @default(cuid())
  partId                String
  analysisDate          DateTime             @default(now())

  // Shortage frequency
  totalShortages        Int                  @default(0)
  shortagesLast30Days   Int                  @default(0)
  shortagesLast90Days   Int                  @default(0)
  averageShortageQuantity Float?

  // Lead time analysis
  averageLeadTimeDays   Float?
  supplierCount         Int                  @default(0)
  preferredSupplierId   String?

  // Cost impact
  totalExpediteCosts    Float?
  averageExpediteCost   Float?
  totalLaborImpactHours Float?

  // Resolution patterns
  mostCommonResolution  ResolutionType_?
  averageResolutionDays Float?
  alternativePartsUsed  String[]             // List of alternative part IDs used

  // Supplier performance
  bestPerformingSupplierId String?
  supplierOnTimeRate    Float?               // Best supplier's on-time delivery %

  // Recommendations
  recommendedAction     String?              // AUTO_REORDER, INCREASE_SAFETY_STOCK, etc.
  recommendedSafetyStock Float?
  recommendedLeadTime   Int?                 // Days

  // Next analysis
  nextAnalysisDate      DateTime?

  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt

  // Relationships
  part                  Part                 @relation(fields: [partId], references: [id])
  preferredSupplier     Vendor?              @relation("PreferredSupplier", fields: [preferredSupplierId], references: [id])
  bestPerformingSupplier Vendor?             @relation("BestPerformingSupplier", fields: [bestPerformingSupplierId], references: [id])

  @@index([partId])
  @@index([analysisDate])
  @@index([totalShortages])
  @@index([shortagesLast30Days])
  @@map("part_shortage_analytics")
}

// ====================================================================
// KIT SHORTAGE & EXPEDITE WORKFLOW ENUMS
// ====================================================================

enum ExpeditUrgency {
  LOW               // Standard expedite request
  NORMAL            // Normal urgency
  HIGH              // High priority
  CRITICAL          // Critical path impact
  EMERGENCY         // Emergency/safety impact
}

enum ExpeditStatus {
  REQUESTED         // Initial request created
  PENDING_APPROVAL  // Awaiting management approval
  APPROVED          // Approved for expedite
  REJECTED          // Request rejected
  VENDOR_CONTACTED  // Supplier has been contacted
  VENDOR_RESPONDED  // Supplier responded with commitment
  IN_TRANSIT        // Material in transit
  DELIVERED         // Material delivered
  RESOLVED          // Shortage resolved
  CANCELLED         // Request cancelled
}

enum ExpeditResolution {
  DELIVERED_ON_TIME     // Expedite successful, delivered on time
  DELIVERED_LATE        // Delivered but late
  ALTERNATIVE_USED      // Resolved using alternative part
  PARTIAL_DELIVERY      // Partial delivery resolved shortage
  CANCELLED_NOT_NEEDED  // Cancelled as no longer needed
  CANCELLED_TOO_LATE    // Cancelled as delivery too late
  VENDOR_UNABLE        // Vendor unable to expedite
}

enum CommunicationType {
  EMAIL
  PHONE_CALL
  SMS
  PORTAL_MESSAGE
  FAX
  LETTER
  VIDEO_CALL
  IN_PERSON
}

enum CommunicationDirection {
  OUTBOUND    // We sent to supplier
  INBOUND     // Supplier sent to us
}

enum CommunicationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum CommunicationStatus {
  DRAFT       // Being composed
  SENT        // Sent to supplier
  DELIVERED   // Confirmed delivered
  READ        // Confirmed read by supplier
  RESPONDED   // Supplier responded
  FAILED      // Failed to deliver
  EXPIRED     // Response deadline expired
}

enum ResolutionType_ {
  EXPEDITE_DELIVERED    // Resolved via expedited delivery
  ALTERNATIVE_PART      // Resolved using alternative part
  PARTIAL_KIT_RELEASE   // Resolved via partial kit release
  RESCHEDULED           // Work order rescheduled
  CANCELLED             // Work order cancelled
  SUPPLIER_CHANGED      // Different supplier used
  INVENTORY_FOUND       // Material found in other location
  ENGINEERING_WAIVER    // Engineering waiver granted
}

// BUILD RECORD & ELECTRONIC BUILD BOOK ENUMS

enum BuildRecordStatus {
  DRAFT               // Build record created but not started
  ACTIVE              // Build in progress
  ON_HOLD             // Build temporarily stopped
  COMPLETE            // Build completed, pending final approval
  APPROVED            // Build approved and finalized
  CANCELLED           // Build cancelled
  REWORK_REQUIRED     // Build requires rework
}

enum FinalDisposition {
  ACCEPTED            // Engine accepted for delivery
  REJECTED            // Engine rejected, cannot be delivered
  REWORK_REQUIRED     // Engine requires rework before acceptance
  CONDITIONAL_ACCEPT  // Accepted with conditions/limitations
  CUSTOMER_HOLD       // Customer-requested hold
}

enum OperationStatus {
  NOT_STARTED         // Operation not yet started
  IN_PROGRESS         // Operation currently being performed
  COMPLETE            // Operation completed successfully
  ON_HOLD             // Operation temporarily stopped
  SKIPPED             // Operation skipped with approval
  FAILED              // Operation failed, requires attention
  REWORK              // Operation requires rework
}

enum DeviationType {
  PART_SUBSTITUTION   // Different part used than specified
  DIMENSION_DEVIATION // Dimensional measurements out of spec
  PROCESS_DEVIATION   // Process performed differently than specified
  MATERIAL_DEVIATION  // Different material used
  TOOL_DEVIATION      // Different tool/fixture used
  SEQUENCE_DEVIATION  // Operations performed in different sequence
  SPECIFICATION_DEVIATION // Spec requirements not met
  DOCUMENTATION_DEVIATION // Missing or incorrect documentation
  QUALITY_DEVIATION   // Quality standards not met
  TIME_DEVIATION      // Significant time variance from plan
  ENVIRONMENTAL_DEVIATION // Environmental conditions outside spec
  SAFETY_DEVIATION    // Safety procedures not followed
  OTHER               // Other type of deviation
}

enum DeviationCategory {
  CRITICAL            // Critical deviation affecting safety/performance
  MAJOR               // Major deviation affecting functionality
  MINOR               // Minor deviation with minimal impact
  COSMETIC            // Cosmetic deviation with no functional impact
}

enum DeviationSeverity {
  LOW                 // Low impact, minimal concern
  MEDIUM              // Medium impact, requires attention
  HIGH                // High impact, requires immediate action
  CRITICAL            // Critical impact, stop work until resolved
}

enum DeviationStatus {
  OPEN                // Deviation identified, awaiting review
  UNDER_REVIEW        // Deviation being reviewed by engineering
  APPROVED            // Deviation approved for use-as-is
  REJECTED            // Deviation rejected, corrective action required
  CLOSED              // Deviation resolved and closed
  ESCALATED           // Deviation escalated to higher authority
}

enum DeviationDisposition {
  USE_AS_IS           // Use the deviated item as-is
  REPAIR              // Repair the deviated item
  REWORK              // Rework the deviated item
  SCRAP               // Scrap the deviated item
  RETURN_TO_VENDOR    // Return item to vendor
  CONDITIONAL_ACCEPT  // Accept with conditions
  WAIVER              // Grant waiver for deviation
  ENGINEERING_REVIEW  // Requires engineering evaluation
}

enum PhotoType {
  BEFORE              // Before operation photo
  AFTER               // After operation photo
  INSPECTION          // Quality inspection photo
  DEVIATION           // Deviation documentation photo
  ASSEMBLY            // Assembly progress photo
  DAMAGE              // Damage documentation photo
  REPAIR              // Repair documentation photo
  CALIBRATION         // Calibration verification photo
  SETUP               // Setup/configuration photo
  TOOLING             // Tooling/fixture photo
  MATERIAL_CERT       // Material certification photo
  SERIAL_NUMBER       // Serial number documentation photo
  TORQUE_VERIFICATION // Torque verification photo
  DIMENSIONAL         // Dimensional inspection photo
  FUNCTIONAL_TEST     // Functional test photo
  FINAL_ASSEMBLY      // Final assembly photo
  PACKAGING           // Packaging photo
  GENERAL             // General documentation photo
}

enum BuildRecordDocumentType {
  MATERIAL_CERT       // Material certification
  TEST_REPORT         // Test report
  CALIBRATION_CERT    // Calibration certificate
  INSPECTION_REPORT   // Inspection report
  NCR_DOCUMENT        // Non-conformance report
  ENGINEERING_DRAWING // Engineering drawing
  WORK_INSTRUCTION    // Work instruction
  PROCESS_SPEC        // Process specification
  QUALITY_PLAN        // Quality plan
  VENDOR_CERT         // Vendor certification
  HEAT_TREAT_CERT     // Heat treatment certificate
  CHEMICAL_ANALYSIS   // Chemical analysis report
  DIMENSIONAL_REPORT  // Dimensional inspection report
  FUNCTIONAL_TEST     // Functional test report
  TORQUE_CHART        // Torque verification chart
  PHOTO_PACKAGE       // Photo documentation package
  BUILD_RECORD        // Build record document
  SHIPPING_DOCUMENT   // Shipping documentation
  CUSTOMER_SPEC       // Customer specification
  REGULATORY_CERT     // Regulatory certification
  OTHER               // Other document type
}

enum BuildSignatureType {
  OPERATOR            // Operator signature
  INSPECTOR           // Quality inspector signature
  ENGINEER            // Engineering signature
  QUALITY             // Quality manager signature
  SUPERVISOR          // Supervisor signature
  CUSTOMER            // Customer signature
  REGULATORY          // Regulatory authority signature
  FINAL_APPROVAL      // Final build approval signature
}

enum SignatureLevel {
  OPERATION           // Operation-level signature
  BUILD_RECORD        // Build record level signature
  FINAL_APPROVAL      // Final approval signature
  DEVIATION_APPROVAL  // Deviation approval signature
  QUALITY_RELEASE     // Quality release signature
  CUSTOMER_ACCEPTANCE // Customer acceptance signature
}

// Saviynt Identity Governance Integration Models (Issue #204)

model SaviyntUserMapping {
  id              String    @id @default(cuid())
  userId          String    @unique // FK to User
  saviyntUserId   String    @unique
  saviyntUsername String    @unique
  provisionedAt   DateTime  @default(now())
  lastSyncAt      DateTime?
  syncStatus      SaviyntSyncStatus @default(PENDING)
  attributes      Json?     // Additional user attributes from Saviynt
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([saviyntUserId])
  @@index([syncStatus])
  @@index([lastSyncAt])
  @@map("saviynt_user_mappings")
}

model SaviyntRoleMapping {
  id                String    @id @default(cuid())
  roleId            String    // FK to Role
  saviyntRoleId     String
  saviyntRoleName   String
  mappingType       SaviyntMappingType @default(AUTOMATIC)
  conditions        Json?     // Mapping conditions and rules
  isActive          Boolean   @default(true)
  lastSyncAt        DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  role              Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, saviyntRoleId])
  @@index([roleId])
  @@index([saviyntRoleId])
  @@index([mappingType])
  @@map("saviynt_role_mappings")
}

model SaviyntSyncLog {
  id               String    @id @default(cuid())
  syncType         SaviyntSyncType
  entityType       SaviyntEntityType
  entityId         String?   // User ID, Role ID, etc.
  saviyntEntityId  String?   // Corresponding Saviynt entity ID
  operation        SaviyntOperation
  status           SaviyntSyncStatus
  requestPayload   Json?
  responsePayload  Json?
  errorMessage     String?
  errorCode        String?
  retryCount       Int       @default(0)
  startedAt        DateTime  @default(now())
  completedAt      DateTime?
  duration         Int?      // Duration in milliseconds
  triggeredBy      String    // User ID or system process
  syncBatchId      String?   // Group related sync operations

  @@index([syncType])
  @@index([entityType])
  @@index([status])
  @@index([startedAt])
  @@index([syncBatchId])
  @@map("saviynt_sync_logs")
}

model SaviyntWebhookEvent {
  id              String    @id @default(cuid())
  eventType       String    // Saviynt event type
  eventSubtype    String?   // Additional event classification
  entityType      SaviyntEntityType
  entityId        String    // Saviynt entity ID
  eventPayload    Json      // Full webhook payload
  processedAt     DateTime?
  processingStatus SaviyntSyncStatus @default(PENDING)
  errorMessage    String?
  mesEntityId     String?   // Corresponding MES entity ID after processing
  retryCount      Int       @default(0)
  receivedAt      DateTime  @default(now())

  @@index([eventType])
  @@index([entityType])
  @@index([processingStatus])
  @@index([receivedAt])
  @@map("saviynt_webhook_events")
}

model SaviyntAccessCertification {
  id                    String    @id @default(cuid())
  certificationId       String    @unique // Saviynt certification ID
  campaignName          String
  certificationName     String
  entityType            SaviyntEntityType
  entityId              String    // User ID, Role ID, etc.
  saviyntEntityId       String    // Corresponding Saviynt entity
  accessType            String    // Type of access being certified
  accessDetails         Json      // Detailed access information
  certifier             String    // Who needs to certify
  certifierType         String    // Manager, Security, etc.
  status                SaviyntCertificationStatus @default(PENDING)
  dueDate               DateTime
  certifiedAt           DateTime?
  certifiedBy           String?   // Actual certifier
  certificationDecision String?   // APPROVE, REVOKE, etc.
  comments              String?
  riskScore             Float?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@index([certificationId])
  @@index([entityType])
  @@index([status])
  @@index([dueDate])
  @@index([certifier])
  @@map("saviynt_access_certifications")
}

model SaviyntConfiguration {
  id                String    @id @default(cuid())
  configKey         String    @unique
  configValue       Json
  description       String?
  isEncrypted       Boolean   @default(false)
  lastModifiedBy    String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([configKey])
  @@map("saviynt_configurations")
}

// Saviynt Integration Enums

enum SaviyntSyncStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  PARTIAL
  SKIPPED
}

enum SaviyntSyncType {
  SCHEDULED
  REAL_TIME
  MANUAL
  WEBHOOK
  BULK_IMPORT
}

enum SaviyntEntityType {
  USER
  ROLE
  ACCOUNT
  ENTITLEMENT
  APPLICATION
  ORGANIZATION
}

enum SaviyntOperation {
  CREATE
  UPDATE
  DELETE
  PROVISION
  DEPROVISION
  SYNC
  VALIDATE
}

enum SaviyntMappingType {
  AUTOMATIC
  MANUAL
  CONDITIONAL
  HYBRID
}

enum SaviyntCertificationStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
  CANCELLED
}

// OAuth 2.0/OpenID Connect (OIDC) Integration (Issue #132)

/// OAuth 2.0/OpenID Connect Configuration
/// Dedicated OIDC provider configuration separate from generic SSO
model OidcConfig {
  id                    String      @id @default(cuid())
  name                  String      @unique
  clientId              String
  clientSecret          String
  issuer                String
  discoveryUrl          String?
  authorizationEndpoint String?
  tokenEndpoint         String?
  userinfoEndpoint      String?
  jwksUri               String?
  scopes                String[]    @default(["openid", "profile", "email"])
  responseType          String      @default("code")
  responseMode          String      @default("query")
  usePkce               Boolean     @default(true)
  claimsMapping         Json?
  groupClaimsPath       String?
  isActive              Boolean     @default(true)
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt

  // Relations
  sessions              OidcSession[]
  authStates            OidcAuthState[]

  @@index([isActive])
  @@map("oidc_configs")
}

/// OAuth User Sessions
/// Track OIDC authentication sessions and tokens
model OidcSession {
  id                String     @id @default(cuid())
  userId            String
  sub               String
  accessToken       String?
  refreshToken      String?
  idToken           String?
  tokenType         String     @default("Bearer")
  expiresAt         DateTime?
  refreshExpiresAt  DateTime?
  configId          String
  scopes            String[]
  createdAt         DateTime   @default(now())

  // Relations
  user              User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  config            OidcConfig @relation(fields: [configId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([configId])
  @@index([expiresAt])
  @@map("oidc_sessions")
}

/// Authorization State Tracking
/// PKCE and CSRF protection for OAuth flows
model OidcAuthState {
  id            String     @id @default(cuid())
  state         String     @unique
  codeVerifier  String?
  nonce         String?
  redirectUri   String?
  configId      String
  expiresAt     DateTime   @default(now())
  createdAt     DateTime   @default(now())

  // Relations
  config        OidcConfig @relation(fields: [configId], references: [id], onDelete: Cascade)

  @@index([state])
  @@index([configId])
  @@index([expiresAt])
  @@map("oidc_auth_states")
}

// SAML 2.0 Integration (Issue #131)

/// SAML 2.0 Configuration
/// Dedicated SAML provider configuration for enterprise SSO
model SamlConfig {
  id                    String        @id @default(cuid())
  name                  String        @unique
  entityId              String        @unique
  ssoUrl                String
  sloUrl                String?
  idpMetadataUrl        String?
  idpMetadata           String?
  certificate           String
  privateKey            String
  signRequests          Boolean       @default(true)
  signAssertions        Boolean       @default(false)
  encryptAssertions     Boolean       @default(false)
  nameIdFormat          String        @default("urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress")
  attributeMapping      Json?
  clockTolerance        Int           @default(60)
  isActive              Boolean       @default(true)
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  // Relations
  sessions              SamlSession[]
  authRequests          SamlAuthRequest[]

  @@index([isActive])
  @@index([entityId])
  @@map("saml_configs")
}

/// SAML User Sessions
/// Track SAML authentication sessions and assertions
model SamlSession {
  id                String      @id @default(cuid())
  userId            String
  sessionIndex      String?
  nameId            String
  nameIdFormat      String
  assertionId       String      @unique
  configId          String
  attributes        Json?
  expiresAt         DateTime?
  createdAt         DateTime    @default(now())

  // Relations
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  config            SamlConfig  @relation(fields: [configId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([configId])
  @@index([sessionIndex])
  @@index([expiresAt])
  @@map("saml_sessions")
}

/// SAML Authentication Request Tracking
/// Track outgoing SAML AuthnRequests for security and correlation
model SamlAuthRequest {
  id              String      @id @default(cuid())
  requestId       String      @unique
  relayState      String?
  destination     String
  issueInstant    DateTime
  configId        String
  expiresAt       DateTime
  createdAt       DateTime    @default(now())

  // Relations
  config          SamlConfig  @relation(fields: [configId], references: [id], onDelete: Cascade)

  @@index([requestId])
  @@index([configId])
  @@index([expiresAt])
  @@map("saml_auth_requests")
}

// Part Interchangeability & Substitution Group Framework (Issue #223)

/// Part Interchangeability Groups
/// Groups of parts that can be substituted for each other under specific conditions
model PartInterchangeabilityGroup {
  id                    String                         @id @default(cuid())
  name                  String                         @unique
  description           String?
  groupType             InterchangeabilityType         @default(TWO_WAY)
  category              String?                        // Optional categorization (e.g., "Fasteners", "Connectors")
  engineeringBasis      String?                        // Form/Fit/Function documentation
  complianceStandard    String?                        // e.g., "AS9100", "ISO 9001"
  effectiveDate         DateTime                       @default(now())
  obsoleteDate          DateTime?
  isActive              Boolean                        @default(true)
  createdAt             DateTime                       @default(now())
  updatedAt             DateTime                       @updatedAt
  createdBy             String

  // Relations
  creator               User                           @relation("InterchangeabilityGroupCreator", fields: [createdBy], references: [id])
  partSubstitutions     PartSubstitution[]
  approvals             InterchangeabilityApproval[]
  auditLogs             InterchangeabilityAuditLog[]

  @@index([groupType])
  @@index([isActive])
  @@index([effectiveDate])
  @@index([createdBy])
  @@map("part_interchangeability_groups")
}

/// Part Substitution Rules
/// Specific substitution relationships between parts within interchangeability groups
model PartSubstitution {
  id                         String                        @id @default(cuid())
  groupId                    String
  primaryPartId              String
  substitutePartId           String
  substitutionType           SubstitutionType              @default(ALTERNATE)
  direction                  SubstitutionDirection         @default(TWO_WAY)
  priority                   Int                           @default(1) // Lower numbers = higher priority
  effectiveDate              DateTime                      @default(now())
  obsoleteDate               DateTime?
  quantityRatio              Float                         @default(1.0) // Substitute quantity per primary quantity
  notes                      String?
  engineeringJustification   String?                       // Technical basis for substitution
  testingReference           String?                       // Reference to validation testing
  restrictionConditions      String?                       // Any usage restrictions
  isActive                   Boolean                       @default(true)
  createdAt                  DateTime                      @default(now())
  updatedAt                  DateTime                      @updatedAt
  createdBy                  String

  // Relations
  group                      PartInterchangeabilityGroup   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  primaryPart                Part                          @relation("PrimaryPartSubstitutions", fields: [primaryPartId], references: [id])
  substitutePart             Part                          @relation("SubstitutePartSubstitutions", fields: [substitutePartId], references: [id])
  creator                    User                          @relation("PartSubstitutionCreator", fields: [createdBy], references: [id])
  workOrderSubstitutions     WorkOrderPartSubstitution[]

  @@unique([groupId, primaryPartId, substitutePartId])
  @@index([groupId])
  @@index([primaryPartId])
  @@index([substitutePartId])
  @@index([priority])
  @@index([isActive])
  @@index([effectiveDate])
  @@map("part_substitutions")
}

/// Interchangeability Approval Workflow
/// Engineering approval process for declaring part interchangeability
model InterchangeabilityApproval {
  id                    String                        @id @default(cuid())
  groupId               String
  partId                String?                       // Specific part if approval is part-specific
  approvalType          InterchangeabilityApprovalType @default(GROUP_APPROVAL)
  status                InterchangeabilityApprovalStatus @default(PENDING)
  requestedBy           String
  approvedBy            String?
  approvalDate          DateTime?
  rejectionReason       String?
  engineeringEvidence   String?                       // Documentation of testing/analysis
  riskAssessment        String?                       // Risk analysis documentation
  complianceNotes       String?                       // AS9100/regulatory compliance notes
  attachments           Json?                         // File references or metadata
  effectiveDate         DateTime?
  expirationDate        DateTime?
  comments              String?
  isActive              Boolean                       @default(true)
  createdAt             DateTime                      @default(now())
  updatedAt             DateTime                      @updatedAt

  // Relations
  group                 PartInterchangeabilityGroup   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  part                  Part?                         @relation("PartApprovals", fields: [partId], references: [id])
  requester             User                          @relation("ApprovalRequester", fields: [requestedBy], references: [id])
  approver              User?                         @relation("ApprovalApprover", fields: [approvedBy], references: [id])

  @@index([groupId])
  @@index([partId])
  @@index([status])
  @@index([requestedBy])
  @@index([approvedBy])
  @@index([createdAt])
  @@map("interchangeability_approvals")
}

/// Work Order Part Substitution Log
/// Track actual substitutions made during production
model WorkOrderPartSubstitution {
  id                    String                        @id @default(cuid())
  workOrderId           String
  operationId           String?
  originalPartId        String
  substitutedPartId     String
  substitutionRuleId    String?                       // Reference to PartSubstitution rule used
  quantity              Float
  reason                SubstitutionReason            @default(ENGINEERING_APPROVED)
  justification         String?
  approvedBy            String?
  substitutionDate      DateTime                      @default(now())
  notes                 String?
  serialNumbers         String[]                      // Track specific serial numbers if applicable
  auditTrail            Json?                         // Additional audit information
  createdBy             String
  createdAt             DateTime                      @default(now())

  // Relations
  workOrder             WorkOrder                     @relation(fields: [workOrderId], references: [id])
  operation             Operation?                    @relation(fields: [operationId], references: [id])
  originalPart          Part                          @relation("OriginalPartSubstitutions", fields: [originalPartId], references: [id])
  substitutedPart       Part                          @relation("SubstitutedPartSubstitutions", fields: [substitutedPartId], references: [id])
  substitutionRule      PartSubstitution?             @relation(fields: [substitutionRuleId], references: [id])
  approver              User?                         @relation("SubstitutionApprover", fields: [approvedBy], references: [id])
  creator               User                          @relation("SubstitutionCreator", fields: [createdBy], references: [id])

  @@index([workOrderId])
  @@index([operationId])
  @@index([originalPartId])
  @@index([substitutedPartId])
  @@index([substitutionDate])
  @@index([createdBy])
  @@map("work_order_part_substitutions")
}

/// Interchangeability Audit Log
/// Comprehensive audit trail for all interchangeability-related changes
model InterchangeabilityAuditLog {
  id                    String                        @id @default(cuid())
  groupId               String?
  substitutionId        String?
  approvalId            String?
  action                AuditAction
  entityType            String                        // "group", "substitution", "approval", etc.
  entityId              String                        // ID of the affected entity
  previousValues        Json?                         // Snapshot of values before change
  newValues             Json?                         // Snapshot of values after change
  reason                String?
  performedBy           String
  performedAt           DateTime                      @default(now())
  ipAddress             String?
  userAgent             String?
  sessionId             String?

  // Relations
  group                 PartInterchangeabilityGroup?  @relation(fields: [groupId], references: [id])
  performer             User                          @relation("AuditLogPerformer", fields: [performedBy], references: [id])

  @@index([groupId])
  @@index([substitutionId])
  @@index([action])
  @@index([entityType])
  @@index([performedBy])
  @@index([performedAt])
  @@map("interchangeability_audit_logs")
}

// Enums for Part Interchangeability Framework

enum InterchangeabilityType {
  TWO_WAY      // Parts are fully interchangeable (A ↔ B)
  ONE_WAY      // Directional interchangeability (A → B but not B → A)
  CONDITIONAL  // Interchangeable under specific conditions
}

enum SubstitutionType {
  PRIMARY      // Original/preferred part
  ALTERNATE    // Approved alternate part
  SUBSTITUTE   // Temporary substitute
  OBSOLETE     // Obsolete part being replaced
}

enum SubstitutionDirection {
  TWO_WAY      // Bidirectional substitution (A ↔ B)
  ONE_WAY      // Unidirectional substitution (A → B only)
}

enum InterchangeabilityApprovalType {
  GROUP_APPROVAL    // Approval for entire interchangeability group
  PART_APPROVAL     // Approval for specific part within group
  SUBSTITUTION_RULE // Approval for specific substitution rule
}

enum InterchangeabilityApprovalStatus {
  PENDING
  IN_REVIEW
  APPROVED
  REJECTED
  EXPIRED
  WITHDRAWN
}

enum SubstitutionReason {
  ENGINEERING_APPROVED  // Pre-approved engineering substitution
  SHORTAGE             // Material shortage substitution
  OBSOLESCENCE         // Obsolete part replacement
  COST_REDUCTION       // Cost optimization substitution
  QUALITY_IMPROVEMENT  // Quality improvement substitution
  EMERGENCY            // Emergency substitution
  CUSTOMER_REQUESTED   // Customer-specific substitution
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  APPROVE
  REJECT
  ACTIVATE
  DEACTIVATE
  SUBSTITUTE
}

// ============================================================================
// ICD SYSTEM ENUMS (Issue #224)
// ============================================================================

/// Interface Control Document Status
enum ICDStatus {
  DRAFT           // Initial creation, not yet released
  UNDER_REVIEW    // Technical review in progress
  PENDING_APPROVAL // Awaiting approval from stakeholders
  APPROVED        // Approved and active
  RELEASED        // Released for production use
  SUPERSEDED      // Replaced by newer version
  OBSOLETE        // No longer valid
  WITHDRAWN       // Removed due to issues
}

/// Interface Type Categories per ASME Y14.24
enum InterfaceType {
  MECHANICAL      // Physical connections, mounting, dimensions, loads
  ELECTRICAL      // Connectors, signals, power, grounding
  FLUID           // Hydraulic and pneumatic connections
  PNEUMATIC       // Air/gas connections
  THERMAL         // Heat transfer, cooling interfaces
  DATA            // Communication protocols, data formats
  OPTICAL         // Fiber optic, laser interfaces
  STRUCTURAL      // Load bearing, attachment points
  ENVIRONMENTAL   // Sealing, contamination control
  SOFTWARE        // API, protocol interfaces
}

/// Interface Direction/Flow
enum InterfaceDirection {
  BIDIRECTIONAL   // Two-way interface
  INPUT_ONLY      // Receives only
  OUTPUT_ONLY     // Provides only
  CONFIGURABLE    // Direction can be configured
}

/// Interface Criticality Level
enum InterfaceCriticality {
  CRITICAL        // Safety/mission critical
  MAJOR           // Significant impact if failed
  MINOR           // Limited impact
  INFORMATIONAL   // Non-critical monitoring
}

/// Interface Verification Method
enum VerificationMethod {
  ANALYSIS        // Mathematical/analytical verification
  INSPECTION      // Visual/dimensional inspection
  TEST            // Physical testing required
  DEMONSTRATION   // Functional demonstration
  SIMILARITY      // Similar to proven interface
}

/// Interface Compliance Status
enum ComplianceStatus {
  COMPLIANT       // Meets all requirements
  NON_COMPLIANT   // Fails requirements
  CONDITIONALLY_COMPLIANT // Meets with conditions
  UNDER_EVALUATION // Compliance being assessed
  NOT_APPLICABLE  // Requirements don't apply
}

/// Effectivity Type for Interface Changes
enum InterfaceEffectivityType {
  IMMEDIATE       // Effective immediately
  SERIAL_NUMBER   // Effective at specific serial
  DATE            // Effective at specific date
  LOT_NUMBER      // Effective for specific lot
  WORK_ORDER      // Effective for specific work order
  CONFIGURATION   // Effective for configuration
}

// ============================================================================
// ICD SYSTEM MODELS (Issue #224)
// ============================================================================

/// Interface Control Document - Master record defining interface specifications
model InterfaceControlDocument {
  id                    String                      @id @default(cuid())
  persistentUuid        String                      @default(uuid()) // MBE compliance UUID
  icdNumber             String                      @unique // e.g., "ICD-ENG-001"
  icdName               String                      // Human-readable name
  title                 String                      // Official title
  description           String?                     // Detailed description

  // Version and Control
  version               String                      // e.g., "1.0", "2.1"
  revisionLevel         String?                     // Revision within version
  status                ICDStatus                   @default(DRAFT)

  // Interface Classification
  interfaceType         InterfaceType
  interfaceDirection    InterfaceDirection          @default(BIDIRECTIONAL)
  criticality           InterfaceCriticality        @default(MINOR)

  // Standards and Compliance
  applicableStandards   String[]                    // e.g., ["SAE AIR6181A", "ASME Y14.24"]
  complianceNotes       String?                     // Compliance-specific notes

  // Effectivity Management
  effectiveDate         DateTime?                   // When this ICD becomes effective
  expirationDate        DateTime?                   // When this ICD expires
  effectivityType       InterfaceEffectivityType?  // How effectivity is managed
  effectivityValue      String?                     // Specific effectivity value

  // Approval and Ownership
  ownerId               String?                     // Responsible engineer
  ownerName             String?                     // Engineer name
  ownerDepartment       String?                     // Department
  approvedById          String?                     // Who approved
  approvedDate          DateTime?                   // When approved
  reviewCycle           Int?                        // Review cycle in months
  nextReviewDate        DateTime?                   // Next scheduled review

  // Documentation
  documentationUrl      String?                     // Link to detailed docs
  drawingReferences     String[]                    // Related drawing numbers
  specificationRefs     String[]                    // Related specifications

  // Metadata
  isActive              Boolean                     @default(true)
  createdAt             DateTime                    @default(now())
  updatedAt             DateTime                    @updatedAt
  createdById           String?
  lastModifiedById      String?

  // Relationships
  requirements          InterfaceRequirement[]      // Detailed requirements
  implementingParts     ICDPartImplementation[]     // Parts that implement
  consumingAssemblies   ICDPartConsumption[]        // Assemblies that consume
  parentInterfaces      ICDRelation[]               @relation("ParentICD")
  childInterfaces       ICDRelation[]               @relation("ChildICD")
  versions              ICDVersion[]                // Version history
  history               ICDHistory[]                // Change history
  attachments           ICDAttachment[]             // Supporting documents
  complianceChecks      ICDComplianceCheck[]        // Compliance validations
  changeRequests        ICDChangeRequest[]          // Change requests

  @@index([icdNumber])
  @@index([status])
  @@index([interfaceType])
  @@index([criticality])
  @@index([version])
  @@index([effectiveDate])
  @@index([persistentUuid])
  @@index([isActive])
  @@map("interface_control_documents")
}

/// Interface Requirements - Detailed technical requirements for interfaces
model InterfaceRequirement {
  id                    String                      @id @default(cuid())
  icdId                 String                      // Parent ICD
  requirementId         String                      // e.g., "REQ-001"
  category              String                      // e.g., "Form", "Fit", "Function"
  subcategory           String?                     // More specific categorization

  // Requirement Details
  title                 String                      // Short description
  description           String                      // Detailed requirement text
  specification         String?                     // Technical specification
  tolerance             String?                     // Acceptable tolerances
  units                 String?                     // Units of measurement

  // Values and Limits
  nominalValue          String?                     // Nominal/target value
  minimumValue          String?                     // Minimum acceptable
  maximumValue          String?                     // Maximum acceptable
  testConditions        String?                     // Test/operating conditions

  // Verification
  verificationMethod    VerificationMethod          @default(INSPECTION)
  verificationProcedure String?                     // How to verify compliance
  acceptanceCriteria    String?                     // What constitutes pass/fail

  // Traceability
  parentRequirementId   String?                     // Parent requirement
  flowdownFrom          String[]                    // Source requirements
  rationale             String?                     // Why this requirement exists

  // Priority and Impact
  priority              String                      @default("MEDIUM") // HIGH, MEDIUM, LOW
  safetyRelated         Boolean                     @default(false)
  missionCritical       Boolean                     @default(false)

  // Metadata
  isActive              Boolean                     @default(true)
  createdAt             DateTime                    @default(now())
  updatedAt             DateTime                    @updatedAt

  // Relationships
  icd                   InterfaceControlDocument    @relation(fields: [icdId], references: [id], onDelete: Cascade)
  parentRequirement     InterfaceRequirement?       @relation("RequirementHierarchy", fields: [parentRequirementId], references: [id])
  childRequirements     InterfaceRequirement[]      @relation("RequirementHierarchy")
  complianceChecks      ICDComplianceCheck[]        // Compliance results

  @@index([icdId])
  @@index([category])
  @@index([priority])
  @@index([safetyRelated])
  @@index([parentRequirementId])
  @@unique([icdId, requirementId])
  @@map("interface_requirements")
}

/// ICD-Part Implementation - Links ICDs to parts that implement the interface
model ICDPartImplementation {
  id                    String                      @id @default(cuid())
  icdId                 String                      // Interface being implemented
  partId                String                      // Part implementing interface

  // Implementation Details
  implementationType    String                      // e.g., "DIRECT", "ADAPTER", "EMULATION"
  implementationNotes   String?                     // Implementation-specific notes
  configurationDetails  Json?                       // Configuration parameters

  // Compliance Status
  complianceStatus      ComplianceStatus            @default(UNDER_EVALUATION)
  lastComplianceCheck   DateTime?                   // When last verified
  complianceNotes       String?                     // Compliance details

  // Effectivity
  effectiveDate         DateTime?                   // When implementation is effective
  expirationDate        DateTime?                   // When implementation expires
  effectivityCondition  String?                     // Specific conditions

  // Metadata
  isActive              Boolean                     @default(true)
  createdAt             DateTime                    @default(now())
  updatedAt             DateTime                    @updatedAt

  // Relationships
  icd                   InterfaceControlDocument    @relation(fields: [icdId], references: [id], onDelete: Cascade)
  part                  Part                        @relation("PartICDImplementations", fields: [partId], references: [id], onDelete: Cascade)

  @@index([icdId])
  @@index([partId])
  @@index([complianceStatus])
  @@unique([icdId, partId])
  @@map("icd_part_implementations")
}

/// ICD-Part Consumption - Links ICDs to assemblies/parts that consume the interface
model ICDPartConsumption {
  id                    String                      @id @default(cuid())
  icdId                 String                      // Interface being consumed
  partId                String                      // Assembly/part consuming interface

  // Consumption Details
  consumptionType       String                      // e.g., "DIRECT", "THROUGH_ADAPTER", "OPTIONAL"
  quantityRequired      Int?                        @default(1) // How many instances needed
  consumptionNotes      String?                     // Consumption-specific notes
  alternativeOptions    String[]                    // Alternative interfaces accepted

  // Requirements
  isRequired            Boolean                     @default(true) // Is this interface mandatory
  isCritical            Boolean                     @default(false) // Is it critical to operation
  failureMode           String?                     // What happens if interface fails

  // Effectivity
  effectiveDate         DateTime?                   // When consumption is effective
  expirationDate        DateTime?                   // When consumption expires
  effectivityCondition  String?                     // Specific conditions

  // Metadata
  isActive              Boolean                     @default(true)
  createdAt             DateTime                    @default(now())
  updatedAt             DateTime                    @updatedAt

  // Relationships
  icd                   InterfaceControlDocument    @relation(fields: [icdId], references: [id], onDelete: Cascade)
  part                  Part                        @relation("PartICDConsumptions", fields: [partId], references: [id], onDelete: Cascade)

  @@index([icdId])
  @@index([partId])
  @@index([isRequired])
  @@unique([icdId, partId])
  @@map("icd_part_consumptions")
}

/// ICD Relations - Hierarchical and dependency relationships between ICDs
model ICDRelation {
  id                    String                      @id @default(cuid())
  parentIcdId           String                      // Parent/containing interface
  childIcdId            String                      // Child/contained interface

  // Relationship Details
  relationType          String                      // e.g., "CONTAINS", "DEPENDS_ON", "SIMILAR_TO"
  relationDescription   String?                     // Description of relationship
  dependencyType        String?                     // e.g., "HARD", "SOFT", "OPTIONAL"

  // Flow and Direction
  dataFlowDirection     String?                     // e.g., "BIDIRECTIONAL", "PARENT_TO_CHILD"
  interfacePriority     Int?                        // Priority/order of interface

  // Metadata
  isActive              Boolean                     @default(true)
  createdAt             DateTime                    @default(now())
  updatedAt             DateTime                    @updatedAt

  // Relationships
  parentIcd             InterfaceControlDocument    @relation("ParentICD", fields: [parentIcdId], references: [id], onDelete: Cascade)
  childIcd              InterfaceControlDocument    @relation("ChildICD", fields: [childIcdId], references: [id], onDelete: Cascade)

  @@index([parentIcdId])
  @@index([childIcdId])
  @@index([relationType])
  @@unique([parentIcdId, childIcdId, relationType])
  @@map("icd_relations")
}

/// ICD Version History - Tracks versions and changes to ICDs
model ICDVersion {
  id                    String                      @id @default(cuid())
  icdId                 String                      // Parent ICD
  versionNumber         String                      // Version number

  // Version Details
  versionType           String                      // e.g., "MAJOR", "MINOR", "PATCH"
  changeDescription     String                      // What changed in this version
  changeReason          String?                     // Why the change was made
  changeCategory        String[]                    // Categories of changes

  // Approval and Release
  createdDate           DateTime                    @default(now())
  approvedDate          DateTime?                   // When this version was approved
  releasedDate          DateTime?                   // When this version was released
  supersededDate        DateTime?                   // When this version was superseded

  // People
  createdById           String?                     // Who created this version
  approvedById          String?                     // Who approved this version

  // Version Content (snapshot)
  versionData           Json?                       // Snapshot of ICD data at this version

  // Metadata
  isActive              Boolean                     @default(true)

  // Relationships
  icd                   InterfaceControlDocument    @relation(fields: [icdId], references: [id], onDelete: Cascade)

  @@index([icdId])
  @@index([versionNumber])
  @@index([createdDate])
  @@unique([icdId, versionNumber])
  @@map("icd_versions")
}

/// ICD History - Audit trail of all changes to ICDs
model ICDHistory {
  id                    String                      @id @default(cuid())
  icdId                 String                      // ICD that changed

  // Change Details
  actionType            String                      // e.g., "CREATE", "UPDATE", "APPROVE", "RELEASE"
  fieldChanged          String?                     // Specific field that changed
  oldValue              String?                     // Previous value
  newValue              String?                     // New value
  changeDescription     String?                     // Description of change

  // Context
  changeReason          String?                     // Why change was made
  impactAssessment      String?                     // Impact of the change
  relatedEcoId          String?                     // Related ECO if applicable

  // People and Timing
  changedAt             DateTime                    @default(now())
  changedById           String?                     // Who made the change
  changedByName         String?                     // Name of person who changed

  // Metadata
  sessionId             String?                     // Session identifier
  ipAddress             String?                     // IP address of change
  userAgent             String?                     // Browser/client info

  // Relationships
  icd                   InterfaceControlDocument    @relation(fields: [icdId], references: [id], onDelete: Cascade)
  relatedEco            EngineeringChangeOrder?     @relation("ICDHistoryECO", fields: [relatedEcoId], references: [id])

  @@index([icdId])
  @@index([actionType])
  @@index([changedAt])
  @@index([changedById])
  @@index([relatedEcoId])
  @@map("icd_history")
}

/// ICD Attachments - Supporting documents and files for ICDs
model ICDAttachment {
  id                    String                      @id @default(cuid())
  icdId                 String                      // Parent ICD

  // File Details
  fileName              String                      // Original filename
  fileSize              Int?                        // File size in bytes
  fileType              String?                     // MIME type
  fileExtension         String?                     // File extension

  // Storage
  storageUrl            String?                     // URL/path to file
  storageKey            String?                     // Storage system key
  checksum              String?                     // File integrity checksum

  // Classification
  documentType          String                      // e.g., "DRAWING", "SPECIFICATION", "TEST_REPORT"
  category              String?                     // Additional categorization
  securityLevel         String?                     @default("INTERNAL") // Security classification

  // Metadata
  description           String?                     // Description of attachment
  version               String?                     // Document version
  isActive              Boolean                     @default(true)
  uploadedAt            DateTime                    @default(now())
  uploadedById          String?                     // Who uploaded

  // Relationships
  icd                   InterfaceControlDocument    @relation(fields: [icdId], references: [id], onDelete: Cascade)

  @@index([icdId])
  @@index([documentType])
  @@index([isActive])
  @@map("icd_attachments")
}

/// ICD Compliance Checks - Records of interface compliance verification
model ICDComplianceCheck {
  id                    String                      @id @default(cuid())
  icdId                 String                      // ICD being checked
  requirementId         String?                     // Specific requirement checked
  partId                String?                     // Part being checked

  // Check Details
  checkType             String                      // e.g., "DESIGN_REVIEW", "TEST", "INSPECTION"
  checkMethod           VerificationMethod          @default(INSPECTION)
  checkProcedure        String?                     // How the check was performed

  // Results
  complianceStatus      ComplianceStatus            @default(UNDER_EVALUATION)
  checkResult           String                      // e.g., "PASS", "FAIL", "CONDITIONAL"
  actualValue           String?                     // Measured/observed value
  expectedValue         String?                     // Required/expected value
  variance              String?                     // Difference from expected

  // Documentation
  testResults           Json?                       // Detailed test results
  evidenceUrl           String?                     // Link to evidence/documentation
  checkNotes            String?                     // Additional notes
  nonComplianceReason   String?                     // Why non-compliant
  correctiveAction      String?                     // What to do to fix

  // People and Timing
  checkDate             DateTime                    @default(now())
  checkedById           String?                     // Who performed check
  checkedByName         String?                     // Name of checker
  reviewedById          String?                     // Who reviewed results
  reviewedDate          DateTime?                   // When reviewed

  // Next Actions
  nextCheckDate         DateTime?                   // When next check due
  reCheckRequired       Boolean                     @default(false)
  escalationRequired    Boolean                     @default(false)

  // Metadata
  isActive              Boolean                     @default(true)

  // Relationships
  icd                   InterfaceControlDocument    @relation(fields: [icdId], references: [id], onDelete: Cascade)
  requirement           InterfaceRequirement?       @relation(fields: [requirementId], references: [id])
  part                  Part?                       @relation("PartICDComplianceChecks", fields: [partId], references: [id])

  @@index([icdId])
  @@index([requirementId])
  @@index([partId])
  @@index([complianceStatus])
  @@index([checkDate])
  @@index([nextCheckDate])
  @@map("icd_compliance_checks")
}

/// ICD Change Requests - Requests for changes to existing ICDs
model ICDChangeRequest {
  id                    String                      @id @default(cuid())
  icdId                 String                      // ICD to be changed
  requestNumber         String                      @unique // e.g., "ICR-001"

  // Request Details
  title                 String                      // Brief description
  description           String                      // Detailed description
  requestType           String                      // e.g., "CORRECTION", "ENHANCEMENT", "CLARIFICATION"
  priority              String                      @default("MEDIUM") // HIGH, MEDIUM, LOW

  // Change Details
  proposedChange        String                      // What should change
  changeReason          String                      // Why change is needed
  alternativesConsidered String?                    // Other options considered

  // Impact Analysis
  impactAnalysis        Json?                       // Structured impact analysis
  affectedParts         String[]                    // Parts that might be affected
  affectedAssemblies    String[]                    // Assemblies that might be affected
  estimatedEffort       String?                     // Effort to implement
  riskAssessment        String?                     // Risks of making change

  // Requestor Information
  requestorId           String?                     // Who requested
  requestorName         String                      // Requestor name
  requestorDept         String?                     // Department
  requestorDeptId       String?                     // Department ID
  requestorEmail        String?                     // Contact email
  requestDate           DateTime                    @default(now())

  // Status and Approval
  status                String                      @default("SUBMITTED") // SUBMITTED, UNDER_REVIEW, APPROVED, REJECTED, IMPLEMENTED
  reviewerId            String?                     // Who is reviewing
  reviewerNotes         String?                     // Reviewer comments
  reviewDate            DateTime?                   // When reviewed
  approvalRequired      Boolean                     @default(true)
  approvedById          String?                     // Who approved
  approvedDate          DateTime?                   // When approved

  // Implementation
  implementationPlan    String?                     // How to implement
  implementationDate    DateTime?                   // When implemented
  implementedById       String?                     // Who implemented
  relatedEcoId          String?                     // Related ECO if created

  // Metadata
  isActive              Boolean                     @default(true)
  createdAt             DateTime                    @default(now())
  updatedAt             DateTime                    @updatedAt

  // Relationships
  icd                   InterfaceControlDocument    @relation(fields: [icdId], references: [id], onDelete: Cascade)
  relatedEco            EngineeringChangeOrder?     @relation("ICDChangeRequestECO", fields: [relatedEcoId], references: [id])
  requestorDepartment   Department?                 @relation("ICDChangeRequestDept", fields: [requestorDeptId], references: [id])

  @@index([icdId])
  @@index([requestNumber])
  @@index([status])
  @@index([priority])
  @@index([requestDate])
  @@index([relatedEcoId])
  @@index([requestorDeptId])
  @@map("icd_change_requests")
}

// ============================================================================
// LOCATION MANAGEMENT SYSTEM
// ============================================================================

/// Location hierarchy types for warehouse and manufacturing environments
enum LocationType {
  WAREHOUSE       // Top-level warehouse building
  BUILDING        // Manufacturing/office building
  FLOOR           // Floor within a building
  ZONE            // Zone within a floor (e.g., Zone A, Zone B)
  AISLE           // Aisle within a zone
  ROW             // Row within an aisle
  BIN             // Storage bin/slot
  SHELF           // Shelf within a bin
  WORKSTATION     // Manufacturing workstation
  STORAGE_AREA    // General storage area
  STAGING_AREA    // Material staging area
  QUARANTINE_AREA // Quality quarantine area
  SHIPPING_DOCK   // Shipping/outbound dock
  RECEIVING_DOCK  // Receiving/inbound dock
  INSPECTION_AREA // Quality inspection area
  REWORK_AREA     // Rework/repair area
  SCRAP_AREA      // Scrap holding area
  TOOL_CRIB       // Tool storage area
  OFFICE          // Office space
  OTHER           // Other location types
}

/// Hierarchical location model for warehouse management and material tracking
model Location {
  id                    String       @id @default(cuid())
  locationCode          String       @unique          // e.g., "WH-A-01-B-05"
  locationName          String                        // e.g., "Warehouse A, Floor 1, Zone B, Bin 5"
  description           String?                       // Additional description
  locationType          LocationType                  // Type of location (warehouse, zone, bin, etc.)

  // Hierarchical relationships
  parentLocationId      String?
  parentLocation        Location?    @relation("LocationHierarchy", fields: [parentLocationId], references: [id])
  childLocations        Location[]   @relation("LocationHierarchy")

  // Site/Area integration
  siteId                String?
  site                  Site?        @relation(fields: [siteId], references: [id])
  areaId                String?
  area                  Area?        @relation(fields: [areaId], references: [id])

  // Capacity management
  capacityValue         Decimal?                      // Storage capacity value
  capacityUnitOfMeasureId String?                     // Capacity unit (e.g., cubic feet, pallets)
  capacityUnitOfMeasure UnitOfMeasure? @relation("LocationCapacityUOM", fields: [capacityUnitOfMeasureId], references: [id])
  currentUtilization    Decimal?     @default(0)     // Current utilization percentage

  // Physical dimensions
  length                Decimal?                      // Length dimension
  width                 Decimal?                      // Width dimension
  height                Decimal?                      // Height dimension
  dimensionUnitOfMeasureId String?                    // Dimension unit (e.g., feet, meters)
  dimensionUnitOfMeasure UnitOfMeasure? @relation("LocationDimensionUOM", fields: [dimensionUnitOfMeasureId], references: [id])

  // Operational attributes
  isActive              Boolean      @default(true)   // Location is active/available
  allowMixedParts       Boolean      @default(true)   // Allow different parts in same location
  requiresEnvironmentalControl Boolean @default(false) // Special environmental requirements
  temperature           Decimal?                      // Temperature requirement
  humidity              Decimal?                      // Humidity requirement

  // Contact and responsibility
  contactPhone          String?                       // Contact phone for location
  contactEmail          String?                       // Contact email for location

  // Audit fields
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt

  // Relations to entities using this location
  materialLots          MaterialLot[]                 // Materials stored at this location
  inventoryRecords      Inventory[]                   // Inventory records for this location
  serializedParts       SerializedPart[]              // Serialized parts at this location

  // Location change history (from/to relationships)
  materialStateHistoryFrom MaterialStateHistory[] @relation("FromLocation")
  materialStateHistoryTo   MaterialStateHistory[] @relation("ToLocation")

  @@index([locationCode])
  @@index([locationType])
  @@index([parentLocationId])
  @@index([siteId])
  @@index([areaId])
  @@index([isActive])
  @@index([capacityUnitOfMeasureId])
  @@index([dimensionUnitOfMeasureId])
  @@map("locations")
}

// ============================================================================
// CURRENCY MANAGEMENT SYSTEM - ISO 4217 COMPLIANT
// ============================================================================

/// Source of exchange rate data for tracking and audit purposes
enum ExchangeRateSource {
  MANUAL_ENTRY        // Manually entered by user
  BANK_FEED          // From bank API feed
  FINANCIAL_SERVICE  // From financial service (e.g., XE, OANDA)
  ERP_SYSTEM         // From integrated ERP system
  CENTRAL_BANK       // From central bank feeds
  MARKETPLACE        // From marketplace/trading platform
}

// ============================================================================
// ANDON SYSTEM ENUMS (GitHub Issue #171)
// ============================================================================

/// Severity levels for Andon alerts
enum AndonSeverity {
  CRITICAL
  HIGH
  MEDIUM
  LOW
}

/// Priority levels for Andon alerts
enum AndonPriority {
  URGENT
  HIGH
  NORMAL
  LOW
}

/// Status of Andon alerts through their lifecycle
enum AndonAlertStatus {
  OPEN
  ACKNOWLEDGED
  IN_PROGRESS
  ESCALATED
  RESOLVED
  CLOSED
  CANCELLED
}

/// ISO 4217 compliant currency lookup table for standardizing multi-currency operations
model Currency {
  id                    String       @id @default(cuid())

  // ISO 4217 Standard Fields
  currencyCode          String       @unique          // e.g., "USD", "EUR", "GBP"
  currencyName          String                        // e.g., "US Dollar", "Euro", "British Pound"
  currencySymbol        String?                       // e.g., "$", "€", "£"
  numericCode           String?      @unique          // ISO 4217 numeric code e.g., "840"
  minorUnit             Int          @default(2)      // Decimal places e.g., 2 for USD, 0 for JPY

  // Regional and Display Information
  region                String?                       // e.g., "North America", "Europe"
  country               String?                       // Primary country e.g., "United States"
  displayFormat         String?                       // e.g., "$1,234.56", "€1.234,56"

  // Operational Attributes
  isActive              Boolean      @default(true)   // Currency is actively used
  isBaseCurrency        Boolean      @default(false)  // System base currency (typically USD)
  allowFractional       Boolean      @default(true)   // Allow fractional amounts

  // Audit Fields
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt

  // Reverse Relations - Models using this currency
  materialDefinitions   MaterialDefinition[]          @relation("MaterialDefinitionCurrency")
  materialLots          MaterialLot[]                 @relation("MaterialLotCurrency")
  parts                 Part[]                        @relation("PartCurrency")
  erpTransactions       ERPMaterialTransaction[]      @relation("ERPTransactionCurrency")
  toolDrawings          ToolDrawing[]                 @relation("ToolDrawingCostCurrency")
  changeOrders          EngineeringChangeOrder[]      @relation("ECOCostCurrency")
  vendorKits            VendorKit[]                   @relation("VendorKitCurrency")

  // Exchange Rate Relations
  exchangeRatesFrom     ExchangeRate[]                @relation("FromCurrency")
  exchangeRatesTo       ExchangeRate[]                @relation("ToCurrency")

  @@index([currencyCode])
  @@index([isActive])
  @@index([isBaseCurrency])
  @@map("currencies")
}

/// Exchange rates for currency conversion with historical tracking and multiple sources
model ExchangeRate {
  id                    String       @id @default(cuid())

  // Currency Pair
  fromCurrencyId        String
  toCurrencyId          String
  fromCurrency          Currency     @relation("FromCurrency", fields: [fromCurrencyId], references: [id])
  toCurrency            Currency     @relation("ToCurrency", fields: [toCurrencyId], references: [id])

  // Rate Information
  exchangeRate          Decimal      @db.Decimal(18, 8)    // High precision for accurate conversion
  effectiveDate         DateTime                           // When this rate becomes effective
  expirationDate        DateTime?                          // When this rate expires (null = current)

  // Source and Metadata
  rateSource            ExchangeRateSource               // Where rate comes from
  sourceReference       String?                          // External reference/transaction ID
  isManualOverride      Boolean      @default(false)     // Manually set vs. automatic

  // Operational
  isActive              Boolean      @default(true)
  priority              Int          @default(0)         // Higher priority rates take precedence

  // Audit Fields
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  createdBy             String?      // User who created this rate

  @@unique([fromCurrencyId, toCurrencyId, effectiveDate])
  @@index([fromCurrencyId, toCurrencyId])
  @@index([effectiveDate, isActive])
  @@index([expirationDate])
  @@index([rateSource])
  @@map("exchange_rates")
}

// ============================================================================
// EQUIPMENT REGISTRY & MAINTENANCE MANAGEMENT SYSTEM (ISSUE #94)
// ============================================================================

/// Equipment criticality classification for maintenance prioritization
enum CriticalityLevel {
  HIGH      // Production-critical, immediate attention required
  MEDIUM    // Important but workarounds available
  LOW       // Nice to have, minimal production impact
}

/// Enhanced maintenance status tracking
enum MaintenanceStatus {
  PENDING
  SCHEDULED
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

/// Downtime classification for tracking planned vs unplanned events
enum DowntimeType {
  PLANNED           // Scheduled maintenance
  UNPLANNED         // Unexpected breakdown
}

/// Equipment types for better categorization and maintenance planning
model EquipmentType {
  id                          String        @id @default(cuid())
  code                        String        @unique
  name                        String
  description                 String?
  category                    String?       // Machine, Tool, Fixture, Gauge, etc.

  // Default maintenance settings
  defaultMaintenanceInterval  Int?          // Days
  defaultMaintenanceProcedure String?

  // Relations
  equipment                   Equipment[]   @relation("EquipmentToEquipmentType")

  // Audit fields
  createdAt                   DateTime      @default(now())
  updatedAt                   DateTime      @updatedAt

  @@map("equipment_types")
}

/// Enhanced downtime tracking for maintenance analysis
model DowntimeEvent {
  id                    String                @id @default(cuid())
  equipmentId           String
  equipment             Equipment             @relation("EquipmentDowntimeEvents", fields: [equipmentId], references: [id], onDelete: Cascade)

  // Timing
  startTime             DateTime
  endTime               DateTime?
  durationMinutes       Int?

  // Classification
  downtimeType          DowntimeType
  downtimeReasonId      String
  downtimeReason        DowntimeReason        @relation(fields: [downtimeReasonId], references: [id])

  // Impact
  affectedWorkOrderIds  String[]              // Work orders affected by this downtime
  productionLoss        Decimal?              // Units not produced

  // Resolution
  description           String
  rootCause             String?
  correctiveAction      String?

  // Related maintenance
  maintenanceWorkOrderId String?
  maintenanceWorkOrder  MaintenanceWorkOrder? @relation("DowntimeToMaintenanceWorkOrder", fields: [maintenanceWorkOrderId], references: [id])

  // Documentation
  reportedById          String
  reportedBy            User                  @relation("DowntimeEventReportedBy", fields: [reportedById], references: [id])
  notes                 String?

  // Audit fields
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt

  @@index([equipmentId])
  @@index([startTime])
  @@index([downtimeType])
  @@index([downtimeReasonId])
  @@map("downtime_events")
}

/// Standardized downtime reasons for better analysis and reporting
model DowntimeReason {
  id                    String          @id @default(cuid())
  code                  String          @unique
  name                  String
  description           String?
  category              String?         // Mechanical, Electrical, Operator Error, Material, etc.
  isActive              Boolean         @default(true)

  // Relations
  downtimeEvents        DowntimeEvent[]

  // Audit fields
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt

  @@index([code])
  @@index([category])
  @@index([isActive])
  @@map("downtime_reasons")
}

/// Parts used in maintenance work orders for cost tracking
model MaintenancePart {
  id                    String               @id @default(cuid())
  workOrderId           String
  workOrder             MaintenanceWorkOrder @relation("MaintenanceWorkOrderParts", fields: [workOrderId], references: [id], onDelete: Cascade)

  // Part information
  partNumber            String
  partDescription       String?
  quantity              Decimal
  unitCost              Decimal?
  totalCost             Decimal?

  // Inventory tracking
  lotNumber             String?
  serialNumber          String?
  issuedFrom            String?             // Inventory location

  // Audit fields
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  @@index([workOrderId])
  @@index([partNumber])
  @@map("maintenance_parts")
}

/// Labor entries for maintenance work order time and cost tracking
model LaborEntry {
  id                    String               @id @default(cuid())
  workOrderId           String
  workOrder             MaintenanceWorkOrder @relation("MaintenanceWorkOrderLabor", fields: [workOrderId], references: [id], onDelete: Cascade)

  // Technician information
  technicianId          String
  technician            User                 @relation("LaborEntryTechnician", fields: [technicianId], references: [id])

  // Time tracking
  startTime             DateTime
  endTime               DateTime?
  laborHours            Decimal?
  laborRate             Decimal?
  laborCost             Decimal?

  notes                 String?

  // Audit fields
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt

  @@index([workOrderId])
  @@index([technicianId])
  @@index([startTime])
  @@map("labor_entries")
}

/// Serial Number Format Configuration (Issue #149)
/// Configurable serial number format engine supporting diverse manufacturing standards
model SerialNumberFormatConfig {
  id                           String                           @id @default(cuid())
  name                         String                           // e.g., "Aerospace Standard", "Medical Device"
  description                  String?
  patternTemplate              String                           // e.g., "PRE-{YYYY}{MM}{DD}-{SEQ:6}-{CHECK:luhn}"
  siteId                       String
  site                         Site                             @relation(fields: [siteId], references: [id], onDelete: Cascade)

  // Configuration
  isActive                     Boolean                          @default(true)
  version                      Int                              @default(1)
  validationRules              String?                          // JSON: character sets, length constraints, etc.
  sequentialCounterStart       Int                              @default(1)
  sequentialCounterIncrement   Int                              @default(1)
  counterResetRule             String?                          // "daily", "monthly", "yearly", null for no reset

  // Assignment relationships
  partAssignments              SerialFormatPartAssignment[]
  partFamilyAssignments        SerialFormatPartFamilyAssignment[]
  serialAssignmentTriggers     SerialAssignmentTrigger[]

  // Usage tracking
  usageTracking                SerialNumberUsageTracking?

  // Audit fields
  createdBy                    String?
  createdAt                    DateTime                         @default(now())
  updatedAt                    DateTime                         @updatedAt

  @@unique([siteId, name])
  @@index([siteId])
  @@index([isActive])
  @@map("serial_number_format_configs")
}

/// Serial Format Part Assignment (Issue #149)
/// Links serial number formats to specific parts with priority-based assignment
model SerialFormatPartAssignment {
  id                   String                      @id @default(cuid())
  partId               String
  part                 Part                        @relation(fields: [partId], references: [id], onDelete: Cascade)
  formatConfigId       String
  formatConfig         SerialNumberFormatConfig    @relation(fields: [formatConfigId], references: [id], onDelete: Cascade)

  // Assignment level control
  isDefault            Boolean                     @default(false)
  priority             Int                         @default(0)  // Higher value = higher priority override
  effectiveFrom        DateTime                    @default(now())
  effectiveUntil       DateTime?

  // Audit fields
  createdAt            DateTime                    @default(now())
  updatedAt            DateTime                    @updatedAt

  @@unique([partId, formatConfigId])
  @@index([partId])
  @@index([formatConfigId])
  @@index([priority])
  @@map("serial_format_part_assignments")
}

/// Serial Format Part Family Assignment (Issue #149)
/// Links serial number formats to part families for hierarchical assignment
/// Note: PartFamily model will be created in future phases for hierarchical part organization
model SerialFormatPartFamilyAssignment {
  id                   String                      @id @default(cuid())
  partFamilyId         String                      // Will reference PartFamily when model is created
  formatConfigId       String
  formatConfig         SerialNumberFormatConfig    @relation(fields: [formatConfigId], references: [id], onDelete: Cascade)

  // Assignment level control
  isDefault            Boolean                     @default(false)
  priority             Int                         @default(0)  // Higher value = higher priority override
  effectiveFrom        DateTime                    @default(now())
  effectiveUntil       DateTime?

  // Audit fields
  createdAt            DateTime                    @default(now())
  updatedAt            DateTime                    @updatedAt

  @@unique([partFamilyId, formatConfigId])
  @@index([partFamilyId])
  @@index([formatConfigId])
  @@index([priority])
  @@map("serial_format_part_family_assignments")
}

/// Serial Number Usage Tracking (Issue #149)
/// Manages sequential counter state and usage statistics for serial formats
model SerialNumberUsageTracking {
  id                   String                      @id @default(cuid())
  formatConfigId       String                      @unique
  formatConfig         SerialNumberFormatConfig    @relation(fields: [formatConfigId], references: [id], onDelete: Cascade)

  // Counter management
  currentSequenceValue Int                         @default(1)
  lastGeneratedDate    DateTime?
  counterResetDate     DateTime?

  // Statistics
  totalGenerated       Int                         @default(0)
  totalUsed            Int                         @default(0)
  duplicateAttempts    Int                         @default(0)

  // Concurrency control
  lastUpdateTimestamp  DateTime                    @updatedAt
  version              Int                         @default(1)  // Optimistic locking version

  // Audit fields
  createdAt            DateTime                    @default(now())
  updatedAt            DateTime                    @updatedAt

  @@index([formatConfigId])
  @@map("serial_number_usage_tracking")
}

// ============================================
// Issue #150: Advanced Serialization Workflows
// ============================================

// Vendor Serial Registry - Track vendor-provided serial numbers
model VendorSerial {
  id                    String   @id @default(cuid())
  vendorSerialNumber    String
  vendorName            String
  partId                String
  internalSerialId      String?  @unique // Links to SerializedPart when internally assigned

  // Validation
  formatValid           Boolean  @default(false)
  isUnique              Boolean  @default(false)
  validationErrors      String[] // Array of validation error messages

  // Tracking
  receivedDate          DateTime @default(now())
  acceptedDate          DateTime?
  acceptedBy            String?
  rejectionReason       String?
  rejectedDate          DateTime?

  // Audit
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  part                  Part     @relation(fields: [partId], references: [id])
  internalSerial        SerializedPart? @relation(fields: [internalSerialId], references: [id])

  @@unique([vendorSerialNumber, vendorName, partId])
  @@index([partId])
  @@index([vendorName])
  @@map("vendor_serials")
}

// Serial Assignment Trigger Configuration
model SerialAssignmentTrigger {
  id                    String   @id @default(cuid())
  partId                String
  triggerType           String   // MATERIAL_RECEIPT, WORK_ORDER_CREATE, OPERATION_COMPLETE, QUALITY_CHECKPOINT, BATCH_COMPLETION
  operationCode         String?  // Specific operation for trigger

  // Trigger Conditions
  isConditional         Boolean  @default(false)
  conditions            String?  // JSON string with conditional logic

  // Assignment Configuration
  assignmentType        String   // VENDOR, SYSTEM_GENERATED, LATE_ASSIGNMENT
  deferSerialization    Boolean  @default(false) // For LATE_ASSIGNMENT

  // Batch Configuration
  batchMode             Boolean  @default(false)
  batchSize             Int?     // For batch serial generation

  // Format Configuration
  formatConfigId        String?

  // Status
  isActive              Boolean  @default(true)

  // Audit
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  createdBy             String?

  part                  Part     @relation(fields: [partId], references: [id])
  formatConfig          SerialNumberFormatConfig? @relation(fields: [formatConfigId], references: [id])

  @@index([partId])
  @@index([triggerType])
  @@map("serial_assignment_triggers")
}

// Late Assignment Placeholder - Tracks items awaiting serialization
model LateAssignmentPlaceholder {
  id                    String   @id @default(cuid())
  placeholderId         String   @unique // Temporary ID for unserialied items
  partId                String
  workOrderId           String?
  lotNumber             String?

  // Status
  status                String   // PENDING, SERIALIZED, FAILED
  assignedSerialId      String?  @unique // Links to SerializedPart when assigned

  // Trigger Information
  triggeredAt           DateTime?
  triggeredBy           String?
  assignmentOperationCode String?

  // Tracking
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  serializedDate        DateTime?

  part                  Part     @relation(fields: [partId], references: [id])
  serializedPart        SerializedPart? @relation(fields: [assignedSerialId], references: [id])

  @@index([partId])
  @@index([placeholderId])
  @@index([status])
  @@map("late_assignment_placeholders")
}

// Serial Propagation Record - Track serial movement through routing
model SerialPropagation {
  id                    String   @id @default(cuid())
  sourceSerialId        String
  targetSerialId        String?  // NULL for splitting, set for merging/transformation

  // Propagation Type
  propagationType       String   // PASS_THROUGH, SPLIT, MERGE, TRANSFORMATION
  quantity              Int      // For splits/merges

  // Routing
  operationCode         String
  workCenterId          String?
  routingSequence       Int

  // Parent-Child Relationships
  parentSerialIds       String[] // For merges
  childSerialIds        String[] // For splits

  // Audit
  createdAt             DateTime @default(now())
  createdBy             String?
  notes                 String?

  sourceSerial          SerializedPart @relation("SourcePropagation", fields: [sourceSerialId], references: [id])
  targetSerial          SerializedPart? @relation("TargetPropagation", fields: [targetSerialId], references: [id])

  @@index([sourceSerialId])
  @@index([targetSerialId])
  @@index([propagationType])
  @@map("serial_propagations")
}

// Serial Uniqueness Validation - Track uniqueness scope for serials
model SerialUniquenessScope {
  id                    String   @id @default(cuid())
  serialNumber          String
  partId                String

  // Scope Levels
  siteLevel             Boolean  @default(true)  // Must be unique within site
  enterpriseLevel       Boolean  @default(false) // Must be unique across enterprise
  partTypeLevel         Boolean  @default(true)  // Must be unique per part type

  // Conflict Tracking
  hasConflict           Boolean  @default(false)
  conflictingSerialIds  String[] // Other serial numbers that conflict
  conflictResolution    String?  // KEEP, RETIRE, MARK_INVALID

  // Audit
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  validatedat           DateTime?

  part                  Part     @relation(fields: [partId], references: [id])

  @@unique([serialNumber, partId])
  @@index([partId])
  @@map("serial_uniqueness_scopes")
}

// Serial Assignment Audit Trail
model SerialAssignmentAudit {
  id                    String   @id @default(cuid())
  serialNumber          String
  serialId              String
  partId                String

  // Event Details
  eventType             String   // CREATED, ACCEPTED, VALIDATED, PROPAGATED, SPLIT, MERGED, TRANSFORMED
  eventSource           String   // VENDOR, SYSTEM_GENERATED, LATE_ASSIGNMENT, MANUAL

  // User & System Info
  performedBy           String
  performedAt           DateTime @default(now())
  systemContext         String?  // Operation, work order, etc.

  // Details
  details               String?  // JSON string with event-specific details

  @@index([serialId])
  @@index([partId])
  @@index([eventType])
  @@map("serial_assignment_audits")
}

// ============================================
// Issue #74: API Access Control & Security Model
// ============================================

enum ApiTier {
  PUBLIC
  SDK
  PRIVATE
}

enum ApiKeyStatus {
  ACTIVE
  SUSPENDED
  REVOKED
  EXPIRED
  PENDING_APPROVAL
}

enum TokenType {
  ACCESS_TOKEN
  REFRESH_TOKEN
}

model ApiKey {
  id              String         @id @default(cuid())
  keyPrefix       String         @unique
  keyHash         String
  name            String
  description     String?
  tier            ApiTier        @default(PUBLIC)
  status          ApiKeyStatus   @default(ACTIVE)
  siteId          String?
  companyId       String?
  pluginId        String?
  scopes          String[]       @default([])
  rateLimit       Int            @default(100)
  dailyQuota      Int?
  monthlyQuota    Int?
  expiresAt       DateTime?
  lastUsedAt      DateTime?
  lastUsedEndpoint String?
  createdBy       String
  approvedBy      String?
  approvedAt      DateTime?
  developerName   String?
  developerEmail  String?
  developerCompany String?
  developerPhone  String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  usageLogs       ApiUsageLog[]
  versionUsage    ApiUsageByVersion[]
  capturedCalls   CapturedApiCall[]
  plugins         Plugin[] // Plugin SDK API keys

  @@index([keyPrefix])
  @@index([siteId])
  @@index([pluginId])
  @@index([status])
  @@index([tier])
  @@index([createdAt])
  @@map("api_keys")
}

model ApiUsageLog {
  id                  String         @id @default(cuid())
  apiKeyId            String
  endpoint            String
  httpMethod          String
  apiVersion          String?
  statusCode          Int
  responseTime        Int
  requestId           String         @unique
  ipAddress           String?
  userAgent           String?
  rateLimitRemaining  Int?
  rateLimitReset      DateTime?
  errorCode           String?
  errorMessage        String?
  requestBytes        Int?
  responseBytes       Int?
  createdAt           DateTime       @default(now())
  apiKey              ApiKey         @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)

  @@index([apiKeyId])
  @@index([endpoint])
  @@index([statusCode])
  @@index([createdAt])
  @@index([requestId])
  @@map("api_usage_logs")
}

model RateLimitConfig {
  id              String         @id @default(cuid())
  tier            ApiTier
  resource        String?
  requestsPerMinute Int          @default(100)
  requestsPerHour Int?
  requestsPerDay  Int?
  burstMultiplier Decimal        @default(2.0)
  burstDuration   Int            @default(10)
  isActive        Boolean        @default(true)
  siteId          String?
  description     String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([tier])
  @@index([resource])
  @@index([siteId])
  @@map("rate_limit_configs")
}

model OAuthClient {
  id              String         @id @default(cuid())
  clientId        String         @unique
  clientSecret    String
  name            String
  description     String?
  grantTypes      String[]       @default(["authorization_code"])
  redirectUris    String[]       @default([])
  allowedScopes   String[]       @default([])
  tier            ApiTier        @default(PUBLIC)
  isActive        Boolean        @default(true)
  companyId       String?
  createdBy       String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  authorizations  OAuthAuthorization[]
  tokens          OAuthToken[]

  @@index([clientId])
  @@index([companyId])
  @@map("oauth_clients")
}

model OAuthAuthorization {
  id            String         @id @default(cuid())
  clientId      String
  userId        String
  scopes        String[]       @default([])
  isRevoked     Boolean        @default(false)
  revokedAt     DateTime?
  authorizedAt  DateTime       @default(now())
  expiresAt     DateTime?
  client        OAuthClient    @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([userId])
  @@map("oauth_authorizations")
}

model OAuthToken {
  id              String         @id @default(cuid())
  clientId        String
  userId          String?
  tokenType       TokenType
  tokenHash       String         @unique
  scopes          String[]       @default([])
  expiresAt       DateTime
  isRevoked       Boolean        @default(false)
  revokedAt       DateTime?
  refreshTokenId  String?
  createdAt       DateTime       @default(now())
  lastUsedAt      DateTime?
  client          OAuthClient    @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([userId])
  @@index([tokenHash])
  @@index([expiresAt])
  @@map("oauth_tokens")
}

model ApiEndpointTier {
  id                String         @id @default(cuid())
  endpoint          String         @unique
  httpMethod        String
  tier              ApiTier
  description       String?
  isDeprecated      Boolean        @default(false)
  deprecationDate   DateTime?
  replacementEndpoint String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  @@index([endpoint])
  @@index([tier])
  @@map("api_endpoint_tiers")
}

/// Site-Level Workflow Configuration (Issue #40)
/// Defines enforcement level per site for flexible workflow execution
/// Supports three modes: STRICT (full ISA-95), FLEXIBLE (relaxed prerequisites), HYBRID (external vouching)
model SiteWorkflowConfiguration {
  id                        String   @id @default(cuid())
  siteId                    String   @unique

  // Enforcement mode
  mode                      WorkflowMode @default(STRICT)

  // Detailed enforcement toggles
  enforceOperationSequence  Boolean  @default(true)   // Require prerequisites met?
  enforceStatusGating       Boolean  @default(true)   // Require WO status for data collection?
  allowExternalVouching     Boolean  @default(false)  // Accept external completion vouching?
  enforceQualityChecks      Boolean  @default(true)   // Require quality inspections?
  requireStartTransition    Boolean  @default(true)   // Require explicit "start" before data collection?

  // Audit and justification
  requireJustification      Boolean  @default(false)  // Require reason for flexible usage?
  requireApproval           Boolean  @default(false)  // Require supervisor approval for flexible?

  // Metadata
  effectiveDate             DateTime @default(now())
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  createdBy                 String
  updatedBy                 String?

  // Relations
  site                      Site     @relation("SiteWorkflowConfig", fields: [siteId], references: [id], onDelete: Cascade)
  routingOverrides          RoutingWorkflowConfiguration[]
  configurationHistory      WorkflowConfigurationHistory[]

  @@index([siteId])
  @@index([mode])
  @@map("site_workflow_configurations")
}

/// Workflow Modes
/// STRICT: Full ISA-95 enforcement (current behavior)
/// FLEXIBLE: Allow data collection without status prerequisites
/// HYBRID: Accept external vouching + flexible data collection
enum WorkflowMode {
  STRICT
  FLEXIBLE
  HYBRID
}

/// Routing-Level Workflow Configuration Overrides (Issue #40)
/// Allows routing-specific configuration overrides from site defaults
model RoutingWorkflowConfiguration {
  id                        String   @id @default(cuid())
  routingId                 String   @unique
  siteConfigId              String?  // Null = site defaults

  // Override flags (null = inherit from site)
  mode                      WorkflowMode?
  enforceOperationSequence  Boolean?
  enforceStatusGating       Boolean?
  allowExternalVouching     Boolean?
  enforceQualityChecks      Boolean?
  requireStartTransition    Boolean?

  // Justification for override
  overrideReason            String?
  approvedBy                String?
  approvedAt                DateTime?

  // Metadata
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  createdBy                 String

  // Relations
  routing                   Routing  @relation("RoutingWorkflowConfig", fields: [routingId], references: [id], onDelete: Cascade)
  siteConfig                SiteWorkflowConfiguration? @relation(fields: [siteConfigId], references: [id], onDelete: SetNull)
  workOrderOverrides        WorkOrderWorkflowConfiguration[]

  @@index([routingId])
  @@index([siteConfigId])
  @@map("routing_workflow_configurations")
}

/// Work Order-Level Workflow Configuration Overrides (Issue #40)
/// Exceptional work order-specific overrides (requires approval)
model WorkOrderWorkflowConfiguration {
  id                        String   @id @default(cuid())
  workOrderId               String   @unique
  routingConfigId           String?

  // Override flags (null = inherit from routing/site)
  mode                      WorkflowMode?
  enforceOperationSequence  Boolean?
  enforceStatusGating       Boolean?
  allowExternalVouching     Boolean?
  enforceQualityChecks      Boolean?
  requireStartTransition    Boolean?

  // Justification (REQUIRED for work order overrides)
  overrideReason            String
  approvedBy                String
  approvedAt                DateTime

  // Metadata
  createdAt                 DateTime @default(now())
  createdBy                 String

  // Relations
  workOrder                 WorkOrder @relation("WorkOrderWorkflowConfig", fields: [workOrderId], references: [id], onDelete: Cascade)
  routingConfig             RoutingWorkflowConfiguration? @relation(fields: [routingConfigId], references: [id], onDelete: SetNull)

  @@index([workOrderId])
  @@map("work_order_workflow_configurations")
}

/// Workflow Configuration Change History (Issue #40)
/// Audit trail for configuration changes
model WorkflowConfigurationHistory {
  id                String   @id @default(cuid())
  configType        String   // 'SITE', 'ROUTING', 'WORK_ORDER'
  configId          String   // ID of configuration record

  // What changed
  field             String   // Which field changed
  oldValue          String?  // Previous value (JSON)
  newValue          String   // New value (JSON)

  // Why and who
  changeReason      String?
  changedBy         String
  changedAt         DateTime @default(now())

  // Relations (polymorphic)
  siteConfigId      String?
  siteConfig        SiteWorkflowConfiguration? @relation(fields: [siteConfigId], references: [id], onDelete: Cascade)

  @@index([configType, configId])
  @@index([changedAt])
  @@map("workflow_configuration_history")
}

/// Operation-Level Workflow Configuration (Issue #40)
/// Granular configuration control per operation type
model OperationWorkflowConfiguration {
  id                        String   @id @default(cuid())
  operationId               String   @unique

  // Granular overrides
  requireQualityInspection  Boolean? // Override quality requirement for this operation
  allowExternalVouching     Boolean? // Allow external vouching for this operation type
  bypassPrerequisites       Boolean? // Bypass dependency checks for this operation

  // Metadata
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  createdBy                 String

  // Relations
  operation                 Operation @relation("OperationWorkflowConfig", fields: [operationId], references: [id], onDelete: Cascade)

  @@index([operationId])
  @@map("operation_workflow_configurations")
}

/// Workflow Enforcement Audit Trail (Issue #41)
/// Records when enforcement rules are checked, bypassed, or applied
/// Provides compliance and debugging information
model WorkflowEnforcementAudit {
  id                  String   @id @default(cuid())

  // What happened
  workOrderId         String
  operationId         String?
  action              String   // 'RECORD_PERFORMANCE', 'START_OPERATION', 'COMPLETE_OPERATION'

  // Enforcement details
  enforcementMode     String   // 'STRICT', 'FLEXIBLE', 'HYBRID'
  bypassesApplied     String[] // Which rules were bypassed
  warnings            String[] // Warnings generated

  // Context
  userId              String?
  timestamp           DateTime @default(now())

  // Relations
  workOrder           WorkOrder @relation("WorkflowEnforcementAudit", fields: [workOrderId], references: [id], onDelete: Cascade)

  @@index([workOrderId])
  @@index([timestamp])
  @@index([action])
  @@map("workflow_enforcement_audits")
}

// ============================================================================
// QUALITY MANAGEMENT SYSTEM COMPLIANCE FRAMEWORK (Issue #102)
// Phase 1: Document Control & Training & Competency
// ============================================================================

/// QMS Document Type enumeration for classification
enum QMSDocumentType {
  QUALITY_MANUAL      // QMS top-level manual
  PROCEDURE           // Process procedures
  QMS_WORK_INSTRUCTION // Detailed work instructions
  FORM                // Blank forms
  SPECIFICATION       // Product/process specifications
  PLAN                // Quality plans, inspection plans
  RECORD              // Filled-out forms/records
  EXTERNAL            // Customer specs, standards
}

/// Document Status enumeration for lifecycle management
enum QMSDocumentStatus {
  DRAFT
  IN_REVIEW
  APPROVED
  ACTIVE
  OBSOLETE
  ARCHIVED
}

/// Course Type enumeration for training delivery method
enum CourseType {
  CLASSROOM           // In-person classroom
  ONLINE              // E-learning
  ON_THE_JOB          // OJT/shadowing
  EXTERNAL            // External training provider
  CERTIFICATION       // Certification program
}

/// Question Type enumeration for competency test questions
enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
  ESSAY
}

/// Controlled Document - Core document management model (ISO 9001 Clause 7.5)
model ControlledDocument {
  id                  String   @id @default(cuid())
  documentNumber      String   @unique      // Unique identifier
  title               String                // Document title
  description         String?               // Detailed description

  // Document type and classification
  documentType        QMSDocumentType
  category            String?               // Procedure, Work Instruction, Form, etc.

  // Revision control
  revision            String   @default("A")
  revisionDate        DateTime @default(now())
  effectiveDate       DateTime?

  // Status lifecycle
  status              QMSDocumentStatus @default(DRAFT)

  // File management
  fileUrl             String                // URL to document file
  fileName            String                // Original filename

  // Approval workflow
  approvals           DocumentApproval[]
  approvedBy          User?     @relation("DocumentApprovedBy", fields: [approvedById], references: [id], onDelete: SetNull)
  approvedById        String?
  approvedAt          DateTime?

  // Review schedule (ISO 9001 requirement)
  reviewFrequency     Int?                  // Months between reviews
  nextReviewDate      DateTime?
  lastReviewDate      DateTime?

  // Distribution control
  distributionList    User[]    @relation("DocumentDistribution")
  isControlled        Boolean   @default(true)

  // Parent/child relationships for revision tracking
  parentDocument      ControlledDocument? @relation("DocumentRevisions", fields: [parentDocumentId], references: [id], onDelete: SetNull)
  parentDocumentId    String?
  childRevisions      ControlledDocument[] @relation("DocumentRevisions")

  // Training linkage (docs can be associated with training courses)
  trainingCourses     TrainingCourse[] @relation("DocumentTrainingCourses")

  // Metadata
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  createdBy           User     @relation("DocumentCreatedBy", fields: [createdById], references: [id])
  createdById         String

  @@index([documentNumber])
  @@index([documentType])
  @@index([status])
  @@index([approvedById])
  @@index([reviewFrequency])
  @@index([nextReviewDate])
  @@map("controlled_documents")
}

/// Document Approval - Approval workflow step
model DocumentApproval {
  id                  String   @id @default(cuid())
  document            ControlledDocument @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId          String

  // Approver role and user
  approverRole        String                // e.g., "Quality Manager", "Technical Authority"
  approver            User     @relation(fields: [approverId], references: [id])
  approverId          String

  // Workflow sequencing
  sequence            Int                   // Order in approval chain
  status              ApprovalStatus @default(PENDING)

  // Timeline
  requestedAt         DateTime @default(now())
  reviewedAt          DateTime?
  comments            String?               // Optional approval comments

  // Metadata
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@index([documentId])
  @@index([approverId])
  @@index([status])
  @@map("document_approvals")
}

/// Training Course - Course definition and management
model TrainingCourse {
  id                  String   @id @default(cuid())
  courseNumber        String   @unique     // Course identifier
  courseName          String                // Course title
  description         String?               // Course description

  // Course content
  objectives          String?               // Learning objectives
  duration            Int?                  // Duration in minutes
  courseType          CourseType

  // Course materials
  documents           ControlledDocument[] @relation("DocumentTrainingCourses")
  materials           String?               // Links to videos, presentations, etc.

  // Competency requirements
  requiredForRoles    String[]              // JSON array of required job roles
  competencyTest      CompetencyTest?

  // Status
  isActive            Boolean   @default(true)

  // Training records
  trainingRecords     TrainingRecord[]

  // Metadata
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  createdBy           User     @relation("CourseCreatedBy", fields: [createdById], references: [id])
  createdById         String

  @@index([courseNumber])
  @@index([courseType])
  @@index([isActive])
  @@map("training_courses")
}

/// Competency Test - Test/assessment associated with training
model CompetencyTest {
  id                  String   @id @default(cuid())
  trainingCourse      TrainingCourse @relation(fields: [trainingCourseId], references: [id], onDelete: Cascade)
  trainingCourseId    String   @unique

  testName            String                // Test name
  passingScore        Int                   // Passing percentage (0-100)
  questions           TestQuestion[]

  // Metadata
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@index([trainingCourseId])
  @@map("competency_tests")
}

/// Test Question - Individual question in competency test
model TestQuestion {
  id                  String   @id @default(cuid())
  test                CompetencyTest @relation(fields: [testId], references: [id], onDelete: Cascade)
  testId              String

  questionText        String                // Question content
  questionType        QuestionType
  correctAnswer       String                // Correct answer
  possibleAnswers     String[]              // Array of possible answers for multiple choice
  points              Int      @default(1)  // Points for this question

  // Metadata
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@index([testId])
  @@map("test_questions")
}

/// Training Record - Record of training completion for individual
model TrainingRecord {
  id                  String   @id @default(cuid())
  trainingCourse      TrainingCourse @relation(fields: [trainingCourseId], references: [id])
  trainingCourseId    String

  // Trainee and instructor
  trainee             User     @relation("TrainingRecordTrainee", fields: [traineeId], references: [id])
  traineeId           String
  instructor          User?    @relation("TrainingRecordInstructor", fields: [instructorId], references: [id], onDelete: SetNull)
  instructorId        String?

  // Training details
  trainingDate        DateTime
  completionDate      DateTime?

  // Competency assessment
  testScore           Int?                  // Test percentage score
  passed              Boolean?              // Pass/fail status
  certificationDate   DateTime?             // Date certification was awarded
  expirationDate      DateTime?             // Date certification expires

  // Effectiveness evaluation
  effectivenessScore  Int?                  // 1-5 rating
  effectivenessNotes  String?

  // Documentation
  certificateUrl      String?               // URL to certificate
  notes               String?

  // Metadata
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@index([trainingCourseId])
  @@index([traineeId])
  @@index([trainingDate])
  @@index([expirationDate])
  @@index([passed])
  @@map("training_records")
}

// ============================================================================
// QMS COMPLIANCE FRAMEWORK PHASE 2: AUDIT, CAPA, MANAGEMENT REVIEW, CHANGE
// ============================================================================

/// Audit Type enumeration
enum QMSAuditType {
  PROCESS_AUDIT       // Audit of manufacturing process
  PRODUCT_AUDIT       // Audit of product conformance
  SYSTEM_AUDIT        // Audit of QMS system
  EXTERNAL_AUDIT      // Customer or registrar audit
  SUPPLIER_AUDIT      // Audit of supplier
}

/// Audit Status enumeration
enum QMSAuditStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  REPORT_ISSUED
  CLOSED
  CANCELLED
}

/// Finding Type enumeration
enum QMSFindingType {
  NONCONFORMANCE      // NC - violation of requirement
  OBSERVATION         // OBS - potential issue
  OPPORTUNITY         // OFI - opportunity for improvement
  POSITIVE            // Good practice observed
}

/// Finding Severity enumeration
enum QMSFindingSeverity {
  CRITICAL            // Major nonconformance (cert at risk)
  MAJOR               // Significant issue
  MINOR               // Minor nonconformance
  OBSERVATION         // No NC, just observation
}

/// Finding Status enumeration
enum QMSFindingStatus {
  OPEN
  CORRECTIVE_ACTION_ASSIGNED
  CORRECTIVE_ACTION_IMPLEMENTED
  VERIFIED
  CLOSED
}

/// CAPA Source enumeration
enum QMSCASource {
  INTERNAL_AUDIT
  EXTERNAL_AUDIT
  NCR
  CUSTOMER_COMPLAINT
  SUPPLIER_ISSUE
  MANAGEMENT_REVIEW
  PROCESS_MONITORING
  IMPROVEMENT_OPPORTUNITY
}

/// RCA Method enumeration
enum QMSRCAMethod {
  FIVE_WHY
  FISHBONE
  FAULT_TREE
  PARETO
  EIGHT_D
}

/// CAPA Status enumeration
enum QMSCAStatus {
  OPEN
  IN_PROGRESS
  IMPLEMENTED
  VERIFIED_EFFECTIVE
  VERIFIED_INEFFECTIVE
  CLOSED
  CANCELLED
}

/// Change Type enumeration
enum QMSChangeType {
  DOCUMENT_CHANGE
  PROCESS_CHANGE
  PRODUCT_CHANGE
  SYSTEM_CHANGE
}

/// Change Status enumeration
enum QMSChangeStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
  IMPLEMENTED
  CLOSED
}

/// Internal Audit - Audit planning and execution (ISO 9001 Clause 9.2)
model InternalAudit {
  id                  String   @id @default(cuid())
  auditNumber         String   @unique
  auditTitle          String
  auditType           QMSAuditType
  auditScope          String
  plannedDate         DateTime
  actualDate          DateTime?
  duration            Int?                  // Minutes

  // Team
  leadAuditor         User     @relation("AuditLeadAuditor", fields: [leadAuditorId], references: [id])
  leadAuditorId       String
  auditeeId           String?
  auditee             User?    @relation("Auditee", fields: [auditeeId], references: [id], onDelete: SetNull)
  auditeeDepartment   String?

  // Findings
  findings            AuditFinding[]
  status              QMSAuditStatus @default(PLANNED)

  // Report
  reportUrl           String?
  summary             String?
  closedBy            User?    @relation("AuditClosedBy", fields: [closedById], references: [id], onDelete: SetNull)
  closedById          String?
  closedAt            DateTime?

  // Metadata
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  createdBy           User     @relation("AuditCreatedBy", fields: [createdById], references: [id])
  createdById         String

  @@index([auditNumber])
  @@index([auditType])
  @@index([plannedDate])
  @@index([status])
  @@map("internal_audits")
}

/// Audit Finding - Findings from audit (ISO 9001 Clause 9.2)
model AuditFinding {
  id                  String   @id @default(cuid())
  audit               InternalAudit @relation(fields: [auditId], references: [id], onDelete: Cascade)
  auditId             String

  findingNumber       String
  findingType         QMSFindingType
  clause              String?                // ISO clause reference (e.g., "8.5.1")
  description         String
  objectiveEvidence   String?
  severity            QMSFindingSeverity

  // Corrective action linkage
  correctiveAction    CorrectiveAction? @relation(fields: [correctiveActionId], references: [id], onDelete: SetNull)
  correctiveActionId  String?

  // Verification
  status              QMSFindingStatus @default(OPEN)
  verifiedBy          User?    @relation(fields: [verifiedById], references: [id], onDelete: SetNull)
  verifiedById        String?
  verifiedAt          DateTime?

  // Metadata
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@index([auditId])
  @@index([findingType])
  @@index([severity])
  @@index([status])
  @@map("audit_findings")
}

/// Corrective Action - CAPA management (ISO 9001 Clause 10)
model CorrectiveAction {
  id                  String   @id @default(cuid())
  caNumber            String   @unique
  title               String
  description         String

  // Source
  source              QMSCASource
  sourceReference     String?                // NCR #, Audit #, etc.

  // Root cause analysis
  rootCauseMethod     QMSRCAMethod?
  rootCause           String?

  // Actions
  correctiveAction    String
  preventiveAction    String?

  // Assignment
  assignedTo          User     @relation("CAAssignedTo", fields: [assignedToId], references: [id])
  assignedToId        String

  // Timeline
  targetDate          DateTime
  implementedDate     DateTime?

  // Verification
  verificationMethod  String?
  verifiedBy          User?    @relation("CAVerifiedBy", fields: [verifiedById], references: [id], onDelete: SetNull)
  verifiedById        String?
  verifiedAt          DateTime?
  isEffective         Boolean?

  // Status
  status              QMSCAStatus @default(OPEN)

  // Linkages
  auditFindings       AuditFinding[]
  auditTrail          CorrectiveActionAudit[]
  approvalRequests    CAApprovalRequest[]
  spcViolations       SPCRuleViolation[]

  // Metadata
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  createdBy           User     @relation("CACreatedBy", fields: [createdById], references: [id])
  createdById         String

  @@index([caNumber])
  @@index([source])
  @@index([assignedToId])
  @@index([status])
  @@index([targetDate])
  @@map("corrective_actions")
}

/// CorrectiveAction Audit Trail - Tracks all changes to corrective actions for compliance
model CorrectiveActionAudit {
  id                String   @id @default(cuid())

  // Reference to CA
  correctiveAction  CorrectiveAction @relation(fields: [caId], references: [id], onDelete: Cascade)
  caId              String

  // User and action
  user              User     @relation(fields: [userId], references: [id], onDelete: Restrict)
  userId            String
  action            String   // STATUS_CHANGED, FIELD_MODIFIED, APPROVED, VERIFIED, CREATED, UPDATED

  // Change details
  fieldName         String?  // For FIELD_MODIFIED actions
  previousValue     String?  // JSON string of previous value
  newValue          String?  // JSON string of new value
  notes             String?  // Additional context or comments

  // Metadata
  timestamp         DateTime @default(now())

  @@index([caId])
  @@index([userId])
  @@index([action])
  @@index([timestamp])
  @@map("corrective_action_audits")
}

/// CorrectiveAction Approval Request - Tracks RCA and effectiveness verification approvals
model CAApprovalRequest {
  id              String   @id @default(cuid())
  caId            String
  approvalType    String   // RCA_APPROVAL, EFFECTIVENESS_APPROVAL
  requestedBy     String
  requestedAt     DateTime @default(now())
  approverUserId  String
  status          String   // PENDING, APPROVED, REJECTED
  approvalNotes   String?
  approvedAt      DateTime?
  dueDate         DateTime?
  escalated       Boolean  @default(false)
  escalatedAt     DateTime?

  // Relations
  correctiveAction CorrectiveAction @relation(fields: [caId], references: [id], onDelete: Cascade)
  approver        User             @relation(fields: [approverUserId], references: [id], onDelete: Restrict)
  requester       User             @relation("CAApprovalRequester", fields: [requestedBy], references: [id], onDelete: Restrict)

  @@index([caId])
  @@index([approverUserId])
  @@index([status])
  @@index([dueDate])
  @@map("ca_approval_requests")
}

/// Management Review - Management review sessions (ISO 9001 Clause 9.3)
model ManagementReview {
  id                  String   @id @default(cuid())
  reviewNumber        String   @unique
  reviewDate          DateTime

  // Chairperson
  chairperson         User     @relation("ReviewChairperson", fields: [chairpersonId], references: [id])
  chairpersonId       String

  // Details
  inputsDiscussed     String?                // Structured inputs (JSON)
  decisions           String?
  resourceNeeds       String?
  minutes             String?
  minutesUrl          String?

  // Actions
  actionItems         ManagementReviewAction[]

  // Status
  status              String   @default("SCHEDULED")  // SCHEDULED, IN_PROGRESS, COMPLETED, CLOSED

  // Metadata
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  createdBy           User     @relation("ReviewCreatedBy", fields: [createdById], references: [id])
  createdById         String

  @@index([reviewNumber])
  @@index([reviewDate])
  @@map("management_reviews")
}

/// Management Review Action - Action items from management review
model ManagementReviewAction {
  id                  String   @id @default(cuid())
  review              ManagementReview @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId            String

  actionDescription   String
  assignedTo          User?    @relation(fields: [assignedToId], references: [id], onDelete: SetNull)
  assignedToId        String?

  dueDate             DateTime?
  completedDate       DateTime?
  status              String   @default("OPEN")  // OPEN, IN_PROGRESS, COMPLETED

  notes               String?

  // Metadata
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@index([reviewId])
  @@index([assignedToId])
  @@index([status])
  @@map("management_review_actions")
}

/// Change Request - Change management (AS9100D Clause 8.5.6)
model ChangeRequest {
  id                  String   @id @default(cuid())
  changeNumber        String   @unique
  title               String
  description         String

  // Change type
  changeType          QMSChangeType

  // Details
  affectedParts       String[]
  reason              String
  benefits            String?
  risks               String?
  impactAssessment    String?
  customerNotificationRequired Boolean @default(false)

  // Implementation
  implementationPlan  String?
  implementationDate  DateTime?

  // Status
  status              QMSChangeStatus @default(DRAFT)

  // Approval
  approvedBy          User?    @relation("ChangeApprovedBy", fields: [approvedById], references: [id], onDelete: SetNull)
  approvedById        String?
  approvedAt          DateTime?

  // Metadata
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  createdBy           User     @relation("ChangeCreatedBy", fields: [createdById], references: [id])
  createdById         String

  @@index([changeNumber])
  @@index([changeType])
  @@index([status])
  @@map("change_requests")
}

/// API Version - Manages API versioning and backward compatibility
model ApiVersion {
  id                  String   @id @default(cuid())
  version             String   @unique // e.g., v1, v2
  semver              String   // e.g., 1.0.0, 2.1.5
  releaseDate         DateTime
  status              String   @default("BETA") // BETA, CURRENT, MAINTENANCE, DEPRECATED, SUNSET

  // Support timeline
  maintenanceUntil    DateTime?
  deprecatedAt        DateTime?
  sunsetDate          DateTime?

  // Metadata & Links
  changelogUrl        String?
  migrationGuideUrl   String?
  documentationUrl    String?

  // Relationships
  breakingChanges     ApiBreakingChange[]
  deprecations        ApiDeprecation[]
  usageStats          ApiUsageByVersion[]

  // Timestamps
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@index([status])
  @@index([releaseDate])
  @@index([sunsetDate])
  @@map("api_versions")
}

/// API Breaking Change - Tracks breaking changes between versions
model ApiBreakingChange {
  id                  String   @id @default(cuid())
  version             ApiVersion @relation(fields: [versionId], references: [id], onDelete: Cascade)
  versionId           String

  fromVersion         String // e.g., v1
  toVersion           String // e.g., v2
  changeType          String // ENDPOINT_REMOVED, FIELD_REMOVED, FIELD_TYPE_CHANGED, etc.

  // What changed
  endpoint            String?
  field               String?
  description         String

  // Migration help
  before              Json? // Example before
  after               Json? // Example after
  migrationSteps      Json? // Array of migration steps
  migrationGuideUrl   String?

  // Timeline
  announcedAt         DateTime
  effectiveDate       DateTime

  // Metadata
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@index([versionId])
  @@index([fromVersion])
  @@index([toVersion])
  @@index([changeType])
  @@map("api_breaking_changes")
}

/// API Deprecation - Tracks deprecated features
model ApiDeprecation {
  id                  String   @id @default(cuid())
  version             ApiVersion @relation(fields: [versionId], references: [id], onDelete: Cascade)
  versionId           String

  feature             String // endpoint or field being deprecated
  deprecatedAt        DateTime
  sunsetDate          DateTime

  // Replacement
  replacement         String? // new endpoint/field
  migrationGuideUrl   String?

  // Communication
  affectedAccounts    Int @default(0)
  notificationsSent   Int @default(0)

  // Impact
  severity            String @default("medium") // low, medium, high
  description         String

  // Metadata
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@index([versionId])
  @@index([feature])
  @@index([sunsetDate])
  @@map("api_deprecations")
}

/// API Usage by Version - Analytics for API version adoption
model ApiUsageByVersion {
  id                  String   @id @default(cuid())
  version             ApiVersion @relation(fields: [versionId], references: [id], onDelete: Cascade)
  versionId           String

  apiKey              ApiKey? @relation(fields: [apiKeyId], references: [id], onDelete: SetNull)
  apiKeyId            String?

  // Usage stats
  requestCount        Int @default(0)
  lastRequestAt       DateTime?
  failureCount        Int @default(0)
  lastFailureAt       DateTime?

  // Tracking
  date                DateTime // Date these stats are for

  // Metadata
  clientName          String?
  integrationName     String?

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@index([versionId])
  @@index([apiKeyId])
  @@index([date])
  @@unique([versionId, apiKeyId, date])
  @@map("api_usage_by_version")
}

/// API Changelog - Published changelog entries
model ApiChangelog {
  id                  String   @id @default(cuid())
  version             String   // e.g., 2.0.0
  releaseDate         DateTime
  category            String   // breaking, feature, deprecation, fix, security

  // Content
  title               String
  description         String
  endpoint            String?
  field               String?

  // Migration info
  migrationGuide      String?
  alternativeFeature  String?

  // Impact
  severity            String? // low, medium, high
  affectedApiKeys     Int?

  // Metadata
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@index([version])
  @@index([category])
  @@index([releaseDate])
  @@map("api_changelog")
}

/// Captured API Call - For compatibility testing
model CapturedApiCall {
  id                  String   @id @default(cuid())
  apiKey              ApiKey @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)
  apiKeyId            String

  apiVersion          String

  // Request
  method              String
  endpoint            String
  requestPath         String
  requestHeaders      Json // Record of headers
  requestBody         Json?
  requestQuery        Json?

  // Response
  statusCode          Int
  responseHeaders     Json
  responseBody        Json?

  // Metadata
  timestamp           DateTime @default(now())
  duration            Int // milliseconds
  success             Boolean
  errorMessage        String?

  @@index([apiKeyId])
  @@index([apiVersion])
  @@index([timestamp])
  @@index([method, endpoint])
  @@map("captured_api_calls")
}

/// API Compatibility Test - Test results for version compatibility
model ApiCompatibilityTest {
  id                  String   @id @default(cuid())
  sourceVersion       String // e.g., v1
  targetVersion       String // e.g., v2

  compatible          Boolean

  // Issues
  breakingChanges     Json? // Array of breaking changes found
  deprecatedFeatures  Json? // Array of deprecated features
  unsupportedEndpoints Json? // Array of endpoints
  unsupportedFields   Json? // Array of fields

  // Recommendations
  recommendations     Json? // Array of strings
  estimatedMigrationEffort String? // low, medium, high
  migrationGuideUrl   String?

  // Test details
  testedEndpoints     Int
  compatibleEndpoints Int
  failingEndpoints    Int

  // Metadata
  createdAt           DateTime @default(now())
  expiresAt           DateTime // When test results expire

  @@index([sourceVersion])
  @@index([targetVersion])
  @@index([compatible])
  @@unique([sourceVersion, targetVersion])
  @@map("api_compatibility_tests")
}

// ============================================================================
// PLUGIN & HOOK SYSTEM (Issue #75)
// ============================================================================

// Hook Type Enums
enum HookType {
  WORKFLOW
  UI
  DATA
  INTEGRATION
  NOTIFICATION
}

enum PluginStatus {
  PENDING_APPROVAL
  INSTALLED
  ACTIVE
  DISABLED
  FAILED
  UNINSTALLED
}

enum ExecutionStatus {
  STARTED
  COMPLETED
  FAILED
  TIMEOUT
  REJECTED
}

// Core Plugin Model
model Plugin {
  id                  String          @id @default(cuid())
  pluginId            String          @unique // identifier from manifest
  name                String
  version             String
  description         String?
  author              String?

  // Manifest
  manifest            Json // full manifest.json content

  // Status
  status              PluginStatus    @default(PENDING_APPROVAL)
  isActive            Boolean         @default(false)

  // Installation metadata
  installedAt         DateTime        @default(now())
  installedBy         String

  // Version tracking
  latestVersion       String?
  updateAvailable     Boolean         @default(false)

  // Configuration
  configuration       Json? // plugin-specific settings

  // File storage
  packageUrl          String // path to plugin package

  // API key for plugin SDK calls
  apiKeyId            String?

  // Dependencies and permissions
  dependencies        Json? // {pluginId: version}
  permissions         String[] @default([])

  // Scoping
  siteId              String?
  site                Site? @relation(fields: [siteId], references: [id], onDelete: Cascade)

  // Metadata
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  // Relations
  hooks               PluginHook[]
  executions          PluginExecution[]
  configurations      PluginConfiguration[]
  apiKey              ApiKey? @relation(fields: [apiKeyId], references: [id], onDelete: SetNull)

  @@index([pluginId])
  @@index([status])
  @@index([isActive])
  @@index([siteId])
  @@map("plugins")
}

// Plugin Hook Registration
model PluginHook {
  id                  String          @id @default(cuid())
  pluginId            String

  // Hook metadata
  hookType            HookType
  hookPoint           String // e.g., workOrder.beforeCreate

  // Execution config
  priority            Int             @default(50) // 0-100
  isAsync             Boolean         @default(false)
  timeout             Int             @default(5000) // milliseconds

  // Handler reference
  handlerFunction     String // function name in plugin code

  // Status
  isActive            Boolean         @default(true)
  lastExecutedAt      DateTime?
  executionCount      Int             @default(0)
  errorCount          Int             @default(0)
  lastError           String?

  // Metadata
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  // Relations
  plugin              Plugin          @relation(fields: [pluginId], references: [id], onDelete: Cascade)

  @@unique([pluginId, hookPoint])
  @@index([hookType])
  @@index([hookPoint])
  @@index([priority])
  @@map("plugin_hooks")
}

// Plugin Execution Tracking
model PluginExecution {
  id                  String          @id @default(cuid())
  pluginId            String
  hookPoint           String

  // Execution timeline
  startedAt           DateTime        @default(now())
  completedAt         DateTime?
  duration            Int? // milliseconds

  // Execution result
  status              ExecutionStatus
  errorMessage        String?
  errorStack          String?

  // Context data
  inputData           Json?
  outputData          Json?

  // Request context
  userId              String?
  requestId           String?
  ipAddress           String?

  // Metadata
  createdAt           DateTime        @default(now())

  // Relations
  plugin              Plugin          @relation(fields: [pluginId], references: [id], onDelete: Cascade)

  @@index([pluginId])
  @@index([hookPoint])
  @@index([status])
  @@index([startedAt])
  @@map("plugin_executions")
}

// Plugin Configuration
model PluginConfiguration {
  id                  String          @id @default(cuid())
  pluginId            String

  // Configuration data
  key                 String
  value               Json

  // Versioning
  version             Int             @default(1)
  changedBy           String
  changedAt           DateTime        @default(now())

  // Scoping
  siteId              String?
  companyId           String?

  // Relations
  plugin              Plugin          @relation(fields: [pluginId], references: [id], onDelete: Cascade)

  @@unique([pluginId, key, siteId])
  @@index([pluginId])
  @@index([siteId])
  @@map("plugin_configurations")
}

// Plugin Events (for pub/sub)
model PluginEvent {
  id                  String          @id @default(cuid())

  // Event metadata
  eventType           String // workOrder.created, operation.completed, etc
  eventData           Json // full event payload
  timestamp           DateTime        @default(now())

  // Source context
  sourceUserId        String?
  sourceRequestId     String?

  // Delivery tracking
  subscribers         Json? // [{pluginId, status, deliveredAt}]

  // Metadata
  createdAt           DateTime        @default(now())

  @@index([eventType])
  @@index([timestamp])
  @@map("plugin_events")
}

// Plugin Webhooks
model PluginWebhook {
  id                  String          @id @default(cuid())
  pluginId            String

  // Webhook metadata
  eventType           String // which event types this webhook handles
  webhookUrl          String

  // Security
  secret              String // HMAC secret for signature verification

  // Retry configuration
  maxRetries          Int             @default(3)
  retryBackoff        Int             @default(1000) // milliseconds

  // Status
  isActive            Boolean         @default(true)
  lastTriggeredAt     DateTime?
  successCount        Int             @default(0)
  failureCount        Int             @default(0)

  // Dead letter queue
  failedDeliveries    Json? // array of failed delivery attempts

  // Metadata
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  @@index([pluginId])
  @@index([eventType])
  @@index([isActive])
  @@map("plugin_webhooks")
}

// ============================================================================
// PLUGIN REGISTRY SYSTEM (Issue #79)
// ============================================================================

// Plugin Registry Types
enum PluginRegistryType {
  ENTERPRISE   // Centralized enterprise registry
  SITE         // Local site-specific registry
  DEVELOPER    // For plugin development
}

// Plugin Package Status
enum PluginPackageStatus {
  PENDING_REVIEW   // Submitted, awaiting review
  IN_REVIEW        // Actively being reviewed
  APPROVED         // Available for installation
  REJECTED         // Not approved
  DEPRECATED       // Older version, newer available
  REVOKED          // Security issue, must uninstall
}

// Plugin Installation Status
enum PluginInstallationStatus {
  INSTALLING      // Installation in progress
  INSTALLED       // Ready to activate
  ACTIVE          // Running
  INACTIVE        // Temporarily inactive
  FAILED          // Installation failed
  UNINSTALLING    // Uninstall in progress
  UNINSTALLED     // Removed
}

// License Type
enum PluginLicenseType {
  FREE        // No license required
  TRIAL       // Temporary trial license
  SITE        // Per-site license
  ENTERPRISE  // All sites license
  DEVELOPER   // Development only
}

// Deployment Type
enum PluginDeploymentType {
  INSTALL      // New installation
  UPGRADE      // Version upgrade
  ROLLBACK     // Rollback to previous
  UNINSTALL    // Removal
}

// Deployment Status
enum PluginDeploymentStatus {
  SCHEDULED        // Waiting to execute
  IN_PROGRESS      // Currently deploying
  COMPLETED        // Successful
  PARTIALLY_FAILED // Some sites failed
  FAILED           // All failed
  ROLLED_BACK      // Rolled back
}

// Plugin Registry (Central or Site-level)
model PluginRegistry {
  id                String                @id @default(cuid())
  type              PluginRegistryType
  name              String

  // Registry details
  storageUrl        String                // S3 bucket, Azure blob, MinIO endpoint
  storageBucket     String?               // Bucket/container name
  isDefault         Boolean               @default(false)

  // Access control
  isPublic          Boolean               @default(false)
  organizationId    String?               // For enterprise registries
  enterpriseId      String?
  siteId            String?               // For site registries

  // Status
  isActive          Boolean               @default(true)

  // Metadata
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt

  // Relations
  packages          PluginPackage[]

  @@index([type])
  @@index([organizationId])
  @@index([enterpriseId])
  @@index([siteId])
  @@index([isActive])
  @@map("plugin_registries")
}

// Plugin Package (specific version in registry)
model PluginPackage {
  id                String                @id @default(cuid())
  registryId        String

  // Package metadata
  pluginId          String                // Unique plugin identifier (e.g., "supplier-risk-analyzer")
  name              String
  version           String                // Semantic version (1.2.3)
  description       String?
  author            String
  license           String

  // Manifest (stored as JSON)
  manifest          Json                  // Full plugin manifest.json

  // Storage
  packageUrl        String                // URL to .mpk file
  packageSize       Int                   // bytes
  checksum          String                // SHA-256 hash

  // Compatibility
  apiVersion        String                // Plugin API version
  mesVersion        String                // MES version range (e.g., ">=1.5.0")

  // Permissions
  permissions       String[]              // Array of required permissions

  // Dependencies
  dependencies      Json?                 // {"pluginId": "version", ...}

  // Status
  status            PluginPackageStatus   @default(PENDING_REVIEW)
  approvedBy        String?               // User who approved
  approvedAt        DateTime?
  rejectionReason   String?               // Why rejected/revoked
  revokedAt         DateTime?

  // Statistics
  downloadCount     Int                   @default(0)
  installCount      Int                   @default(0)

  // Metadata
  uploadedBy        String                // User who uploaded
  uploadedAt        DateTime              @default(now())
  updatedAt         DateTime              @updatedAt

  // Relations
  registry          PluginRegistry        @relation(fields: [registryId], references: [id], onDelete: Cascade)
  installations     PluginInstallation[]
  reviews           PluginReview[]
  licenses          PluginLicense[]
  deployments       PluginDeployment[]

  @@unique([registryId, pluginId, version])
  @@index([pluginId])
  @@index([status])
  @@index([uploadedAt])
  @@index([installCount])
  @@map("plugin_packages")
}

// Plugin Installation (per site)
model PluginInstallation {
  id                String                @id @default(cuid())
  packageId         String
  siteId            String

  // Installation details
  installedVersion  String                // Version installed
  installedAt       DateTime              @default(now())
  installedBy       String                // User who installed

  // Status
  status            PluginInstallationStatus @default(INSTALLED)
  activatedAt       DateTime?
  deactivatedAt     DateTime?

  // Configuration (stored as JSON)
  configuration     Json?                 // Plugin configuration for this installation

  // Health
  errorCount        Int                   @default(0)
  lastErrorAt       DateTime?
  lastHealthCheck   DateTime?
  lastErrorMessage  String?

  // License
  licenseKey        String?
  licenseExpires    DateTime?

  // Metadata
  updatedAt         DateTime              @updatedAt

  // Relations
  package           PluginPackage         @relation(fields: [packageId], references: [id], onDelete: Cascade)
  site              Site                  @relation(fields: [siteId], references: [id], onDelete: Cascade)
  healthLogs        PluginHealthLog[]

  @@unique([packageId, siteId])
  @@index([siteId])
  @@index([status])
  @@index([licenseExpires])
  @@map("plugin_installations")
}

// Plugin Health Logs (for monitoring)
model PluginHealthLog {
  id                String                @id @default(cuid())
  installationId    String

  // Health metrics
  errorCount        Int                   @default(0)
  warningCount      Int                   @default(0)
  avgExecutionTime  Int?                  // milliseconds (average)
  memoryUsage       Int?                  // MB
  cpuUsage          Decimal?              // percentage (0-100)

  // Timestamp
  recordedAt        DateTime              @default(now())

  // Relations
  installation      PluginInstallation    @relation(fields: [installationId], references: [id], onDelete: Cascade)

  @@index([installationId])
  @@index([recordedAt])
  @@map("plugin_health_logs")
}

// Plugin License
model PluginLicense {
  id                String                @id @default(cuid())
  packageId         String

  // License details
  licenseKey        String                @unique
  licenseType       PluginLicenseType

  // Scope
  organizationId    String?
  enterpriseId      String?
  siteId            String?

  // Validity
  issuedAt          DateTime              @default(now())
  expiresAt         DateTime?
  isActive          Boolean               @default(true)

  // Limits
  maxInstallations  Int?                  // Null = unlimited
  currentInstallations Int @default(0)

  // Metadata
  issuedBy          String
  notes             String?
  updatedAt         DateTime              @updatedAt

  // Relations
  package           PluginPackage         @relation(fields: [packageId], references: [id], onDelete: Cascade)

  @@index([packageId])
  @@index([licenseKey])
  @@index([expiresAt])
  @@index([isActive])
  @@map("plugin_licenses")
}

// Plugin Review (internal usage ratings and comments)
model PluginReview {
  id                String                @id @default(cuid())
  packageId         String

  // Review details
  rating            Int                   // 1-5 stars
  comment           String?

  // Reviewer
  reviewerId        String
  reviewerName      String
  siteId            String

  // Approval (for internal vetting)
  isApproved        Boolean               @default(false)

  // Metadata
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt

  // Relations
  package           PluginPackage         @relation(fields: [packageId], references: [id], onDelete: Cascade)

  @@index([packageId])
  @@index([siteId])
  @@index([rating])
  @@map("plugin_reviews")
}

// Plugin Deployment (multi-site deployment tracking)
model PluginDeployment {
  id                String                @id @default(cuid())
  packageId         String

  // Deployment details
  deploymentType    PluginDeploymentType
  targetSites       String[]              // array of site IDs

  // Schedule
  scheduledFor      DateTime?
  startedAt         DateTime?
  completedAt       DateTime?

  // Status
  status            PluginDeploymentStatus @default(SCHEDULED)
  successCount      Int                   @default(0)
  failureCount      Int                   @default(0)

  // Rollback
  canRollback       Boolean               @default(true)
  rolledBackAt      DateTime?
  rollbackReason    String?

  // Metadata
  initiatedBy       String
  notes             String?
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt

  // Relations
  package           PluginPackage         @relation(fields: [packageId], references: [id], onDelete: Cascade)

  @@index([packageId])
  @@index([status])
  @@index([scheduledFor])
  @@index([createdAt])
  @@map("plugin_deployments")
}

// Plugin Submission (for plugin developers to submit)
model PluginSubmission {
  id                String                @id @default(cuid())

  // Plugin info
  pluginId          String
  name              String
  version           String
  author            String

  // Submission details
  manifest          Json                  // Plugin manifest
  packageUrl        String
  checksum          String

  // Submission state
  submittedBy       String
  submittedAt       DateTime              @default(now())
  reviewNotes       String?

  // Metadata
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt

  @@index([pluginId])
  @@index([submittedAt])
  @@map("plugin_submissions")
}

// ============================================================================
// STEP AP242 Integration Models (Issue #220)
// ============================================================================

/// Digital Thread Trace - Links CAD models to manufacturing data
model DigitalThreadTrace {
  id                            String    @id @default(cuid())

  // CAD Model Reference
  cadModelUuid                  String                                    // Source STEP/CAD model
  pmiFeatureId                  String                                    // PMI feature in CAD

  // Manufacturing Data
  partId                        String
  part                          Part      @relation(fields: [partId], references: [id], onDelete: Cascade)

  // Operation Relationship
  operationId                   String?                                     // Associated operation if any
  operation                     Operation? @relation("OperationDigitalThreads", fields: [operationId], references: [id], onDelete: SetNull)

  // Quality Characteristic Relationship
  qualityCharacteristicId       String?                                     // Associated quality check if any
  qualityCharacteristic         QualityCharacteristic? @relation("CharacteristicDigitalThreads", fields: [qualityCharacteristicId], references: [id], onDelete: SetNull)

  // Measurements and Comparison
  measurementData               Json?                                     // {key: value} measurement results
  asBuiltNominal                Float?                                    // Design value from CAD
  asBuiltActual                 Float?                                    // Measured value
  asBuiltDeviation              Float?                                    // Deviation from design
  withinTolerance               Boolean?                                  // Pass/fail

  // Traceability
  createdAt                     DateTime  @default(now())
  updatedAt                     DateTime  @updatedAt
  createdBy                     String?                                   // User who created trace
  verifiedBy                    String?                                   // User who verified
  verifiedAt                    DateTime?

  // Indexes
  @@index([cadModelUuid])
  @@index([partId])
  @@index([operationId])
  @@index([qualityCharacteristicId])
  @@index([pmiFeatureId])
  @@map("digital_thread_traces")
}

/// Model View State - Store 3D model view states for operations
model ModelViewState {
  id                            String    @id @default(cuid())

  // Model Reference
  modelUuid                     String                                    // Associated STEP model
  operationId                   String?                                   // Associated operation
  operation                     Operation? @relation(fields: [operationId], references: [id])
  workInstructionId             String?                                   // Associated work instruction
  workInstruction               WorkInstruction? @relation(fields: [workInstructionId], references: [id])

  // View Metadata
  viewName                      String                                    // e.g., "Operation 10 Setup"
  description                   String?

  // Camera Properties
  cameraPositionX               Float
  cameraPositionY               Float
  cameraPositionZ               Float
  cameraTargetX                 Float
  cameraTargetY                 Float
  cameraTargetZ                 Float
  cameraUpX                     Float
  cameraUpY                     Float
  cameraUpZ                     Float
  fov                           Float?    @default(45)                   // Field of view in degrees

  // Visibility and Highlighting
  visibleFeaturesJson           Json?                                     // Array of visible feature IDs
  hiddenFeaturesJson            Json?                                     // Array of hidden feature IDs
  highlightedFeaturesJson       Json?                                     // Array of highlighted feature IDs
  highlightColor                String?   @default("#FF0000")             // Highlight color (hex)

  // Metadata
  createdAt                     DateTime  @default(now())
  updatedAt                     DateTime  @updatedAt

  // Indexes
  @@index([modelUuid])
  @@index([operationId])
  @@index([workInstructionId])
  @@map("model_view_states")
}

/// PLM Integration - Store PLM system connection configurations
model PLMIntegration {
  id                            String    @id @default(cuid())

  // System Information
  systemName                    String                                    // Teamcenter, Windchill, ENOVIA, Aras
  systemVersion                 String?

  // Connection Details
  baseUrl                       String
  apiVersion                    String
  authMethod                    String                                    // oauth, basic, saml, api_key

  // Credentials (encrypted)
  credentialsEncrypted          String                                    // Encrypted credential JSON

  // Configuration
  autoSyncEnabled               Boolean   @default(true)
  syncIntervalMinutes           Int       @default(60)
  fileExportPath                String?

  // Status
  isActive                      Boolean   @default(true)
  lastSyncAt                    DateTime?
  lastError                     String?

  // Metadata
  createdAt                     DateTime  @default(now())
  updatedAt                     DateTime  @updatedAt

  // Indexes
  @@unique([systemName])
  @@map("plm_integrations")
}

/// STEP File Import - Track STEP file imports and their status
model STEPFileImport {
  id                            String    @id @default(cuid())

  // File Information
  fileName                      String
  fileUrl                       String
  fileHash                      String    @unique
  fileSize                      Int

  // Import Details
  stepUuid                      String    @unique                         // Extracted STEP UUID
  cadSystemSource               String?
  cadModelRevision              String?

  // Related Data
  partId                        String?                                   // Linked part if any

  // Import Status
  status                        String                                    // pending, processing, success, failed
  pmiExtracted                  Boolean   @default(false)
  pmiExtractionDate             DateTime?

  // Results
  extractedPMIJson              Json?                                     // Extracted PMI data
  extractionErrors              String[]  @default([])
  extractionWarnings            String[]  @default([])

  // Metadata
  importedAt                    DateTime  @default(now())
  importedBy                    String?
  completedAt                   DateTime?

  // Indexes
  @@index([stepUuid])
  @@index([partId])
  @@index([status])
  @@map("step_file_imports")
}

// ============================================================================
// ETL (Extract, Transform, Load) - Issue #34
// ============================================================================

model DatabaseConnection {
  id                String   @id @default(cuid())
  name              String
  type              String   // 'sqlserver', 'oracle', 'mysql', 'postgresql', 'mariadb'
  host              String
  port              Int
  database          String
  username          String
  encryptedPassword String   // Encrypted with application secret
  ssl               Boolean  @default(false)
  isActive          Boolean  @default(true)
  lastTestedAt      DateTime?
  lastTestSuccess   Boolean?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  createdBy         String?

  etlJobs           ETLJob[]

  @@index([isActive])
  @@index([type])
  @@map("database_connections")
}

model ETLJob {
  id                 String   @id @default(cuid())
  name               String
  description        String?
  sourceConnectionId String
  targetEntityType   String
  extractionConfig   Json     // Extraction query, table, where, etc.
  transformationConfig Json   // Field mappings and transformations
  loadConfig         Json     // Load mode, batch size, error handling
  scheduleConfig     Json?    // Cron schedule
  isActive           Boolean  @default(true)
  lastExecutedAt     DateTime?
  lastWatermark      String?  // For incremental sync
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  createdBy          String?

  sourceConnection   DatabaseConnection @relation(fields: [sourceConnectionId], references: [id])
  executions         ETLJobExecution[]

  @@index([sourceConnectionId])
  @@index([isActive])
  @@index([targetEntityType])
  @@map("etl_jobs")
}

model ETLJobExecution {
  id             String   @id @default(cuid())
  jobId          String
  status         String   // 'PENDING', 'RUNNING', 'COMPLETED', 'FAILED', 'PARTIAL'
  startedAt      DateTime
  completedAt    DateTime?
  duration       Int?     // milliseconds
  extractedRows  Int      @default(0)
  transformedRows Int     @default(0)
  loadedRows     Int      @default(0)
  failedRows     Int      @default(0)
  skippedRows    Int      @default(0)
  lastWatermark  String?  // Watermark after this execution
  errorLog       Json?    // Array of errors
  warningLog     Json?    // Array of warnings

  job            ETLJob   @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([jobId])
  @@index([status])
  @@index([startedAt])
  @@map("etl_job_executions")
}

// ============================================================================
// Traveler Digitization Models (Issue #36)
// ============================================================================

model TravelerTemplate {
  id              String   @id @default(cuid())
  name            String   @unique
  description     String?
  version         Int      @default(1)
  documentType    String   // 'traveler', 'router', 'work_order'
  fields          Json     // Array of FieldDefinition
  matchPatterns   String[] // Patterns to identify template
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  digitizedTravelers DigitizedTraveler[]

  @@index([documentType])
  @@map("traveler_templates")
}

model DigitizedTraveler {
  id                    String   @id @default(cuid())

  // Source document info
  sourceFileName        String?
  sourceUploadedAt      DateTime?
  processingMethod      String   // 'ocr', 'manual', 'hybrid'

  // Work order info
  workOrderNumber       String   @unique
  partNumber            String
  partDescription       String?
  quantity              Int
  dueDate               DateTime?
  priority              String?  // 'low', 'medium', 'high', 'urgent'

  // Template matching
  templateId            String?
  matchConfidence       Float?   // 0-1 confidence score
  template              TravelerTemplate? @relation(fields: [templateId], references: [id])

  // Status and review
  status                String   @default("draft") // 'draft', 'pending_review', 'approved', 'rejected', 'work_order_created'
  reviewerNotes         String?
  confidence            Float    @default(0)
  warnings              String[]
  errors                String[]

  // Review tracking
  reviewedBy            String?
  reviewedAt            DateTime?
  createdBy             String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Work Order Integration (Phase 8)
  workOrderId           String?  // FK to WorkOrder after creation
  workOrderCreatedAt    DateTime?
  conversionStatus      String   @default("NOT_STARTED") // NOT_STARTED, IN_PROGRESS, COMPLETED, FAILED
  conversionErrors      String[]

  // Related data
  operations            DigitizedOperation[]

  @@index([workOrderNumber])
  @@index([partNumber])
  @@index([status])
  @@index([templateId])
  @@index([createdAt])
  @@index([conversionStatus])
  @@map("digitized_travelers")
}

model DigitizedOperation {
  id                    String   @id @default(cuid())
  travelerId            String

  operationNumber       String
  operationDescription  String?
  workCenter            String?
  quantity              Int?
  startTime             DateTime?
  endTime               DateTime?
  status                String?  // 'pending', 'in_progress', 'completed'
  notes                 String?
  laborHours            Float?
  materialUsed          Json?    // Record of material usage
  tools                 String[]
  qualityNotes          String?

  traveler              DigitizedTraveler @relation(fields: [travelerId], references: [id], onDelete: Cascade)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@index([travelerId])
  @@index([operationNumber])
  @@map("digitized_operations")
}

// ============================================================================
// QUALITY CONFIGURATION & ENFORCEMENT (Issue #44)
// ============================================================================

/// Quality Enforcement Modes
enum QualityEnforcementMode {
  STRICT        // Quality required, must pass
  RECOMMENDED   // Quality recommended, warnings if fail
  OPTIONAL      // No quality requirements
  EXTERNAL      // Trust external quality systems
}

/// Routing-Level Quality Configuration (Issue #44)
/// Allows quality requirement overrides from site defaults
model RoutingQualityConfiguration {
  id                      String   @id @default(cuid())
  routingId               String   @unique

  // Override flags (null = inherit from site)
  qualityEnforcementMode  QualityEnforcementMode?
  enforceInspectionPass   Boolean?
  requireElectronicSig    Boolean?

  // Critical operation flags
  isCriticalProcess       Boolean  @default(false)  // Aerospace, medical, etc.
  regulatoryRequirement   String?  // "FDA", "AS9100", "ISO13485"

  // Justification
  overrideReason          String?
  approvedBy              String?
  approvedAt              DateTime?

  // Metadata
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  createdBy               String

  // Relations
  routing                 Routing  @relation("RoutingQualityConfig", fields: [routingId], references: [id], onDelete: Cascade)

  @@index([routingId])
  @@map("routing_quality_configurations")
}

/// Operation-Level Quality Configuration (Issue #44)
/// Allows operation-specific quality requirement overrides
model OperationQualityConfiguration {
  id                      String   @id @default(cuid())
  operationId             String   @unique

  // Quality requirements
  qualityRequired         Boolean  @default(true)
  inspectionType          String?  // "RECEIVING", "IN_PROCESS", "FINAL", "FIRST_ARTICLE"
  sampleSize              Int?     // Required sample size
  autoFailOnDefect        Boolean  @default(false)  // Auto-fail if any defect found?

  // Signature requirements
  requireOperatorSig      Boolean  @default(false)
  requireQualitySig       Boolean  @default(false)
  requireEngineerSig      Boolean  @default(false)

  // External quality
  acceptExternalQuality   Boolean  @default(false)

  // Metadata
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  createdBy               String

  // Relations
  operation               Operation @relation("OperationQualityConfig", fields: [operationId], references: [id], onDelete: Cascade)

  @@index([operationId])
  @@map("operation_quality_configurations")
}

/// NCR Disposition Rules (Issue #44)
/// Configurable rules for allowed NCR dispositions per severity level
model NCRDispositionRule {
  id                String   @id @default(cuid())
  severity          NCRSeverity
  allowedDisposition String[]  // Array of allowed disposition values
  requiresApproval  Boolean  @default(true)
  approvalLevel     String?  // "SUPERVISOR", "QUALITY_MANAGER", "ENGINEER"
  isActive          Boolean  @default(true)

  // Site-specific rules
  siteId            String?
  site              Site?    @relation("NCRDispositionRules", fields: [siteId], references: [id], onDelete: Cascade)

  // Metadata
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  createdBy         String

  @@index([severity])
  @@index([siteId])
  @@map("ncr_disposition_rules")
}

/// Quality Inspection Enhancement Fields (Issue #44)
/// NOTE: These fields are added to the existing QualityInspection model
/// via Prisma migration. See schema modifications below.

/// Electronic Signature Configuration (Issue #44)
model ElectronicSignatureRequirement {
  id                String   @id @default(cuid())
  actionType        String   // "QUALITY_INSPECTION", "NCR_DISPOSITION", "OPERATION_COMPLETION"
  requiresSignature Boolean  @default(false)
  signatureLevel    String?  // "OPERATOR", "SUPERVISOR", "QUALITY_MANAGER"

  // Site-specific configuration
  siteId            String?
  site              Site?    @relation("ElectronicSignatureRequirements", fields: [siteId], references: [id], onDelete: Cascade)

  // Metadata
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  createdBy         String

  @@unique([actionType, siteId])
  @@index([siteId])
  @@map("electronic_signature_requirements")
}

/// Batch Job Management (Issue #36 Phase 7)
/// Tracks batch processing jobs for multiple document uploads
model BatchJob {
  id                    String   @id @default(cuid())
  jobId                 String   @unique // Human-readable job identifier

  // File and processing info
  fileCount             Int      @default(0)
  processedCount        Int      @default(0)
  successCount          Int      @default(0)
  failureCount          Int      @default(0)
  partialCount          Int      @default(0)

  // Status tracking
  status                String   @default("PENDING") // PENDING, IN_PROGRESS, COMPLETED, FAILED, CANCELLED
  progress              Int      @default(0) // 0-100 percentage

  // Configuration
  autoApproval          Boolean  @default(false)
  autoApprovalThreshold Float    @default(0.9)
  templateIds           String[]

  // Results
  travelersCreated      String[]
  errors                String[]

  // Audit info
  createdBy             String?
  createdAt             DateTime @default(now())
  startedAt             DateTime?
  completedAt           DateTime?

  // Relations
  files                 BatchJobFile[]

  @@index([jobId])
  @@index([status])
  @@index([createdAt])
  @@map("batch_jobs")
}

model BatchJobFile {
  id                    String   @id @default(cuid())

  // Relationship
  batchJobId            String
  batchJob              BatchJob @relation(fields: [batchJobId], references: [id], onDelete: Cascade)

  // File info
  fileName              String
  fileSize              Int?
  fileHash              String?  // For deduplication

  // Processing status
  status                String   @default("PENDING") // PENDING, IN_PROGRESS, COMPLETED, FAILED, SKIPPED

  // Results
  travelerId            String?  // Reference to created DigitizedTraveler
  processingMethod      String?  // 'ocr', 'manual', 'hybrid'
  confidence            Float?

  // Error tracking
  errors                String[]
  warnings              String[]

  // Timestamps
  uploadedAt            DateTime @default(now())
  processedAt           DateTime?

  @@index([batchJobId])
  @@index([status])
  @@index([fileName])
  @@map("batch_job_files")
}

// ============================================================================
// Data Collection Forms (Issue #45 - Phase 2)
// ============================================================================

/// Data collection form definition for routing operations
/// Forms are configured per routing operation and used to collect data
/// during work instruction execution on the shop floor
model DataCollectionForm {
  id                    String   @id @default(cuid())
  routingOperationId    String
  formName              String
  description           String?
  version               String   @default("1.0.0")

  // Field definitions stored as JSON array
  fields                Json     // Array of DataCollectionField objects

  // Configuration
  requiredForCompletion Boolean  @default(false)
  displayOrder          Int      @default(0)
  isActive              Boolean  @default(true)

  // Metadata
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  createdById           String

  // Relations
  routingOperation      RoutingOperation        @relation("DataCollectionForms", fields: [routingOperationId], references: [id], onDelete: Cascade)
  createdBy             User                    @relation("DataCollectionFormCreated", fields: [createdById], references: [id])
  submissions           DataCollectionSubmission[]

  @@unique([routingOperationId, formName])
  @@index([routingOperationId])
  @@index([isActive])
  @@index([createdAt])
  @@map("data_collection_forms")
}

/// Data collection submission - actual data collected by operators
model DataCollectionSubmission {
  id                     String   @id @default(cuid())
  workOrderOperationId   String
  formId                 String

  // Collected data stored as key-value pairs
  // Keys are fieldId from form, values are collected data
  data                   Json

  // Validation status
  validationStatus       String   @default("PENDING")  // PENDING, VALID, INVALID, WARNING
  validationErrors       Json?    // Array of validation errors if INVALID

  // Submission context
  submittedBy            String
  submittedAt            DateTime @default(now())

  // Device and location tracking
  deviceInfo             String?  // Device ID or user-agent for tablets
  locationCode           String?  // Shop floor location/work station

  // Offline sync tracking
  offlineSubmitted       Boolean  @default(false)
  syncedAt               DateTime?
  syncStatus             String   @default("SYNCED")  // SYNCED, PENDING, FAILED

  // Metadata
  notes                  String?
  ipAddress              String?
  userAgent              String?

  // Relations
  workOrderOperation     WorkOrderOperation      @relation("DataCollectionSubmissions", fields: [workOrderOperationId], references: [id], onDelete: Cascade)
  form                   DataCollectionForm      @relation(fields: [formId], references: [id], onDelete: Restrict)
  submittedByUser        User                    @relation("DataCollectionSubmissionCreated", fields: [submittedBy], references: [id])

  @@index([workOrderOperationId])
  @@index([formId])
  @@index([submittedAt])
  @@index([submittedBy])
  @@index([validationStatus])
  @@index([syncStatus])
  @@map("data_collection_submissions")
}

/// Work instruction view tracking
/// Tracks when operators view work instructions for analytics
model WorkInstructionView {
  id                      String   @id @default(cuid())
  workInstructionId       String
  workOrderOperationId    String?

  // Who viewed and when
  viewedBy                String
  viewedAt                DateTime @default(now())

  // Viewing duration
  viewDuration            Int?     // seconds

  // Steps viewed (array of step IDs)
  stepsViewed             Json?    // Array of step numbers viewed

  // Device information
  deviceType              String?  // TABLET, DESKTOP, MOBILE
  deviceId                String?

  // Relations
  workInstruction         WorkInstruction         @relation("WorkInstructionViewTracking", fields: [workInstructionId], references: [id], onDelete: Cascade)
  workOrderOperation      WorkOrderOperation?     @relation("WorkOrderOperationViews", fields: [workOrderOperationId], references: [id], onDelete: SetNull)
  viewer                  User                    @relation("UserWorkInstructionViews", fields: [viewedBy], references: [id])

  @@index([workInstructionId])
  @@index([viewedAt])
  @@index([viewedBy])
  @@map("work_instruction_views")
}

// ============================================================================
// Enums for Data Collection
// ============================================================================

enum DataCollectionFieldType {
  NUMBER
  TEXT
  BOOLEAN
  SELECT
  MULTISELECT
  DATE
  TIME
  DATETIME
  FILE
  SIGNATURE
  TEXTAREA
}

enum DataCollectionValidationType {
  NONE
  REQUIRED
  MIN_MAX
  PATTERN
  CUSTOM
}

// ============================================================================
// Enums for OSP (Outside Processing/Farmout) Operations
// ============================================================================

enum OSPOperationStatus {
  PENDING_SHIPMENT      // Waiting to be shipped to supplier
  SHIPPED               // Shipped to supplier, in transit
  AT_SUPPLIER           // Received by supplier, waiting to be processed
  IN_PROGRESS           // Actively being processed by supplier
  INSPECTION            // Supplier processing complete, awaiting inspection
  RECEIVED              // Received back at our facility, in inspection queue
  ACCEPTED              // Inspection passed, accepted into inventory
  REJECTED              // Inspection failed, requires return/rework
  CANCELLED             // OSP operation cancelled
}

enum OSPShipmentType {
  TO_SUPPLIER           // Sending parts TO external supplier
  FROM_SUPPLIER         // Receiving parts FROM external supplier
  SUPPLIER_TO_SUPPLIER  // Parts moving between multiple suppliers
}

enum OSPShipmentStatus {
  DRAFT                 // Shipment planned but not yet released
  RELEASED              // Ready to ship
  PICKED                // Items picked and staged for shipping
  SHIPPED               // Items shipped, in transit
  IN_TRANSIT            // Confirmed in transit
  DELIVERED             // Delivered to recipient
  RECEIVED              // Received and verified at destination
  CANCELLED             // Shipment cancelled
}

enum SupplierMetricType {
  MONTHLY               // Monthly performance summary
  QUARTERLY             // Quarterly performance summary
  ANNUAL                // Annual performance summary
}

// ============================================================================
// CAPA (Corrective & Preventive Action) System Enums (Issue #56)
// ============================================================================

enum CapaStatus {
  DRAFT                 // Initial creation, not yet planned
  PLANNED               // Reviewed and ready for execution
  IN_PROGRESS           // Actions are being executed
  PENDING_VERIFICATION  // Awaiting effectiveness verification
  VERIFIED_EFFECTIVE    // Verified as effective
  VERIFIED_INEFFECTIVE  // Verification failed, requires replanning
  CLOSED                // Completed and archived
  CANCELLED             // Cancelled before completion
}

enum CapaRiskLevel {
  LOW                   // Low impact, minimal risk
  MEDIUM                // Moderate impact and risk
  HIGH                  // High impact, significant risk
  CRITICAL              // Critical impact, severe risk
}

enum CapaActionType {
  IMMEDIATE             // Immediate containment action (< 24 hours)
  CORRECTIVE            // Addresses root cause
  PREVENTIVE            // Prevents recurrence or similar issues
  SYSTEMIC              // Organization-wide process change
}

enum CapaActionStatus {
  OPEN                  // Not yet started
  IN_PROGRESS           // Work in progress
  COMPLETED             // Work finished, pending approval
  APPROVED              // Approved by authority
  OVERDUE               // Past due date without completion
  CANCELLED             // Cancelled before completion
}

// ============================================================================
// OSP (Outside Processing/Farmout) Operations Models
// ============================================================================

// OSPCapability: Tracks supplier capabilities and qualifications for specific operations
model OSPCapability {
  id                    String                @id @default(cuid())
  vendorId              String
  operationId           String

  capabilityType        String                // Type of capability (PROCESS, SERVICE, etc.)
  certifications        String[]              // List of required certifications
  minOrderQuantity      Int?
  maxOrderQuantity      Int?
  standardLeadDays      Int                   @default(7)

  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt

  // Relationships
  vendor                Vendor                @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  operation             Operation             @relation(fields: [operationId], references: [id], onDelete: Cascade)

  @@unique([vendorId, operationId])
  @@index([vendorId])
  @@index([operationId])
  @@map("osp_capabilities")
}

// OSPOperation: Core tracking entity for operations sent to suppliers
// Links a manufacturing operation to a supplier with full lifecycle tracking
model OSPOperation {
  id                    String                @id @default(cuid())
  ospNumber             String                @unique               // Auto-generated: OSP-YYYY-#####
  operationId           String
  vendorId              String
  workOrderId           String?               // Optional: Can be linked to a work order

  // Quantities
  quantitySent          Int
  quantityReceived      Int                   @default(0)
  quantityAccepted      Int                   @default(0)
  quantityRejected      Int                   @default(0)

  // Status and dates
  status                OSPOperationStatus    @default(PENDING_SHIPMENT)
  requestedReturnDate   DateTime
  expectedReturnDate    DateTime?
  actualReturnDate      DateTime?

  // Costs (from ERP system)
  estimatedCost         Float?                // From ERP PO
  actualCost            Float?                // From ERP Invoice
  costVariance          Float?                // Calculated: estimatedCost - actualCost

  // Quality requirements
  inspectionRequired    Boolean               @default(false)
  certificationRequired String[]              // Array of certifications required
  notes                 String?               // Special instructions

  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt

  // Relationships
  operation             Operation             @relation(fields: [operationId], references: [id], onDelete: Cascade)
  vendor                Vendor                @relation(fields: [vendorId], references: [id], onDelete: Restrict)
  workOrder             WorkOrder?            @relation(fields: [workOrderId], references: [id], onDelete: SetNull)
  shipments             OSPShipment[]         @relation("OSPOperationShipments")
  inspections           OSPInspection[]       @relation("InspectionRecords")
  metrics               SupplierPerformanceMetric[] @relation("OperationMetrics")

  @@index([operationId])
  @@index([vendorId])
  @@index([status])
  @@index([requestedReturnDate])
  @@index([expectedReturnDate])
  @@map("osp_operations")
}

// OSPShipment: Tracks shipments related to OSP operations
// Can be outbound (to supplier) or inbound (from supplier) or supplier-to-supplier
model OSPShipment {
  id                    String                @id @default(cuid())
  ospOperationId        String
  shipmentType          OSPShipmentType       // TO_SUPPLIER, FROM_SUPPLIER, SUPPLIER_TO_SUPPLIER
  shipmentNumber        String                @unique               // Unique shipment identifier

  // Shipment parties
  sendingVendorId       String                // Who's sending (internal company for TO_SUPPLIER, supplier for FROM_SUPPLIER)
  receivingVendorId     String                // Who's receiving (supplier for TO_SUPPLIER, internal for FROM_SUPPLIER)

  // Shipment details
  quantity              Int
  status                OSPShipmentStatus     @default(DRAFT)

  // Carrier & Tracking
  carrierName           String?
  trackingNumber        String?
  shippingMethod        String?               // Ground, Air, Ocean, etc.

  // Dates
  shipDate              DateTime?
  expectedDeliveryDate  DateTime?
  actualDeliveryDate    DateTime?

  // Documentation
  poNumber              String?               // ERP Purchase Order number (for supplier reference)
  notes                 String?
  attachmentUrls        String[]              // Shipment documents, packing slips, etc.

  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt

  // Relationships
  ospOperation          OSPOperation          @relation("OSPOperationShipments", fields: [ospOperationId], references: [id], onDelete: Cascade)
  outboundSupplier      Vendor                @relation("OutboundSupplier", fields: [sendingVendorId], references: [id], onDelete: Restrict)
  inboundSupplier       Vendor                @relation("InboundSupplier", fields: [receivingVendorId], references: [id], onDelete: Restrict)

  @@index([ospOperationId])
  @@index([shipmentType])
  @@index([status])
  @@index([trackingNumber])
  @@map("osp_shipments")
}

// OSPInspection: Records inspection results for OSP operations when items are received
// Tracks quality assurance data
model OSPInspection {
  id                    String                @id @default(cuid())
  ospOperationId        String

  inspectionNumber      String                @unique
  inspectionDate        DateTime              @default(now())

  // Quantity inspected
  quantityInspected     Int
  quantityAccepted      Int
  quantityRejected      Int

  // Results
  status                String                @default("IN_PROGRESS") // IN_PROGRESS, PASSED, FAILED, CONDITIONAL
  defectsFound          String?               // Description of defects
  notes                 String?

  // Approvals
  inspectorId           String?
  approvedBy            String?
  approvedAt            DateTime?

  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt

  // Relationships
  ospOperation          OSPOperation          @relation("InspectionRecords", fields: [ospOperationId], references: [id], onDelete: Cascade)
  inspector             User?                 @relation("OSPInspections", fields: [inspectorId], references: [id], onDelete: SetNull)
  approver              User?                 @relation("OSPInspectionApprovals", fields: [approvedBy], references: [id], onDelete: SetNull)

  @@index([ospOperationId])
  @@index([inspectionDate])
  @@map("osp_inspections")
}

// SupplierPerformanceMetric: Tracks supplier performance metrics for OSP operations
// Used for supplier quality/delivery/cost tracking for ERP integration
model SupplierPerformanceMetric {
  id                    String                @id @default(cuid())
  vendorId              String
  ospOperationId        String?               // Can aggregate across operations or be specific

  metricType            SupplierMetricType    @default(MONTHLY)
  periodStart           DateTime
  periodEnd             DateTime

  // On-Time Delivery Metric
  ordersOnTime          Int                   @default(0)
  ordersLate            Int                   @default(0)
  onTimeDeliveryPercent Float?
  averageDeliveryDays   Int?

  // Quality Metric
  itemsShipped          Int                   @default(0)
  itemsAccepted         Int                   @default(0)
  itemsRejected         Int                   @default(0)
  qualityPercent        Float?

  // Cost Metric
  estimatedTotalCost    Float?
  actualTotalCost       Float?
  costVariancePercent   Float?

  // Score
  overallScore          Float?                // 0-100 composite score for supplier ranking

  notes                 String?
  createdAt             DateTime              @default(now())

  // Relationships
  vendor                Vendor                @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  ospOperation          OSPOperation?         @relation("OperationMetrics", fields: [ospOperationId], references: [id], onDelete: SetNull)

  @@unique([vendorId, metricType, periodStart, periodEnd])
  @@index([vendorId])
  @@index([periodStart])
  @@index([periodEnd])
  @@map("supplier_performance_metrics")
}

// ============================================================================
// Quality Analytics Models (Issue #58)
// ============================================================================

/// Quality Analytics Configuration - Site-specific settings for analytics
model QualityConfiguration {
  id                    String   @id @default(cuid())
  siteId                String   @unique
  site                  Site     @relation("QualityAnalyticsConfig", fields: [siteId], references: [id], onDelete: Cascade)

  // Metric thresholds
  ncrRateThreshold      Float?   @default(1.0)    // % NCRs per unit produced
  fypThreshold          Float?   @default(95.0)   // % First Pass Yield minimum
  dpmoThreshold         Float?   @default(10000)  // Defects Per Million Opportunities max
  copqThreshold         Float?   @default(5.0)    // % Cost of Quality max
  scrapRateThreshold    Float?   @default(2.0)    // % Scrap max
  reworkRateThreshold   Float?   @default(3.0)    // % Rework max

  // Alert configuration
  alertEnabled          Boolean  @default(true)
  alertRecipients       String[] // JSON array of user IDs for alerts
  alertThresholdDays    Int      @default(7)     // Days to look back for trends
  spcControlLimit       Float?   @default(3.0)   // SPC sigma limits

  // Reporting configuration
  reportingCurrency     String   @default("USD")
  materialized          Boolean  @default(true)  // Use pre-aggregated metrics
  refreshInterval       Int      @default(3600)  // Seconds between metric refresh

  // Audit trail
  createdBy             String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("quality_configurations")
}

/// Quality Metrics - Aggregated quality metrics by dimension and time period
model QualityMetric {
  id                String   @id @default(cuid())
  siteId            String
  site              Site     @relation("QualityMetrics", fields: [siteId], references: [id], onDelete: Cascade)

  // Metric identification
  metricType        QualityMetricType
  period            String   // "DAY", "WEEK", "MONTH", "QUARTER", "YEAR"
  periodStart       DateTime
  periodEnd         DateTime

  // Dimension grouping - at least one must be set
  defectType        String?
  rootCause         String?
  product           String?
  supplier          String?
  workCenter        String?
  operation         String?
  customer          String?
  severity          NCRSeverity?
  disposition       NCRDisposition?
  detectionPoint    DetectionPoint?

  // Metric values
  value             Float    @default(0.0)
  trend             Float?   // Change from previous period
  targetValue       Float?
  status            String?  // "GREEN", "YELLOW", "RED"

  // Calculations detail
  numerator         Int      @default(0)    // Count or sum for calculation
  denominator       Int      @default(0)    // Total opportunities
  sampleSize        Int      @default(0)

  // Audit trail
  calculatedAt      DateTime @default(now())
  updatedAt         DateTime @updatedAt
  calculatedBy      String?  // System or user ID

  @@index([siteId])
  @@index([metricType])
  @@index([periodStart, periodEnd])
  @@index([defectType])
  @@index([rootCause])
  @@index([product])
  @@unique([siteId, metricType, period, periodStart, defectType, rootCause, product, supplier, workCenter, operation, customer, severity, disposition, detectionPoint])
  @@map("quality_metrics")
}

/// Pareto Analysis - 80/20 analysis for each dimension
model ParetoAnalysis {
  id                String   @id @default(cuid())
  siteId            String
  site              Site     @relation("ParetoAnalysis", fields: [siteId], references: [id], onDelete: Cascade)

  // Analysis configuration
  analysisType      ParetoAnalysisType
  period            String   // "DAY", "WEEK", "MONTH", "QUARTER", "YEAR"
  periodStart       DateTime
  periodEnd         DateTime

  // Analysis results (top items by cumulative impact)
  items             String   // JSON array of {category, count, value, percentage, cumulativePercentage}
  vitalFewCount     Int      // Count of items representing 80%
  totalItems        Int      // Total distinct categories
  totalOccurrences  Int      // Sum of all occurrences
  totalCost         Decimal? @db.Decimal(15, 2)

  // Filter dimensions
  defectType        String?
  severity          NCRSeverity?
  dispositionFilter NCRDisposition?

  // Metadata
  generatedAt       DateTime @default(now())
  generatedBy       String?

  @@index([siteId])
  @@index([analysisType])
  @@index([periodStart])
  @@unique([siteId, analysisType, period, periodStart])
  @@map("pareto_analyses")
}

/// Quality Alerts - System-generated alerts for quality trends and thresholds
model QualityAlert {
  id                String   @id @default(cuid())
  siteId            String
  site              Site     @relation("QualityAlerts", fields: [siteId], references: [id], onDelete: Cascade)

  // Alert identification
  alertType         QualityAlertType
  severity          AlertSeverity
  title             String
  description       String
  context           String?  // JSON object with details

  // Related data
  metricType        QualityMetricType?
  metricId          String?
  ncrId             String?
  ncr               NCR?     @relation("QualityAlerts", fields: [ncrId], references: [id], onDelete: SetNull)

  // Threshold details
  threshold         Float?
  actualValue       Float?
  trend             Float?   // Percentage change

  // Alert lifecycle
  status            String   @default("ACTIVE")  // ACTIVE, ACKNOWLEDGED, RESOLVED, SUPPRESSED
  acknowledgement   String? // JSON with {userId, timestamp, comment}
  resolution        String? // JSON with {userId, timestamp, comment}
  resolvedAt        DateTime?

  // Configuration
  priority          Int      @default(0)
  notificationSent  Boolean  @default(false)
  sentAt            DateTime?

  // Audit trail
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  createdBy         String?

  @@index([siteId])
  @@index([alertType])
  @@index([severity])
  @@index([status])
  @@index([createdAt])
  @@map("quality_alerts")
}

// ============================================================================
// CAPA (Corrective & Preventive Action) System Models (Issue #56)
// ============================================================================

/// CAPA: Root entity for Corrective & Preventive Action tracking
model CAPA {
  id                    String                @id @default(cuid())
  capaNumber            String                @unique               // Auto-generated: CAPA-YYYY-####
  siteId                String
  ncrId                 String?               // Optional link to NCR that triggered this CAPA

  // Basic information
  title                 String
  description           String                @db.Text
  rootCauseAnalysis     String?               @db.Text
  riskLevel             CapaRiskLevel
  status                CapaStatus            @default(DRAFT)

  // Ownership and accountability
  ownerId               String
  createdById           String

  // Dates
  plannedDueDate        DateTime?
  actualCompletionDate  DateTime?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt

  // Cost tracking
  estimatedCost         Decimal?              @db.Decimal(15, 2)
  actualCost            Decimal?              @db.Decimal(15, 2)

  // Status tracking
  requiresReplanning    Boolean               @default(false)
  replannedCount        Int                   @default(0)

  // Relationships
  site                  Site                  @relation("SiteCapas", fields: [siteId], references: [id], onDelete: Cascade)
  owner                 User                  @relation("CapaOwner", fields: [ownerId], references: [id])
  createdBy             User                  @relation("CapaCreatedBy", fields: [createdById], references: [id])
  actions               CapaAction[]
  verifications         CapaVerification[]
  stateHistory          CapaStateHistory[]

  @@index([siteId])
  @@index([status])
  @@index([riskLevel])
  @@index([ownerId])
  @@index([createdAt])
  @@unique([siteId, capaNumber])
  @@map("capas")
}

/// CapaAction: Individual action items within a CAPA
model CapaAction {
  id                    String                @id @default(cuid())
  capaId                String
  actionNumber          Int                   // Sequential within CAPA: 1, 2, 3...

  // Action details
  actionType            CapaActionType
  description           String                @db.Text
  status                CapaActionStatus      @default(OPEN)

  // Ownership
  ownerId               String

  // Dates
  plannedDueDate        DateTime
  completedDate         DateTime?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt

  // Progress and effort
  percentComplete       Int                   @default(0)
  estimatedEffort       String?               // e.g., "40 hours", "2 weeks"
  actualEffort          String?

  // Cost tracking
  estimatedCost         Decimal?              @db.Decimal(15, 2)
  actualCost            Decimal?              @db.Decimal(15, 2)

  // Approval workflow
  approvedAt            DateTime?
  approvedBy            String?

  // Dependencies and notes
  dependsOnActionId     String?               // Action this depends on
  notes                 String?               @db.Text

  // Relationships
  capa                  CAPA                  @relation(fields: [capaId], references: [id], onDelete: Cascade)
  owner                 User                  @relation("ActionOwner", fields: [ownerId], references: [id])
  dependsOnAction       CapaAction?           @relation("ActionDependency", fields: [dependsOnActionId], references: [id])
  dependentActions      CapaAction[]          @relation("ActionDependency")

  @@unique([capaId, actionNumber])
  @@index([capaId])
  @@index([status])
  @@index([ownerId])
  @@index([plannedDueDate])
  @@map("capa_actions")
}

/// CapaVerification: Effectiveness verification records
model CapaVerification {
  id                    String                @id @default(cuid())
  capaId                String
  verificationNumber    Int                   // Sequential: 1, 2, 3...

  // Verification details
  verificationDate      DateTime
  verificationMethod    String                // e.g., "Statistical Process Control", "Audit"
  sampleSize            Int?
  result                String                // VERIFIED_EFFECTIVE, VERIFIED_INEFFECTIVE, INCONCLUSIVE

  // Data
  metrics               Json?                 // Flexible JSON for verification metrics
  verificationNotes     String?               @db.Text

  // If ineffective
  rootCauseOfFailure    String?               @db.Text
  recommendedActions    String?               @db.Text

  // Audit
  verifiedBy            String
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt

  // Relationships
  capa                  CAPA                  @relation(fields: [capaId], references: [id], onDelete: Cascade)
  verifier              User                  @relation(fields: [verifiedBy], references: [id])

  @@unique([capaId, verificationNumber])
  @@index([capaId])
  @@index([result])
  @@index([verificationDate])
  @@map("capa_verifications")
}

/// CapaStateHistory: Audit trail of status changes
model CapaStateHistory {
  id                    String                @id @default(cuid())
  capaId                String

  fromState             String?               // Previous status
  toState               String                // New status
  changeReason          String?               // Why the change was made
  changedBy             String
  changedAt             DateTime              @default(now())

  // Relationships
  capa                  CAPA                  @relation(fields: [capaId], references: [id], onDelete: Cascade)

  @@index([capaId])
  @@index([changedAt])
  @@map("capa_state_history")
}

/// Quality Cost Tracking - Detailed Cost of Quality (CoQ) by PAF model
model QualityCoqTracking {
  id                String   @id @default(cuid())
  siteId            String
  site              Site     @relation("QualityCoqTracking", fields: [siteId], references: [id], onDelete: Cascade)

  // Period tracking
  period            String   // "DAY", "WEEK", "MONTH", "QUARTER", "YEAR"
  periodStart       DateTime
  periodEnd         DateTime

  // PAF (Prevention, Appraisal, Failure) model
  preventionCost    Decimal? @db.Decimal(15, 2)   // Training, prevention measures, quality planning
  appraisalCost     Decimal? @db.Decimal(15, 2)   // Inspection, testing, audits
  internalFailure   Decimal? @db.Decimal(15, 2)   // Scrap, rework, sorting
  externalFailure   Decimal? @db.Decimal(15, 2)   // Returns, warranty, customer complaints

  // Derived metrics
  totalCoq          Decimal? @db.Decimal(15, 2)
  copqPercent       Float?   // % of revenue
  currency          String   @default("USD")

  // Supporting data
  ncrCount          Int      @default(0)
  escapeCount       Int      @default(0)
  capaCount         Int      @default(0)

  // Metadata
  approvedBy        String?
  approvedAt        DateTime?
  calculatedAt      DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([siteId])
  @@index([periodStart])
  @@unique([siteId, period, periodStart])
  @@map("quality_coq_tracking")
}

// ============================================================================
// Material Movement & Logistics Management System (Issue #64)
// ============================================================================

/// Movement Type Configuration - Define how different material can be moved
model MovementType {
  id                    String   @id @default(cuid())
  siteId                String
  code                  String   // MANUAL, FORKLIFT, SHIP_TO_SUPPLIER, etc.
  name                  String
  description           String?

  // Configuration
  requiresApproval      Boolean  @default(false)
  requiresCarrier       Boolean  @default(false)
  requiresPackingList   Boolean  @default(false)
  requiresForklift      Boolean  @default(false)
  autoPrintLabel        Boolean  @default(false)
  defaultCarrier        String?
  estimatedDuration     Int?     // minutes
  trackCost             Boolean  @default(false)

  isActive              Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  site                  Site     @relation("MovementTypes", fields: [siteId], references: [id], onDelete: Cascade)
  movements             MaterialMovement[]

  @@unique([siteId, code])
  @@index([siteId])
  @@map("movement_types")
}

/// Material Movement - Tracks movement of work orders between locations
model MaterialMovement {
  id                    String   @id @default(cuid())
  movementNumber        String   @unique  // auto-generated MOV-2025-001
  movementTypeId        String
  status                MovementStatus   @default(REQUESTED)

  // What is moving
  workOrderIds          Json     // array of work order IDs
  containerIds          Json?    // array of container IDs
  palletIds             Json?    // array of pallet IDs
  quantity              Int?
  weight                Decimal? @db.Decimal(15, 2)
  dimensions            Json?    // {length, width, height}

  // From/To
  fromLocation          String
  toLocation            String
  fromSiteId            String?
  toSiteId              String?
  fromSupplier          String?  // for shipments to/from suppliers
  toSupplier            String?

  // Timing
  requestedAt           DateTime @default(now())
  requestedBy           String
  pickedUpAt            DateTime?
  deliveredAt           DateTime?
  estimatedDeliveryAt   DateTime?

  // Forklift (if applicable)
  forkliftRequestId     String?
  forkliftOperatorId    String?
  forkliftId            String?

  // Shipment (if applicable)
  shipmentId            String?
  carrier               String?
  trackingNumber        String?
  freightCost           Decimal? @db.Decimal(15, 2)

  // Special instructions
  specialInstructions   String?
  priority              MovementPriority @default(NORMAL)

  // Photos/attachments
  attachments           Json?    // array of photo URLs

  // Approval
  approvalRequired      Boolean  @default(false)
  approvedBy            String?
  approvedAt            DateTime?

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  movementType          MovementType     @relation(fields: [movementTypeId], references: [id], onDelete: Restrict)
  forkliftRequest       ForkliftMoveRequest? @relation(fields: [forkliftRequestId], references: [id])
  shipment              Shipment?        @relation(fields: [shipmentId], references: [id])

  @@index([status])
  @@index([movementNumber])
  @@index([fromLocation])
  @@index([toLocation])
  @@index([requestedAt])
  @@index([movementTypeId])
  @@map("material_movements")
}

enum MovementStatus {
  REQUESTED
  APPROVED
  ASSIGNED
  IN_TRANSIT
  DELIVERED
  EXCEPTION
  CANCELLED
}

enum MovementPriority {
  NORMAL
  HIGH
  URGENT
  CRITICAL
}

/// Forklift Move Request - Queue of material movement requests for forklift operators
model ForkliftMoveRequest {
  id                    String   @id @default(cuid())
  requestNumber         String   @unique  // FLR-2025-001
  status                ForkliftRequestStatus @default(PENDING)
  priority              MovementPriority @default(NORMAL)

  // Request details
  fromLocation          String
  toLocation            String
  workOrderIds          Json     // array
  containerIds          Json?
  quantity              Int?
  weight                Decimal? @db.Decimal(15, 2)
  dimensions            Json?
  specialInstructions   String?

  // Assignment
  assignedToForkliftId  String?
  assignedToOperatorId  String?
  assignedAt            DateTime?

  // Execution
  pickedUpAt            DateTime?
  deliveredAt           DateTime?

  // Request tracking
  requestedBy           String
  requestedAt           DateTime @default(now())

  // Issues
  issueReported         String?
  issueReportedAt       DateTime?

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  forklift              Forklift? @relation(fields: [assignedToForkliftId], references: [id])
  operator              User?    @relation("ForkliftOperator", fields: [assignedToOperatorId], references: [id])
  movements             MaterialMovement[]

  @@index([status])
  @@index([priority])
  @@index([requestedAt])
  @@index([assignedToForkliftId])
  @@map("forklift_move_requests")
}

enum ForkliftRequestStatus {
  PENDING
  ASSIGNED
  PICKED_UP
  IN_TRANSIT
  DELIVERED
  ISSUE_REPORTED
  CANCELLED
}

/// Forklift - Fleet management for material handling equipment
model Forklift {
  id                    String   @id @default(cuid())
  siteId                String
  forkliftNumber        String   // FL-001, FL-002
  model                 String?
  type                  ForkliftType
  status                ForkliftStatus  @default(AVAILABLE)

  // Capacity
  maxLoadCapacity       Decimal  @db.Decimal(15, 2) // lbs
  maxLiftHeight         Decimal? @db.Decimal(15, 2) // feet

  // Location
  currentLocation       String?
  currentSiteId         String?

  // Operator
  currentOperatorId     String?

  // Maintenance
  hoursUsed             Decimal  @default(0)
  lastMaintenanceDate   DateTime?
  nextMaintenanceDate   DateTime?

  // Tracking
  gpsDeviceId           String?  // for GPS tracking

  isActive              Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  site                  Site     @relation("Forklifts", fields: [siteId], references: [id], onDelete: Cascade)
  currentOperator       User?    @relation("ForkliftCurrentOperator", fields: [currentOperatorId], references: [id])
  moveRequests          ForkliftMoveRequest[]

  @@unique([siteId, forkliftNumber])
  @@index([siteId])
  @@index([status])
  @@map("forklifts")
}

enum ForkliftType {
  STANDUP
  SITDOWN
  REACH_TRUCK
  ORDER_PICKER
  PALLET_JACK
  TOW_TRACTOR
}

enum ForkliftStatus {
  AVAILABLE
  IN_USE
  MAINTENANCE
  CHARGING
  OUT_OF_SERVICE
}

/// Shipment - Shipping tracking and carrier management
model Shipment {
  id                    String   @id @default(cuid())
  shipmentNumber        String   @unique  // SHIP-2025-001
  shipmentType          ShipmentType
  status                ShipmentStatus  @default(CREATED)

  // Addresses
  fromName              String
  fromAddress           String
  fromCity              String
  fromState             String
  fromZip               String
  fromCountry           String

  toName                String
  toAddress             String
  toCity                String
  toState               String
  toZip                 String
  toCountry             String

  // Carrier
  carrier               String
  serviceLevel          String?  // Ground, 2Day, Overnight
  accountNumber         String?

  // Tracking
  trackingNumber        String?
  trackingUrl           String?

  // Dates
  shipDate              DateTime
  estimatedDeliveryDate DateTime?
  actualDeliveryDate    DateTime?

  // Contents
  workOrderIds          Json
  containerIds          Json?
  palletIds             Json?
  totalWeight           Decimal? @db.Decimal(15, 2)
  totalValue            Decimal? @db.Decimal(15, 2)

  // Costs
  estimatedFreightCost  Decimal? @db.Decimal(15, 2)
  actualFreightCost     Decimal? @db.Decimal(15, 2)

  // Documents
  packingListUrl        String?
  bolUrl                String?  // Bill of Lading
  commercialInvoiceUrl  String?  // for international
  proofOfDeliveryUrl    String?

  // Special handling
  isHazmat              Boolean  @default(false)
  isInternational       Boolean  @default(false)
  requiresSignature     Boolean  @default(false)
  insuranceValue        Decimal? @db.Decimal(15, 2)
  specialInstructions   String?

  // Tracking events
  trackingEvents        Json?    // [{timestamp, location, status, description}]

  createdBy             String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  movements             MaterialMovement[]
  labels                ShippingLabel[]

  @@index([shipmentNumber])
  @@index([status])
  @@index([trackingNumber])
  @@index([createdAt])
  @@map("shipments")
}

enum ShipmentType {
  TO_SUPPLIER
  FROM_SUPPLIER
  SUPPLIER_TO_SUPPLIER
  TO_CUSTOMER
  TO_WAREHOUSE
  INTER_SITE_TRANSFER
  RETURN
}

enum ShipmentStatus {
  CREATED
  LABEL_PRINTED
  PICKED_UP
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  EXCEPTION
  CANCELLED
}

/// Shipping Label - Physical labels for shipments
model ShippingLabel {
  id                    String   @id @default(cuid())
  shipmentId            String
  labelType             LabelType
  labelUrl              String   // file path or URL
  printedAt             DateTime?
  printedBy             String?

  createdAt             DateTime @default(now())

  shipment              Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)

  @@index([shipmentId])
  @@map("shipping_labels")
}

enum LabelType {
  SHIPPING_LABEL
  RETURN_LABEL
  PACKING_LIST
  CUSTOMS_FORM
  HAZMAT_LABEL
}

/// Container - Totes, bins, pallets for material organization
model Container {
  id                    String   @id @default(cuid())
  siteId                String
  containerNumber       String   // unique ID, barcode
  containerType         ContainerType
  status                ContainerStatus @default(AVAILABLE)

  // Attributes
  size                  String?  // S, M, L or dimensions
  weightCapacity        Decimal? @db.Decimal(15, 2)
  rfidTag               String?

  // Current state
  currentLocation       String?
  currentSiteId         String?
  currentWorkOrders     Json?    // array of work order IDs

  // Ownership
  ownerId               String?  // if rented/leased

  isActive              Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  site                  Site     @relation("Containers", fields: [siteId], references: [id], onDelete: Cascade)

  @@unique([siteId, containerNumber])
  @@index([siteId])
  @@index([status])
  @@index([currentLocation])
  @@map("containers")
}

enum ContainerType {
  TOTE
  BIN
  PALLET
  CRATE
  BOX
  DRUM
  BAG
}

enum ContainerStatus {
  AVAILABLE
  IN_USE
  DAMAGED
  LOST
  RETIRED
}

/// Carrier Account - Credentials and configuration for shipping carriers
model CarrierAccount {
  id                    String   @id @default(cuid())
  siteId                String
  carrier               CarrierType
  accountNumber         String
  accountName           String

  // Credentials for API (encrypted)
  apiKey                String?
  apiSecret             String?
  apiEndpoint           String?

  // Preferences
  defaultServiceLevel   String?
  isActive              Boolean  @default(true)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  site                  Site     @relation("CarrierAccounts", fields: [siteId], references: [id], onDelete: Cascade)

  @@unique([siteId, carrier, accountNumber])
  @@index([siteId])
  @@map("carrier_accounts")
}

enum CarrierType {
  UPS
  FEDEX
  USPS
  DHL
  YRC
  OLD_DOMINION
  ESTES
  SAIA
  COURIER
  OTHER
}

// ============================================================================
// TEST CELL & ENGINE ACCEPTANCE TESTING (Issue #233)
// ============================================================================

/// TestCell - Represents a test cell/test station for engine acceptance testing
model TestCell {
  id                      String              @id @default(cuid())
  siteId                  String
  cellName                String              // e.g., "Test Cell #1", "Engine Acceptance Test Bay A"
  cellIdentifier          String              @unique // Unique identifier
  status                  TestCellStatus      @default(OPERATIONAL)
  testType                String              // e.g., "Engine Acceptance", "Performance Validation", "Thermal"

  // Facility Information
  location                String              // Physical location/building
  lastMaintenanceDate     DateTime?           // Last maintenance timestamp
  nextMaintenanceDate     DateTime?           // Scheduled maintenance date
  maintenanceIntervalDays Int?                // Maintenance interval in days

  // DAQ System Integration
  daqSystemType           DAQSystemType       // Type of data acquisition system
  daqSystemId             String?             // DAQ system identifier (vendor-specific)
  daqApiEndpoint          String?             // API endpoint for DAQ system
  daqApiKey               String?             // Encrypted API key for DAQ
  daqStatus               String?             // Current DAQ system status

  // Capacity & Scheduling
  maxConcurrentTests      Int                 @default(1) // Number of simultaneous tests
  estimatedTestDuration   Int?                // Estimated duration in minutes

  // Compliance & Standards
  certificationNumber     String?             // FAA or other certification
  certificationExpiry     DateTime?           // Certification expiry date
  isCompliant             Boolean             @default(true) // FAA AC 43-207 compliance
  complianceNotes         String?

  isActive                Boolean             @default(true)
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt

  site                    Site                @relation("TestCells", fields: [siteId], references: [id], onDelete: Cascade)

  // Relationships
  testRuns                TestRun[]
  schedules               TestCellSchedule[]
  parameters              TestParameter[]

  @@unique([siteId, cellIdentifier])
  @@index([siteId])
  @@index([status])
  @@index([daqSystemType])
  @@map("test_cells")
}

enum TestCellStatus {
  OPERATIONAL
  MAINTENANCE
  OUT_OF_SERVICE
  CALIBRATION_DUE
  UNAVAILABLE
}

enum DAQSystemType {
  NI_LABVIEW              // National Instruments LabVIEW
  SIEMENS_TESTLAB         // Siemens TestLab
  ETAS_INCA               // ETAS INCA
  CUSTOM_SCADA            // Custom SCADA system
  OTHER
}

/// TestRun - Represents a single test execution for engine acceptance
model TestRun {
  id                      String              @id @default(cuid())
  testRunNumber           String              @unique // Auto-generated test number
  buildRecordId           String              // Link to engine build
  testCellId              String              // Which test cell
  status                  TestRunStatus       @default(SCHEDULED)

  // Test Execution Timeline
  scheduledStartTime      DateTime            // When test is scheduled
  actualStartTime         DateTime?           // When test actually started
  actualEndTime           DateTime?           // When test actually ended
  estimatedDuration       Int?                // Estimated duration in minutes
  actualDuration          Int?                // Actual duration in minutes

  // Test Operator
  operatorId              String?             // Operator running the test
  supervisorId            String?             // Supervisor overseeing test

  // Performance Data
  testData                Json?               // Raw test data from DAQ system
  dataCollectionStatus    String?             // Status of data collection
  daqFileReference        String?             // Reference to DAQ system file/ID

  // Test Results
  testPassed              Boolean?            // Overall pass/fail result
  testCompletedSuccessfully Boolean          @default(false) // Test completed without errors
  hasAnomolies            Boolean             @default(false) // Data anomalies detected
  anomolyNotes            String?

  // Acceptance Criteria
  allCriteriaMet          Boolean?            // All acceptance criteria met
  failureReason           String?             // Reason for failure if applicable
  failureCode             String?             // Failure code for categorization

  // Quality & Compliance
  witnessedTest           Boolean             @default(false) // Test witnessed by quality
  qualityApproved         Boolean             @default(false) // Quality approval of test
  qualityApprovedById     String?
  qualityApprovedAt       DateTime?

  faaCompliant            Boolean             @default(false) // FAA AC 43-207 compliant
  complianceNotes         String?

  // Certificate
  testCertificateGenerated Boolean            @default(false)
  testCertificatePath     String?             // Path to generated certificate

  // General
  notes                   String?
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt

  // Relationships
  buildRecord             BuildRecord         @relation(fields: [buildRecordId], references: [id], onDelete: Cascade)
  testCell                TestCell            @relation(fields: [testCellId], references: [id])
  operator                User?               @relation("TestRunOperator", fields: [operatorId], references: [id])
  supervisor              User?               @relation("TestRunSupervisor", fields: [supervisorId], references: [id])
  qualityApprovedBy       User?               @relation("TestRunQualityApprover", fields: [qualityApprovedById], references: [id])

  // Child relationships
  measurements            TestMeasurement[]
  acceptanceCriteria      TestRunAcceptanceCriteria[]
  certificates            TestCertificate[]
  statusHistory           TestRunStatusHistory[]

  @@index([buildRecordId])
  @@index([testCellId])
  @@index([status])
  @@index([testPassed])
  @@index([actualStartTime])
  @@map("test_runs")
}

enum TestRunStatus {
  SCHEDULED
  IN_PROGRESS
  PAUSED
  COMPLETED
  FAILED
  CANCELLED
  AWAITING_APPROVAL
  APPROVED
}

/// TestParameter - Configuration parameters for a test
model TestParameter {
  id                      String              @id @default(cuid())
  testCellId              String              // Which test cell
  parameterName           String              // e.g., "RPM", "Temperature", "Fuel Flow"
  parameterType           TestParameterType
  unit                    String              // e.g., "RPM", "°C", "PSI", "GPH"

  // Parameter Configuration
  minValue                Decimal?            @db.Decimal(15, 4) // Minimum acceptable value
  maxValue                Decimal?            @db.Decimal(15, 4) // Maximum acceptable value
  targetValue             Decimal?            @db.Decimal(15, 4) // Target/nominal value
  tolerance               Decimal?            @db.Decimal(15, 4) // +/- tolerance

  // DAQ Configuration
  daqChannelId            String?             // DAQ system channel identifier
  daqSensorType           String?             // Type of sensor
  sensorManufacturer      String?             // Sensor manufacturer
  sensorModel             String?             // Sensor model number
  calibrationDueDate      DateTime?           // Sensor calibration due date

  // Recording & Processing
  recordingFrequency      Int?                // Hz or samples per second
  dataProcessingMethod    String?             // e.g., "Raw", "Averaged", "Filtered"

  isActive                Boolean             @default(true)
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt

  testCell                TestCell            @relation(fields: [testCellId], references: [id], onDelete: Cascade)

  // Relationships
  measurements            TestMeasurement[]
  acceptanceCriteria      AcceptanceCriteria[]

  @@unique([testCellId, parameterName])
  @@index([testCellId])
  @@index([parameterType])
  @@map("test_parameters")
}

enum TestParameterType {
  PERFORMANCE             // Engine performance metrics
  THERMAL                 // Temperature monitoring
  VIBRATION               // Vibration analysis
  ACOUSTIC                // Noise/acoustic data
  EMISSIONS               // Emissions testing
  PRESSURE                // Pressure measurements
  FLOW                    // Flow rate measurements
  ELECTRICAL              // Electrical parameters
  FUEL                    // Fuel system parameters
  OIL                     // Oil system parameters
  COOLANT                 // Cooling system parameters
  OTHER
}

/// TestMeasurement - Individual measurements taken during a test
model TestMeasurement {
  id                      String              @id @default(cuid())
  testRunId               String              // Which test
  testParameterId         String              // Which parameter

  // Measurement Value
  value                   Decimal             @db.Decimal(15, 4) // The measured value
  unit                    String              // Unit of measurement

  // Time Reference
  timestampSeconds        Decimal             @db.Decimal(15, 2) // Seconds since test start
  recordedAt              DateTime            // When measurement was recorded

  // Quality & Status
  isOutOfRange            Boolean             @default(false) // Value outside nominal range
  isSuspicious            Boolean             @default(false) // Flagged for anomaly
  dataQuality             String?             // "GOOD", "QUESTIONABLE", "REJECTED"

  // Raw Data Reference
  daqRawId                String?             // Reference to raw DAQ data

  createdAt               DateTime            @default(now())

  testRun                 TestRun             @relation(fields: [testRunId], references: [id], onDelete: Cascade)
  testParameter           TestParameter       @relation(fields: [testParameterId], references: [id])

  @@index([testRunId])
  @@index([testParameterId])
  @@index([recordedAt])
  @@index([isOutOfRange])
  @@map("test_measurements")
}

/// AcceptanceCriteria - Define what constitutes a passing test
model AcceptanceCriteria {
  id                      String              @id @default(cuid())
  testParameterId         String              // Which parameter
  criteriaType            AcceptanceCriteriaType

  // Criteria Definition
  minValue                Decimal?            @db.Decimal(15, 4) // Minimum required
  maxValue                Decimal?            @db.Decimal(15, 4) // Maximum allowed
  targetValue             Decimal?            @db.Decimal(15, 4) // Target value
  tolerance               Decimal?            @db.Decimal(15, 4) // Tolerance band

  // Assessment Method
  assessmentMethod        String              // e.g., "AVERAGE", "PEAK", "RANGE", "CUSTOM"
  customFormula           String?             // Custom calculation formula if needed
  passingCondition        String              // e.g., "value >= minValue AND value <= maxValue"

  // Metadata
  description             String?
  faaRequirement          String?             // FAA requirement reference (e.g., AC 43-207)
  isActive                Boolean             @default(true)

  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt

  testParameter           TestParameter       @relation(fields: [testParameterId], references: [id], onDelete: Cascade)

  // Relationships
  testRunCriteria         TestRunAcceptanceCriteria[]

  @@index([testParameterId])
  @@index([criteriaType])
  @@map("acceptance_criteria")
}

enum AcceptanceCriteriaType {
  EXACT_MATCH             // Value must equal target
  RANGE                   // Value must be within range
  THRESHOLD               // Value must exceed threshold
  TREND                   // Trend analysis
  STATISTICAL             // Statistical test (e.g., Cpk)
  CUSTOM                  // Custom acceptance logic
}

/// TestRunAcceptanceCriteria - Links test runs to acceptance criteria with results
model TestRunAcceptanceCriteria {
  id                      String              @id @default(cuid())
  testRunId               String
  acceptanceCriteriaId    String

  // Assessment Result
  criteria                String              // Text description of criteria
  testValue               Decimal?            @db.Decimal(15, 4) // Value being tested
  minRequired             Decimal?            @db.Decimal(15, 4)
  maxRequired             Decimal?            @db.Decimal(15, 4)

  // Result
  passed                  Boolean?            // Did this criteria pass?
  assessmentDetail        String?             // Detailed assessment notes

  assessedAt              DateTime            @default(now())

  testRun                 TestRun             @relation(fields: [testRunId], references: [id], onDelete: Cascade)
  acceptanceCriteria      AcceptanceCriteria  @relation(fields: [acceptanceCriteriaId], references: [id])

  @@unique([testRunId, acceptanceCriteriaId])
  @@index([testRunId])
  @@index([passed])
  @@map("test_run_acceptance_criteria")
}

/// TestCertificate - Certificate generated after successful engine acceptance test
model TestCertificate {
  id                      String              @id @default(cuid())
  testRunId               String
  certificateNumber       String              @unique // e.g., "TEST-CERT-2025-001"

  // Certificate Details
  certificateType         String              // "ENGINE_ACCEPTANCE", "PERFORMANCE_VALIDATION", etc.
  issuedDate              DateTime            @default(now())
  certificationStandards  String[]            // e.g., ["FAA AC 43-207", "AS9100"]

  // Test Results Summary
  allTestsPassed          Boolean
  testSummary             String?             // Summary of test results
  failedCriteria          String[]            // If applicable, which criteria failed

  // Approval & Authority
  issuedById              String?             // User who issued certificate
  approvalDate            DateTime?
  approverComments        String?

  // File Reference
  certificatePath         String?             // Path to PDF certificate
  certificateDataJson     Json?               // Full certificate data

  // Validity
  expirationDate          DateTime?           // If certificate expires
  isValid                 Boolean             @default(true)

  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt

  testRun                 TestRun             @relation(fields: [testRunId], references: [id], onDelete: Cascade)
  issuedBy                User?               @relation(fields: [issuedById], references: [id])

  @@index([testRunId])
  @@index([certificateNumber])
  @@index([isValid])
  @@map("test_certificates")
}

/// TestRunStatusHistory - Audit trail of test run status changes
model TestRunStatusHistory {
  id                      String              @id @default(cuid())
  testRunId               String

  previousStatus          TestRunStatus?      // Status before change
  newStatus               TestRunStatus       // Status after change
  reason                  String?             // Reason for status change
  changedById             String?             // User who made the change

  changedAt               DateTime            @default(now())

  testRun                 TestRun             @relation(fields: [testRunId], references: [id], onDelete: Cascade)
  changedBy               User?               @relation(fields: [changedById], references: [id])

  @@index([testRunId])
  @@index([changedAt])
  @@map("test_run_status_history")
}

/// TestCellSchedule - Schedule test cell availability
model TestCellSchedule {
  id                      String              @id @default(cuid())
  testCellId              String

  // Schedule Details
  scheduledDate           DateTime
  startTime               String              // HH:MM format
  endTime                 String              // HH:MM format
  scheduleType            String              // "AVAILABLE", "MAINTENANCE", "RESERVED"
  notes                   String?

  isActive                Boolean             @default(true)
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt

  testCell                TestCell            @relation(fields: [testCellId], references: [id], onDelete: Cascade)

  @@index([testCellId])
  @@index([scheduledDate])
  @@map("test_cell_schedules")
}

// ============================================================================
// 8D Problem Solving Framework (Issue #57)
// ============================================================================

/// EightDReport - Master record for 8D problem-solving methodology
model EightDReport {
  id                      String              @id @default(cuid())
  reportNumber            String              @unique  // 8D-2025-001
  ncrId                   String?             // Optional link to NCR

  // Basic Info
  title                   String
  status                  EightDStatus        @default(DRAFT)
  priority                EightDPriority      @default(MEDIUM)
  currentDiscipline       Int?                @default(0) // 0-8

  // D0: Preparation
  leader                  String              // User ID of 8D leader
  champion                String?             // User ID of sponsor/champion
  targetCompletionDate    DateTime?
  customerNotificationDate DateTime?

  // D1: Team
  kickoffMeetingDate      DateTime?
  teamCharter             String?             // Team scope and authority

  // D2: Problem Description
  problemStatement        String?
  isIsNotAnalysis         Json?               // Matrix of Is/Is Not analysis
  problemQuantification   Json?               // {quantity, frequency, rate, costImpact}
  problemVerified         Boolean             @default(false)
  problemVerificationDate DateTime?

  // D3: Interim Containment
  containmentPlan         String?
  containmentActions      Json?               // Array of containment actions
  containmentVerified     Boolean             @default(false)
  containmentVerificationDate DateTime?

  // D4: Root Cause Analysis
  rootCauseAnalysis       String?
  rootCauseTechniques     Json?               // Array: "5_WHYS", "FISHBONE", "FMEA", "DATA_ANALYSIS"
  potentialCauses         Json?               // Array of {cause, verified, evidence}
  verifiedRootCause       String?             // The determined root cause
  causeCodeId             String?             // Link to cause code system
  escapePoint             String?             // Where should defect have been caught
  systemFailureAnalysis   String?             // Why did QA system fail

  // D5: Verify PCA
  proposedPCAs            Json?               // Array of proposed permanent corrective actions
  pcaValidation           String?             // Validation plan and results
  pcaVerified             Boolean             @default(false)
  pcaVerificationDate     DateTime?
  costBenefitAnalysis     String?

  // D6: Implement PCA
  implementationPlan      String?
  implementationComplete  Boolean             @default(false)
  implementationDate      DateTime?
  validationResults       String?
  beforeAfterComparison   Json?               // Process capability before/after

  // D7: Prevent Recurrence
  preventionActions       Json?               // Array of systemic actions
  lessonsLearned          String?
  horizontalDeployment    String?             // Applied to other products/sites
  managementSystemUpdates String?

  // D8: Team Recognition
  teamRecognitionDate     DateTime?
  teamRecognitionNotes    String?
  successMetrics          Json?               // {costSavings, defectReduction, etc}
  knowledgeShared         Boolean             @default(false)

  // Report Metadata
  revisionNumber          Int                 @default(1)
  completedAt             DateTime?

  createdBy               String
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt

  // Relations
  teamMembers             EightDTeamMember[]
  attachments             EightDAttachment[]
  approvals               EightDApproval[]
  ncr                     NCR?                @relation(fields: [ncrId], references: [id])
  creator                 User                @relation("EightDCreator", fields: [createdBy], references: [id])
  leader_user             User                @relation("EightDLeader", fields: [leader], references: [id])

  @@index([reportNumber])
  @@index([ncrId])
  @@index([status])
  @@index([priority])
  @@index([createdAt])
  @@index([currentDiscipline])
  @@map("eight_d_reports")
}

enum EightDStatus {
  DRAFT
  D0_PREPARATION
  D1_TEAM
  D2_PROBLEM
  D3_CONTAINMENT
  D4_ROOT_CAUSE
  D5_VERIFY_PCA
  D6_IMPLEMENT_PCA
  D7_PREVENT_RECURRENCE
  D8_RECOGNITION
  COMPLETED
  CANCELLED
}

enum EightDPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

/// EightDTeamMember - Members of 8D problem-solving team
model EightDTeamMember {
  id                      String              @id @default(cuid())
  eightDReportId          String
  userId                  String              // User who is team member
  role                    TeamMemberRole      // Team role
  expertiseArea           String?             // Area of expertise
  authorityLevel          AuthorityLevel      @default(CONTRIBUTOR)
  timeCommitment          String?             // Expected time to dedicate

  addedAt                 DateTime            @default(now())

  eightDReport            EightDReport        @relation(fields: [eightDReportId], references: [id], onDelete: Cascade)
  user                    User                @relation(fields: [userId], references: [id])

  @@unique([eightDReportId, userId])
  @@index([eightDReportId])
  @@map("eight_d_team_members")
}

enum TeamMemberRole {
  LEADER
  CHAMPION
  CORE_MEMBER
  SUBJECT_MATTER_EXPERT
  ADVISOR
}

enum AuthorityLevel {
  DECISION_MAKER
  ADVISOR
  CONTRIBUTOR
}

/// EightDAttachment - Files and evidence attached to 8D report
model EightDAttachment {
  id                      String              @id @default(cuid())
  eightDReportId          String
  discipline              String?             // D0, D1, D2, etc.
  fileName                String
  fileUrl                 String
  fileType                String              // pdf, jpg, xlsx, etc.
  description             String?
  uploadedBy              String              // User ID
  uploadedAt              DateTime            @default(now())

  eightDReport            EightDReport        @relation(fields: [eightDReportId], references: [id], onDelete: Cascade)
  uploader                User                @relation(fields: [uploadedBy], references: [id])

  @@index([eightDReportId])
  @@index([discipline])
  @@map("eight_d_attachments")
}

/// EightDApproval - Approval workflow for 8D disciplines
model EightDApproval {
  id                      String              @id @default(cuid())
  eightDReportId          String
  approverUserId          String              // User who needs to approve
  approverRole            String?             // Role that needs approval
  discipline              String?             // Which discipline: D1, D2, etc.
  status                  ApprovalStatus      @default(PENDING)
  approvalNotes           String?
  approvedAt              DateTime?

  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt

  eightDReport            EightDReport        @relation(fields: [eightDReportId], references: [id], onDelete: Cascade)
  approver                User                @relation(fields: [approverUserId], references: [id])

  @@unique([eightDReportId, approverUserId, discipline])
  @@index([eightDReportId])
  @@index([status])
  @@map("eight_d_approvals")
}

/// EightDConfig - Site-level 8D configuration
model EightDConfig {
  id                              String              @id @default(cuid())
  siteId                          String?             // Null = global default

  // Auto-suggest conditions
  autoSuggestOnCustomerComplaint  Boolean             @default(true)
  autoSuggestOnCriticalNCR        Boolean             @default(true)
  autoSuggestOnCostThreshold      Boolean             @default(true)
  costThreshold                   Decimal?            @db.Decimal(15, 2)
  autoSuggestOnRecurrence         Boolean             @default(true)
  recurrenceThreshold             Int?                // Suggest 8D after X occurrences

  // Required approvals by discipline
  requireQualityApprovalD4        Boolean             @default(true)
  requireEngineeringApprovalD5    Boolean             @default(true)
  requireManagementApprovalD8     Boolean             @default(true)

  // Timing defaults (days)
  defaultD1TargetDays             Int                 @default(3)
  defaultD4TargetDays             Int                 @default(10)
  defaultD6TargetDays             Int                 @default(30)
  defaultCompletionTargetDays     Int                 @default(60)

  // Report template
  reportTemplate                  Json?               // Customizable template structure

  isActive                        Boolean             @default(true)
  createdAt                       DateTime            @default(now())
  updatedAt                       DateTime            @updatedAt

  site                            Site?               @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@unique([siteId])
  @@index([siteId])
  @@map("eight_d_configs")
}

// ============================================================================
// MRP System Models (Issue #84)
// ============================================================================

/// MRPRun - Tracks MRP execution and status
/// Each run processes the master production schedule against BOMs and inventory
model MRPRun {
  id                String              @id @default(cuid())
  runNumber         String              @unique
  siteId            String?
  scheduleId        String?             // FK to ProductionSchedule being processed

  // Execution details
  startDate         DateTime            @default(now())
  completionDate    DateTime?
  status            MRPStatus           @default(RUNNING)

  // Run configuration
  horizonDays       Int                 @default(90)
  includeScrapFactor Boolean            @default(true)
  safetyStockLevel  Int                 @default(0)  // percentage

  // Results summary
  totalRequirements Int                 @default(0)
  plannedOrdersCount Int                @default(0)
  exceptionCount    Int                 @default(0)

  // Metadata
  runBy             String?             // user who triggered the run
  notes             String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  site              Site?               @relation("MRPRuns", fields: [siteId], references: [id], onDelete: SetNull)
  schedule          ProductionSchedule? @relation("MRPRunForSchedule", fields: [scheduleId], references: [id], onDelete: SetNull)
  plannedOrders     PlannedOrder[]
  exceptions        MRPException[]
  pegging           MRPPegging[]

  @@index([siteId])
  @@index([status])
  @@index([startDate])
  @@map("mrp_runs")
}

/// PlannedOrder - Represents purchase or production orders generated by MRP
model PlannedOrder {
  id                String              @id @default(cuid())
  mrpRunId          String

  // Order identification
  partId            String
  orderType         OrderType           @default(PURCHASE)  // PURCHASE or PRODUCTION

  // Quantity and timing
  quantity          Float
  unitOfMeasure     String
  unitOfMeasureId   String?

  // Lead time and scheduling
  demandDate        DateTime            // When the material is needed
  orderDate         DateTime            // When order should be placed
  dueDate           DateTime            // Expected delivery/completion date

  // Lot sizing
  lotSizingRule     LotSizingRule       @default(LOT_FOR_LOT)
  fixedLotSize      Float?              // Used with FIXED_LOT_SIZE rule
  economicOrderQty  Float?              // Calculated EOQ

  // Status and conversion
  status            PlannedOrderStatus  @default(PLANNED)
  convertedToWoId   String?             // Links to actual WorkOrder if converted
  notes             String?

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  mrpRun            MRPRun              @relation(fields: [mrpRunId], references: [id], onDelete: Cascade)
  part              Part                @relation("PlannedOrderParts", fields: [partId], references: [id])
  unitOfMeasureRef  UnitOfMeasure?      @relation("PlannedOrderUOM", fields: [unitOfMeasureId], references: [id])
  workOrder         WorkOrder?          @relation("PlannedOrderToWorkOrder", fields: [convertedToWoId], references: [id], onDelete: SetNull)
  pegging           MRPPegging[]

  @@index([mrpRunId])
  @@index([partId])
  @@index([orderType])
  @@index([status])
  @@index([demandDate])
  @@map("planned_orders")
}

/// MRPPegging - Links requirements to their sources (demand to supply)
/// Provides traceability from a parent demand back through BOMs and inventory
model MRPPegging {
  id                String              @id @default(cuid())
  mrpRunId          String

  // Demand side
  demandPartId      String
  demandQuantity    Float
  demandDate        DateTime

  // Supply side
  suppliedBy        String              @default("PLANNED")  // "PLANNED", "INVENTORY", "EXISTING_WO"
  suppliedByPartId  String?             // For produced components
  suppliedByWoId    String?             // Links to actual WorkOrder
  suppliedByPlanId  String?             // Links to PlannedOrder

  // Pegging level
  level             Int                 @default(0)  // 0 = end item, 1 = component, etc.
  parentPegId       String?             // Link to parent pegging record

  // Status
  pegStatus         PegStatus           @default(OPEN)
  notes             String?

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  mrpRun            MRPRun              @relation(fields: [mrpRunId], references: [id], onDelete: Cascade)
  demandPart        Part                @relation("MRPPeggingDemand", fields: [demandPartId], references: [id])
  suppliedPart      Part?               @relation("MRPPeggingSupply", fields: [suppliedByPartId], references: [id], onDelete: SetNull)
  suppliedWorkOrder WorkOrder?          @relation("MRPPeggingFromWO", fields: [suppliedByWoId], references: [id], onDelete: SetNull)
  suppliedPlannedOrder PlannedOrder?    @relation(fields: [suppliedByPlanId], references: [id], onDelete: SetNull)
  parentPegging     MRPPegging?         @relation("MRPPeggingHierarchy", fields: [parentPegId], references: [id], onDelete: SetNull)
  childPeggings     MRPPegging[]        @relation("MRPPeggingHierarchy")

  @@index([mrpRunId])
  @@index([demandPartId])
  @@index([pegStatus])
  @@index([level])
  @@map("mrp_peggings")
}

/// MRPException - Tracks issues/warnings from MRP execution
/// Examples: late orders, insufficient capacity, negative inventory, etc.
model MRPException {
  id                String              @id @default(cuid())
  mrpRunId          String

  // Exception details
  exceptionType     ExceptionType
  severity          ExceptionSeverity   @default(WARNING)

  // Context
  partId            String?
  affectedQuantity  Float?
  affectedDate      DateTime?

  // Exception message and resolution
  message           String
  suggestedAction   String?
  isResolved        Boolean             @default(false)
  resolvedAt        DateTime?
  resolveNotes      String?

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  mrpRun            MRPRun              @relation(fields: [mrpRunId], references: [id], onDelete: Cascade)
  part              Part?               @relation("MRPExceptions", fields: [partId], references: [id], onDelete: SetNull)

  @@index([mrpRunId])
  @@index([exceptionType])
  @@index([severity])
  @@index([isResolved])
  @@map("mrp_exceptions")
}

// ============================================================================
// MRP Enums
// ============================================================================

enum MRPStatus {
  RUNNING
  COMPLETED
  COMPLETED_WITH_ERRORS
  FAILED
}

enum OrderType {
  PURCHASE
  PRODUCTION
}

enum PlannedOrderStatus {
  PLANNED
  RELEASED
  FIRMED
  CONVERTED_TO_WO
  CANCELLED
}

enum LotSizingRule {
  LOT_FOR_LOT
  FIXED_LOT_SIZE
  EOQ
  MIN_REQUIRED
  PERIOD_ORDER_QUANTITY
}

enum PegStatus {
  OPEN
  PARTIALLY_SUPPLIED
  SUPPLIED
  CANCELLED
}

enum ExceptionType {
  LATE_ORDER
  NEGATIVE_INVENTORY
  INSUFFICIENT_CAPACITY
  LEAD_TIME_VIOLATION
  SAFETY_STOCK_VIOLATION
  SCRAP_ADJUSTED_SHORTAGE
  OPTIONAL_COMPONENT_SHORTAGE
  DEMAND_FORECAST_CHANGE
  SUPPLY_CONSTRAINT
  OTHER
}

enum ExceptionSeverity {
  INFO
  WARNING
  ERROR
  CRITICAL
}

// ============================================================================
// Extension Schema Framework Models (Issue #438)
// ============================================================================
// Enable plugins to register custom database entities and fields

enum ExtensionSchemaStatus {
  pending
  validating
  active
  failed
}

enum ExtensionMigrationStatus {
  pending
  executing
  executed
  failed
  rolled_back
}

enum ConflictSeverity {
  warning
  error
}

/// Extension Schema Registry
/// Tracks all registered extension schemas with their current status
model ExtensionSchema {
  id                  String                       @id @default(cuid())
  pluginId            String                       @unique
  version             String
  schemaDefinition    Json
  status              ExtensionSchemaStatus        @default(pending)
  validationErrors    Json?
  registeredAt        DateTime                     @default(now())
  activatedAt         DateTime?
  deactivatedAt       DateTime?
  lastError           String?
  createdBy           String?
  updatedBy           String?
  createdAt           DateTime                     @default(now())
  updatedAt           DateTime                     @updatedAt
  migrations          ExtensionMigration[]
  conflicts           ExtensionSchemaConflict[]    @relation("plugin1")
  conflictsAsPlugin2  ExtensionSchemaConflict[]    @relation("plugin2")
  auditLogs           ExtensionSchemaAuditLog[]
  tableMetadata       ExtensionTableMetadata[]
  versionHistory      ExtensionSchemaVersion[]

  @@index([status])
  @@index([pluginId])
  @@map("extension_schemas")
}

/// Extension Migration Records
/// Tracks all executed migrations for schema changes
model ExtensionMigration {
  id              String                    @id @default(cuid())
  pluginId        String
  migrationId     String
  version         String
  migrationSql    String
  rollbackSql     String?
  checksumSchema  String?
  checksumSql     String?
  status          ExtensionMigrationStatus  @default(pending)
  executionStart  DateTime?
  executionEnd    DateTime?
  errorMessage    String?
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
  schema          ExtensionSchema           @relation(fields: [pluginId], references: [pluginId], onDelete: Cascade)

  @@unique([pluginId, migrationId])
  @@index([pluginId, status])
  @@index([createdAt])
  @@index([status])
  @@map("extension_migrations")
}

/// Extension Schema Conflicts
/// Tracks potential conflicts between extension schemas
model ExtensionSchemaConflict {
  id              String           @id @default(cuid())
  plugin1Id       String
  plugin2Id       String
  conflictType    String
  item1           String?
  item2           String?
  message         String
  severity        ConflictSeverity @default(warning)
  resolved        Boolean          @default(false)
  resolvedAt      DateTime?
  createdAt       DateTime         @default(now())
  plugin1         ExtensionSchema  @relation("plugin1", fields: [plugin1Id], references: [pluginId], onDelete: Cascade)
  plugin2         ExtensionSchema  @relation("plugin2", fields: [plugin2Id], references: [pluginId], onDelete: Cascade)

  @@index([plugin1Id, plugin2Id])
  @@index([resolved])
  @@map("extension_schema_conflicts")
}

/// Extension Schema Audit Log
/// Tracks all changes to extension schemas for audit and debugging
model ExtensionSchemaAuditLog {
  id          String          @id @default(cuid())
  pluginId    String
  action      String
  changes     Json?
  errorDetails String?
  performedBy String?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime        @default(now())
  schema      ExtensionSchema @relation(fields: [pluginId], references: [pluginId], onDelete: Cascade)

  @@index([pluginId])
  @@index([action])
  @@index([createdAt])
  @@map("extension_schema_audit_log")
}

/// Extension Table Metadata
/// Tracks metadata about dynamically created extension tables
model ExtensionTableMetadata {
  id              String          @id @default(cuid())
  pluginId        String
  tableName       String
  displayName     String?
  description     String?
  namespace       String
  fieldCount      Int             @default(0)
  indexCount      Int             @default(0)
  estimatedRows   BigInt          @default(0)
  estimatedSize   BigInt          @default(0)
  lastAnalyzedAt  DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  schema          ExtensionSchema @relation(fields: [pluginId], references: [pluginId], onDelete: Cascade)

  @@unique([pluginId, tableName])
  @@index([pluginId])
  @@index([namespace])
  @@map("extension_table_metadata")
}

/// Extension Schema Version History
/// Maintains complete version history of extension schemas
model ExtensionSchemaVersion {
  id                  String          @id @default(cuid())
  pluginId            String
  version             String
  schemaDefinition    Json
  changesSummary      String?
  migrationsRequired  Json?
  createdAt           DateTime        @default(now())
  schema              ExtensionSchema @relation(fields: [pluginId], references: [pluginId], onDelete: Cascade)

  @@unique([pluginId, version])
  @@index([pluginId])
  @@index([createdAt])
  @@map("extension_schema_versions")
}
