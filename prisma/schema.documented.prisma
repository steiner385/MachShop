generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../docs/erd.md"
  theme    = "default"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Top-level organizational entity representing the entire company or corporation with multiple manufacturing sites
///
/// **Business Purpose:** Provides the highest level of organizational hierarchy for multi-site manufacturing operations, enabling corporate-level reporting and governance
/// **Data Owner:** Corporate IT and Operations Management
/// **Update Frequency:** Rarely updated, typically during corporate restructuring or acquisitions
/// **Compliance:** Corporate entity information required for regulatory reporting, financial consolidation, and international trade compliance
/// **Data Retention:** Permanent retention for corporate records and regulatory compliance
/// **Security:** Internal - Corporate organizational information
/// **Integrations:** ERP Corporate Module, Financial Reporting Systems, Regulatory Compliance Platforms, Business Intelligence
/// **Related Tables:** Site, User, AuditReport, SecurityEvent
///
/// **Examples:**
/// - Aerospace manufacturing corporation: Multi-national aerospace company with facilities across North America and Europe
/// - Medical device manufacturer: Specialized medical device manufacturer with strict FDA compliance requirements
///
/// **Common Queries:**
/// - List all active enterprises for corporate reporting
/// - Find enterprise details for regulatory filing
/// - Generate enterprise-level production summaries
///
model Enterprise {
  id             String   @id @default(cuid())
  /// Unique alphanumeric identifier for the enterprise following corporate naming standards
  /// **Business Rule:** Must be globally unique across all corporate entities and follow established naming convention
  /// **Data Source:** Corporate IT during enterprise setup or acquisition integration
  /// **Format:** COMPANY-DIVISION format (e.g., ACME-AERO, MEDTECH-01)
  /// **Validation:** Must be uppercase, alphanumeric with hyphens, 6-20 characters
  /// **Business Impact:** Primary reference for all corporate reporting, financial consolidation, and regulatory filings
  /// **Examples:**
  /// - ACME-AERO - Aerospace division of ACME Corporation
  /// - BOEING-COMM - Commercial aircraft division
  /// - GE-AVIATION - General Electric aviation unit
  enterpriseCode String   @unique
  /// Official legal name of the enterprise as registered with regulatory authorities
  /// **Business Rule:** Must match legal corporate registration documents exactly
  /// **Data Source:** Legal department and corporate registration documents
  /// **Validation:** Must match official corporate documents, required for legal compliance
  /// **Business Impact:** Used in all legal documents, contracts, and regulatory submissions
  /// **Compliance:** Legal entity name required for contracts, regulatory filings, and financial reporting
  /// **Examples:**
  /// - ACME Aerospace Corporation
  /// - Boeing Commercial Airplanes
  /// - General Electric Aviation
  enterpriseName String
  description    String?
  /// Primary corporate headquarters location for legal and administrative purposes
  /// **Business Rule:** Must reflect official corporate headquarters as filed with regulatory authorities
  /// **Data Source:** Corporate legal department and SEC filings
  /// **Format:** City, State/Province, Country format
  /// **Business Impact:** Determines tax obligations, regulatory requirements, and legal jurisdiction
  /// **Compliance:** Required for tax jurisdiction determination and regulatory compliance
  /// **Examples:**
  /// - Seattle, WA, USA
  /// - Chicago, IL, USA
  /// - Toulouse, France
  headquarters   String?
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  sites          Site[]

  @@map("enterprises")
}

/// Manufacturing facility or plant location within an enterprise, representing a physical production location
///
/// **Business Purpose:** Organizes manufacturing operations by geographic location, enabling site-specific planning, scheduling, and compliance management
/// **Data Owner:** Site Operations Management and Manufacturing Engineering
/// **Update Frequency:** Updated when facilities are opened, closed, or significantly reconfigured
/// **Compliance:** Site registration required for regulatory compliance (FDA establishment registration, ISO certifications, environmental permits)
/// **Data Retention:** Permanent retention for facility history and regulatory compliance
/// **Security:** Internal - Facility and location information
/// **Integrations:** ERP Plant Management, Environmental Management Systems, Facility Management, Local Regulatory Systems
/// **Related Tables:** Enterprise, Area, Equipment, WorkOrder, ProductionSchedule, UserSiteRole
///
/// **Examples:**
/// - Primary manufacturing facility: Main production facility with full manufacturing capabilities
/// - Assembly and testing facility: Specialized facility focused on final assembly and testing operations
///
/// **Common Queries:**
/// - Find all active sites for production planning
/// - Generate site-specific production reports
/// - List sites requiring certification renewal
///
model Site {
  id                        String                     @id @default(cuid())
  /// Unique identifier for manufacturing site following corporate site naming standards
  /// **Business Rule:** Must be unique globally across all enterprise sites and follow geographic naming convention
  /// **Data Source:** Corporate facilities management and site operations
  /// **Format:** LOCATION-NN format where LOCATION is 3-letter city code and NN is sequential number
  /// **Validation:** Must follow corporate naming standard, be unique across enterprise
  /// **Business Impact:** Primary reference for all site-specific operations, scheduling, and reporting
  /// **Examples:**
  /// - ATL-01 - First site in Atlanta
  /// - DFW-02 - Second site in Dallas-Fort Worth area
  /// - SEA-03 - Third site in Seattle area
  /// **Integration Mapping:**
  /// - erpSystem: PlantCode
  /// - facilityManagement: SiteID
  siteCode                  String                     @unique
  /// Descriptive name of the manufacturing facility for operational identification
  /// **Business Rule:** Should clearly identify the site's purpose and location for operational clarity
  /// **Data Source:** Site operations management and facilities planning
  /// **Business Impact:** Used in operational communications, shipping documents, and customer communications
  /// **Examples:**
  /// - Atlanta Manufacturing Center
  /// - Dallas Assembly Plant
  /// - Seattle Engine Components Facility
  siteName                  String
  /// Physical address or geographic location of the manufacturing site
  /// **Business Rule:** Must be accurate for shipping, logistics, and emergency response coordination
  /// **Data Source:** Facilities management and logistics planning
  /// **Format:** City, State/Province, Country or full street address
  /// **Validation:** Must be valid geographic location
  /// **Business Impact:** Critical for logistics, shipping, emergency response, and regulatory compliance
  /// **Examples:**
  /// - Atlanta, GA, USA
  /// - 1234 Manufacturing Drive, Dallas, TX 75201, USA
  /// - Toulouse, Haute-Garonne, France
  location                  String?
  /// Foreign key linking site to its parent enterprise organization
  /// **Business Rule:** Must reference valid enterprise, cannot be changed without corporate approval
  /// **Data Source:** Corporate organizational structure and site ownership records
  /// **Validation:** Must exist in Enterprise table, required for organizational hierarchy
  /// **Business Impact:** Defines corporate ownership and reporting hierarchy for financial and operational reporting
  enterpriseId              String?
  isActive                  Boolean                    @default(true)
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  areas                     Area[]
  auditReports              AuditReport[]
  equipment                 Equipment[]
  indirectCostCodes         IndirectCostCode[]
  ncrs                      NCR[]
  operations                Operation[]
  partAvailability          PartSiteAvailability[]
  permissionChangeLogs      PermissionChangeLog[]
  permissionUsageLogs       PermissionUsageLog[]
  productionSchedules       ProductionSchedule[]
  routingTemplates          RoutingTemplate[]
  routings                  Routing[]
  securityEvents            SecurityEvent[]
  enterprise                Enterprise?                @relation(fields: [enterpriseId], references: [id])
  timeTrackingConfiguration TimeTrackingConfiguration?
  userSiteRoles             UserSiteRole[]
  workOrders                WorkOrder[]

  // Role Template relationships
  roleTemplateInstances     RoleTemplateInstance[]
  roleTemplateUsageLogs     RoleTemplateUsageLog[]

  @@index([enterpriseId])
  @@map("sites")
}

/// Functional work area within a manufacturing site, such as machining centers, assembly lines, or quality labs
///
/// **Business Purpose:** Provides granular organization of work within a site, enabling area-specific scheduling, resource allocation, and performance tracking
/// **Data Owner:** Manufacturing Engineering and Production Management
/// **Update Frequency:** Updated when production layouts change or new work areas are established
/// **Compliance:** Area definitions important for safety compliance, environmental controls, and quality system organization
/// **Data Retention:** 10 years for production history and layout changes
/// **Security:** Internal - Production layout and organization information
/// **Integrations:** Production Scheduling Systems, Equipment Management, Work Center Planning, Safety Management
/// **Related Tables:** Site, Equipment, WorkCenter, Personnel, WorkOrder
///
/// **Examples:**
/// - CNC machining center: Dedicated area for precision machining operations with specialized equipment
/// - Final assembly line: Production line for final assembly operations with sequential work stations
/// - Quality inspection lab: Controlled environment for quality inspections and measurements
///
/// **Common Queries:**
/// - Find all areas within a site for capacity planning
/// - List active areas by equipment type
/// - Generate area-specific utilization reports
///
model Area {
  id          String       @id @default(cuid())
  /// Unique identifier for work area within the site following site area naming standards
  /// **Business Rule:** Must be unique within site and follow functional area naming convention
  /// **Data Source:** Manufacturing engineering and production planning
  /// **Format:** SITE-FUNCTION-NN format (e.g., ATL-MACH-01, DFW-ASSY-02)
  /// **Validation:** Must be unique within site, follow naming convention
  /// **Business Impact:** Primary reference for work scheduling, resource allocation, and performance tracking
  /// **Examples:**
  /// - ATL-MACH-01 - Machining area 1 in Atlanta
  /// - DFW-ASSY-02 - Assembly area 2 in Dallas
  /// - SEA-QC-01 - Quality control area in Seattle
  areaCode    String       @unique
  /// Descriptive name of the work area for operational identification and communication
  /// **Business Rule:** Should clearly describe the area's function and purpose for shop floor clarity
  /// **Data Source:** Manufacturing engineering and production supervision
  /// **Business Impact:** Used in work instructions, scheduling communications, and operator assignments
  /// **Examples:**
  /// - CNC Machining Center A
  /// - Final Assembly Line 1
  /// - Quality Control Laboratory
  /// - Raw Material Storage
  areaName    String
  /// Detailed description of the area's purpose, capabilities, and operational characteristics
  /// **Business Rule:** Should provide sufficient detail for resource planning and capability assessment
  /// **Data Source:** Manufacturing engineering specifications and operational documentation
  /// **Business Impact:** Used for capacity planning, capability assessment, and resource allocation decisions
  /// **Examples:**
  /// - High-precision CNC machining for aerospace components with 5-axis capability
  /// - Clean room assembly environment for medical device final assembly
  /// - Temperature-controlled measurement lab with calibrated inspection equipment
  description String?
  /// Foreign key linking area to its parent site location
  /// **Business Rule:** Must reference valid site, cannot be changed without manufacturing engineering approval
  /// **Data Source:** Site layout planning and manufacturing engineering
  /// **Validation:** Must exist in Site table, required for site organizational hierarchy
  /// **Business Impact:** Defines site ownership and enables site-level reporting and capacity planning
  siteId      String
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  site        Site         @relation(fields: [siteId], references: [id])
  equipment   Equipment[]
  workCenters WorkCenter[]

  @@index([siteId])
  @@map("areas")
}

/// Core user management and authentication system defining personnel identity, access credentials, and organizational information
///
/// **Business Purpose:** Provides centralized user identity management enabling secure system access, personnel tracking, and organizational role assignment across all manufacturing operations
/// **Data Owner:** IT Security and Human Resources Teams
/// **Update Frequency:** Updated when personnel join, leave, or change roles within the organization
/// **Compliance:** User data must comply with privacy regulations (GDPR, CCPA), security standards, and corporate access control policies
/// **Data Retention:** 5 years after employment termination for audit and legal requirements
/// **Security:** Confidential - Personal information and security credentials with strict access controls
/// **Integrations:** Active Directory, HR Management Systems, Security Management, Time Tracking, Training Systems
/// **Related Tables:** PersonnelClass, UserRole, UserSiteRole, WorkOrder, LaborTimeEntry
///
/// **Examples:**
/// - Manufacturing operator user account: Active manufacturing operator with production and quality inspection roles
/// - Engineering manager user account: Engineering manager with process engineering and approval permissions
///
/// **Common Queries:**
/// - Authenticate users and validate access permissions
/// - Find personnel by department and role for work assignment
/// - Generate user access reports for security audits
///
model User {
  id                        String                          @id @default(cuid())
  username                  String                          @unique
  email                     String                          @unique
  firstName                 String?
  lastName                  String?
  passwordHash              String
  isActive                  Boolean                         @default(true)
  roles                     String[]
  permissions               String[]
  /// Timestamp of user's most recent successful authentication
  /// **Business Rule:** Updated automatically on each successful login
  /// **Data Source:** Authentication system
  /// **Format:** ISO 8601 timestamp with timezone
  /// **Validation:** Cannot be future date
  /// **Business Impact:** Used for inactive user identification and security audits
  /// **Audit Trail:** Tracked for security monitoring and compliance
  lastLoginAt               DateTime?
  createdAt                 DateTime                        @default(now())
  updatedAt                 DateTime                        @updatedAt
  /// Unique identifier from HR system linking MES user to employee record
  /// **Business Rule:** Must match active employee records in HR system for integration
  /// **Data Source:** HR Management System daily import
  /// **Format:** EMP-NNNNNN (e.g., EMP-001234)
  /// **Validation:** Must be unique when not null, format validated on entry
  /// **Business Impact:** Incorrect mapping prevents HR integration and payroll allocation
  /// **Privacy:** Internal employee identifier - not PII but confidential
  /// **Examples:**
  /// - EMP-001234 - Regular full-time employee
  /// - EMP-999999 - Temporary contractor
  /// - null - System service accounts
  /// **Integration Mapping:**
  /// - hrSystem: EmployeeID
  /// - badgeSystem: EmployeeNumber
  employeeNumber            String?                         @unique
  /// Links user to job classification determining access levels and capabilities
  /// **Business Rule:** Must reference valid personnel class with current effective dates
  /// **Data Source:** HR system or manual assignment by administrators
  /// **Validation:** Must exist in PersonnelClass table and be currently active
  /// **Business Impact:** Determines user permissions and system access levels
  /// **Examples:**
  /// - PROD-OP-L1 - Level 1 Production Operator
  /// - QE-SENIOR - Senior Quality Engineer
  /// - MAINT-TECH - Maintenance Technician
  personnelClassId          String?
  hireDate                  DateTime?
  terminationDate           DateTime?
  phone                     String?
  /// Emergency contact information required for manufacturing safety compliance
  /// **Business Rule:** Required for all personnel with shop floor access
  /// **Data Source:** User self-service portal or HR system
  /// **Format:** Name and phone number in free text format
  /// **Business Impact:** Critical for workplace safety and emergency response
  /// **Privacy:** PII - Personal emergency contact information
  /// **Examples:**
  /// - Jane Doe - (555) 123-4567 (spouse)
  /// - Emergency Services - 911
  /// - Company Security - ext. 5555
  emergencyContact          String?
  emergencyPhone            String?
  department                String?
  supervisorId              String?
  costCenter                String?
  laborRate                 Float?
  auditLogs                 AuditLog[]
  generatedAuditReports     AuditReport[]

  // Role Template relationships
  createdRoleTemplates      RoleTemplate[]              @relation("RoleTemplateCreator")
  updatedRoleTemplates      RoleTemplate[]              @relation("RoleTemplateUpdater")
  instantiatedTemplates     RoleTemplateInstance[]
  templateUsageLogsAsPerformer RoleTemplateUsageLog[]   @relation("RoleTemplateLogPerformer")
  templateUsageLogsAsTarget    RoleTemplateUsageLog[]   @relation("RoleTemplateLogTarget")
  authenticationEvents      AuthenticationEvent[]
  dispatchedWorkOrders      DispatchLog[]                   @relation("DispatchAssignedTo")
  createdDocumentTemplates  DocumentTemplate[]              @relation("DocumentTemplateCreatedBy")
  updatedDocumentTemplates  DocumentTemplate[]              @relation("DocumentTemplateUpdatedBy")
  invalidatedSignatures     ElectronicSignature[]           @relation("ElectronicSignatureInvalidatedBy")
  electronicSignatures      ElectronicSignature[]           @relation("ElectronicSignatureUser")
  equipmentLogs             EquipmentLog[]
  inspectionExecutions      InspectionExecution[]           @relation("InspectionExecutionInspector")
  approvedInspectionPlans   InspectionPlan[]                @relation("InspectionPlanApprovedBy")
  createdInspectionPlans    InspectionPlan[]                @relation("InspectionPlanCreatedBy")
  updatedInspectionPlans    InspectionPlan[]                @relation("InspectionPlanUpdatedBy")
  laborTimeEntries          LaborTimeEntry[]
  assignedNcrs              NCR[]                           @relation("AssignedTo")
  ncrReports                NCR[]                           @relation("CreatedBy")
  permissionChangesChanger  PermissionChangeLog[]           @relation("PermissionChangeChanger")
  permissionChangesTarget   PermissionChangeLog[]           @relation("PermissionChangeTarget")
  permissionUsageLogs       PermissionUsageLog[]
  availability              PersonnelAvailability[]
  certifications            PersonnelCertification[]
  skills                    PersonnelSkillAssignment[]
  workCenterAssignments     PersonnelWorkCenterAssignment[]
  qualityInspections        QualityInspection[]
  routingTemplates          RoutingTemplate[]
  resolvedSecurityEvents    SecurityEvent[]                 @relation("SecurityEventResolvedBy")
  securityEvents            SecurityEvent[]
  completedSetupExecutions  SetupExecution[]                @relation("SetupExecutionCompletedBy")
  startedSetupExecutions    SetupExecution[]                @relation("SetupExecutionStartedBy")
  approvedSetupSheets       SetupSheet[]                    @relation("SetupSheetApprovedBy")
  createdSetupSheets        SetupSheet[]                    @relation("SetupSheetCreatedBy")
  updatedSetupSheets        SetupSheet[]                    @relation("SetupSheetUpdatedBy")
  sopAcknowledgments        SOPAcknowledgment[]             @relation("SOPAcknowledgmentUser")
  sopAudits                 SOPAudit[]                      @relation("SOPAuditAuditor")
  ssoSessions               SsoSession[]
  approvedSOPs              StandardOperatingProcedure[]    @relation("SOPApprovedBy")
  createdSOPs               StandardOperatingProcedure[]    @relation("SOPCreatedBy")
  updatedSOPs               StandardOperatingProcedure[]    @relation("SOPUpdatedBy")
  toolCalibrationRecords    ToolCalibrationRecord[]         @relation("ToolCalibrationPerformedBy")
  approvedToolDrawings      ToolDrawing[]                   @relation("ToolDrawingApprovedBy")
  createdToolDrawings       ToolDrawing[]                   @relation("ToolDrawingCreatedBy")
  updatedToolDrawings       ToolDrawing[]                   @relation("ToolDrawingUpdatedBy")
  toolMaintenanceRecords    ToolMaintenanceRecord[]         @relation("ToolMaintenancePerformedBy")
  toolUsageLogs             ToolUsageLog[]                  @relation("ToolUsageLogUsedBy")
  userRoles                 UserRole[]
  userSessionLogs           UserSessionLog[]
  userSiteRoles             UserSiteRole[]
  personnelClass            PersonnelClass?                 @relation(fields: [personnelClassId], references: [id])
  supervisor                User?                           @relation("SupervisorRelation", fields: [supervisorId], references: [id])
  subordinates              User[]                          @relation("SupervisorRelation")
  workInstructionExecutions WorkInstructionExecution[]      @relation("WIExecutionOperator")
  signedStepExecutions      WorkInstructionStepExecution[]  @relation("WIStepExecutionSignedBy")
  approvedWorkInstructions  WorkInstruction[]               @relation("WorkInstructionApprovedBy")
  createdWorkInstructions   WorkInstruction[]               @relation("WorkInstructionCreatedBy")
  updatedWorkInstructions   WorkInstruction[]               @relation("WorkInstructionUpdatedBy")
  assignedWorkOrders        WorkOrder[]                     @relation("AssignedTo")
  createdWorkOrders         WorkOrder[]                     @relation("CreatedBy")
  workPerformanceRecords    WorkPerformance[]               @relation("WorkPerformancePersonnel")

  @@index([employeeNumber])
  @@index([personnelClassId])
  @@index([supervisorId])
  @@map("users")
}

/// Hierarchical classification system for organizing personnel by job function, skill level, and organizational responsibility
///
/// **Business Purpose:** Provides standardized workforce categorization for skill management, training requirements, and organizational planning
/// **Data Owner:** Human Resources and Manufacturing Engineering Teams
/// **Update Frequency:** Updated when organizational structure changes or new job classifications are established
/// **Compliance:** Personnel classifications must align with labor regulations, safety requirements, and certification standards
/// **Data Retention:** Permanent retention for organizational history and personnel development tracking
/// **Security:** Internal - Organizational structure and personnel categorization information
/// **Integrations:** HR Management Systems, Training Management, Certification Tracking, Payroll Systems
/// **Related Tables:** User, PersonnelQualification, PersonnelSkillAssignment, PersonnelWorkCenterAssignment
///
/// **Examples:**
/// - Manufacturing operator classification: Mid-level operator classification with specific machining qualifications and progression path
/// - Quality inspector classification: Senior-level quality classification requiring advanced certifications and inspection authority
///
/// **Common Queries:**
/// - Find personnel by classification for work assignment
/// - Generate organizational charts and reporting structures
/// - Track skill development and career progression paths
///
model PersonnelClass {
  id             String                   @id @default(cuid())
  classCode      String                   @unique
  className      String
  description    String?
  level          Int
  parentClassId  String?
  isActive       Boolean                  @default(true)
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt
  parentClass    PersonnelClass?          @relation("PersonnelClassHierarchy", fields: [parentClassId], references: [id])
  childClasses   PersonnelClass[]         @relation("PersonnelClassHierarchy")
  qualifications PersonnelQualification[]
  personnel      User[]

  @@index([parentClassId])
  @@index([level])
  @@map("personnel_classes")
}

model PersonnelQualification {
  id                   String                   @id @default(cuid())
  qualificationCode    String                   @unique
  qualificationName    String
  description          String?
  qualificationType    QualificationType
  issuingOrganization  String?
  validityPeriodMonths Int?
  requiresRenewal      Boolean                  @default(false)
  personnelClassId     String?
  isActive             Boolean                  @default(true)
  createdAt            DateTime                 @default(now())
  updatedAt            DateTime                 @updatedAt
  certifications       PersonnelCertification[]
  personnelClass       PersonnelClass?          @relation(fields: [personnelClassId], references: [id])

  @@index([personnelClassId])
  @@index([qualificationType])
  @@map("personnel_qualifications")
}

model PersonnelCertification {
  id                  String                 @id @default(cuid())
  personnelId         String
  qualificationId     String
  certificationNumber String?
  issuedDate          DateTime
  expirationDate      DateTime?
  status              CertificationStatus    @default(ACTIVE)
  attachmentUrls      String[]
  verifiedBy          String?
  verifiedAt          DateTime?
  notes               String?
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  personnel           User                   @relation(fields: [personnelId], references: [id])
  qualification       PersonnelQualification @relation(fields: [qualificationId], references: [id])

  @@unique([personnelId, qualificationId])
  @@index([personnelId])
  @@index([qualificationId])
  @@index([expirationDate])
  @@index([status])
  @@map("personnel_certifications")
}

model PersonnelSkill {
  id               String                     @id @default(cuid())
  skillCode        String                     @unique
  skillName        String
  description      String?
  skillCategory    SkillCategory
  isActive         Boolean                    @default(true)
  createdAt        DateTime                   @default(now())
  updatedAt        DateTime                   @updatedAt
  skillAssignments PersonnelSkillAssignment[]

  @@index([skillCategory])
  @@map("personnel_skills")
}

model PersonnelSkillAssignment {
  id              String          @id @default(cuid())
  personnelId     String
  skillId         String
  competencyLevel CompetencyLevel
  assessedBy      String?
  assessedAt      DateTime?
  lastUsedDate    DateTime?
  certifiedDate   DateTime?
  notes           String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  personnel       User            @relation(fields: [personnelId], references: [id])
  skill           PersonnelSkill  @relation(fields: [skillId], references: [id])

  @@unique([personnelId, skillId])
  @@index([personnelId])
  @@index([skillId])
  @@index([competencyLevel])
  @@map("personnel_skill_assignments")
}

/// Assignment of personnel to specific work centers defining operational responsibilities, certifications, and capacity allocation
///
/// **Business Purpose:** Optimizes workforce allocation and ensures qualified personnel are assigned to appropriate work centers based on skills and certifications
/// **Data Owner:** Human Resources and Manufacturing Engineering Teams
/// **Update Frequency:** Updated when personnel assignments change, certifications are obtained, or work center requirements are modified
/// **Compliance:** Personnel assignments must align with certification requirements, safety qualifications, and regulatory training standards
/// **Data Retention:** 7 years for personnel assignment history and certification tracking
/// **Security:** Internal - Personnel assignment and capability information
/// **Integrations:** HR Management Systems, Training Management, Capacity Planning, Work Order Assignment
/// **Related Tables:** User, WorkCenter, PersonnelClass, PersonnelCertification
///
/// **Examples:**
/// - Primary machining operator assignment: Primary operator assignment to CNC machining center with aerospace certification
/// - Cross-trained operator assignment: Secondary assignment for cross-training and capacity flexibility
///
/// **Common Queries:**
/// - Find qualified personnel for work center assignments
/// - Generate work center staffing reports for capacity planning
/// - Track personnel certifications and assignment history
///
model PersonnelWorkCenterAssignment {
  id            String     @id @default(cuid())
  personnelId   String
  workCenterId  String
  isPrimary     Boolean    @default(false)
  effectiveDate DateTime   @default(now())
  endDate       DateTime?
  certifiedDate DateTime?
  notes         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  personnel     User       @relation(fields: [personnelId], references: [id])
  workCenter    WorkCenter @relation(fields: [workCenterId], references: [id])

  @@unique([personnelId, workCenterId])
  @@index([personnelId])
  @@index([workCenterId])
  @@index([effectiveDate])
  @@map("personnel_work_center_assignments")
}

model PersonnelAvailability {
  id               String           @id @default(cuid())
  personnelId      String
  availabilityType AvailabilityType
  startDateTime    DateTime
  endDateTime      DateTime
  shiftCode        String?
  isRecurring      Boolean          @default(false)
  recurrenceRule   String?
  reason           String?
  approvedBy       String?
  approvedAt       DateTime?
  notes            String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  personnel        User             @relation(fields: [personnelId], references: [id])

  @@index([personnelId])
  @@index([startDateTime])
  @@index([availabilityType])
  @@map("personnel_availability")
}

/// Hierarchical classification system for organizing materials by type, characteristics, and usage patterns
///
/// **Business Purpose:** Provides standardized material categorization for procurement, inventory management, and quality control across the enterprise
/// **Data Owner:** Materials Management and Engineering Teams
/// **Update Frequency:** Updated when new material types are introduced or classification standards change
/// **Compliance:** Material classifications must align with industry standards and customer requirements for aerospace and medical applications
/// **Data Retention:** Permanent retention for traceability and material history
/// **Security:** Internal - Material classification and sourcing information
/// **Integrations:** ERP Materials Management, Supplier Catalogs, Quality Management Systems, Procurement Systems
/// **Related Tables:** MaterialDefinition, Material, Part, BOMItem
///
/// **Examples:**
/// - Aerospace raw materials: Top-level classification for all aerospace-certified metallic materials
/// - Medical device polymers: Specialized classification for FDA-compliant polymer materials
///
/// **Common Queries:**
/// - Find all material classes by category for procurement planning
/// - List aerospace-certified material classes for compliance reporting
/// - Generate material class hierarchy for engineering specifications
///
model MaterialClass {
  id                     String               @id @default(cuid())
  classCode              String               @unique
  className              String
  description            String?
  level                  Int
  parentClassId          String?
  requiresLotTracking    Boolean              @default(true)
  requiresSerialTracking Boolean              @default(false)
  requiresExpirationDate Boolean              @default(false)
  shelfLifeDays          Int?
  storageRequirements    String?
  handlingInstructions   String?
  isActive               Boolean              @default(true)
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  parentClass            MaterialClass?       @relation("MaterialClassHierarchy", fields: [parentClassId], references: [id])
  childClasses           MaterialClass[]      @relation("MaterialClassHierarchy")
  materials              MaterialDefinition[]

  @@index([parentClassId])
  @@index([level])
  @@map("material_classes")
}

/// Detailed specifications and requirements for specific materials including technical properties and supplier information
///
/// **Business Purpose:** Defines exact material specifications, quality requirements, and approved suppliers to ensure consistent procurement and quality
/// **Data Owner:** Materials Engineering and Quality Assurance Teams
/// **Update Frequency:** Updated when specifications change, new suppliers are qualified, or engineering changes occur
/// **Compliance:** Material definitions must include all required certifications and specifications for regulatory compliance (AS9100, FDA, ISO)
/// **Data Retention:** Permanent retention for engineering and quality traceability
/// **Security:** Internal - Contains proprietary specifications and supplier information
/// **Integrations:** Supplier Management Systems, Quality Management, Engineering Change Control, Procurement Systems
/// **Related Tables:** MaterialClass, MaterialLot, Supplier, MaterialProperty
///
/// **Examples:**
/// - Titanium alloy specification: Precise specification for high-performance titanium used in engine components
/// - Medical grade stainless steel: FDA-compliant stainless steel for medical device applications
///
/// **Common Queries:**
/// - Find approved material definitions by specification
/// - List materials requiring certification updates
/// - Generate material specifications for engineering drawings
///
model MaterialDefinition {
  id                     String               @id @default(cuid())
  materialNumber         String               @unique
  materialName           String
  description            String?
  materialClassId        String
  baseUnitOfMeasure      String
  alternateUnitOfMeasure String?
  conversionFactor       Float?
  materialType           MaterialType
  materialGrade          String?
  specification          String?
  minimumStock           Float?
  reorderPoint           Float?
  reorderQuantity        Float?
  leadTimeDays           Int?
  requiresLotTracking    Boolean              @default(true)
  lotNumberFormat        String?
  defaultShelfLifeDays   Int?
  standardCost           Float?
  currency               String?              @default("USD")
  requiresInspection     Boolean              @default(false)
  inspectionFrequency    String?
  primarySupplierId      String?
  supplierPartNumber     String?
  drawingNumber          String?
  revision               String?
  msdsUrl                String?
  imageUrl               String?
  isActive               Boolean              @default(true)
  isPhantom              Boolean              @default(false)
  isObsolete             Boolean              @default(false)
  obsoleteDate           DateTime?
  replacementMaterialId  String?
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  materialClass          MaterialClass        @relation(fields: [materialClassId], references: [id])
  replacementMaterial    MaterialDefinition?  @relation("MaterialReplacement", fields: [replacementMaterialId], references: [id])
  replacedMaterials      MaterialDefinition[] @relation("MaterialReplacement")
  lots                   MaterialLot[]
  properties             MaterialProperty[]

  @@index([materialClassId])
  @@index([materialType])
  @@index([isActive])
  @@index([materialNumber])
  @@map("material_definitions")
}

/// Physical, chemical, and mechanical properties of materials with test results and certification data
///
/// **Business Purpose:** Documents material characteristics and test results to ensure materials meet engineering requirements and specifications
/// **Data Owner:** Materials Engineering and Quality Assurance Teams
/// **Update Frequency:** Updated when new test results are received or material specifications change
/// **Compliance:** Property data required for engineering analysis, quality verification, and customer material certifications
/// **Data Retention:** Permanent retention for engineering analysis and quality verification
/// **Security:** Internal - Contains proprietary material performance data
/// **Integrations:** Quality Management Systems, Engineering Analysis Tools, Supplier Certification Systems, Test Equipment
/// **Related Tables:** MaterialDefinition, QualityInspection, Part, Engineering
///
/// **Examples:**
/// - Titanium mechanical properties: Certified tensile strength data for aerospace titanium alloy
/// - Polymer biocompatibility data: FDA-required biocompatibility certification for medical device polymer
///
/// **Common Queries:**
/// - Find material properties for engineering analysis
/// - Generate material certificates for customer deliveries
/// - Verify material compliance with specifications
///
model MaterialProperty {
  id            String               @id @default(cuid())
  materialId    String
  propertyName  String
  propertyType  MaterialPropertyType
  propertyValue String
  propertyUnit  String?
  testMethod    String?
  nominalValue  Float?
  minValue      Float?
  maxValue      Float?
  isRequired    Boolean              @default(false)
  isCritical    Boolean              @default(false)
  notes         String?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  material      MaterialDefinition   @relation(fields: [materialId], references: [id])

  @@unique([materialId, propertyName])
  @@index([materialId])
  @@index([propertyType])
  @@map("material_properties")
}

/// Individual lots or batches of materials with complete traceability information including supplier certifications and quality data
///
/// **Business Purpose:** Provides lot-level traceability for quality control, recalls, and regulatory compliance throughout the manufacturing process
/// **Data Owner:** Materials Management and Quality Control Teams
/// **Update Frequency:** Created for each new material lot received, updated as lot is consumed or moved
/// **Compliance:** Critical for aerospace and medical traceability requirements - lot records must be maintained for product lifetime
/// **Data Retention:** Permanent retention for complete product traceability and regulatory compliance
/// **Security:** Internal - Contains supplier and quality certification data
/// **Integrations:** Inventory Management, Quality Management, Supplier Systems, ERP Materials Module
/// **Related Tables:** MaterialDefinition, MaterialTransaction, Supplier, QualityInspection
///
/// **Examples:**
/// - Titanium alloy lot with aerospace certification: Specific lot of certified titanium with complete supplier documentation
/// - Medical polymer lot with FDA documentation: Medical grade polymer lot with full FDA compliance documentation
///
/// **Common Queries:**
/// - Find all lots for a specific material requiring recall
/// - Track lot usage across work orders for traceability
/// - Generate lot genealogy reports for customer deliveries
///
model MaterialLot {
  id                  String                 @id @default(cuid())
  /// Unique identifier for a specific lot or batch of material with complete traceability
  /// **Business Rule:** Must be globally unique across all lots and follow lot numbering convention for traceability
  /// **Data Source:** Generated by materials management system upon receipt or internal lot creation
  /// **Format:** MATERIAL-YYMMDD-NNN format (e.g., TI-240325-001)
  /// **Validation:** Must be unique globally, follow format standard, cannot be changed once assigned
  /// **Business Impact:** Primary reference for all material traceability, quality control, and regulatory compliance
  /// **Audit Trail:** Critical for product traceability and recall procedures
  /// **Examples:**
  /// - TI-240325-001 - First titanium lot received March 25, 2024
  /// - SS-240320-005 - Fifth stainless steel lot received March 20, 2024
  /// - PEEK-240315-002 - Second PEEK polymer lot received March 15, 2024
  lotNumber           String                 @unique
  materialId          String
  /// Original lot or batch number from the material supplier for upstream traceability
  /// **Business Rule:** Must match supplier certification documents exactly for traceability continuity
  /// **Data Source:** Supplier documentation, material certificates, and packing lists
  /// **Validation:** Must match supplier documentation, required for certified materials
  /// **Business Impact:** Enables upstream traceability to supplier source and original certifications
  /// **Examples:**
  /// - SUPP-TI-789456 - Supplier's internal titanium lot number
  /// - ACME-SS-2024-Q1-123 - Supplier quarterly batch identifier
  /// - MED-CERT-456789 - Medical grade material certificate number
  /// **Integration Mapping:**
  /// - supplierSystem: BatchNumber
  /// - certificationSystem: LotID
  supplierLotNumber   String?
  purchaseOrderNumber String?
  heatNumber          String?
  serialNumber        String?
  originalQuantity    Float
  currentQuantity     Float
  unitOfMeasure       String
  location            String?
  warehouseId         String?
  manufactureDate     DateTime?
  receivedDate        DateTime
  /// Date when material lot expires or becomes unsuitable for use in production
  /// **Business Rule:** Materials cannot be used after expiration date, system must enforce this restriction
  /// **Data Source:** Supplier specifications, material certificates, and shelf-life standards
  /// **Format:** ISO 8601 date (YYYY-MM-DD)
  /// **Validation:** Must be future date at time of receipt, enforced in production planning
  /// **Business Impact:** Prevents use of expired materials that could compromise product quality or safety
  /// **Compliance:** Critical for aerospace and medical applications where expired materials are prohibited
  expirationDate      DateTime?
  shelfLifeDays       Int?
  firstUsedDate       DateTime?
  lastUsedDate        DateTime?
  status              MaterialLotStatus      @default(AVAILABLE)
  state               MaterialLotState       @default(RECEIVED)
  isQuarantined       Boolean                @default(false)
  quarantineReason    String?
  quarantinedAt       DateTime?
  qualityStatus       QualityLotStatus       @default(PENDING)
  inspectionId        String?
  certificationUrls   String[]
  supplierId          String?
  supplierName        String?
  manufacturerId      String?
  manufacturerName    String?
  countryOfOrigin     String?
  unitCost            Float?
  totalCost           Float?
  currency            String?                @default("USD")
  parentLotId         String?
  isSplit             Boolean                @default(false)
  isMerged            Boolean                @default(false)
  notes               String?
  customAttributes    Json?
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  genealogyAsChild    MaterialLotGenealogy[] @relation("ChildLot")
  genealogyAsParent   MaterialLotGenealogy[] @relation("ParentLot")
  material            MaterialDefinition     @relation(fields: [materialId], references: [id])
  parentLot           MaterialLot?           @relation("LotGenealogy", fields: [parentLotId], references: [id])
  childLots           MaterialLot[]          @relation("LotGenealogy")
  stateHistory        MaterialStateHistory[]
  sublots             MaterialSublot[]

  @@index([materialId])
  @@index([lotNumber])
  @@index([status])
  @@index([state])
  @@index([expirationDate])
  @@index([qualityStatus])
  @@index([parentLotId])
  @@map("material_lots")
}

/// Subdivision of material lots into smaller batches enabling precise material allocation, work order reservations, and inventory control
///
/// **Business Purpose:** Provides granular material management by splitting large lots into smaller working quantities for specific work orders and operations
/// **Data Owner:** Materials Management and Production Control Teams
/// **Update Frequency:** Real-time updates as material lots are split, reserved, or consumed in manufacturing operations
/// **Compliance:** Sublot tracking required for material traceability, inventory accuracy, and regulatory compliance in controlled environments
/// **Data Retention:** Permanent retention for complete material traceability and regulatory compliance
/// **Security:** Internal - Material allocation and inventory control information
/// **Integrations:** Work Order Management, Material Requirements Planning, Inventory Control, Shop Floor Systems
/// **Related Tables:** MaterialLot, WorkOrder, Operation, MaterialTransaction
///
/// **Examples:**
/// - Work order material reservation: Titanium sublot reserved for specific turbine blade manufacturing work order
/// - Quality hold sublot: Aluminum sublot quarantined due to quality issues requiring investigation
///
/// **Common Queries:**
/// - Find available sublots for work order material allocation
/// - Track sublot consumption and remaining quantities
/// - Generate material reservation reports for production planning
///
model MaterialSublot {
  id            String              @id @default(cuid())
  sublotNumber  String              @unique
  parentLotId   String
  operationType SublotOperationType
  quantity      Float
  unitOfMeasure String
  workOrderId   String?
  operationId   String?
  reservedFor   String?
  location      String?
  status        MaterialLotStatus   @default(AVAILABLE)
  isActive      Boolean             @default(true)
  splitReason   String?
  createdById   String?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  parentLot     MaterialLot         @relation(fields: [parentLotId], references: [id])

  @@index([parentLotId])
  @@index([sublotNumber])
  @@index([workOrderId])
  @@map("material_sublots")
}

/// Parent-child relationships between material lots tracking transformations, combinations, and processing history throughout manufacturing
///
/// **Business Purpose:** Maintains complete material genealogy enabling rapid traceability for quality issues, recalls, and customer delivery documentation
/// **Data Owner:** Materials Management and Quality Assurance Teams
/// **Update Frequency:** Real-time updates as materials are processed, combined, or transformed during manufacturing operations
/// **Compliance:** Critical for aerospace, medical, and automotive recall management and regulatory traceability requirements
/// **Data Retention:** Permanent retention for complete product lifetime traceability and regulatory compliance
/// **Security:** Internal - Material genealogy with quality and regulatory implications
/// **Integrations:** Quality Management, Manufacturing Execution, Recall Management, Customer Delivery
/// **Related Tables:** MaterialLot, WorkOrder, Operation, User
///
/// **Examples:**
/// - Material transformation genealogy: Raw titanium lot transformed into machined components with yield tracking
/// - Material combination genealogy: Multiple component lots combined into alloy mixture with operator tracking
///
/// **Common Queries:**
/// - Generate complete material genealogy for customer deliveries
/// - Find all downstream products affected by material quality issues
/// - Track material yield and transformation efficiency
///
model MaterialLotGenealogy {
  id               String                @id @default(cuid())
  parentLotId      String
  childLotId       String
  relationshipType GenealogyRelationType
  quantityConsumed Float
  quantityProduced Float?
  unitOfMeasure    String
  workOrderId      String?
  operationId      String?
  processDate      DateTime
  operatorId       String?
  notes            String?
  createdAt        DateTime              @default(now())
  childLot         MaterialLot           @relation("ChildLot", fields: [childLotId], references: [id])
  parentLot        MaterialLot           @relation("ParentLot", fields: [parentLotId], references: [id])

  @@unique([parentLotId, childLotId, processDate])
  @@index([parentLotId])
  @@index([childLotId])
  @@index([workOrderId])
  @@index([processDate])
  @@map("material_lot_genealogy")
}

/// Complete audit trail of material lot state and status transitions including quality events, location changes, and process milestones
///
/// **Business Purpose:** Provides comprehensive material lifecycle tracking for quality control, inventory management, and regulatory compliance audit trails
/// **Data Owner:** Materials Management and Quality Control Teams
/// **Update Frequency:** Real-time logging as material lots transition through states, locations, and quality checkpoints
/// **Compliance:** State history required for quality system compliance, material tracking, and regulatory audit requirements
/// **Data Retention:** 7 years minimum for audit requirements, permanent for critical material traceability
/// **Security:** Internal - Material status and quality information with regulatory significance
/// **Integrations:** Quality Management, Inventory Control, Work Order Execution, Inspection Systems
/// **Related Tables:** MaterialLot, QualityInspection, WorkOrder, User
///
/// **Examples:**
/// - Quality inspection state transition: Material lot approved after successful quality inspection with detailed transition tracking
/// - Location transfer with quarantine: Material lot quarantined due to supplier quality alert with location tracking
///
/// **Common Queries:**
/// - Track material lot history for quality investigations
/// - Generate audit reports for regulatory compliance
/// - Monitor material flow and location changes
///
model MaterialStateHistory {
  id             String              @id @default(cuid())
  lotId          String
  previousState  MaterialLotState?
  newState       MaterialLotState
  previousStatus MaterialLotStatus?
  newStatus      MaterialLotStatus?
  reason         String?
  transitionType StateTransitionType
  quantity       Float?
  unitOfMeasure  String?
  workOrderId    String?
  operationId    String?
  inspectionId   String?
  changedById    String?
  changedAt      DateTime            @default(now())
  fromLocation   String?
  toLocation     String?
  qualityNotes   String?
  notes          String?
  metadata       Json?
  createdAt      DateTime            @default(now())
  lot            MaterialLot         @relation(fields: [lotId], references: [id])

  @@index([lotId])
  @@index([changedAt])
  @@index([newState])
  @@index([newStatus])
  @@map("material_state_history")
}

/// Individual manufacturing operations defining specific processes, procedures, and requirements for transforming materials
///
/// **Business Purpose:** Provides the fundamental building blocks of manufacturing processes, defining what work is performed, how it's executed, and what resources are required
/// **Data Owner:** Manufacturing Engineering and Process Engineering Teams
/// **Update Frequency:** Updated when processes change, new operations are developed, or continuous improvement modifications are made
/// **Compliance:** Operations must be documented per AS9100 and ISO 9001 requirements. Changes require engineering approval and may need customer notification
/// **Data Retention:** Permanent retention for process history, engineering records, and regulatory compliance
/// **Security:** Internal - Contains proprietary manufacturing processes and cycle times
/// **Integrations:** Routing Systems, Work Instructions, Equipment Management, Quality Plans, Time Standards
/// **Related Tables:** RoutingStep, WorkOrderOperation, OperationParameter, OperationDependency
///
/// **Examples:**
/// - CNC machining operation: Standard machining operation with defined cycle times for aerospace component manufacturing
/// - Quality inspection operation: Quality control operation requiring certification and approval for critical dimensions
///
/// **Common Queries:**
/// - Find operations by type for routing development
/// - Generate operation time standards for scheduling
/// - Track operation performance and efficiency metrics
///
model Operation {
  id                        String                                @id @default(cuid())
  description               String?
  siteId                    String?
  isStandardOperation       Boolean                               @default(false)
  operationCode             String                                @unique
  operationName             String
  operationClassification   OperationClassification?
  standardWorkInstructionId String?
  level                     Int                                   @default(1)
  parentOperationId         String?
  operationType             OperationType
  category                  String?
  duration                  Int?
  setupTime                 Int?
  teardownTime              Int?
  minCycleTime              Int?
  maxCycleTime              Int?
  version                   String                                @default("1.0")
  effectiveDate             DateTime?
  expirationDate            DateTime?
  isActive                  Boolean                               @default(true)
  requiresApproval          Boolean                               @default(false)
  approvedBy                String?
  approvedAt                DateTime?
  createdAt                 DateTime                              @default(now())
  updatedAt                 DateTime                              @updatedAt
  bomItems                  BOMItem[]
  equipmentSpecs            EquipmentOperationSpecification[]
  materialSpecs             MaterialOperationSpecification[]
  dependencies              OperationDependency[]                 @relation("DependentOperation")
  prerequisiteFor           OperationDependency[]                 @relation("PrerequisiteOperation")
  parameters                OperationParameter[]
  parentOperation           Operation?                            @relation("OperationHierarchy", fields: [parentOperationId], references: [id])
  childOperations           Operation[]                           @relation("OperationHierarchy")
  site                      Site?                                 @relation(fields: [siteId], references: [id])
  standardWorkInstruction   WorkInstruction?                      @relation("OperationStandardWI", fields: [standardWorkInstructionId], references: [id])
  personnelSpecs            PersonnelOperationSpecification[]
  assetSpecs                PhysicalAssetOperationSpecification[]
  routingSteps              RoutingStep[]
  samplingPlans             SamplingPlan[]

  @@index([parentOperationId])
  @@index([operationType])
  @@index([level])
  @@index([isActive])
  @@index([siteId])
  @@index([isStandardOperation])
  @@map("operations")
}

/// Manufacturing operation parameters defining process variables, settings, and control points for precise manufacturing execution
///
/// **Business Purpose:** Enables precise process control by defining measurable parameters that ensure consistent quality and manufacturing repeatability
/// **Data Owner:** Manufacturing Engineering and Process Engineering Teams
/// **Update Frequency:** Updated when process parameters change, new controls are added, or optimization improvements are implemented
/// **Compliance:** Parameter definitions critical for process validation, statistical process control, and regulatory manufacturing compliance
/// **Data Retention:** Permanent retention for process validation and continuous improvement analysis
/// **Security:** Internal - Process control parameters with competitive manufacturing sensitivity
/// **Integrations:** Shop Floor Control Systems, SPC Systems, Process Control, Quality Management
/// **Related Tables:** Operation, ParameterLimits, ParameterGroup, SPCConfiguration
///
/// **Examples:**
/// - CNC machining speed parameter: Critical machining parameter with defined operating range for quality control
/// - Temperature monitoring parameter: Critical temperature parameter requiring verification and alarm monitoring
///
/// **Common Queries:**
/// - Find critical parameters for operation setup
/// - Generate parameter control charts for SPC analysis
/// - Track parameter changes for process optimization
///
model OperationParameter {
  id                   String            @id @default(cuid())
  operationId          String
  parameterName        String
  parameterType        ParameterType
  dataType             ParameterDataType
  defaultValue         String?
  unitOfMeasure        String?
  minValue             Float?
  maxValue             Float?
  allowedValues        String[]
  isRequired           Boolean           @default(false)
  isCritical           Boolean           @default(false)
  requiresVerification Boolean           @default(false)
  displayOrder         Int?
  notes                String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  parameterGroupId     String?
  operation            Operation         @relation(fields: [operationId], references: [id], onDelete: Cascade)
  parameterGroup       ParameterGroup?   @relation("ParameterGrouping", fields: [parameterGroupId], references: [id])
  formula              ParameterFormula? @relation("FormulaOutput")
  limits               ParameterLimits?
  samplingPlans        SamplingPlan[]
  spcConfiguration     SPCConfiguration?

  @@unique([operationId, parameterName])
  @@index([operationId])
  @@index([parameterType])
  @@map("operation_parameters")
}

/// Control limits and alarm thresholds for operation parameters enabling automatic process monitoring and quality control
///
/// **Business Purpose:** Provides automated process monitoring and alarm generation to prevent defects and ensure consistent manufacturing quality
/// **Data Owner:** Manufacturing Engineering and Quality Engineering Teams
/// **Update Frequency:** Updated when process capability changes, quality requirements change, or SPC studies determine new limits
/// **Compliance:** Control limits essential for statistical process control, process validation, and regulatory compliance documentation
/// **Data Retention:** Permanent retention for process capability and control system validation
/// **Security:** Internal - Process control limits with quality and competitive implications
/// **Integrations:** SPC Systems, Process Control, Alarm Management, Quality Monitoring
/// **Related Tables:** OperationParameter, SPCConfiguration, QualityMeasurement
///
/// **Examples:**
/// - Machining tolerance limits: Spindle speed control limits with engineering range and operating alarms for quality control
/// - Critical temperature control: Critical temperature limits with specification limits and multi-level alarm structure
///
/// **Common Queries:**
/// - Find parameters exceeding control limits for alarm management
/// - Generate control charts with specification limits
/// - Track parameter capability and performance trends
///
model ParameterLimits {
  id             String             @id @default(cuid())
  parameterId    String             @unique
  engineeringMin Float?
  engineeringMax Float?
  operatingMin   Float?
  operatingMax   Float?
  LSL            Float?
  USL            Float?
  nominalValue   Float?
  highHighAlarm  Float?
  highAlarm      Float?
  lowAlarm       Float?
  lowLowAlarm    Float?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  parameter      OperationParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)

  @@map("parameter_limits")
}

/// Hierarchical organization of operation parameters into logical groups for streamlined process management and operator interface design
///
/// **Business Purpose:** Organizes complex parameter sets into manageable groups enabling efficient operator training, system navigation, and process control
/// **Data Owner:** Manufacturing Engineering and User Experience Teams
/// **Update Frequency:** Updated when process organization changes, new parameter groups are needed, or user interface improvements are implemented
/// **Compliance:** Parameter grouping supports operator training requirements and process documentation for regulatory compliance
/// **Data Retention:** Permanent retention for process organization and operator training consistency
/// **Security:** Internal - Process organization and operator interface information
/// **Integrations:** Operator Interfaces, Training Systems, Process Control, Work Instructions
/// **Related Tables:** OperationParameter, Operation, WorkInstruction
///
/// **Examples:**
/// - Machining parameters group: Machining parameter group with visual interface elements for operator clarity
/// - Temperature monitoring group: Critical temperature parameter group with alarm capability and priority designation
///
/// **Common Queries:**
/// - Find parameter groups by type for interface design
/// - Generate hierarchical parameter displays for operators
/// - Organize parameters for training and documentation
///
model ParameterGroup {
  id            String               @id @default(cuid())
  groupName     String
  parentGroupId String?
  groupType     ParameterGroupType
  description   String?
  tags          String[]
  displayOrder  Int?
  icon          String?
  color         String?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  parameters    OperationParameter[] @relation("ParameterGrouping")
  parentGroup   ParameterGroup?      @relation("GroupHierarchy", fields: [parentGroupId], references: [id], onDelete: Cascade)
  childGroups   ParameterGroup[]     @relation("GroupHierarchy")

  @@index([parentGroupId])
  @@index([groupType])
  @@map("parameter_groups")
}

/// Calculated parameters using formulas and expressions to derive values from other parameters for advanced process control
///
/// **Business Purpose:** Enables sophisticated process control through calculated parameters, derived measurements, and automated parameter relationships
/// **Data Owner:** Manufacturing Engineering and Automation Teams
/// **Update Frequency:** Updated when calculation logic changes, new derived parameters are needed, or process optimization requires formula adjustments
/// **Compliance:** Formula documentation required for process validation, calculation traceability, and regulatory audit requirements
/// **Data Retention:** Permanent retention for calculation validation and process control system documentation
/// **Security:** Internal - Process calculation logic with competitive and operational sensitivity
/// **Integrations:** Process Control Systems, SPC Analytics, Automated Control, Real-time Calculations
/// **Related Tables:** OperationParameter, Operation, SPCConfiguration
///
/// **Examples:**
/// - Feed rate calculation: Automatic feed rate calculation based on spindle speed and cutting tool parameters
/// - Process efficiency calculation: Scheduled efficiency calculation updated every 5 minutes for performance monitoring
///
/// **Common Queries:**
/// - Find formulas requiring recalculation after parameter changes
/// - Generate calculated parameter values for process control
/// - Track formula performance and calculation accuracy
///
model ParameterFormula {
  id                 String             @id @default(cuid())
  formulaName        String
  outputParameterId  String             @unique
  formulaExpression  String
  formulaLanguage    FormulaLanguage    @default(JAVASCRIPT)
  inputParameterIds  String[]
  evaluationTrigger  EvaluationTrigger  @default(ON_CHANGE)
  evaluationSchedule String?
  testCases          Json?
  isActive           Boolean            @default(true)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  createdBy          String
  lastModifiedBy     String?
  outputParameter    OperationParameter @relation("FormulaOutput", fields: [outputParameterId], references: [id], onDelete: Cascade)

  @@index([outputParameterId])
  @@map("parameter_formulas")
}

/// Dependencies and prerequisites between manufacturing operations defining sequence constraints and timing relationships for production scheduling
///
/// **Business Purpose:** Ensures proper operation sequencing and timing to maintain product quality, process integrity, and manufacturing efficiency
/// **Data Owner:** Manufacturing Engineering and Production Planning Teams
/// **Update Frequency:** Updated when process sequences change, new dependencies are identified, or manufacturing methods are modified
/// **Compliance:** Operation dependencies critical for process validation, quality control, and regulatory compliance in controlled manufacturing
/// **Data Retention:** Permanent retention for process validation and manufacturing methodology documentation
/// **Security:** Internal - Manufacturing process relationships with competitive sensitivity
/// **Integrations:** Production Scheduling, Work Order Management, Capacity Planning, Process Control
/// **Related Tables:** Operation, Routing, RoutingStep, WorkOrder
///
/// **Examples:**
/// - Heat treatment dependency: Machining operation dependent on heat treatment completion with mandatory cooling period
/// - Quality inspection prerequisite: Assembly operation requires successful dimensional inspection completion
///
/// **Common Queries:**
/// - Find operation prerequisites for scheduling and planning
/// - Generate operation sequence diagrams for process visualization
/// - Validate operation dependencies for process compliance
///
model OperationDependency {
  id                      String               @id @default(cuid())
  dependentOperationId    String
  prerequisiteOperationId String
  dependencyType          DependencyType
  timingType              DependencyTimingType
  lagTime                 Int?
  leadTime                Int?
  condition               String?
  isOptional              Boolean              @default(false)
  notes                   String?
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt
  dependentOperation      Operation            @relation("DependentOperation", fields: [dependentOperationId], references: [id], onDelete: Cascade)
  prerequisiteOperation   Operation            @relation("PrerequisiteOperation", fields: [prerequisiteOperationId], references: [id], onDelete: Cascade)

  @@unique([dependentOperationId, prerequisiteOperationId])
  @@index([dependentOperationId])
  @@index([prerequisiteOperationId])
  @@map("operation_dependencies")
}

model PersonnelOperationSpecification {
  id                     String           @id @default(cuid())
  operationId            String
  personnelClassId       String?
  skillId                String?
  minimumCompetency      CompetencyLevel?
  requiredCertifications String[]
  quantity               Int              @default(1)
  isOptional             Boolean          @default(false)
  roleName               String?
  roleDescription        String?
  notes                  String?
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  operation              Operation        @relation(fields: [operationId], references: [id], onDelete: Cascade)

  @@index([operationId])
  @@index([personnelClassId])
  @@map("personnel_operation_specifications")
}

/// Equipment requirements and specifications for manufacturing operations defining equipment capabilities, capacity, and setup requirements
///
/// **Business Purpose:** Ensures proper equipment selection and capacity allocation for manufacturing operations based on technical requirements and production needs
/// **Data Owner:** Manufacturing Engineering and Process Engineering Teams
/// **Update Frequency:** Updated when operation requirements change, equipment capabilities are modified, or process optimization identifies new specifications
/// **Compliance:** Equipment specifications critical for process validation, capability verification, and regulatory compliance in controlled manufacturing
/// **Data Retention:** Permanent retention for process validation and equipment requirement documentation
/// **Security:** Internal - Manufacturing process requirements with competitive and operational sensitivity
/// **Integrations:** Equipment Management, Operation Planning, Capacity Planning, Work Order Assignment
/// **Related Tables:** Operation, Equipment, EquipmentCapability, WorkCenter
///
/// **Examples:**
/// - CNC machining operation requirements: Precision machining operation requiring specific 5-axis CNC capabilities with titanium processing
/// - Heat treatment operation requirements: Critical heat treatment requiring vacuum furnace with aerospace certification
///
/// **Common Queries:**
/// - Find equipment meeting operation requirements for routing
/// - Generate equipment specification reports for capacity planning
/// - Validate equipment capabilities against operation needs
///
model EquipmentOperationSpecification {
  id                   String          @id @default(cuid())
  operationId          String
  equipmentClass       EquipmentClass?
  equipmentType        String?
  specificEquipmentId  String?
  requiredCapabilities String[]
  minimumCapacity      Float?
  quantity             Int             @default(1)
  isOptional           Boolean         @default(false)
  setupRequired        Boolean         @default(false)
  setupTime            Int?
  notes                String?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  operation            Operation       @relation(fields: [operationId], references: [id], onDelete: Cascade)

  @@index([operationId])
  @@index([equipmentClass])
  @@map("equipment_operation_specifications")
}

model MaterialOperationSpecification {
  id                   String          @id @default(cuid())
  operationId          String
  materialDefinitionId String?
  materialClassId      String?
  materialType         MaterialType?
  quantity             Float
  unitOfMeasure        String
  consumptionType      ConsumptionType
  requiredProperties   String[]
  qualityRequirements  String?
  isOptional           Boolean         @default(false)
  allowSubstitutes     Boolean         @default(false)
  notes                String?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  operation            Operation       @relation(fields: [operationId], references: [id], onDelete: Cascade)

  @@index([operationId])
  @@index([materialDefinitionId])
  @@map("material_operation_specifications")
}

model PhysicalAssetOperationSpecification {
  id                  String            @id @default(cuid())
  operationId         String
  assetType           PhysicalAssetType
  assetCode           String?
  assetName           String
  specifications      Json?
  quantity            Int               @default(1)
  isOptional          Boolean           @default(false)
  requiresCalibration Boolean           @default(false)
  calibrationInterval Int?
  estimatedLifeCycles Int?
  notes               String?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  operation           Operation         @relation(fields: [operationId], references: [id], onDelete: Cascade)

  @@index([operationId])
  @@index([assetType])
  @@map("physical_asset_operation_specifications")
}

/// Master part data defining all manufactured, purchased, and assemblable items with specifications and lifecycle management
///
/// **Business Purpose:** Serves as the foundation for all product-related activities including design, manufacturing, purchasing, and inventory management
/// **Data Owner:** Engineering and Product Management Teams
/// **Update Frequency:** Updated when new parts are introduced, specifications change, or lifecycle transitions occur
/// **Compliance:** Part data critical for regulatory compliance, change control, and customer part approval requirements
/// **Data Retention:** Permanent retention for product lifecycle, warranty, and regulatory compliance
/// **Security:** Internal - Product design and manufacturing information with competitive sensitivity
/// **Integrations:** ERP Product Master, PLM Systems, CAD Systems, Inventory Management, Purchasing Systems
/// **Related Tables:** BOMItem, WorkOrder, ProductSpecification, Routing, SerializedPart
///
/// **Examples:**
/// - Aerospace turbine blade part: Critical aerospace component with controlled drawings and revision management
/// - Commercial off-the-shelf component: Standard purchased component with lead time and procurement information
///
/// **Common Queries:**
/// - Find parts by lifecycle state for product planning
/// - Generate part lists for BOM explosion
/// - Track part changes and revision history for compliance
///
model Part {
  id                         String                      @id @default(cuid())
  partNumber                 String                      @unique
  partName                   String
  description                String?
  partType                   String
  productType                ProductType                 @default(MADE_TO_STOCK)
  lifecycleState             ProductLifecycleState       @default(PRODUCTION)
  unitOfMeasure              String
  weight                     Float?
  weightUnit                 String?
  drawingNumber              String?
  revision                   String?
  cadModelUrl                String?
  releaseDate                DateTime?
  obsoleteDate               DateTime?
  replacementPartId          String?
  makeOrBuy                  String?                     @default("MAKE")
  leadTimeDays               Int?
  lotSizeMin                 Int?
  lotSizeMultiple            Int?
  standardCost               Float?
  targetCost                 Float?
  currency                   String?                     @default("USD")
  isActive                   Boolean                     @default(true)
  isConfigurable             Boolean                     @default(false)
  requiresFAI                Boolean                     @default(false)
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt
  componentItems             BOMItem[]                   @relation("ComponentPart")
  bomItems                   BOMItem[]                   @relation("ParentPart")
  equipmentMaterialMovements EquipmentMaterialMovement[]
  erpMaterialTransactions    ERPMaterialTransaction[]
  inventoryItems             Inventory[]
  siteAvailability           PartSiteAvailability[]
  replacementPart            Part?                       @relation("PartReplacement", fields: [replacementPartId], references: [id])
  replacedParts              Part[]                      @relation("PartReplacement")
  configurations             ProductConfiguration[]
  lifecycleHistory           ProductLifecycle[]
  specifications             ProductSpecification[]
  productionScheduleRequests ProductionScheduleRequest[]
  qualityPlans               QualityPlan[]
  routings                   Routing[]
  scheduleEntries            ScheduleEntry[]
  serializedParts            SerializedPart[]
  workOrders                 WorkOrder[]

  @@index([productType])
  @@index([lifecycleState])
  @@index([isActive])
  @@index([partNumber])
  @@map("parts")
}

/// Part availability and manufacturing capability by site including costs, lead times, and production constraints for multi-site operations
///
/// **Business Purpose:** Enables optimal site selection for part production based on capability, cost, and capacity considerations across multiple manufacturing locations
/// **Data Owner:** Production Planning and Site Operations Teams
/// **Update Frequency:** Updated when site capabilities change, costs are revised, or production capacity is modified
/// **Compliance:** Site availability must consider regulatory approvals, customer certifications, and quality system requirements
/// **Data Retention:** 5 years for cost analysis and production planning historical data
/// **Security:** Internal - Site capabilities and cost information with competitive sensitivity
/// **Integrations:** Production Planning, Cost Management, Site Management, Customer Requirements
/// **Related Tables:** Part, Site, WorkOrder, ProductionSchedule
///
/// **Examples:**
/// - Preferred site for aerospace parts: Preferred Atlanta site for aerospace turbine blade production with customer certification
/// - Alternative site with cost advantage: Alternative Dallas site for standard bolt production with cost advantages for larger quantities
///
/// **Common Queries:**
/// - Find optimal sites for part production based on cost and capability
/// - Generate site loading reports for capacity planning
/// - Track part availability and lead times across sites
///
model PartSiteAvailability {
  id             String    @id @default(cuid())
  partId         String
  siteId         String
  isPreferred    Boolean   @default(false)
  isActive       Boolean   @default(true)
  leadTimeDays   Int?
  minimumLotSize Int?
  maximumLotSize Int?
  standardCost   Float?
  setupCost      Float?
  effectiveDate  DateTime?
  expirationDate DateTime?
  notes          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  part           Part      @relation(fields: [partId], references: [id], onDelete: Cascade)
  site           Site      @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@unique([partId, siteId])
  @@index([siteId])
  @@index([isActive])
  @@map("part_site_availability")
}

/// Bill of Materials structure defining parent-child relationships between parts with quantities and assembly information
///
/// **Business Purpose:** Defines product structure enabling material planning, costing, and manufacturing execution based on assembly hierarchy
/// **Data Owner:** Engineering and Manufacturing Engineering Teams
/// **Update Frequency:** Updated when product designs change, engineering changes occur, or assembly methods are modified
/// **Compliance:** BOM changes must be controlled through engineering change process for traceability and customer approval
/// **Data Retention:** Permanent retention for product configuration history and regulatory compliance
/// **Security:** Internal - Product structure and design information with competitive sensitivity
/// **Integrations:** PLM Systems, ERP BOM Management, Material Requirements Planning, Cost Management
/// **Related Tables:** Part, Operation, MaterialTransaction, WorkOrder
///
/// **Examples:**
/// - Turbine assembly BOM item: Critical blade component in turbine assembly with specific operation assignment
/// - Optional configuration component: Optional component with engineering change tracking and effective date control
///
/// **Common Queries:**
/// - Explode BOM for material requirements planning
/// - Find where-used information for impact analysis
/// - Generate assembly lists for production planning
///
model BOMItem {
  id                  String     @id @default(cuid())
  parentPartId        String
  componentPartId     String
  quantity            Float
  unitOfMeasure       String
  scrapFactor         Float?     @default(0)
  sequence            Int?
  findNumber          String?
  referenceDesignator String?
  operationId         String?
  operationNumber     Int?
  effectiveDate       DateTime?
  obsoleteDate        DateTime?
  ecoNumber           String?
  isOptional          Boolean    @default(false)
  isCritical          Boolean    @default(false)
  notes               String?
  isActive            Boolean    @default(true)
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  componentPart       Part       @relation("ComponentPart", fields: [componentPartId], references: [id])
  operation           Operation? @relation(fields: [operationId], references: [id])
  parentPart          Part       @relation("ParentPart", fields: [parentPartId], references: [id])

  @@index([parentPartId])
  @@index([componentPartId])
  @@index([operationId])
  @@index([effectiveDate])
  @@map("bom_items")
}

/// Detailed technical specifications and requirements for parts including dimensions, materials, and performance criteria
///
/// **Business Purpose:** Defines quality requirements and acceptance criteria ensuring parts meet design intent and customer specifications
/// **Data Owner:** Engineering and Quality Assurance Teams
/// **Update Frequency:** Updated when specifications change, quality requirements are modified, or customer requirements change
/// **Compliance:** Specifications must be controlled and approved per quality system requirements and customer agreements
/// **Data Retention:** Permanent retention for product compliance and quality system requirements
/// **Security:** Internal - Technical specifications with potential customer and competitive sensitivity
/// **Integrations:** Quality Management, Inspection Planning, Supplier Management, Customer Requirements
/// **Related Tables:** Part, QualityPlan, QualityCharacteristic, InspectionPlan
///
/// **Examples:**
/// - Critical dimensional specification: Critical aerospace dimension with tight tolerance requiring regulatory compliance
/// - Material property specification: Material strength requirement with specified test method and regulatory documentation
///
/// **Common Queries:**
/// - Find specifications by criticality for quality planning
/// - Generate inspection requirements from specifications
/// - Track specification changes for customer notification
///
model ProductSpecification {
  id                  String            @id @default(cuid())
  partId              String
  specificationName   String
  specificationType   SpecificationType
  specificationValue  String?
  nominalValue        Float?
  minValue            Float?
  maxValue            Float?
  unitOfMeasure       String?
  testMethod          String?
  inspectionFrequency String?
  isCritical          Boolean           @default(false)
  isRegulatory        Boolean           @default(false)
  documentReferences  String[]
  notes               String?
  isActive            Boolean           @default(true)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  part                Part              @relation(fields: [partId], references: [id], onDelete: Cascade)

  @@index([partId])
  @@index([specificationType])
  @@index([isCritical])
  @@map("product_specifications")
}

/// Product configuration variants and options enabling customizable products with different features and characteristics
///
/// **Business Purpose:** Supports product customization and variant management for customer-specific requirements and market differentiation
/// **Data Owner:** Product Management and Sales Engineering Teams
/// **Update Frequency:** Updated when new configurations are introduced, options change, or market requirements evolve
/// **Compliance:** Configuration changes may require customer approval and regulatory certification for safety-critical applications
/// **Data Retention:** Permanent retention for product configuration history and customer order fulfillment
/// **Security:** Internal - Product configuration and pricing information with competitive sensitivity
/// **Integrations:** Sales Configuration, Order Management, Engineering Change Control, Manufacturing Planning
/// **Related Tables:** Part, ConfigurationOption, WorkOrder, ProductLifecycle
///
/// **Examples:**
/// - Engine performance configuration: Performance upgrade configuration with pricing impact and extended lead time
/// - Regional compliance configuration: Regulatory compliance configuration for specific market requirements
///
/// **Common Queries:**
/// - Find available configurations for sales quotation
/// - Generate configuration BOMs for manufacturing
/// - Track configuration usage for market analysis
///
model ProductConfiguration {
  id                String                @id @default(cuid())
  partId            String
  configurationName String
  configurationType ConfigurationType
  description       String?
  configurationCode String?
  attributes        Json?
  priceModifier     Float?                @default(0)
  costModifier      Float?                @default(0)
  leadTimeDelta     Int?                  @default(0)
  isAvailable       Boolean               @default(true)
  effectiveDate     DateTime?
  obsoleteDate      DateTime?
  isDefault         Boolean               @default(false)
  marketingName     String?
  imageUrl          String?
  isActive          Boolean               @default(true)
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  options           ConfigurationOption[]
  part              Part                  @relation(fields: [partId], references: [id], onDelete: Cascade)

  @@index([partId])
  @@index([configurationType])
  @@index([isDefault])
  @@map("product_configurations")
}

model ConfigurationOption {
  id              String               @id @default(cuid())
  configurationId String
  optionName      String
  optionCode      String?
  description     String?
  optionCategory  String?
  optionValue     String?
  isRequired      Boolean              @default(false)
  isDefault       Boolean              @default(false)
  addedPartIds    String[]
  removedPartIds  String[]
  priceModifier   Float?               @default(0)
  costModifier    Float?               @default(0)
  displayOrder    Int?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  configuration   ProductConfiguration @relation(fields: [configurationId], references: [id], onDelete: Cascade)

  @@index([configurationId])
  @@map("configuration_options")
}

model ProductLifecycle {
  id                String                 @id @default(cuid())
  partId            String
  previousState     ProductLifecycleState?
  newState          ProductLifecycleState
  transitionDate    DateTime               @default(now())
  reason            String?
  ecoNumber         String?
  approvedBy        String?
  approvedAt        DateTime?
  notificationsSent Boolean                @default(false)
  impactAssessment  String?
  notes             String?
  metadata          Json?
  createdAt         DateTime               @default(now())
  part              Part                   @relation(fields: [partId], references: [id], onDelete: Cascade)

  @@index([partId])
  @@index([newState])
  @@index([transitionDate])
  @@map("product_lifecycle")
}

/// Central production work orders defining specific manufacturing jobs with materials, operations, quantities, and scheduling requirements
///
/// **Business Purpose:** Orchestrates all manufacturing activities by defining what to produce, when to produce it, and how to execute production with complete traceability
/// **Data Owner:** Production Planning and Manufacturing Operations Teams
/// **Update Frequency:** Real-time updates as work orders are created, scheduled, executed, and completed through the manufacturing lifecycle
/// **Compliance:** Work orders critical for production accountability, quality traceability, and regulatory compliance in controlled manufacturing environments
/// **Data Retention:** 7 years for production accountability and financial audit, permanent for critical part traceability
/// **Security:** Internal - Production schedules and manufacturing information with competitive and operational sensitivity
/// **Integrations:** Production Scheduling, Material Requirements Planning, Quality Management, Labor Tracking, Cost Accounting
/// **Related Tables:** Part, Routing, WorkOrderOperation, MaterialTransaction, QualityInspection
///
/// **Examples:**
/// - Aerospace turbine blade work order: High-priority aerospace work order for Boeing customer with defined routing and tight delivery schedule
/// - Standard bolt production work order: Standard production work order for stainless steel bolts at Dallas facility
///
/// **Common Queries:**
/// - Find work orders by status for production scheduling
/// - Track work order progress and completion rates
/// - Generate production reports for customer delivery commitments
///
model WorkOrder {
  id                           String                        @id @default(cuid())
  /// Human-readable identifier for production work orders following company format
  /// **Business Rule:** Sequential numbering per site per year, must be unique globally
  /// **Data Source:** Auto-generated by production planning system
  /// **Format:** WO-YYYY-NNNNNN (e.g., WO-2024-001234)
  /// **Validation:** Format enforced, uniqueness checked globally
  /// **Business Impact:** Primary reference for all production tracking and customer communication
  /// **Examples:**
  /// - WO-2024-001234 - Regular production work order
  /// - WO-2024-999999 - Emergency or rush order
  /// - WO-2024-R00123 - Rework order (R prefix)
  /// **Integration Mapping:**
  /// - erpSystem: JobNumber
  /// - schedulingSystem: WorkOrderID
  workOrderNumber              String                        @unique
  partId                       String
  partNumber                   String?
  quantity                     Int
  quantityCompleted            Int                           @default(0)
  quantityScrapped             Int                           @default(0)
  /// Production priority level affecting scheduling and resource allocation
  /// **Business Rule:** Set by production planning based on customer requirements and delivery dates
  /// **Data Source:** Production planner assignment or ERP system import
  /// **Business Impact:** Drives scheduling algorithms and resource allocation decisions
  /// **Valid Values:**
  /// - LOW - Standard production schedule
  /// - NORMAL - Regular priority, on-time delivery
  /// - HIGH - Expedited processing required
  /// - URGENT - Drop everything, immediate attention
  /// - CUSTOMER_CRITICAL - Customer line-down situation
  priority                     WorkOrderPriority
  status                       WorkOrderStatus
  dueDate                      DateTime?
  customerOrder                String?
  routingId                    String?
  siteId                       String?
  createdById                  String
  assignedToId                 String?
  startedAt                    DateTime?
  /// Date when production work actually began on the shop floor
  /// **Business Rule:** Set when first operation is started, cannot be changed once set
  /// **Data Source:** Shop floor data collection or operator entry
  /// **Format:** ISO 8601 timestamp with timezone
  /// **Business Impact:** Actual vs. planned start variance affects delivery predictions
  /// **Audit Trail:** Critical for production metrics and on-time delivery tracking
  actualStartDate              DateTime?
  completedAt                  DateTime?
  actualEndDate                DateTime?
  createdAt                    DateTime                      @default(now())
  updatedAt                    DateTime                      @updatedAt
  dispatchLogs                 DispatchLog[]
  equipmentCommands            EquipmentCommand[]
  equipmentDataCollections     EquipmentDataCollection[]
  equipmentMaterialMovements   EquipmentMaterialMovement[]
  erpMaterialTransactions      ERPMaterialTransaction[]
  laborTimeEntries             LaborTimeEntry[]
  machineTimeEntries           MachineTimeEntry[]
  materialTransactions         MaterialTransaction[]
  ncrs                         NCR[]
  processDataCollections       ProcessDataCollection[]
  productionPerformanceActuals ProductionPerformanceActual[]
  productionScheduleRequests   ProductionScheduleRequest[]
  variances                    ProductionVariance[]
  qifMeasurementPlans          QIFMeasurementPlan[]
  qifMeasurementResults        QIFMeasurementResult[]
  qualityInspections           QualityInspection[]
  scheduleEntry                ScheduleEntry?
  operations                   WorkOrderOperation[]
  statusHistory                WorkOrderStatusHistory[]
  assignedTo                   User?                         @relation("AssignedTo", fields: [assignedToId], references: [id])
  createdBy                    User                          @relation("CreatedBy", fields: [createdById], references: [id])
  part                         Part                          @relation(fields: [partId], references: [id])
  routing                      Routing?                      @relation(fields: [routingId], references: [id])
  site                         Site?                         @relation(fields: [siteId], references: [id])
  workPerformance              WorkPerformance[]

  @@map("work_orders")
}

/// Manufacturing process routes defining the complete sequence of operations required to produce a specific part or assembly
///
/// **Business Purpose:** Orchestrates the manufacturing process by defining operation sequence, work centers, and process flow to transform raw materials into finished products
/// **Data Owner:** Manufacturing Engineering and Production Planning Teams
/// **Update Frequency:** Updated when processes change, equipment modifications occur, or engineering changes affect manufacturing methods
/// **Compliance:** Routing changes must be approved and documented per AS9100 requirements. Customer notification may be required for critical parts
/// **Data Retention:** Permanent retention for manufacturing history, cost analysis, and regulatory compliance
/// **Security:** Internal - Contains proprietary manufacturing processes and competitive information
/// **Integrations:** Production Scheduling, Work Order Management, Capacity Planning, Cost Estimation, Shop Floor Control
/// **Related Tables:** RoutingOperation, RoutingStep, Part, WorkOrder, RoutingTemplate
///
/// **Examples:**
/// - Aerospace turbine blade routing: Complete manufacturing sequence for critical aerospace component with version control
/// - Alternative routing for capacity optimization: Backup routing for production flexibility and capacity management
///
/// **Common Queries:**
/// - Find active routings for production scheduling
/// - Generate routing costs for job estimation
/// - Track routing performance and cycle time analysis
///
model Routing {
  id              String                @id @default(cuid())
  routingNumber   String                @unique
  partId          String?
  siteId          String?
  version         String                @default("1.0")
  lifecycleState  RoutingLifecycleState @default(DRAFT)
  description     String?
  isPrimaryRoute  Boolean               @default(false)
  isActive        Boolean               @default(true)
  effectiveDate   DateTime?
  expirationDate  DateTime?
  routingType     RoutingType           @default(PRIMARY)
  alternateForId  String?
  priority        Int                   @default(1)
  approvedBy      String?
  approvedAt      DateTime?
  visualData      Json?
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  createdBy       String?
  notes           String?
  operations      RoutingOperation[]
  steps           RoutingStep[]
  templateSources RoutingTemplate[]     @relation("TemplateSource")
  alternateFor    Routing?              @relation("AlternateRoutes", fields: [alternateForId], references: [id])
  alternateRoutes Routing[]             @relation("AlternateRoutes")
  part            Part?                 @relation(fields: [partId], references: [id])
  site            Site?                 @relation(fields: [siteId], references: [id])
  scheduleEntries ScheduleEntry[]
  workOrders      WorkOrder[]

  @@unique([partId, siteId, version])
  @@index([siteId])
  @@index([partId])
  @@index([lifecycleState])
  @@index([isActive])
  @@index([partId, siteId, routingType])
  @@index([alternateForId])
  @@map("routings")
}

/// Specific operations assigned to routings with work center assignments and timing details for manufacturing execution
///
/// **Business Purpose:** Links individual operations to specific routings, defining where work is performed and providing scheduling granularity for production control
/// **Data Owner:** Manufacturing Engineering and Production Planning Teams
/// **Update Frequency:** Updated when routing changes occur, work center assignments change, or timing standards are revised
/// **Compliance:** Operation assignments must maintain traceability for quality system compliance and customer requirements
/// **Data Retention:** Permanent retention for manufacturing history and performance analysis
/// **Security:** Internal - Manufacturing process and capacity information
/// **Integrations:** Production Scheduling, Work Center Management, Capacity Planning, Shop Floor Control
/// **Related Tables:** Routing, WorkCenter, Operation, WorkOrderOperation
///
/// **Examples:**
/// - Machining operation in routing: First operation in turbine blade routing with timing and work center assignment
/// - Inspection operation in routing: Quality control checkpoint in manufacturing sequence with measurement requirements
///
/// **Common Queries:**
/// - Find operations by work center for scheduling
/// - Generate operation sequences for work orders
/// - Track operation timing for efficiency analysis
///
model RoutingOperation {
  id              String               @id @default(cuid())
  routingId       String
  operationNumber Int
  operationName   String
  description     String?
  setupTime       Float?
  cycleTime       Float?
  workCenterId    String?
  isActive        Boolean              @default(true)
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  routing         Routing              @relation(fields: [routingId], references: [id])
  workCenter      WorkCenter?          @relation(fields: [workCenterId], references: [id])
  workOrderOps    WorkOrderOperation[]

  @@map("routing_operations")
}

/// Detailed individual steps within operations providing granular control and specific instructions for manufacturing execution
///
/// **Business Purpose:** Breaks down operations into executable steps with detailed parameters, dependencies, and quality requirements for precise shop floor control
/// **Data Owner:** Manufacturing Engineering and Process Engineering Teams
/// **Update Frequency:** Updated when process details change, quality requirements are modified, or continuous improvement changes are implemented
/// **Compliance:** Step documentation must include verification requirements and acceptance criteria for regulatory compliance
/// **Data Retention:** Permanent retention for process validation and regulatory compliance
/// **Security:** Internal - Detailed process parameters and proprietary manufacturing methods
/// **Integrations:** Work Instructions, Quality Plans, Shop Floor Terminals, Process Control Systems
/// **Related Tables:** Routing, Operation, WorkCenter, RoutingStepDependency, WorkInstruction
///
/// **Examples:**
/// - Machining setup step: Critical setup step with specific instructions and timing for precision machining
/// - Quality verification step: Quality control step with specific measurement requirements and work instruction reference
///
/// **Common Queries:**
/// - Find critical path steps for schedule optimization
/// - Generate step-by-step work instructions
/// - Track step execution times and dependencies
///
model RoutingStep {
  id                   String                  @id @default(cuid())
  routingId            String
  stepNumber           Int
  operationId          String
  workCenterId         String?
  stepType             StepType                @default(PROCESS)
  controlType          ControlType?
  setupTimeOverride    Int?
  cycleTimeOverride    Int?
  teardownTimeOverride Int?
  isOptional           Boolean                 @default(false)
  isQualityInspection  Boolean                 @default(false)
  isCriticalPath       Boolean                 @default(false)
  workInstructionId    String?
  stepInstructions     String?
  notes                String?
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
  dependencies         RoutingStepDependency[] @relation("DependentStep")
  prerequisites        RoutingStepDependency[] @relation("PrerequisiteStep")
  parameterOverrides   RoutingStepParameter[]
  operation            Operation               @relation(fields: [operationId], references: [id])
  routing              Routing                 @relation(fields: [routingId], references: [id], onDelete: Cascade)
  workCenter           WorkCenter?             @relation(fields: [workCenterId], references: [id])
  workInstruction      WorkInstruction?        @relation("RoutingStepWorkInstruction", fields: [workInstructionId], references: [id])
  workOrderOperations  WorkOrderOperation[]

  @@unique([routingId, stepNumber])
  @@index([routingId])
  @@index([operationId])
  @@index([workCenterId])
  @@map("routing_steps")
}

/// Granular dependencies between individual routing steps enabling precise process control and step-level scheduling coordination
///
/// **Business Purpose:** Provides detailed step-level coordination ensuring proper execution sequence, resource allocation, and quality control at the finest granularity
/// **Data Owner:** Manufacturing Engineering and Process Engineering Teams
/// **Update Frequency:** Updated when detailed process steps change, timing requirements are modified, or step-level optimizations are implemented
/// **Compliance:** Step dependencies essential for detailed process validation, quality control, and regulatory compliance documentation
/// **Data Retention:** Permanent retention for detailed process validation and step-level methodology documentation
/// **Security:** Internal - Detailed process control with proprietary manufacturing methodology
/// **Integrations:** Work Instructions, Shop Floor Control, Process Execution, Quality Management
/// **Related Tables:** RoutingStep, Routing, Operation, WorkInstruction
///
/// **Examples:**
/// - Setup to execution step dependency: Machining execution step requires setup completion with 5-minute preparation buffer
/// - Measurement verification dependency: Next operation step dependent on dimensional verification completion
///
/// **Common Queries:**
/// - Find step prerequisites for detailed scheduling
/// - Generate step dependency charts for operator guidance
/// - Validate step sequences for process execution
///
model RoutingStepDependency {
  id                 String               @id @default(cuid())
  dependentStepId    String
  prerequisiteStepId String
  dependencyType     DependencyType
  timingType         DependencyTimingType
  lagTime            Int?
  leadTime           Int?
  createdAt          DateTime             @default(now())
  dependentStep      RoutingStep          @relation("DependentStep", fields: [dependentStepId], references: [id], onDelete: Cascade)
  prerequisiteStep   RoutingStep          @relation("PrerequisiteStep", fields: [prerequisiteStepId], references: [id], onDelete: Cascade)

  @@unique([dependentStepId, prerequisiteStepId])
  @@index([dependentStepId])
  @@index([prerequisiteStepId])
  @@map("routing_step_dependencies")
}

model RoutingStepParameter {
  id             String      @id @default(cuid())
  routingStepId  String
  parameterName  String
  parameterValue String
  unitOfMeasure  String?
  notes          String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  routingStep    RoutingStep @relation(fields: [routingStepId], references: [id], onDelete: Cascade)

  @@unique([routingStepId, parameterName])
  @@index([routingStepId])
  @@map("routing_step_parameters")
}

/// Reusable routing templates enabling standardized process creation, best practice sharing, and manufacturing methodology consistency
///
/// **Business Purpose:** Accelerates routing development and ensures process consistency by providing proven manufacturing sequences and optimized methodologies
/// **Data Owner:** Manufacturing Engineering and Process Engineering Teams
/// **Update Frequency:** Updated when new templates are created, existing templates are optimized, or best practices are identified
/// **Compliance:** Templates must maintain process validation and quality requirements when instantiated for production use
/// **Data Retention:** Permanent retention for manufacturing knowledge management and process standardization
/// **Security:** Internal - Manufacturing methodologies and process templates with competitive value
/// **Integrations:** Routing Management, Process Development, Best Practice Libraries, Manufacturing Standards
/// **Related Tables:** Routing, User, Site, Operation
///
/// **Examples:**
/// - Aerospace machining template: High-rated aerospace machining template used across multiple precision component routings
/// - Assembly process template: Favorite template derived from master engine routing with proven assembly methodology
///
/// **Common Queries:**
/// - Find templates by category for routing development
/// - Generate new routings from proven templates
/// - Track template usage and effectiveness metrics
///
model RoutingTemplate {
  id              String   @id @default(cuid())
  name            String
  number          String   @unique @default(cuid())
  category        String?
  description     String?
  tags            String[]
  isPublic        Boolean  @default(false)
  isFavorite      Boolean  @default(false)
  usageCount      Int      @default(0)
  rating          Float?
  visualData      Json?
  sourceRoutingId String?
  createdById     String
  siteId          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       User     @relation(fields: [createdById], references: [id])
  site            Site     @relation(fields: [siteId], references: [id])
  sourceRouting   Routing? @relation("TemplateSource", fields: [sourceRoutingId], references: [id])

  @@index([siteId])
  @@index([createdById])
  @@index([category])
  @@index([isFavorite])
  @@map("routing_templates")
}

/// Manufacturing work centers that organize equipment, personnel, and operations within functional areas of the facility
///
/// **Business Purpose:** Provides logical grouping of manufacturing resources to enable efficient scheduling, capacity planning, and resource allocation
/// **Data Owner:** Manufacturing Engineering and Production Planning Teams
/// **Update Frequency:** Updated when manufacturing layouts change or new work centers are established
/// **Compliance:** Work center definitions critical for capacity planning, resource allocation, and regulatory reporting requirements
/// **Data Retention:** Permanent retention for manufacturing history and capacity analysis
/// **Security:** Internal - Manufacturing organization and capacity information
/// **Integrations:** Production Scheduling, Equipment Management, Personnel Management, Capacity Planning, Shop Floor Control
/// **Related Tables:** Area, Equipment, PersonnelWorkCenterAssignment, ScheduleEntry, RoutingOperation
///
/// **Examples:**
/// - CNC machining work center: Dedicated work center for precision machining operations with defined capacity
/// - Assembly work center: Assembly work center with sequential workstations and defined throughput capacity
///
/// **Common Queries:**
/// - Find available work centers by capability for routing
/// - Generate work center utilization reports
/// - Track personnel assignments by work center
///
model WorkCenter {
  id                   String                          @id @default(cuid())
  name                 String                          @unique
  description          String?
  capacity             Float?
  areaId               String?
  isActive             Boolean                         @default(true)
  createdAt            DateTime                        @default(now())
  updatedAt            DateTime                        @updatedAt
  dispatchLogs         DispatchLog[]                   @relation("DispatchWorkCenter")
  equipment            Equipment[]
  personnelAssignments PersonnelWorkCenterAssignment[]
  operations           RoutingOperation[]
  routingSteps         RoutingStep[]
  scheduleEntries      ScheduleEntry[]
  area                 Area?                           @relation(fields: [areaId], references: [id])
  workUnits            WorkUnit[]

  @@index([areaId])
  @@map("work_centers")
}

model WorkUnit {
  id           String      @id @default(cuid())
  workUnitCode String      @unique
  workUnitName String
  description  String?
  workCenterId String
  isActive     Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  equipment    Equipment[]
  workCenter   WorkCenter  @relation(fields: [workCenterId], references: [id])

  @@index([workCenterId])
  @@map("work_units")
}

/// Individual manufacturing operations within a work order, defining the specific steps, resources, and sequence required to transform materials
///
/// **Business Purpose:** Breaks down work orders into executable shop floor operations, enabling detailed scheduling, resource allocation, and progress tracking at the operation level
/// **Data Owner:** Production Engineering Team
/// **Update Frequency:** Real-time updates as operations are started, paused, and completed on the shop floor
/// **Compliance:** Operation records critical for AS9100 traceability requirements and FDA process validation in medical device manufacturing
/// **Data Retention:** Permanent retention for traceability and process improvement analysis
/// **Security:** Internal - Contains detailed manufacturing process information
/// **Integrations:** Shop Floor Control Systems, Equipment Controllers, Time & Attendance, Quality Management, Production Scheduling
/// **Related Tables:** WorkOrder, Operation, Equipment, ProductionSchedule, QualityInspection
///
/// **Examples:**
/// - CNC machining operation for turbine blade: Primary machining operation requiring specific equipment and skilled operator
/// - Quality inspection checkpoint: Critical measurement operation ensuring dimensional compliance
///
/// **Common Queries:**
/// - Find operations ready to start for available equipment
/// - Track operation completion times for labor efficiency analysis
/// - Generate operation status reports for production meetings
///
model WorkOrderOperation {
  id                 String                   @id @default(cuid())
  workOrderId        String
  routingOperationId String
  status             WorkOrderOperationStatus
  quantity           Int
  quantityCompleted  Int                      @default(0)
  quantityScrap      Int                      @default(0)
  startedAt          DateTime?
  completedAt        DateTime?
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  routingStepId      String?
  laborTimeEntries   LaborTimeEntry[]
  machineTimeEntries MachineTimeEntry[]
  variances          ProductionVariance[]
  routingOperation   RoutingOperation         @relation(fields: [routingOperationId], references: [id])
  RoutingStep        RoutingStep?             @relation(fields: [routingStepId], references: [id])
  workOrder          WorkOrder                @relation(fields: [workOrderId], references: [id])
  workPerformance    WorkPerformance[]

  @@map("work_order_operations")
}

/// Master production schedules coordinating work orders, resources, and timeline across the manufacturing facility
///
/// **Business Purpose:** Optimizes production flow by sequencing work orders, allocating equipment and personnel, and managing capacity constraints to meet delivery commitments
/// **Data Owner:** Production Planning Team
/// **Update Frequency:** Daily schedule generation with real-time adjustments for disruptions and priority changes
/// **Compliance:** Schedule changes affecting customer deliveries must be documented for contract compliance and quality system requirements
/// **Data Retention:** 5 years for production planning optimization and performance analysis
/// **Security:** Internal - Contains production capacity and customer delivery information
/// **Integrations:** ERP Planning System, Shop Floor Control, Customer Order Management, Capacity Planning, Material Requirements Planning
/// **Related Tables:** ScheduleEntry, WorkOrder, Equipment, PersonnelWorkCenterAssignment, Site
///
/// **Examples:**
/// - Weekly production schedule for Cell A: Coordinated schedule balancing multiple work orders across available equipment
///
/// **Common Queries:**
/// - Find schedules with capacity availability for rush orders
/// - Generate resource utilization reports by time period
/// - Track schedule adherence and variance analysis
///
model ProductionSchedule {
  id               String                 @id @default(cuid())
  scheduleNumber   String                 @unique
  /// Human-readable identifier for the production schedule
  /// **Business Rule:** Should include time period and area/equipment group for clarity
  /// **Data Source:** Production planning system or manual assignment
  /// **Format:** Descriptive format including location and time period
  /// **Business Impact:** Provides clear identification for schedule communication and management
  /// **Examples:**
  /// - Cell A - Week 43 2024
  /// - CNC Department - Daily Schedule 2024-10-21
  /// - Assembly Line 1 - Shift 1 Schedule
  scheduleName     String
  description      String?
  periodStart      DateTime
  periodEnd        DateTime
  periodType       String                 @default("MONTHLY")
  siteId           String?
  areaId           String?
  state            ScheduleState          @default(FORECAST)
  stateChangedAt   DateTime               @default(now())
  stateChangedBy   String?
  priority         SchedulePriority       @default(NORMAL)
  plannedBy        String?
  approvedBy       String?
  approvedAt       DateTime?
  dispatchedCount  Int                    @default(0)
  totalEntries     Int                    @default(0)
  isLocked         Boolean                @default(false)
  isFeasible       Boolean                @default(true)
  feasibilityNotes String?
  notes            String?
  metadata         Json?
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  site             Site?                  @relation(fields: [siteId], references: [id])
  entries          ScheduleEntry[]
  stateHistory     ScheduleStateHistory[]

  @@index([siteId])
  @@index([state])
  @@index([periodStart])
  @@index([periodEnd])
  @@map("production_schedules")
}

/// Individual scheduled activities linking specific work order operations to equipment, personnel, and time slots
///
/// **Business Purpose:** Provides detailed scheduling granularity for shop floor execution, ensuring the right work is assigned to the right resources at the right time
/// **Data Owner:** Production Planning Team
/// **Update Frequency:** Real-time updates as work progresses and schedules are adjusted for operational realities
/// **Compliance:** Schedule entries provide audit trail for production decisions and resource allocation compliance
/// **Data Retention:** 3 years for operational analysis and continuous improvement
/// **Security:** Internal - Contains detailed resource allocation and timing information
/// **Integrations:** Shop Floor Terminals, Equipment Controllers, Time Tracking Systems, Labor Management, Real-time Production Monitoring
/// **Related Tables:** ProductionSchedule, WorkOrderOperation, Equipment, User, ScheduleConstraint
///
/// **Examples:**
/// - CNC operation scheduled for morning shift: Specific time slot assignment for machining operation with designated resources
/// - Setup and changeover activity: Equipment preparation time allocated before production operation
///
/// **Common Queries:**
/// - Find available schedule slots for urgent work orders
/// - Track actual vs. planned execution times for schedule optimization
/// - Generate daily work assignments for shop floor personnel
///
model ScheduleEntry {
  id                 String               @id @default(cuid())
  scheduleId         String
  entryNumber        Int
  partId             String
  partNumber         String
  description        String?
  plannedQuantity    Float
  dispatchedQuantity Float                @default(0)
  completedQuantity  Float                @default(0)
  unitOfMeasure      String               @default("EA")
  plannedStartDate   DateTime
  plannedEndDate     DateTime
  actualStartDate    DateTime?
  actualEndDate      DateTime?
  priority           SchedulePriority     @default(NORMAL)
  sequenceNumber     Int?
  estimatedDuration  Int?
  workCenterId       String?
  routingId          String?
  customerOrder      String?
  customerDueDate    DateTime?
  salesOrder         String?
  isDispatched       Boolean              @default(false)
  dispatchedAt       DateTime?
  dispatchedBy       String?
  workOrderId        String?              @unique
  isCancelled        Boolean              @default(false)
  cancelledAt        DateTime?
  cancelledReason    String?
  notes              String?
  metadata           Json?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  constraints        ScheduleConstraint[]
  part               Part                 @relation(fields: [partId], references: [id])
  routing            Routing?             @relation(fields: [routingId], references: [id])
  schedule           ProductionSchedule   @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  workCenter         WorkCenter?          @relation(fields: [workCenterId], references: [id])
  workOrder          WorkOrder?           @relation(fields: [workOrderId], references: [id])

  @@unique([scheduleId, entryNumber])
  @@index([scheduleId])
  @@index([partId])
  @@index([plannedStartDate])
  @@index([plannedEndDate])
  @@index([priority])
  @@index([isDispatched])
  @@index([workOrderId])
  @@map("schedule_entries")
}

model ScheduleConstraint {
  id                String         @id @default(cuid())
  entryId           String
  constraintType    ConstraintType
  constraintName    String
  description       String?
  resourceId        String?
  resourceType      String?
  requiredQuantity  Float?
  availableQuantity Float?
  unitOfMeasure     String?
  constraintDate    DateTime?
  leadTimeDays      Int?
  isViolated        Boolean        @default(false)
  violationSeverity String?
  violationMessage  String?
  isResolved        Boolean        @default(false)
  resolvedAt        DateTime?
  resolvedBy        String?
  resolutionNotes   String?
  notes             String?
  metadata          Json?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  entry             ScheduleEntry  @relation(fields: [entryId], references: [id], onDelete: Cascade)

  @@index([entryId])
  @@index([constraintType])
  @@index([isViolated])
  @@index([constraintDate])
  @@map("schedule_constraints")
}

model ScheduleStateHistory {
  id                String             @id @default(cuid())
  scheduleId        String
  previousState     ScheduleState?
  newState          ScheduleState
  transitionDate    DateTime           @default(now())
  reason            String?
  changedBy         String?
  entriesAffected   Int?
  notificationsSent Boolean            @default(false)
  notes             String?
  metadata          Json?
  createdAt         DateTime           @default(now())
  schedule          ProductionSchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  @@index([scheduleId])
  @@index([newState])
  @@index([transitionDate])
  @@map("schedule_state_history")
}

/// Complete audit trail of work order status transitions tracking lifecycle progression, decision points, and operational milestones
///
/// **Business Purpose:** Provides comprehensive work order lifecycle tracking for performance analysis, accountability, and continuous improvement initiatives
/// **Data Owner:** Production Control and Manufacturing Operations Teams
/// **Update Frequency:** Real-time logging as work orders transition through manufacturing lifecycle stages
/// **Compliance:** Status history required for production accountability, delivery tracking, and regulatory compliance audit trails
/// **Data Retention:** 7 years for production accountability, permanent for critical work order analysis
/// **Security:** Internal - Production progress and operational performance information
/// **Integrations:** Work Order Management, Production Reporting, Performance Analytics, Customer Communication
/// **Related Tables:** WorkOrder, User, QualityInspection, ProductionSchedule
///
/// **Examples:**
/// - Work order release to production: Work order released to production with material confirmation and quantity tracking
/// - Quality hold status transition: Work order placed on quality hold requiring engineering investigation
///
/// **Common Queries:**
/// - Track work order lifecycle performance and timing
/// - Generate production progress reports for management
/// - Analyze status transition patterns for process improvement
///
model WorkOrderStatusHistory {
  id                   String           @id @default(cuid())
  workOrderId          String
  previousStatus       WorkOrderStatus?
  newStatus            WorkOrderStatus
  transitionDate       DateTime         @default(now())
  reason               String?
  changedBy            String?
  notes                String?
  quantityAtTransition Int?
  scrapAtTransition    Int?
  metadata             Json?
  createdAt            DateTime         @default(now())
  workOrder            WorkOrder        @relation(fields: [workOrderId], references: [id], onDelete: Cascade)

  @@index([workOrderId])
  @@index([newStatus])
  @@index([transitionDate])
  @@map("work_order_status_history")
}

/// Work order dispatching and resource assignment tracking for production execution with operator and equipment allocation
///
/// **Business Purpose:** Manages the critical transition from planned work orders to active production by tracking assignment decisions, resource allocation, and execution timing
/// **Data Owner:** Production Planning and Scheduling Teams
/// **Update Frequency:** Real-time updates when work orders are dispatched to production resources and operators
/// **Compliance:** Dispatch records provide audit trail for work order execution and resource accountability - critical for traceability compliance
/// **Data Retention:** 3 years for production analysis and resource optimization
/// **Security:** Internal - Production scheduling and resource allocation data
/// **Integrations:** Production Scheduling, Work Order Management, Resource Planning, Shop Floor Control, Labor Tracking
/// **Related Tables:** WorkOrder, User, WorkCenter, ProductionSchedule, WorkOrderOperation
///
/// **Examples:**
/// - Machining work order dispatch: High-priority turbine component work order dispatched to certified machinist with all resources reserved
/// - Assembly operation dispatch: Assembly work order dispatched with dependency on incoming material delivery
///
/// **Common Queries:**
/// - Track work order dispatch timing for scheduling analysis
/// - Generate operator work assignments for shift planning
/// - Monitor resource allocation effectiveness
///
model DispatchLog {
  id                 String             @id @default(cuid())
  workOrderId        String
  dispatchedAt       DateTime           @default(now())
  dispatchedBy       String?
  dispatchedFrom     String?
  assignedToId       String?
  workCenterId       String?
  priorityOverride   WorkOrderPriority?
  expectedStartDate  DateTime?
  expectedEndDate    DateTime?
  quantityDispatched Int
  materialReserved   Boolean            @default(false)
  toolingReserved    Boolean            @default(false)
  dispatchNotes      String?
  metadata           Json?
  createdAt          DateTime           @default(now())
  assignedTo         User?              @relation("DispatchAssignedTo", fields: [assignedToId], references: [id])
  workCenter         WorkCenter?        @relation("DispatchWorkCenter", fields: [workCenterId], references: [id])
  workOrder          WorkOrder          @relation(fields: [workOrderId], references: [id], onDelete: Cascade)

  @@index([workOrderId])
  @@index([dispatchedAt])
  @@index([assignedToId])
  @@index([workCenterId])
  @@map("dispatch_logs")
}

/// Actual production performance data capturing labor, material, and equipment metrics against planned targets for continuous improvement
///
/// **Business Purpose:** Provides real-time and historical performance tracking to enable production optimization, cost control, and continuous improvement initiatives
/// **Data Owner:** Production Control and Industrial Engineering Teams
/// **Update Frequency:** Real-time data collection as work is performed and completed on the shop floor
/// **Compliance:** Performance data required for cost accounting, efficiency analysis, and regulatory reporting requirements
/// **Data Retention:** 7 years for financial audit, permanent for performance benchmarking and improvement analysis
/// **Security:** Internal - Production performance and cost data
/// **Integrations:** Shop Floor Data Collection, ERP Costing, Performance Analytics, Continuous Improvement Systems
/// **Related Tables:** WorkOrder, Operation, User, Equipment, Part
///
/// **Examples:**
/// - Labor performance tracking: Labor performance data showing efficiency and cost tracking for work order completion
/// - Material consumption tracking: Material usage tracking showing consumption versus planned quantities for cost control
/// - Equipment performance tracking: Equipment performance showing actual versus planned times for efficiency analysis
///
/// **Common Queries:**
/// - Track labor efficiency by operator and operation
/// - Analyze material consumption variances for cost control
/// - Generate equipment utilization reports for capacity planning
///
model WorkPerformance {
  id               String              @id @default(cuid())
  workOrderId      String
  operationId      String?
  performanceType  WorkPerformanceType
  recordedAt       DateTime            @default(now())
  recordedBy       String?
  personnelId      String?
  laborHours       Float?
  laborCost        Float?
  laborEfficiency  Float?
  partId           String?
  quantityConsumed Float?
  quantityPlanned  Float?
  materialVariance Float?
  unitCost         Float?
  totalCost        Float?
  equipmentId      String?
  setupTime        Float?
  runTime          Float?
  plannedSetupTime Float?
  plannedRunTime   Float?
  quantityProduced Int?
  quantityGood     Int?
  quantityScrap    Int?
  quantityRework   Int?
  yieldPercentage  Float?
  scrapReason      String?
  downtimeMinutes  Float?
  downtimeReason   String?
  downtimeCategory String?
  notes            String?
  metadata         Json?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  operation        WorkOrderOperation? @relation(fields: [operationId], references: [id], onDelete: Cascade)
  personnel        User?               @relation("WorkPerformancePersonnel", fields: [personnelId], references: [id])
  workOrder        WorkOrder           @relation(fields: [workOrderId], references: [id], onDelete: Cascade)

  @@index([workOrderId])
  @@index([operationId])
  @@index([performanceType])
  @@index([recordedAt])
  @@index([personnelId])
  @@map("work_performance")
}

/// Cost and performance variance tracking comparing actual production results against planned targets for continuous improvement
///
/// **Business Purpose:** Enables cost control, performance management, and operational excellence by identifying and analyzing deviations from production plans
/// **Data Owner:** Production Control and Cost Accounting Teams
/// **Update Frequency:** Real-time capture as operations complete, with periodic variance analysis and reporting
/// **Compliance:** Variance tracking required for accurate product costing and financial reporting - critical for profitability analysis
/// **Data Retention:** 7 years for financial audit and historical analysis
/// **Security:** Confidential - Cost and profitability information with competitive sensitivity
/// **Integrations:** Work Order Management, Cost Accounting, ERP Systems, Performance Analytics, Continuous Improvement
/// **Related Tables:** WorkOrder, WorkOrderOperation, Operation, MaterialTransaction, LaborTimeEntry
///
/// **Examples:**
/// - Material cost variance: Unfavorable material cost variance due to supplier constraint requiring premium material
/// - Labor efficiency variance: Favorable labor efficiency variance from process improvement reducing assembly time
///
/// **Common Queries:**
/// - Generate variance reports for cost center analysis
/// - Identify operations with consistent unfavorable variances
/// - Track continuous improvement impact on variance trends
///
model ProductionVariance {
  id               String              @id @default(cuid())
  workOrderId      String
  operationId      String?
  varianceType     VarianceType
  varianceName     String
  plannedValue     Float
  actualValue      Float
  variance         Float
  variancePercent  Float
  isFavorable      Boolean             @default(false)
  costImpact       Float?
  rootCause        String?
  correctiveAction String?
  responsibleParty String?
  calculatedAt     DateTime            @default(now())
  periodStart      DateTime?
  periodEnd        DateTime?
  isResolved       Boolean             @default(false)
  resolvedAt       DateTime?
  resolvedBy       String?
  notes            String?
  metadata         Json?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  operation        WorkOrderOperation? @relation(fields: [operationId], references: [id], onDelete: Cascade)
  workOrder        WorkOrder           @relation(fields: [workOrderId], references: [id], onDelete: Cascade)

  @@index([workOrderId])
  @@index([operationId])
  @@index([varianceType])
  @@index([isFavorable])
  @@index([calculatedAt])
  @@map("production_variances")
}

/// Quality control plans defining inspection requirements, measurement criteria, and acceptance standards for manufacturing operations
///
/// **Business Purpose:** Ensures product quality by specifying what to inspect, how to measure, and what constitutes acceptable results during manufacturing
/// **Data Owner:** Quality Assurance Team
/// **Update Frequency:** Updated when engineering changes occur or quality issues are identified
/// **Compliance:** Critical for AS9100 and ISO 9001 compliance - must be approved and controlled
/// **Data Retention:** Permanent retention for regulatory compliance and continuous improvement
/// **Security:** Internal - Contains proprietary quality specifications
/// **Integrations:** Quality Management System, Measurement Equipment, Work Instructions, Engineering Change System
/// **Related Tables:** QualityMeasurement, InspectionPlan, QualityInspection, Part
///
/// **Examples:**
/// - Dimensional inspection plan for precision part: Critical dimension checks required for aerospace component
///
/// **Common Queries:**
/// - Find quality plans requiring measurement equipment calibration
/// - Generate inspection schedules for upcoming production
/// - Track quality plan compliance rates by part family
///
model QualityPlan {
  id              String                  @id @default(cuid())
  planNumber      String                  @unique
  planName        String
  partId          String
  operation       String?
  description     String?
  isActive        Boolean                 @default(true)
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  characteristics QualityCharacteristic[]
  inspections     QualityInspection[]
  part            Part                    @relation(fields: [partId], references: [id])

  @@map("quality_plans")
}

/// Quality characteristics and measurement specifications defining inspection requirements, tolerances, and acceptance criteria for manufacturing quality control
///
/// **Business Purpose:** Defines specific quality requirements and measurement standards ensuring products meet design specifications and customer quality expectations
/// **Data Owner:** Quality Engineering and Quality Assurance Teams
/// **Update Frequency:** Updated when quality requirements change, specifications are revised, or customer requirements are modified
/// **Compliance:** Quality characteristics critical for quality system compliance, customer acceptance, and regulatory requirements (AS9100, ISO 9001, FDA)
/// **Data Retention:** Permanent retention for quality system validation and product compliance documentation
/// **Security:** Internal - Quality specifications with customer and competitive sensitivity
/// **Integrations:** Quality Management, Inspection Planning, Measurement Systems, Customer Requirements, Supplier Quality
/// **Related Tables:** QualityPlan, QualityMeasurement, QualityInspection, SPCConfiguration
///
/// **Examples:**
/// - Critical dimensional characteristic: Critical aerospace blade profile dimension with tight bilateral tolerance requiring CMM measurement
/// - Material property characteristic: Material strength requirement with minimum specification and standardized test method
///
/// **Common Queries:**
/// - Find quality characteristics for inspection planning
/// - Generate inspection requirements for work orders
/// - Track measurement data against specification limits
///
model QualityCharacteristic {
  id               String               @id @default(cuid())
  planId           String
  characteristic   String
  specification    String
  toleranceType    QualityToleranceType
  nominalValue     Float?
  upperLimit       Float?
  lowerLimit       Float?
  unitOfMeasure    String?
  inspectionMethod String?
  isActive         Boolean              @default(true)
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  plan             QualityPlan          @relation(fields: [planId], references: [id])
  measurements     QualityMeasurement[]

  @@map("quality_characteristics")
}

/// Quality inspection records tracking the execution of quality plans with inspector assignments, results, and compliance status
///
/// **Business Purpose:** Ensures product quality by documenting inspection execution, recording results, and maintaining traceability for regulatory compliance
/// **Data Owner:** Quality Assurance and Quality Control Teams
/// **Update Frequency:** Real-time updates as inspections are performed and completed
/// **Compliance:** Critical for AS9100, ISO 9001, and FDA compliance. Electronic signatures may be required per 21 CFR Part 11
/// **Data Retention:** Permanent retention for regulatory compliance and product traceability
/// **Security:** Internal - Quality data with potential customer delivery impact
/// **Integrations:** Quality Management Systems, Work Order Execution, Measurement Equipment, Non-Conformance Management
/// **Related Tables:** QualityPlan, WorkOrder, User, QualityMeasurement, NCR
///
/// **Examples:**
/// - Dimensional inspection for aerospace part: Completed dimensional inspection for turbine blade with certified inspector and documented results
/// - Material certification inspection: Active material certification inspection for incoming material batch verification
///
/// **Common Queries:**
/// - Find inspections by status for work queue management
/// - Generate inspection reports for customer deliveries
/// - Track inspector workload and certification compliance
///
model QualityInspection {
  id               String                   @id @default(cuid())
  inspectionNumber String                   @unique
  workOrderId      String
  planId           String
  inspectorId      String
  status           QualityInspectionStatus
  result           QualityInspectionResult?
  quantity         Int
  startedAt        DateTime?
  completedAt      DateTime?
  notes            String?
  createdAt        DateTime                 @default(now())
  updatedAt        DateTime                 @updatedAt
  ncrs             NCR[]
  inspector        User                     @relation(fields: [inspectorId], references: [id])
  plan             QualityPlan              @relation(fields: [planId], references: [id])
  workOrder        WorkOrder                @relation(fields: [workOrderId], references: [id])
  measurements     QualityMeasurement[]

  @@map("quality_inspections")
}

/// Individual measurement data collected during quality inspections with actual values, results, and acceptance criteria
///
/// **Business Purpose:** Captures precise measurement data for quality verification, statistical process control, and regulatory documentation
/// **Data Owner:** Quality Control and Inspection Teams
/// **Update Frequency:** Real-time data entry as measurements are performed during inspections
/// **Compliance:** Measurement data required for SPC analysis, customer certifications, and regulatory audit trails
/// **Data Retention:** Permanent retention for statistical analysis and product lifetime traceability
/// **Security:** Internal - Quality measurement data with competitive sensitivity
/// **Integrations:** Measurement Equipment, SPC Systems, Quality Inspection, Customer Certification Systems
/// **Related Tables:** QualityInspection, QualityCharacteristic, QualityPlan, SPCConfiguration
///
/// **Examples:**
/// - Dimensional measurement data: Precision measurement showing diameter value within acceptable tolerance range
/// - Surface finish measurement: Surface finish measurement identifying non-conformance requiring corrective action
///
/// **Common Queries:**
/// - Collect measurement data for SPC analysis
/// - Generate capability studies for process validation
/// - Track measurement trends for continuous improvement
///
model QualityMeasurement {
  id               String                @id @default(cuid())
  inspectionId     String
  characteristicId String
  measuredValue    Float
  result           String
  notes            String?
  createdAt        DateTime              @default(now())
  characteristic   QualityCharacteristic @relation(fields: [characteristicId], references: [id])
  inspection       QualityInspection     @relation(fields: [inspectionId], references: [id])

  @@map("quality_measurements")
}

/// Non-Conformance Reports documenting quality issues, defects, and corrective actions throughout the manufacturing process
///
/// **Business Purpose:** Manages quality issues by documenting problems, tracking corrective actions, and preventing recurrence through systematic problem-solving
/// **Data Owner:** Quality Assurance and Continuous Improvement Teams
/// **Update Frequency:** Real-time creation when issues are identified, updated as corrective actions are implemented
/// **Compliance:** Critical for AS9100 and ISO 9001 compliance. Customer notification may be required for delivered products
/// **Data Retention:** Permanent retention for continuous improvement and regulatory compliance
/// **Security:** Internal - Quality issues with potential customer and regulatory impact
/// **Integrations:** Quality Management Systems, Supplier Management, Customer Management, Corrective Action Systems
/// **Related Tables:** QualityInspection, WorkOrder, User, Site, Part
///
/// **Examples:**
/// - Dimensional non-conformance: Critical dimensional issue requiring immediate corrective action and customer notification
/// - Material defect with supplier involvement: Material quality issue requiring supplier investigation and process improvement
///
/// **Common Queries:**
/// - Track open NCRs by severity for priority management
/// - Generate supplier quality reports for performance review
/// - Analyze defect trends for continuous improvement
///
model NCR {
  id               String             @id @default(cuid())
  ncrNumber        String             @unique
  workOrderId      String?
  inspectionId     String?
  siteId           String?
  partNumber       String
  operation        String?
  defectType       String
  description      String
  severity         NCRSeverity
  status           NCRStatus
  quantity         Int
  createdById      String
  assignedToId     String?
  dueDate          DateTime?
  rootCause        String?
  correctiveAction String?
  preventiveAction String?
  closedAt         DateTime?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  assignedTo       User?              @relation("AssignedTo", fields: [assignedToId], references: [id])
  createdBy        User               @relation("CreatedBy", fields: [createdById], references: [id])
  inspection       QualityInspection? @relation(fields: [inspectionId], references: [id])
  site             Site?              @relation(fields: [siteId], references: [id])
  workOrder        WorkOrder?         @relation(fields: [workOrderId], references: [id])

  @@map("ncrs")
}

/// Manufacturing equipment and machinery used in production operations with capability and status tracking
///
/// **Business Purpose:** Manages shop floor assets including machines, tools, and measurement devices to optimize utilization and ensure capability
/// **Data Owner:** Manufacturing Engineering Team
/// **Update Frequency:** Real-time for status updates, periodic for capability assessments
/// **Compliance:** Calibration records required for measurement equipment (ISO 17025). Maintenance logs for safety compliance
/// **Data Retention:** Equipment lifetime plus 10 years for warranty and safety records
/// **Security:** Internal - Contains equipment capabilities and performance data
/// **Integrations:** Equipment Controllers, Maintenance Management, Calibration System, Production Scheduling
/// **Related Tables:** EquipmentCapability, EquipmentLog, WorkCenter, Operation
///
/// **Examples:**
/// - CNC machining center for precision parts: Primary machining equipment for aerospace components
///
/// **Common Queries:**
/// - Find available equipment for specific operation types
/// - Generate equipment utilization reports
/// - Track equipment maintenance schedules and compliance
///
model Equipment {
  id                         String                      @id @default(cuid())
  equipmentNumber            String                      @unique
  name                       String
  description                String?
  equipmentClass             EquipmentClass
  equipmentType              String?
  equipmentLevel             Int                         @default(1)
  parentEquipmentId          String?
  manufacturer               String?
  model                      String?
  serialNumber               String?
  installDate                DateTime?
  commissionDate             DateTime?
  siteId                     String?
  areaId                     String?
  workCenterId               String?
  workUnitId                 String?
  status                     EquipmentStatus
  currentState               EquipmentState              @default(IDLE)
  stateChangedAt             DateTime                    @default(now())
  utilizationRate            Float?                      @default(0)
  availability               Float?                      @default(0)
  performance                Float?                      @default(0)
  quality                    Float?                      @default(0)
  oee                        Float?                      @default(0)
  ratedCapacity              Float?
  currentCapacity            Float?
  isActive                   Boolean                     @default(true)
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt
  area                       Area?                       @relation(fields: [areaId], references: [id])
  parentEquipment            Equipment?                  @relation("EquipmentHierarchy", fields: [parentEquipmentId], references: [id])
  childEquipment             Equipment[]                 @relation("EquipmentHierarchy")
  site                       Site?                       @relation(fields: [siteId], references: [id])
  workCenter                 WorkCenter?                 @relation(fields: [workCenterId], references: [id])
  workUnit                   WorkUnit?                   @relation(fields: [workUnitId], references: [id])
  capabilities               EquipmentCapability[]
  equipmentCommands          EquipmentCommand[]
  equipmentDataCollections   EquipmentDataCollection[]
  logs                       EquipmentLog[]
  equipmentMaterialMovements EquipmentMaterialMovement[]
  performanceData            EquipmentPerformanceLog[]
  stateHistory               EquipmentStateHistory[]
  machineTimeEntries         MachineTimeEntry[]
  maintenanceWorkOrders      MaintenanceWorkOrder[]
  processDataCollections     ProcessDataCollection[]
  productionScheduleRequests ProductionScheduleRequest[]

  @@index([parentEquipmentId])
  @@index([workUnitId])
  @@index([workCenterId])
  @@index([areaId])
  @@index([siteId])
  @@index([currentState])
  @@index([equipmentClass])
  @@map("equipment")
}

/// Specific capabilities and qualifications of manufacturing equipment including certifications and operational parameters
///
/// **Business Purpose:** Defines what operations equipment can perform to enable intelligent routing, scheduling, and quality compliance
/// **Data Owner:** Manufacturing Engineering and Equipment Management Teams
/// **Update Frequency:** Updated when equipment capabilities change, certifications are renewed, or new qualifications are added
/// **Compliance:** Capability certifications required for regulatory compliance, customer approvals, and quality system requirements
/// **Data Retention:** Permanent retention for equipment qualification history and regulatory compliance
/// **Security:** Internal - Equipment capabilities and certification information
/// **Integrations:** Equipment Management, Production Routing, Quality Management, Certification Management
/// **Related Tables:** Equipment, Operation, RoutingOperation, QualityPlan
///
/// **Examples:**
/// - CNC machine precision capability: Precision capability with aerospace certification and renewal requirements
/// - CMM measurement capability: Measurement equipment capability with calibration certification
/// - Material processing capability: Material-specific processing capability with parameter definitions
///
/// **Common Queries:**
/// - Find equipment by capability for operation routing
/// - Generate capability matrices for customer approvals
/// - Track certification renewals and compliance status
///
model EquipmentCapability {
  id             String    @id @default(cuid())
  equipmentId    String
  capabilityType String
  capability     String
  description    String?
  parameters     Json?
  certifiedDate  DateTime?
  expiryDate     DateTime?
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  equipment      Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)

  @@index([equipmentId])
  @@index([capabilityType])
  @@index([capability])
  @@map("equipment_capabilities")
}

/// Equipment activity logs capturing operational events, maintenance actions, and state changes for comprehensive equipment history
///
/// **Business Purpose:** Maintains detailed audit trail of equipment activities to support troubleshooting, compliance, and performance analysis
/// **Data Owner:** Manufacturing Engineering and Maintenance Teams
/// **Update Frequency:** Real-time logging as equipment events occur and maintenance activities are performed
/// **Compliance:** Equipment logs required for regulatory compliance, safety audits, and quality system maintenance records
/// **Data Retention:** 7 years for regulatory compliance, permanent for critical equipment and safety-related events
/// **Security:** Internal - Equipment operational and maintenance information
/// **Integrations:** Equipment Controllers, Maintenance Management, Safety Systems, Audit Management
/// **Related Tables:** Equipment, User, MaintenanceWorkOrder, EquipmentStateHistory
///
/// **Examples:**
/// - Equipment maintenance event log: Maintenance action logged with technician identification and detailed description
/// - Equipment alarm event: Automated alarm event indicating potential equipment issue requiring attention
///
/// **Common Queries:**
/// - Find equipment logs by type for maintenance analysis
/// - Generate equipment history reports for troubleshooting
/// - Track maintenance activities by technician and equipment
///
model EquipmentLog {
  id          String           @id @default(cuid())
  equipmentId String
  logType     EquipmentLogType
  description String
  userId      String?
  loggedAt    DateTime         @default(now())
  equipment   Equipment        @relation(fields: [equipmentId], references: [id])
  user        User?            @relation(fields: [userId], references: [id])

  @@map("equipment_logs")
}

/// Complete history of equipment state transitions tracking operational status, downtime, and utilization patterns
///
/// **Business Purpose:** Enables equipment utilization analysis, downtime tracking, and operational efficiency improvement through detailed state monitoring
/// **Data Owner:** Manufacturing Engineering and Production Control Teams
/// **Update Frequency:** Real-time updates as equipment transitions between operational states
/// **Compliance:** State history required for equipment efficiency reporting, utilization analysis, and production accountability
/// **Data Retention:** 5 years for operational analysis, permanent for critical production equipment
/// **Security:** Internal - Equipment utilization and operational performance data
/// **Integrations:** Equipment Controllers, Production Scheduling, Performance Analytics, Maintenance Management
/// **Related Tables:** Equipment, WorkOrder, Operation, MaintenanceWorkOrder
///
/// **Examples:**
/// - Equipment running to maintenance transition: State change from production to maintenance with duration tracking and work order reference
/// - Unplanned downtime event: Equipment failure event triggering downtime tracking and requiring immediate attention
///
/// **Common Queries:**
/// - Calculate equipment utilization by time period
/// - Track downtime events for reliability analysis
/// - Generate state transition reports for performance improvement
///
model EquipmentStateHistory {
  id             String          @id @default(cuid())
  equipmentId    String
  previousState  EquipmentState?
  newState       EquipmentState
  reason         String?
  changedBy      String?
  stateStartTime DateTime        @default(now())
  stateEndTime   DateTime?
  duration       Int?
  workOrderId    String?
  operationId    String?
  downtime       Boolean         @default(false)
  createdAt      DateTime        @default(now())
  equipment      Equipment       @relation(fields: [equipmentId], references: [id])

  @@index([equipmentId])
  @@index([stateStartTime])
  @@index([newState])
  @@map("equipment_state_history")
}

/// Equipment performance metrics tracking availability, performance efficiency, and Overall Equipment Effectiveness (OEE)
///
/// **Business Purpose:** Provides comprehensive performance measurement to drive equipment optimization, maintenance planning, and continuous improvement initiatives
/// **Data Owner:** Manufacturing Engineering and Industrial Engineering Teams
/// **Update Frequency:** Periodic performance calculation by shift, day, or production period
/// **Compliance:** Performance data required for operational reporting, efficiency analysis, and continuous improvement compliance
/// **Data Retention:** 5 years for trend analysis and benchmarking, permanent for critical equipment baselines
/// **Security:** Internal - Equipment performance and operational efficiency data
/// **Integrations:** Equipment Controllers, Production Systems, Performance Analytics, Maintenance Planning
/// **Related Tables:** Equipment, WorkOrder, Operation, EquipmentStateHistory
///
/// **Examples:**
/// - Daily shift performance metrics: Complete OEE calculation for day shift showing strong quality but opportunities in availability and performance
/// - Weekly performance summary: Weekly utilization summary showing planned versus actual operating time with downtime analysis
///
/// **Common Queries:**
/// - Track OEE trends for equipment optimization
/// - Generate performance benchmarks for capacity planning
/// - Analyze performance patterns for maintenance scheduling
///
model EquipmentPerformanceLog {
  id                    String                @id @default(cuid())
  equipmentId           String
  periodStart           DateTime
  periodEnd             DateTime
  periodType            PerformancePeriodType @default(SHIFT)
  plannedProductionTime Int
  operatingTime         Int
  downtime              Int
  availability          Float
  idealCycleTime        Float?
  actualCycleTime       Float?
  totalUnitsProduced    Int
  targetProduction      Int?
  performance           Float
  goodUnits             Int
  rejectedUnits         Int
  scrapUnits            Int
  reworkUnits           Int
  quality               Float
  oee                   Float
  workOrderId           String?
  partId                String?
  operatorId            String?
  teep                  Float?
  utilizationRate       Float?
  notes                 String?
  hasAnomalies          Boolean               @default(false)
  createdAt             DateTime              @default(now())
  calculatedAt          DateTime              @default(now())
  equipment             Equipment             @relation(fields: [equipmentId], references: [id])

  @@index([equipmentId])
  @@index([periodStart])
  @@index([periodType])
  @@index([oee])
  @@map("equipment_performance_logs")
}

/// Material inventory management tracking quantities, locations, costs, and availability across all manufacturing sites and storage locations
///
/// **Business Purpose:** Provides real-time inventory visibility enabling material planning, cost control, and production support through accurate inventory management
/// **Data Owner:** Materials Management and Inventory Control Teams
/// **Update Frequency:** Real-time updates as materials are received, consumed, transferred, or adjusted through manufacturing operations
/// **Compliance:** Inventory tracking required for financial accuracy, material accountability, and regulatory compliance in controlled environments
/// **Data Retention:** 7 years for financial audit requirements and inventory valuation
/// **Security:** Internal - Inventory levels and cost information with competitive and financial sensitivity
/// **Integrations:** Material Requirements Planning, Purchasing, Receiving, Work Order Management, Financial Systems
/// **Related Tables:** Part, MaterialTransaction, MaterialLot, Site
///
/// **Examples:**
/// - Raw titanium inventory: Titanium alloy bar stock inventory with lot tracking and cost information
/// - Finished goods inventory: Finished turbine blade inventory ready for customer shipment
///
/// **Common Queries:**
/// - Find available inventory for material requirements planning
/// - Track inventory costs and valuation for financial reporting
/// - Generate inventory reports by location and part
///
model Inventory {
  id            String                @id @default(cuid())
  partId        String
  location      String
  lotNumber     String?
  quantity      Float
  unitOfMeasure String
  unitCost      Float?
  receivedDate  DateTime?
  expiryDate    DateTime?
  isActive      Boolean               @default(true)
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  part          Part                  @relation(fields: [partId], references: [id])
  transactions  MaterialTransaction[]

  @@map("inventory")
}

/// Detailed record of all material movements, consumption, and inventory changes with timestamps and authorization
///
/// **Business Purpose:** Maintains complete audit trail of material usage for cost accounting, inventory control, and regulatory traceability
/// **Data Owner:** Materials Management and Production Control Teams
/// **Update Frequency:** Real-time updates for every material movement, issue, or return transaction
/// **Compliance:** Transaction records required for cost accounting, inventory accuracy, and regulatory audit trails
/// **Data Retention:** 7 years for financial audit requirements, permanent for critical part traceability
/// **Security:** Internal - Contains cost and usage information
/// **Integrations:** ERP Inventory Module, Production Control Systems, Cost Accounting, Shop Floor Data Collection
/// **Related Tables:** MaterialLot, WorkOrder, User, CostCenter
///
/// **Examples:**
/// - Material issue to work order: Titanium alloy issued from inventory to specific work order for production
/// - Material return from production: Unused medical polymer returned to inventory after production completion
///
/// **Common Queries:**
/// - Track material consumption by work order for costing
/// - Generate material usage reports for inventory planning
/// - Audit material transactions for specific time periods
///
model MaterialTransaction {
  id              String                  @id @default(cuid())
  inventoryId     String
  workOrderId     String?
  /// Type of material movement or inventory transaction being recorded
  /// **Business Rule:** Transaction type determines inventory impact and cost accounting treatment
  /// **Data Source:** Production control system, inventory management, and shop floor transactions
  /// **Validation:** Must be valid transaction type with proper authorization
  /// **Business Impact:** Determines inventory valuation, cost allocation, and material availability
  /// **Audit Trail:** All transactions logged for financial and regulatory audit compliance
  /// **Valid Values:**
  /// - RECEIPT - Material received into inventory from supplier
  /// - ISSUE - Material issued from inventory to production
  /// - RETURN - Unused material returned to inventory from production
  /// - TRANSFER - Material moved between locations or lots
  /// - ADJUSTMENT - Inventory correction or cycle count adjustment
  /// - SCRAP - Material scrapped or written off as waste
  transactionType MaterialTransactionType
  /// Amount of material involved in the transaction with appropriate units of measure
  /// **Business Rule:** Quantity must be positive for receipts/issues, can be negative for returns/adjustments
  /// **Data Source:** Physical measurement, scale readings, or count verification
  /// **Format:** Decimal number with unit of measure (lbs, kg, pieces, etc.)
  /// **Validation:** Must be positive for normal transactions, match physical verification
  /// **Business Impact:** Affects inventory levels, cost calculations, and material availability for production
  /// **Examples:**
  /// - 25.5 lbs - Weight-based materials like metals
  /// - 100 pieces - Count-based materials like fasteners
  /// - 2.5 m³ - Volume-based materials like composites
  quantity        Float
  unitOfMeasure   String
  reference       String?
  transactionDate DateTime                @default(now())
  createdAt       DateTime                @default(now())
  inventory       Inventory               @relation(fields: [inventoryId], references: [id])
  workOrder       WorkOrder?              @relation(fields: [workOrderId], references: [id])

  @@map("material_transactions")
}

/// Individual serialized parts with unique identifiers enabling complete traceability throughout manufacturing and service life
///
/// **Business Purpose:** Provides unit-level traceability for quality control, warranty management, and regulatory compliance requirements
/// **Data Owner:** Manufacturing Operations and Quality Control Teams
/// **Update Frequency:** Real-time updates as parts move through manufacturing, inspection, and delivery processes
/// **Compliance:** Critical for aerospace, medical, and automotive traceability requirements. Serial numbers must be maintained for product lifetime
/// **Data Retention:** Permanent retention for complete product lifetime traceability and warranty support
/// **Security:** Internal - Serialized part information with customer delivery and service implications
/// **Integrations:** Manufacturing Execution, Quality Management, Shipping Systems, Service Management
/// **Related Tables:** Part, WorkOrder, PartGenealogy, QualityInspection, InspectionRecord
///
/// **Examples:**
/// - Aerospace engine component: Shipped turbine blade with complete manufacturing and customer traceability
/// - In-process serialized part: Part currently in manufacturing with location tracking and work order assignment
///
/// **Common Queries:**
/// - Track serialized parts by status for production control
/// - Generate genealogy reports for customer deliveries
/// - Find parts requiring inspection or service by serial number
///
model SerializedPart {
  id                    String                 @id @default(cuid())
  serialNumber          String                 @unique
  partId                String
  workOrderId           String?
  lotNumber             String?
  status                String
  currentLocation       String?
  manufactureDate       DateTime?
  shipDate              DateTime?
  customerInfo          String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  inspectionRecords     InspectionRecord[]
  components            PartGenealogy[]        @relation("ComponentPart")
  genealogy             PartGenealogy[]        @relation("ParentPart")
  qifMeasurementResults QIFMeasurementResult[]
  part                  Part                   @relation(fields: [partId], references: [id])

  @@map("serialized_parts")
}

/// Assembly genealogy tracking parent-child relationships between serialized parts for complete product traceability
///
/// **Business Purpose:** Maintains assembly history enabling rapid response to quality issues, recalls, and service requirements through complete traceability
/// **Data Owner:** Manufacturing Operations and Quality Assurance Teams
/// **Update Frequency:** Real-time updates as parts are assembled and genealogy relationships are established
/// **Compliance:** Essential for aerospace, medical, and automotive recall management and regulatory traceability requirements
/// **Data Retention:** Permanent retention for complete product lifetime traceability and regulatory compliance
/// **Security:** Internal - Assembly relationships with quality and service implications
/// **Integrations:** Assembly Operations, Quality Management, Service Management, Recall Management
/// **Related Tables:** SerializedPart, WorkOrder, User, QualityInspection
///
/// **Examples:**
/// - Turbine blade assembly genealogy: Turbine blade installed in assembly with operator identification and timestamp
/// - Multi-level assembly traceability: Assembly incorporated into higher-level product creating multi-level genealogy chain
///
/// **Common Queries:**
/// - Generate complete product genealogy for customer delivery
/// - Find all components affected by material or quality issues
/// - Track assembly history for service and warranty analysis
///
model PartGenealogy {
  id               String         @id @default(cuid())
  parentPartId     String
  componentPartId  String
  assemblyDate     DateTime?
  assemblyOperator String?
  createdAt        DateTime       @default(now())
  componentPart    SerializedPart @relation("ComponentPart", fields: [componentPartId], references: [id])
  parentPart       SerializedPart @relation("ParentPart", fields: [parentPartId], references: [id])

  @@map("part_genealogy")
}

/// Detailed step-by-step instructions for manufacturing operations, processes, and procedures
///
/// **Business Purpose:** Provides standardized work procedures to ensure consistent quality, safety, and efficiency in manufacturing operations
/// **Data Owner:** Manufacturing Engineering and Process Engineering Teams
/// **Update Frequency:** Updated when processes change, equipment is modified, or continuous improvement identifies better methods
/// **Compliance:** Work instructions must be controlled documents per AS9100 and ISO 9001 requirements. Changes require approval and training
/// **Data Retention:** Permanent retention for process history and regulatory compliance
/// **Security:** Internal - Contains proprietary manufacturing processes and procedures
/// **Integrations:** Shop Floor Terminals, Training Management, Quality Management, Equipment Controllers
/// **Related Tables:** WorkInstructionStep, Part, Operation, WorkInstructionExecution
///
/// **Examples:**
/// - CNC machining work instruction: Detailed instructions for rough machining operation on aerospace turbine blade
/// - Assembly work instruction: Step-by-step assembly procedure with safety requirements and training prerequisites
///
/// **Common Queries:**
/// - Find work instructions for specific operations
/// - Generate work instruction packages for work orders
/// - Track work instruction compliance and execution
///
model WorkInstruction {
  id                   String                    @id @default(cuid())
  title                String
  description          String?
  partId               String?
  operationId          String?
  version              String                    @default("1.0.0")
  status               WorkInstructionStatus     @default(DRAFT)
  effectiveDate        DateTime?
  supersededDate       DateTime?
  ecoNumber            String?
  approvedById         String?
  approvedAt           DateTime?
  approvalHistory      Json?
  createdById          String
  updatedById          String
  createdAt            DateTime                  @default(now())
  updatedAt            DateTime                  @updatedAt
  operationType        String?
  requiredForExecution Boolean                   @default(false)
  contentFormat        WorkInstructionFormat     @default(NATIVE)
  nativeContent        Json?
  importedFromFile     String?
  exportTemplateId     String?
  tags                 String[]
  categories           String[]
  keywords             String[]
  thumbnailUrl         String?
  operationStandard    Operation[]               @relation("OperationStandardWI")
  routingStepOverrides RoutingStep[]             @relation("RoutingStepWorkInstruction")
  mediaLibraryItems    WorkInstructionMedia[]
  relatedDocuments     WorkInstructionRelation[] @relation("ParentInstruction")
  steps                WorkInstructionStep[]
  approvedBy           User?                     @relation("WorkInstructionApprovedBy", fields: [approvedById], references: [id])
  createdBy            User                      @relation("WorkInstructionCreatedBy", fields: [createdById], references: [id])
  exportTemplate       ExportTemplate?           @relation(fields: [exportTemplateId], references: [id])
  updatedBy            User                      @relation("WorkInstructionUpdatedBy", fields: [updatedById], references: [id])

  @@index([status])
  @@index([partId])
  @@index([contentFormat])
  @@index([tags])
  @@index([categories])
  @@map("work_instructions")
}

/// Individual steps within work instructions containing specific actions, parameters, and verification requirements
///
/// **Business Purpose:** Breaks down complex manufacturing procedures into manageable steps with clear acceptance criteria and safety requirements
/// **Data Owner:** Manufacturing Engineering and Process Engineering Teams
/// **Update Frequency:** Updated when process details change or step improvements are identified
/// **Compliance:** Step documentation must include verification methods and acceptance criteria for quality compliance
/// **Data Retention:** Permanent retention with work instruction version history
/// **Security:** Internal - Contains detailed process parameters and specifications
/// **Integrations:** Shop Floor Data Collection, Operator Terminals, Measurement Equipment, Safety Systems
/// **Related Tables:** WorkInstruction, WorkInstructionStepExecution, Equipment, QualityPlan
///
/// **Examples:**
/// - Machining setup step: Initial setup step with safety requirements and time estimates
/// - Quality verification step: Quality control step requiring measurement and verification
///
/// **Common Queries:**
/// - Find steps requiring specific tools or equipment
/// - Generate step-by-step operator guidance
/// - Track step execution times and compliance
///
model WorkInstructionStep {
  id                String          @id @default(cuid())
  workInstructionId String
  stepNumber        Int
  title             String
  content           String
  imageUrls         String[]
  videoUrls         String[]
  attachmentUrls    String[]
  estimatedDuration Int?
  isCritical        Boolean         @default(false)
  requiresSignature Boolean         @default(false)
  dataEntryFields   Json?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  workInstruction   WorkInstruction @relation(fields: [workInstructionId], references: [id], onDelete: Cascade)

  @@unique([workInstructionId, stepNumber])
  @@index([workInstructionId])
  @@map("work_instruction_steps")
}

/// Records of work instruction execution including operator, timing, and completion status for specific work orders
///
/// **Business Purpose:** Tracks adherence to standardized procedures and provides audit trail for manufacturing compliance and process improvement
/// **Data Owner:** Production Control and Quality Assurance Teams
/// **Update Frequency:** Real-time updates as operators execute work instructions on the shop floor
/// **Compliance:** Execution records required for traceability and regulatory compliance (AS9100, FDA). Electronic signatures may be required
/// **Data Retention:** 7 years for audit requirements, permanent for critical part traceability
/// **Security:** Internal - Contains production execution and operator performance data
/// **Integrations:** Shop Floor Terminals, Time Tracking, Quality Management, Electronic Signature Systems
/// **Related Tables:** WorkInstruction, WorkOrder, User, WorkInstructionStepExecution
///
/// **Examples:**
/// - Completed machining instruction execution: Completed execution of rough machining work instruction with operator tracking
/// - In-progress assembly instruction: Active execution of assembly work instruction currently in progress
///
/// **Common Queries:**
/// - Track work instruction execution by operator
/// - Generate compliance reports for completed work orders
/// - Analyze execution times for process improvement
///
model WorkInstructionExecution {
  id                String                         @id @default(cuid())
  workInstructionId String
  workOrderId       String
  operationId       String?
  operatorId        String
  currentStepNumber Int                            @default(1)
  status            WorkInstructionExecutionStatus @default(IN_PROGRESS)
  startedAt         DateTime                       @default(now())
  completedAt       DateTime?
  createdAt         DateTime                       @default(now())
  updatedAt         DateTime                       @updatedAt
  operator          User                           @relation("WIExecutionOperator", fields: [operatorId], references: [id])
  stepExecutions    WorkInstructionStepExecution[]

  @@index([workOrderId])
  @@index([operatorId])
  @@map("work_instruction_executions")
}

/// Detailed execution records for individual work instruction steps including data collection, verification, and timing
///
/// **Business Purpose:** Provides granular tracking of step-by-step execution for quality verification, process optimization, and regulatory compliance
/// **Data Owner:** Production Control and Quality Assurance Teams
/// **Update Frequency:** Real-time updates as each step is completed with data collection and verification
/// **Compliance:** Step execution data required for detailed traceability and process validation per regulatory requirements
/// **Data Retention:** 7 years minimum, permanent for critical processes and regulatory requirements
/// **Security:** Internal - Contains detailed process execution and measurement data
/// **Integrations:** Shop Floor Data Collection, Measurement Equipment, Quality Systems, Process Control
/// **Related Tables:** WorkInstructionExecution, WorkInstructionStep, QualityMeasurement, Equipment
///
/// **Examples:**
/// - Measurement step execution with data: Completed measurement step with collected dimensional data and verification
/// - Setup step with tool verification: Setup step execution with tool verification and condition notes
///
/// **Common Queries:**
/// - Track step-by-step execution progress
/// - Collect process data for analysis and improvement
/// - Generate detailed execution reports for compliance
///
model WorkInstructionStepExecution {
  id          String                   @id @default(cuid())
  executionId String
  stepNumber  Int
  status      String                   @default("PENDING")
  dataEntered Json?
  notes       String?
  signedById  String?
  signedAt    DateTime?
  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  execution   WorkInstructionExecution @relation(fields: [executionId], references: [id], onDelete: Cascade)
  signedBy    User?                    @relation("WIStepExecutionSignedBy", fields: [signedById], references: [id])

  @@unique([executionId, stepNumber])
  @@index([executionId])
  @@map("work_instruction_step_executions")
}

model ElectronicSignature {
  id                 String                   @id @default(cuid())
  signatureType      ElectronicSignatureType
  signatureLevel     ElectronicSignatureLevel
  userId             String
  signedEntityType   String
  signedEntityId     String
  signatureReason    String?
  signatureData      Json
  ipAddress          String
  userAgent          String
  timestamp          DateTime                 @default(now())
  biometricType      BiometricType?
  biometricTemplate  String?
  biometricScore     Float?
  signatureHash      String
  isValid            Boolean                  @default(true)
  invalidatedAt      DateTime?
  invalidatedById    String?
  invalidationReason String?
  signedDocument     Json?
  certificateId      String?
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  invalidatedBy      User?                    @relation("ElectronicSignatureInvalidatedBy", fields: [invalidatedById], references: [id])
  user               User                     @relation("ElectronicSignatureUser", fields: [userId], references: [id])

  @@index([userId])
  @@index([signedEntityType, signedEntityId])
  @@index([timestamp])
  @@map("electronic_signatures")
}

model FAIReport {
  id                    String                 @id @default(cuid())
  faiNumber             String                 @unique
  partId                String
  workOrderId           String?
  inspectionId          String?
  status                FAIStatus              @default(IN_PROGRESS)
  revisionLevel         String?
  form1Data             Json?
  form2Data             Json?
  createdById           String?
  reviewedById          String?
  approvedById          String?
  reviewedAt            DateTime?
  approvedAt            DateTime?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  characteristics       FAICharacteristic[]
  qifMeasurementPlans   QIFMeasurementPlan[]
  qifMeasurementResults QIFMeasurementResult[]

  @@index([partId])
  @@index([status])
  @@map("fai_reports")
}

model FAICharacteristic {
  id                   String    @id @default(cuid())
  faiReportId          String
  characteristicNumber Int
  characteristic       String
  specification        String
  requirement          String?
  toleranceType        String?
  nominalValue         Float?
  upperLimit           Float?
  lowerLimit           Float?
  unitOfMeasure        String?
  inspectionMethod     String?
  inspectionFrequency  String?
  measuredValues       Json
  actualValue          Float?
  deviation            Float?
  result               String?
  notes                String?
  verifiedById         String?
  verifiedAt           DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  faiReport            FAIReport @relation(fields: [faiReportId], references: [id], onDelete: Cascade)

  @@unique([faiReportId, characteristicNumber])
  @@index([faiReportId])
  @@map("fai_characteristics")
}

model AuditLog {
  id        String   @id @default(cuid())
  tableName String
  recordId  String
  action    String
  oldValues Json?
  newValues Json?
  userId    String?
  ipAddress String?
  userAgent String?
  timestamp DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

/// Maintenance work orders managing preventive, corrective, and emergency maintenance activities across manufacturing equipment
///
/// **Business Purpose:** Coordinates maintenance activities to ensure equipment reliability, minimize downtime, and maintain production capability
/// **Data Owner:** Maintenance Management and Manufacturing Engineering Teams
/// **Update Frequency:** Real-time updates as maintenance work is scheduled, executed, and completed
/// **Compliance:** Maintenance records required for equipment warranty, safety compliance, and regulatory maintenance documentation
/// **Data Retention:** Equipment lifetime plus 10 years for warranty and safety compliance
/// **Security:** Internal - Maintenance activities and equipment reliability information
/// **Integrations:** CMMS Systems, Equipment Management, Work Order Management, Inventory Management
/// **Related Tables:** Equipment, User, EquipmentLog, EquipmentStateHistory
///
/// **Examples:**
/// - Preventive maintenance work order: Scheduled quarterly maintenance with defined timing and priority for production planning
/// - Emergency repair work order: High-priority emergency repair with failure classification for root cause tracking
///
/// **Common Queries:**
/// - Find scheduled maintenance for capacity planning
/// - Track maintenance completion rates and efficiency
/// - Generate maintenance cost reports by equipment
///
model MaintenanceWorkOrder {
  id                      String     @id @default(cuid())
  externalWorkOrderNumber String     @unique
  description             String
  workType                String
  status                  String
  equipmentId             String?
  scheduledStart          DateTime?
  scheduledFinish         DateTime?
  actualStart             DateTime?
  actualFinish            DateTime?
  priority                Int        @default(3)
  failureCode             String?
  problemCode             String?
  causeCode               String?
  remedyCode              String?
  lastSyncedAt            DateTime?
  createdAt               DateTime   @default(now())
  updatedAt               DateTime   @updatedAt
  equipment               Equipment? @relation(fields: [equipmentId], references: [id])

  @@index([externalWorkOrderNumber])
  @@index([equipmentId])
  @@index([status])
  @@map("maintenance_work_orders")
}

/// Calibrated measurement and inspection equipment with certification tracking and maintenance schedules
///
/// **Business Purpose:** Ensures measurement accuracy and regulatory compliance by managing calibration schedules, certifications, and equipment capabilities
/// **Data Owner:** Quality Engineering and Metrology Teams
/// **Update Frequency:** Updated when calibrations are performed, equipment is added, or specifications change
/// **Compliance:** Critical for ISO 17025, AS9100, and FDA compliance. Calibration records required for measurement traceability
/// **Data Retention:** Permanent retention for calibration history and measurement traceability
/// **Security:** Internal - Measurement capability and calibration certification information
/// **Integrations:** Calibration Management, Quality Management, Inspection Systems, Metrology Labs
/// **Related Tables:** QualityInspection, QualityMeasurement, OperationGaugeRequirement
///
/// **Examples:**
/// - Coordinate measuring machine (CMM): High-precision measurement equipment with defined accuracy and annual calibration requirements
/// - Handheld measurement tool: Standard measurement tool with semi-annual calibration cycle for routine inspections
///
/// **Common Queries:**
/// - Find equipment requiring calibration by date range
/// - Generate calibration certificates for customer audits
/// - Track measurement equipment by capability and availability
///
model MeasurementEquipment {
  id                         String                      @id @default(cuid())
  externalGaugeId            String?                     @unique
  description                String
  manufacturer               String?
  model                      String?
  serialNumber               String?
  gaugeType                  String
  measurementType            String
  measurementRange           String?
  resolution                 Float?
  accuracy                   Float?
  location                   String?
  calibrationFrequency       Int?
  lastCalibrationDate        DateTime?
  nextCalibrationDate        DateTime?
  calibrationStatus          String                      @default("IN_CAL")
  isActive                   Boolean                     @default(true)
  lastSyncedAt               DateTime?
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt
  inspectionRecords          InspectionRecord[]
  operationGaugeRequirements OperationGaugeRequirement[]
  qifMeasurementResults      QIFMeasurementResult[]

  @@index([externalGaugeId])
  @@index([calibrationStatus])
  @@index([nextCalibrationDate])
  @@map("measurement_equipment")
}

model InspectionRecord {
  id                     String                @id @default(cuid())
  serializedPartId       String?
  measurementEquipmentId String?
  characteristic         String
  nominalValue           Float
  actualValue            Float
  lowerTolerance         Float
  upperTolerance         Float
  unit                   String
  result                 String
  inspectionDate         DateTime              @default(now())
  createdAt              DateTime              @default(now())
  measurementEquipment   MeasurementEquipment? @relation(fields: [measurementEquipmentId], references: [id])
  serializedPart         SerializedPart?       @relation(fields: [serializedPartId], references: [id])

  @@index([serializedPartId])
  @@index([measurementEquipmentId])
  @@index([result])
  @@map("inspection_records")
}

model CNCProgram {
  id                  String               @id @default(cuid())
  externalProgramId   String?              @unique
  programName         String
  partNumber          String
  operationCode       String
  revision            String
  revisionDate        DateTime
  status              String
  machineType         String?
  postProcessor       String?
  toolList            String?
  setupSheetUrl       String?
  approvedBy          String?
  approvalDate        DateTime?
  ecoNumber           String?
  effectiveDate       DateTime?
  firstPieceRequired  Boolean              @default(false)
  firstPieceApproved  Boolean              @default(false)
  firstPieceDate      DateTime?
  programUrl          String?
  stepAP242Url        String?
  pmiDataUrl          String?
  teamcenterItemId    String?
  lastSyncedAt        DateTime?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  programDownloadLogs ProgramDownloadLog[]

  @@index([programName])
  @@index([partNumber])
  @@index([status])
  @@index([revision])
  @@map("cnc_programs")
}

model ProgramDownloadLog {
  id                  String      @id @default(cuid())
  programId           String?
  programName         String
  revision            String
  machineId           String
  operatorBadgeNumber String
  workOrderNumber     String?
  downloadDate        DateTime    @default(now())
  authorized          Boolean
  authorizationMethod String
  createdAt           DateTime    @default(now())
  cncProgram          CNCProgram? @relation(fields: [programId], references: [id])

  @@index([programName])
  @@index([machineId])
  @@index([operatorBadgeNumber])
  @@index([downloadDate])
  @@map("program_download_logs")
}

model ProgramLoadAuthorization {
  id                    String   @id @default(cuid())
  authorizationId       String   @unique
  operatorBadgeNumber   String
  machineId             String
  programName           String
  programRevision       String
  partNumber            String
  workOrderNumber       String?
  authorized            Boolean
  authorizationDate     DateTime @default(now())
  operatorAuthenticated Boolean
  workOrderValid        Boolean
  certificationValid    Boolean
  programVersionValid   Boolean
  gaugeCalibrationValid Boolean
  failureReasons        String?
  validationDetails     Json?
  supervisorNotified    Boolean  @default(false)
  overrideReason        String?
  electronicSignature   String?
  createdAt             DateTime @default(now())

  @@index([authorizationId])
  @@index([operatorBadgeNumber])
  @@index([machineId])
  @@index([authorized])
  @@index([authorizationDate])
  @@map("program_load_authorizations")
}

model OperationGaugeRequirement {
  id                     String               @id @default(cuid())
  partNumber             String
  operationCode          String
  measurementEquipmentId String
  required               Boolean              @default(true)
  createdAt              DateTime             @default(now())
  measurementEquipment   MeasurementEquipment @relation(fields: [measurementEquipmentId], references: [id])

  @@unique([partNumber, operationCode, measurementEquipmentId])
  @@index([partNumber])
  @@index([operationCode])
  @@map("operation_gauge_requirements")
}

model Alert {
  id         String    @id @default(cuid())
  alertType  String
  severity   String
  message    String
  details    Json?
  resolved   Boolean   @default(false)
  resolvedBy String?
  resolvedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([alertType])
  @@index([severity])
  @@index([resolved])
  @@index([createdAt])
  @@map("alerts")
}

model IntegrationConfig {
  id                           String                        @id @default(cuid())
  name                         String                        @unique
  displayName                  String
  type                         IntegrationType
  enabled                      Boolean                       @default(true)
  config                       Json
  lastSync                     DateTime?
  lastSyncStatus               String?
  lastError                    String?
  errorCount                   Int                           @default(0)
  totalSyncs                   Int                           @default(0)
  successCount                 Int                           @default(0)
  failureCount                 Int                           @default(0)
  syncSchedule                 Json?
  createdAt                    DateTime                      @default(now())
  updatedAt                    DateTime                      @updatedAt
  erpMaterialTransactions      ERPMaterialTransaction[]
  logs                         IntegrationLog[]
  personnelInfoExchanges       PersonnelInfoExchange[]
  productionPerformanceActuals ProductionPerformanceActual[]
  productionScheduleRequests   ProductionScheduleRequest[]

  @@index([name])
  @@index([type])
  @@index([enabled])
  @@map("integration_configs")
}

model IntegrationLog {
  id           String               @id @default(cuid())
  configId     String
  operation    String
  direction    IntegrationDirection
  status       IntegrationLogStatus
  recordCount  Int                  @default(0)
  successCount Int                  @default(0)
  errorCount   Int                  @default(0)
  duration     Int
  requestData  Json?
  responseData Json?
  errors       Json?
  details      Json?
  startedAt    DateTime             @default(now())
  completedAt  DateTime?
  createdAt    DateTime             @default(now())
  config       IntegrationConfig    @relation(fields: [configId], references: [id], onDelete: Cascade)

  @@index([configId])
  @@index([status])
  @@index([startedAt])
  @@index([operation])
  @@map("integration_logs")
}

model ProductionScheduleRequest {
  id                    String                      @id @default(cuid())
  messageId             String                      @unique
  configId              String
  scheduleType          ScheduleType
  priority              SchedulePriority
  requestedBy           String
  requestedDate         DateTime                    @default(now())
  effectiveStartDate    DateTime
  effectiveEndDate      DateTime
  workOrderId           String?
  externalWorkOrderId   String
  partId                String?
  partNumber            String?
  quantity              Float
  unitOfMeasure         String
  dueDate               DateTime
  workCenterId          String?
  equipmentRequirements Json?
  personnelRequirements Json?
  materialRequirements  Json?
  status                B2MMessageStatus
  processedAt           DateTime?
  errorMessage          String?
  validationErrors      Json?
  requestPayload        Json
  responsePayload       Json?
  createdAt             DateTime                    @default(now())
  updatedAt             DateTime                    @updatedAt
  config                IntegrationConfig           @relation(fields: [configId], references: [id], onDelete: Cascade)
  part                  Part?                       @relation(fields: [partId], references: [id])
  workCenter            Equipment?                  @relation(fields: [workCenterId], references: [id])
  workOrder             WorkOrder?                  @relation(fields: [workOrderId], references: [id])
  response              ProductionScheduleResponse?

  @@index([configId])
  @@index([status])
  @@index([externalWorkOrderId])
  @@index([requestedDate])
  @@map("production_schedule_requests")
}

model ProductionScheduleResponse {
  id                 String                    @id @default(cuid())
  requestId          String                    @unique
  messageId          String                    @unique
  accepted           Boolean
  confirmedStartDate DateTime?
  confirmedEndDate   DateTime?
  confirmedQuantity  Float?
  rejectionReason    String?
  modifications      Json?
  constraints        Json?
  proposedStartDate  DateTime?
  proposedEndDate    DateTime?
  proposedQuantity   Float?
  respondedBy        String
  respondedAt        DateTime                  @default(now())
  sentToERP          Boolean                   @default(false)
  sentAt             DateTime?
  responsePayload    Json
  createdAt          DateTime                  @default(now())
  request            ProductionScheduleRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)

  @@index([requestId])
  @@index([respondedAt])
  @@map("production_schedule_responses")
}

model ProductionPerformanceActual {
  id                   String            @id @default(cuid())
  messageId            String            @unique
  configId             String
  workOrderId          String
  externalWorkOrderId  String
  operationId          String?
  reportingPeriodStart DateTime
  reportingPeriodEnd   DateTime
  quantityProduced     Float
  quantityGood         Float
  quantityScrap        Float
  quantityRework       Float
  yieldPercentage      Float?
  setupTimeActual      Float?
  runTimeActual        Float?
  downtimeActual       Float?
  laborHoursActual     Float?
  laborCostActual      Float?
  materialCostActual   Float?
  overheadCostActual   Float?
  totalCostActual      Float?
  quantityVariance     Float?
  timeVariance         Float?
  costVariance         Float?
  efficiencyVariance   Float?
  personnelActuals     Json?
  equipmentActuals     Json?
  materialActuals      Json?
  status               B2MMessageStatus
  sentToERP            Boolean           @default(false)
  sentAt               DateTime?
  erpConfirmation      String?
  errorMessage         String?
  messagePayload       Json
  createdBy            String
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  config               IntegrationConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  workOrder            WorkOrder         @relation(fields: [workOrderId], references: [id], onDelete: Cascade)

  @@index([configId])
  @@index([workOrderId])
  @@index([externalWorkOrderId])
  @@index([status])
  @@index([sentToERP])
  @@index([reportingPeriodStart])
  @@map("production_performance_actuals")
}

/// Integration transactions with ERP systems for material movements, consumption, and inventory synchronization across enterprise systems
///
/// **Business Purpose:** Maintains data synchronization between MES and ERP systems ensuring consistent material information across the enterprise
/// **Data Owner:** IT Integration and Materials Management Teams
/// **Update Frequency:** Real-time or scheduled batch processing as material transactions occur in manufacturing operations
/// **Compliance:** Integration data required for financial reconciliation, inventory accuracy, and audit trail compliance
/// **Data Retention:** 7 years for financial audit requirements and system integration validation
/// **Security:** Internal - Integration data with financial and operational implications
/// **Integrations:** ERP Systems, Financial Management, Inventory Control, Cost Accounting
/// **Related Tables:** MaterialLot, WorkOrder, IntegrationConfig
///
/// **Examples:**
/// - Material consumption transaction to ERP: Material consumption synchronized with ERP for cost accounting and inventory management
/// - Material receipt transaction from ERP: Material receipt from supplier processed through ERP integration for inventory update
///
/// **Common Queries:**
/// - Track ERP synchronization status for material transactions
/// - Generate integration reports for system reconciliation
/// - Monitor failed transactions requiring manual intervention
///
model ERPMaterialTransaction {
  id                  String               @id @default(cuid())
  messageId           String               @unique
  configId            String
  transactionType     ERPTransactionType
  direction           IntegrationDirection
  transactionDate     DateTime             @default(now())
  partId              String?
  externalPartId      String
  fromLocation        String?
  toLocation          String?
  workOrderId         String?
  externalWorkOrderId String?
  quantity            Float
  unitOfMeasure       String
  lotNumber           String?
  serialNumber        String?
  unitCost            Float?
  totalCost           Float?
  currency            String?              @default("USD")
  movementType        String
  reasonCode          String?
  status              B2MMessageStatus
  processedAt         DateTime?
  erpTransactionId    String?
  errorMessage        String?
  messagePayload      Json
  createdBy           String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  config              IntegrationConfig    @relation(fields: [configId], references: [id], onDelete: Cascade)
  part                Part?                @relation(fields: [partId], references: [id])
  workOrder           WorkOrder?           @relation(fields: [workOrderId], references: [id])

  @@index([configId])
  @@index([transactionType])
  @@index([status])
  @@index([externalPartId])
  @@index([transactionDate])
  @@map("erp_material_transactions")
}

model PersonnelInfoExchange {
  id                  String               @id @default(cuid())
  messageId           String               @unique
  configId            String
  personnelId         String?
  externalPersonnelId String
  actionType          PersonnelActionType
  direction           IntegrationDirection
  firstName           String?
  lastName            String?
  email               String?
  employeeNumber      String?
  department          String?
  jobTitle            String?
  skills              Json?
  certifications      Json?
  qualifications      Json?
  shiftCode           String?
  workCalendar        String?
  availableFrom       DateTime?
  availableTo         DateTime?
  employmentStatus    String?
  lastWorkDate        DateTime?
  status              B2MMessageStatus
  processedAt         DateTime?
  errorMessage        String?
  messagePayload      Json
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  config              IntegrationConfig    @relation(fields: [configId], references: [id], onDelete: Cascade)

  @@index([configId])
  @@index([actionType])
  @@index([status])
  @@index([externalPersonnelId])
  @@index([personnelId])
  @@map("personnel_info_exchanges")
}

/// Real-time data collection from manufacturing equipment capturing process parameters, sensor readings, and operational metrics for analysis and control
///
/// **Business Purpose:** Enables real-time monitoring, process optimization, and quality control through comprehensive equipment data collection and analysis
/// **Data Owner:** Manufacturing Engineering and Automation Teams
/// **Update Frequency:** Real-time data collection as equipment operates and sensors generate data points
/// **Compliance:** Data collection required for process validation, statistical process control, and regulatory compliance documentation
/// **Data Retention:** 1 year for operational data, 7 years for quality-critical measurements, permanent for validation studies
/// **Security:** Internal - Manufacturing process data with competitive and operational sensitivity
/// **Integrations:** Equipment Controllers, Process Control Systems, SPC Analytics, Predictive Maintenance
/// **Related Tables:** Equipment, WorkOrder, OperationParameter, SPCConfiguration
///
/// **Examples:**
/// - CNC machine parameter monitoring: Real-time spindle speed monitoring during active machining operation with work order context
/// - Temperature sensor data collection: Critical temperature monitoring with data quality assessment and communication protocol tracking
///
/// **Common Queries:**
/// - Collect real-time equipment data for process monitoring
/// - Generate equipment performance analytics and trends
/// - Track data quality and collection system health
///
model EquipmentDataCollection {
  id                  String             @id @default(cuid())
  equipmentId         String
  dataCollectionType  DataCollectionType
  collectionTimestamp DateTime           @default(now())
  dataPointName       String
  dataPointId         String?
  numericValue        Float?
  stringValue         String?
  booleanValue        Boolean?
  jsonValue           Json?
  unitOfMeasure       String?
  quality             String?
  workOrderId         String?
  operationId         String?
  productionRunId     String?
  equipmentState      String?
  protocol            String?
  sourceAddress       String?
  createdAt           DateTime           @default(now())
  equipment           Equipment          @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  workOrder           WorkOrder?         @relation(fields: [workOrderId], references: [id])

  @@index([equipmentId])
  @@index([dataCollectionType])
  @@index([collectionTimestamp])
  @@index([workOrderId])
  @@index([dataPointName])
  @@map("equipment_data_collections")
}

/// Equipment control commands and automation instructions sent to manufacturing equipment with execution tracking and response management
///
/// **Business Purpose:** Enables automated equipment control, recipe execution, and process automation through systematic command management and tracking
/// **Data Owner:** Manufacturing Engineering and Automation Teams
/// **Update Frequency:** Real-time command issuance and status updates as equipment automation systems execute instructions
/// **Compliance:** Command tracking required for process validation, audit trails, and regulatory compliance in automated manufacturing
/// **Data Retention:** 7 years for command audit trails and process validation documentation
/// **Security:** Internal - Equipment control and automation information with operational security implications
/// **Integrations:** Equipment Controllers, Manufacturing Execution Systems, Process Control, Work Order Management
/// **Related Tables:** Equipment, WorkOrder, Operation, User
///
/// **Examples:**
/// - CNC program execution command: High-priority CNC program execution command with detailed parameters and successful completion
/// - Equipment setup command: Equipment setup command for heat treatment recipe configuration currently executing
///
/// **Common Queries:**
/// - Track equipment command execution status for automation monitoring
/// - Generate command audit trails for process validation
/// - Monitor failed commands requiring manual intervention
///
model EquipmentCommand {
  id              String        @id @default(cuid())
  equipmentId     String
  commandType     CommandType
  commandStatus   CommandStatus @default(PENDING)
  commandName     String
  commandPayload  Json?
  workOrderId     String?
  operationId     String?
  issuedAt        DateTime      @default(now())
  sentAt          DateTime?
  acknowledgedAt  DateTime?
  completedAt     DateTime?
  responsePayload Json?
  responseCode    String?
  responseMessage String?
  timeoutSeconds  Int           @default(30)
  retryCount      Int           @default(0)
  maxRetries      Int           @default(3)
  priority        Int           @default(5)
  issuedBy        String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  equipment       Equipment     @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  workOrder       WorkOrder?    @relation(fields: [workOrderId], references: [id])

  @@index([equipmentId])
  @@index([commandType])
  @@index([commandStatus])
  @@index([workOrderId])
  @@index([issuedAt])
  @@index([priority])
  @@map("equipment_commands")
}

/// Material movements and transactions processed through manufacturing equipment with complete traceability and quality status tracking
///
/// **Business Purpose:** Provides equipment-level material tracking enabling precise traceability, quality control, and production accountability through equipment-based monitoring
/// **Data Owner:** Manufacturing Operations and Materials Management Teams
/// **Update Frequency:** Real-time tracking as materials are processed, consumed, or produced by manufacturing equipment
/// **Compliance:** Equipment-based material tracking required for complete traceability, quality accountability, and regulatory compliance in controlled manufacturing
/// **Data Retention:** Permanent retention for complete material traceability and regulatory compliance
/// **Security:** Internal - Material flow and equipment utilization information with operational significance
/// **Integrations:** Equipment Controllers, Material Management, Quality Tracking, Traceability Systems
/// **Related Tables:** Equipment, Part, WorkOrder, MaterialLot
///
/// **Examples:**
/// - CNC machining material consumption: Raw titanium bar consumed by CNC machine for turbine blade manufacturing with quality approval
/// - Assembly equipment material tracking: Finished turbine blade produced by assembly equipment with upstream traceability linkage
///
/// **Common Queries:**
/// - Track material consumption and production by equipment
/// - Generate equipment-based material traceability reports
/// - Monitor material quality status through equipment processing
///
model EquipmentMaterialMovement {
  id                String     @id @default(cuid())
  equipmentId       String
  partId            String?
  partNumber        String
  lotNumber         String?
  serialNumber      String?
  movementType      String
  quantity          Float
  unitOfMeasure     String
  movementTimestamp DateTime   @default(now())
  workOrderId       String?
  operationId       String?
  fromLocation      String?
  toLocation        String?
  qualityStatus     String?
  upstreamTraceId   String?
  downstreamTraceId String?
  recordedBy        String
  createdAt         DateTime   @default(now())
  equipment         Equipment  @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  part              Part?      @relation(fields: [partId], references: [id])
  workOrder         WorkOrder? @relation(fields: [workOrderId], references: [id])

  @@index([equipmentId])
  @@index([partId])
  @@index([partNumber])
  @@index([lotNumber])
  @@index([serialNumber])
  @@index([workOrderId])
  @@index([movementTimestamp])
  @@index([movementType])
  @@map("equipment_material_movements")
}

/// Real-time manufacturing process data collection including parameters, measurements, and equipment states for process monitoring and optimization
///
/// **Business Purpose:** Captures critical production data for process control, quality assurance, and operational excellence enabling data-driven manufacturing decisions
/// **Data Owner:** Manufacturing Engineering and Process Control Teams
/// **Update Frequency:** Real-time data collection during production operations with high-frequency sampling for critical parameters
/// **Compliance:** Process data critical for statistical process control and regulatory compliance - must maintain data integrity for validation
/// **Data Retention:** 3 years for process validation and continuous improvement analysis
/// **Security:** Internal - Proprietary process parameters and manufacturing data
/// **Integrations:** Shop Floor Equipment, Process Control Systems, SPC Systems, Quality Management, OEE Calculation
/// **Related Tables:** WorkOrder, Equipment, Operation, QualityMeasurement, EquipmentLog
///
/// **Examples:**
/// - CNC machining data collection: Precision milling operation with optimal parameters producing good parts with no alarms
/// - Heat treatment process monitoring: Heat treatment batch process with controlled atmosphere maintaining tight temperature control
///
/// **Common Queries:**
/// - Monitor real-time process parameters for quality control
/// - Generate OEE reports from production data
/// - Analyze process trends for continuous improvement
///
model ProcessDataCollection {
  id                 String     @id @default(cuid())
  equipmentId        String
  processName        String
  processStepNumber  Int?
  startTimestamp     DateTime
  endTimestamp       DateTime?
  duration           Float?
  workOrderId        String?
  operationId        String?
  partNumber         String?
  lotNumber          String?
  serialNumber       String?
  parameters         Json
  quantityProduced   Float?
  quantityGood       Float?
  quantityScrap      Float?
  inSpecCount        Int?
  outOfSpecCount     Int?
  averageUtilization Float?
  peakUtilization    Float?
  alarmCount         Int        @default(0)
  criticalAlarmCount Int        @default(0)
  operatorId         String?
  supervisorId       String?
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  equipment          Equipment  @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  workOrder          WorkOrder? @relation(fields: [workOrderId], references: [id])

  @@index([equipmentId])
  @@index([processName])
  @@index([workOrderId])
  @@index([startTimestamp])
  @@index([partNumber])
  @@index([lotNumber])
  @@index([serialNumber])
  @@map("process_data_collections")
}

model QIFMeasurementPlan {
  id                  String                 @id @default(cuid())
  qifPlanId           String                 @unique
  partNumber          String
  partRevision        String
  planVersion         String
  planName            String?
  description         String?
  createdDate         DateTime               @default(now())
  createdBy           String?
  qifXmlContent       String
  qifVersion          String                 @default("3.0.0")
  characteristicCount Int                    @default(0)
  workOrderId         String?
  faiReportId         String?
  status              String                 @default("ACTIVE")
  supersededBy        String?
  lastSyncedAt        DateTime?
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  characteristics     QIFCharacteristic[]
  faiReport           FAIReport?             @relation(fields: [faiReportId], references: [id])
  workOrder           WorkOrder?             @relation(fields: [workOrderId], references: [id])
  measurementResults  QIFMeasurementResult[]

  @@index([partNumber])
  @@index([partRevision])
  @@index([qifPlanId])
  @@index([workOrderId])
  @@index([faiReportId])
  @@index([status])
  @@map("qif_measurement_plans")
}

model QIFCharacteristic {
  id                   String             @id @default(cuid())
  qifMeasurementPlanId String
  characteristicId     String
  balloonNumber        String?
  characteristicName   String?
  description          String?
  nominalValue         Float?
  upperTolerance       Float?
  lowerTolerance       Float?
  toleranceType        String?
  gdtType              String?
  datumReferenceFrame  String?
  materialCondition    String?
  measurementMethod    String?
  samplingRequired     Boolean            @default(false)
  sampleSize           Int?
  sequenceNumber       Int?
  createdAt            DateTime           @default(now())
  qifMeasurementPlan   QIFMeasurementPlan @relation(fields: [qifMeasurementPlanId], references: [id], onDelete: Cascade)
  measurements         QIFMeasurement[]

  @@index([qifMeasurementPlanId])
  @@index([characteristicId])
  @@index([balloonNumber])
  @@map("qif_characteristics")
}

model QIFMeasurementResult {
  id                   String                @id @default(cuid())
  qifResultsId         String                @unique
  qifMeasurementPlanId String?
  partNumber           String
  serialNumber         String?
  lotNumber            String?
  inspectionDate       DateTime
  inspectedBy          String
  inspectionType       String?
  overallStatus        String
  totalMeasurements    Int                   @default(0)
  passedMeasurements   Int                   @default(0)
  failedMeasurements   Int                   @default(0)
  qifXmlContent        String
  qifVersion           String                @default("3.0.0")
  workOrderId          String?
  serializedPartId     String?
  faiReportId          String?
  measurementDeviceId  String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  faiReport            FAIReport?            @relation(fields: [faiReportId], references: [id])
  measurementDevice    MeasurementEquipment? @relation(fields: [measurementDeviceId], references: [id])
  qifMeasurementPlan   QIFMeasurementPlan?   @relation(fields: [qifMeasurementPlanId], references: [id])
  serializedPart       SerializedPart?       @relation(fields: [serializedPartId], references: [id])
  workOrder            WorkOrder?            @relation(fields: [workOrderId], references: [id])
  measurements         QIFMeasurement[]

  @@index([qifResultsId])
  @@index([qifMeasurementPlanId])
  @@index([partNumber])
  @@index([serialNumber])
  @@index([inspectionDate])
  @@index([overallStatus])
  @@index([workOrderId])
  @@index([faiReportId])
  @@map("qif_measurement_results")
}

model QIFMeasurement {
  id                     String               @id @default(cuid())
  qifMeasurementResultId String
  qifCharacteristicId    String?
  characteristicId       String
  balloonNumber          String?
  measuredValue          Float
  deviation              Float?
  status                 String
  measurementDate        DateTime?
  measuredBy             String?
  measurementDevice      String?
  uncertainty            Float?
  uncertaintyK           Float?
  notes                  String?
  createdAt              DateTime             @default(now())
  qifCharacteristic      QIFCharacteristic?   @relation(fields: [qifCharacteristicId], references: [id])
  qifMeasurementResult   QIFMeasurementResult @relation(fields: [qifMeasurementResultId], references: [id], onDelete: Cascade)

  @@index([qifMeasurementResultId])
  @@index([qifCharacteristicId])
  @@index([characteristicId])
  @@index([status])
  @@map("qif_measurements")
}

model SPCConfiguration {
  id                 String                 @id @default(cuid())
  parameterId        String                 @unique
  chartType          SPCChartType
  subgroupSize       Int?
  UCL                Float?
  centerLine         Float?
  LCL                Float?
  rangeUCL           Float?
  rangeCL            Float?
  rangeLCL           Float?
  USL                Float?
  LSL                Float?
  targetValue        Float?
  limitsBasedOn      LimitCalculationMethod
  historicalDataDays Int?
  lastCalculatedAt   DateTime?
  enabledRules       Json
  ruleSensitivity    String                 @default("NORMAL")
  enableCapability   Boolean                @default(true)
  confidenceLevel    Float                  @default(0.95)
  isActive           Boolean                @default(true)
  createdBy          String
  lastModifiedBy     String?
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  parameter          OperationParameter     @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  violations         SPCRuleViolation[]

  @@map("spc_configurations")
}

model SPCRuleViolation {
  id              String           @id @default(cuid())
  configurationId String
  ruleNumber      Int
  ruleName        String
  severity        String
  dataPointId     String?
  value           Float
  timestamp       DateTime
  subgroupNumber  Int?
  UCL             Float?
  LCL             Float?
  centerLine      Float?
  deviationSigma  Float?
  acknowledged    Boolean          @default(false)
  acknowledgedBy  String?
  acknowledgedAt  DateTime?
  resolution      String?
  createdAt       DateTime         @default(now())
  configuration   SPCConfiguration @relation(fields: [configurationId], references: [id], onDelete: Cascade)

  @@index([configurationId, timestamp])
  @@index([acknowledged])
  @@map("spc_rule_violations")
}

model SamplingPlan {
  id                        String                     @id @default(cuid())
  planName                  String
  planType                  SamplingPlanType
  parameterId               String?
  operationId               String?
  inspectionLevel           String
  AQL                       Float
  lotSizeMin                Int?
  lotSizeMax                Int?
  sampleSizeNormal          Int
  acceptanceNumber          Int
  rejectionNumber           Int
  sampleSizeTightened       Int?
  acceptanceNumberTightened Int?
  sampleSizeReduced         Int?
  acceptanceNumberReduced   Int?
  sampleSize2               Int?
  acceptanceNumber2         Int?
  rejectionNumber2          Int?
  currentInspectionLevel    String                     @default("NORMAL")
  consecutiveAccepted       Int                        @default(0)
  consecutiveRejected       Int                        @default(0)
  isActive                  Boolean                    @default(true)
  createdBy                 String
  lastModifiedBy            String?
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  inspectionResults         SamplingInspectionResult[]
  operation                 Operation?                 @relation(fields: [operationId], references: [id])
  parameter                 OperationParameter?        @relation(fields: [parameterId], references: [id])

  @@map("sampling_plans")
}

model SamplingInspectionResult {
  id              String       @id @default(cuid())
  planId          String
  lotNumber       String
  lotSize         Int
  inspectionDate  DateTime
  sampleSize      Int
  defectsFound    Int
  decision        String
  inspectionLevel String
  inspectorId     String
  notes           String?
  createdAt       DateTime     @default(now())
  plan            SamplingPlan @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@index([planId, inspectionDate])
  @@map("sampling_inspection_results")
}

/// Work Instruction Media - Enhanced media library for work instructions
model WorkInstructionMedia {
  id            String          @id @default(cuid())
  instructionId String
  mediaType     MediaType
  fileName      String
  fileUrl       String
  fileSize      Int
  mimeType      String
  title         String?
  description   String?
  tags          String[]
  annotations   Json?
  usageCount    Int             @default(0)
  lastUsedAt    DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  instruction   WorkInstruction @relation(fields: [instructionId], references: [id], onDelete: Cascade)

  @@index([instructionId])
  @@index([mediaType])
  @@map("work_instruction_media")
}

/// Work Instruction Relation - Relationships between work instructions
model WorkInstructionRelation {
  id           String          @id @default(cuid())
  parentId     String
  relatedId    String
  relationType RelationType
  description  String?
  createdAt    DateTime        @default(now())
  parent       WorkInstruction @relation("ParentInstruction", fields: [parentId], references: [id], onDelete: Cascade)

  @@unique([parentId, relatedId, relationType])
  @@index([parentId])
  @@index([relatedId])
  @@map("work_instruction_relations")
}

/// Export Template - Templates for exporting work instructions
model ExportTemplate {
  id             String             @id @default(cuid())
  name           String
  description    String?
  templateType   ExportTemplateType
  templateFormat ExportFormat
  headerTemplate String?
  footerTemplate String?
  styles         Json?
  layout         Json?
  isDefault      Boolean            @default(false)
  isActive       Boolean            @default(true)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  createdById    String
  updatedById    String
  instructions   WorkInstruction[]

  @@index([templateType])
  @@index([templateFormat])
  @@map("export_templates")
}

/// Data Collection Field Template - Reusable field templates
model DataCollectionFieldTemplate {
  id              String   @id @default(cuid())
  name            String
  description     String?
  fieldSchema     Json
  validationRules Json?
  category        String?
  tags            String[]
  usageCount      Int      @default(0)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdById     String

  @@index([category])
  @@index([tags])
  @@map("data_collection_field_templates")
}

model SetupSheet {
  id                 String                @id @default(cuid())
  documentNumber     String                @unique
  title              String
  description        String?
  version            String                @default("1.0.0")
  status             WorkInstructionStatus @default(DRAFT)
  effectiveDate      DateTime?
  supersededDate     DateTime?
  ecoNumber          String?
  equipmentId        String?
  operationId        String?
  partId             String?
  workCenterId       String?
  estimatedSetupTime Int?
  safetyChecklist    Json?
  requiredPPE        String[]
  imageUrls          String[]
  videoUrls          String[]
  attachmentUrls     String[]
  tags               String[]
  categories         String[]
  keywords           String[]
  thumbnailUrl       String?
  parentVersionId    String?
  approvalWorkflowId String?
  approvedById       String?
  approvedAt         DateTime?
  approvalHistory    Json?
  isActive           Boolean               @default(true)
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  createdById        String
  updatedById        String
  executions         SetupExecution[]
  parameters         SetupParameter[]
  approvedBy         User?                 @relation("SetupSheetApprovedBy", fields: [approvedById], references: [id])
  createdBy          User                  @relation("SetupSheetCreatedBy", fields: [createdById], references: [id])
  parentVersion      SetupSheet?           @relation("SetupSheetVersionHistory", fields: [parentVersionId], references: [id])
  childVersions      SetupSheet[]          @relation("SetupSheetVersionHistory")
  updatedBy          User                  @relation("SetupSheetUpdatedBy", fields: [updatedById], references: [id])
  steps              SetupStep[]
  toolList           SetupTool[]

  @@index([documentNumber])
  @@index([status])
  @@index([equipmentId])
  @@index([operationId])
  @@index([partId])
  @@map("setup_sheets")
}

model SetupStep {
  id                   String     @id @default(cuid())
  setupSheetId         String
  stepNumber           Int
  title                String
  instructions         String
  imageUrls            String[]
  videoUrls            String[]
  estimatedDuration    Int?
  isCritical           Boolean    @default(false)
  requiresVerification Boolean    @default(false)
  setupSheet           SetupSheet @relation(fields: [setupSheetId], references: [id], onDelete: Cascade)

  @@unique([setupSheetId, stepNumber])
  @@index([setupSheetId])
  @@map("setup_steps")
}

model SetupParameter {
  id                 String     @id @default(cuid())
  setupSheetId       String
  parameterName      String
  targetValue        String
  tolerance          String?
  unit               String?
  equipmentSetting   String?
  verificationMethod String?
  setupSheet         SetupSheet @relation(fields: [setupSheetId], references: [id], onDelete: Cascade)

  @@index([setupSheetId])
  @@map("setup_parameters")
}

model SetupTool {
  id           String     @id @default(cuid())
  setupSheetId String
  toolId       String?
  toolName     String
  toolNumber   String?
  quantity     Int        @default(1)
  toolOffset   String?
  notes        String?
  setupSheet   SetupSheet @relation(fields: [setupSheetId], references: [id], onDelete: Cascade)

  @@index([setupSheetId])
  @@index([toolId])
  @@map("setup_tools")
}

model SetupExecution {
  id                String                         @id @default(cuid())
  setupSheetId      String
  workOrderId       String?
  operationId       String?
  startedById       String
  startedAt         DateTime                       @default(now())
  completedById     String?
  completedAt       DateTime?
  actualSetupTime   Int?
  verificationData  Json?
  firstPieceResults Json?
  status            WorkInstructionExecutionStatus @default(IN_PROGRESS)
  completedBy       User?                          @relation("SetupExecutionCompletedBy", fields: [completedById], references: [id])
  setupSheet        SetupSheet                     @relation(fields: [setupSheetId], references: [id])
  startedBy         User                           @relation("SetupExecutionStartedBy", fields: [startedById], references: [id])

  @@index([setupSheetId])
  @@index([workOrderId])
  @@map("setup_executions")
}

model InspectionPlan {
  id                 String                     @id @default(cuid())
  documentNumber     String                     @unique
  title              String
  description        String?
  version            String                     @default("1.0.0")
  status             WorkInstructionStatus      @default(DRAFT)
  effectiveDate      DateTime?
  supersededDate     DateTime?
  ecoNumber          String?
  partId             String?
  operationId        String?
  inspectionType     InspectionType
  frequency          InspectionFrequency
  samplingPlan       Json?
  dispositionRules   Json?
  gageRRRequired     Boolean                    @default(false)
  gageRRFrequency    String?
  imageUrls          String[]
  videoUrls          String[]
  attachmentUrls     String[]
  tags               String[]
  categories         String[]
  keywords           String[]
  thumbnailUrl       String?
  parentVersionId    String?
  approvalWorkflowId String?
  approvedById       String?
  approvedAt         DateTime?
  approvalHistory    Json?
  isActive           Boolean                    @default(true)
  createdAt          DateTime                   @default(now())
  updatedAt          DateTime                   @updatedAt
  createdById        String
  updatedById        String
  characteristics    InspectionCharacteristic[]
  executions         InspectionExecution[]
  approvedBy         User?                      @relation("InspectionPlanApprovedBy", fields: [approvedById], references: [id])
  createdBy          User                       @relation("InspectionPlanCreatedBy", fields: [createdById], references: [id])
  parentVersion      InspectionPlan?            @relation("InspectionPlanVersionHistory", fields: [parentVersionId], references: [id])
  childVersions      InspectionPlan[]           @relation("InspectionPlanVersionHistory")
  updatedBy          User                       @relation("InspectionPlanUpdatedBy", fields: [updatedById], references: [id])
  steps              InspectionStep[]

  @@index([documentNumber])
  @@index([status])
  @@index([partId])
  @@index([operationId])
  @@index([inspectionType])
  @@map("inspection_plans")
}

model InspectionCharacteristic {
  id                   String          @id @default(cuid())
  inspectionPlanId     String
  characteristicNumber Int
  characteristicName   String
  measurementType      MeasurementType
  nominal              Float?
  upperLimit           Float?
  lowerLimit           Float?
  unit                 String?
  measurementMethod    String?
  gageType             String?
  isCritical           Boolean         @default(false)
  inspectionPlan       InspectionPlan  @relation(fields: [inspectionPlanId], references: [id], onDelete: Cascade)

  @@unique([inspectionPlanId, characteristicNumber])
  @@index([inspectionPlanId])
  @@map("inspection_characteristics")
}

model InspectionStep {
  id                 String         @id @default(cuid())
  inspectionPlanId   String
  stepNumber         Int
  title              String
  instructions       String
  characteristicRefs Int[]
  imageUrls          String[]
  inspectionPlan     InspectionPlan @relation(fields: [inspectionPlanId], references: [id], onDelete: Cascade)

  @@unique([inspectionPlanId, stepNumber])
  @@index([inspectionPlanId])
  @@map("inspection_steps")
}

model InspectionExecution {
  id               String           @id @default(cuid())
  inspectionPlanId String
  workOrderId      String?
  operationId      String?
  lotNumber        String?
  serialNumber     String?
  inspectorId      String
  inspectedAt      DateTime         @default(now())
  results          Json
  overallResult    InspectionResult
  defectsFound     Json?
  disposition      Disposition?
  signatureId      String?
  inspectionPlan   InspectionPlan   @relation(fields: [inspectionPlanId], references: [id])
  inspector        User             @relation("InspectionExecutionInspector", fields: [inspectorId], references: [id])

  @@index([inspectionPlanId])
  @@index([workOrderId])
  @@index([inspectedAt])
  @@map("inspection_executions")
}

model StandardOperatingProcedure {
  id                 String                       @id @default(cuid())
  documentNumber     String                       @unique
  title              String
  description        String?
  version            String                       @default("1.0.0")
  status             WorkInstructionStatus        @default(DRAFT)
  effectiveDate      DateTime?
  supersededDate     DateTime?
  ecoNumber          String?
  sopType            SOPType
  scope              String
  applicability      String?
  responsibleRoles   String[]
  references         Json?
  safetyWarnings     String[]
  requiredPPE        String[]
  emergencyProcedure String?
  trainingRequired   Boolean                      @default(false)
  trainingFrequency  String?
  reviewFrequency    String?
  nextReviewDate     DateTime?
  imageUrls          String[]
  videoUrls          String[]
  attachmentUrls     String[]
  tags               String[]
  categories         String[]
  keywords           String[]
  thumbnailUrl       String?
  parentVersionId    String?
  approvalWorkflowId String?
  approvedById       String?
  approvedAt         DateTime?
  approvalHistory    Json?
  isActive           Boolean                      @default(true)
  createdAt          DateTime                     @default(now())
  updatedAt          DateTime                     @updatedAt
  createdById        String
  updatedById        String
  acknowledgments    SOPAcknowledgment[]
  audits             SOPAudit[]
  steps              SOPStep[]
  approvedBy         User?                        @relation("SOPApprovedBy", fields: [approvedById], references: [id])
  createdBy          User                         @relation("SOPCreatedBy", fields: [createdById], references: [id])
  parentVersion      StandardOperatingProcedure?  @relation("SOPVersionHistory", fields: [parentVersionId], references: [id])
  childVersions      StandardOperatingProcedure[] @relation("SOPVersionHistory")
  updatedBy          User                         @relation("SOPUpdatedBy", fields: [updatedById], references: [id])

  @@index([documentNumber])
  @@index([status])
  @@index([sopType])
  @@index([nextReviewDate])
  @@map("standard_operating_procedures")
}

model SOPStep {
  id           String                     @id @default(cuid())
  sopId        String
  stepNumber   Int
  title        String
  instructions String
  isWarning    Boolean                    @default(false)
  isCritical   Boolean                    @default(false)
  imageUrls    String[]
  videoUrls    String[]
  sop          StandardOperatingProcedure @relation(fields: [sopId], references: [id], onDelete: Cascade)

  @@unique([sopId, stepNumber])
  @@index([sopId])
  @@map("sop_steps")
}

model SOPAcknowledgment {
  id                  String                     @id @default(cuid())
  sopId               String
  userId              String
  userName            String
  acknowledgedAt      DateTime                   @default(now())
  trainingCompletedAt DateTime?
  assessmentScore     Float?
  assessmentPassed    Boolean?
  signatureId         String?
  sop                 StandardOperatingProcedure @relation(fields: [sopId], references: [id])
  user                User                       @relation("SOPAcknowledgmentUser", fields: [userId], references: [id])

  @@unique([sopId, userId])
  @@index([sopId])
  @@index([userId])
  @@map("sop_acknowledgments")
}

model SOPAudit {
  id                String                     @id @default(cuid())
  sopId             String
  auditDate         DateTime
  auditorId         String
  auditorName       String
  complianceChecks  Json
  overallCompliance Boolean
  findingsCount     Int                        @default(0)
  findings          String?
  correctiveActions Json?
  auditor           User                       @relation("SOPAuditAuditor", fields: [auditorId], references: [id])
  sop               StandardOperatingProcedure @relation(fields: [sopId], references: [id])

  @@index([sopId])
  @@index([auditDate])
  @@map("sop_audits")
}

model ToolDrawing {
  id                   String                  @id @default(cuid())
  documentNumber       String                  @unique
  title                String
  description          String?
  version              String                  @default("1.0.0")
  status               WorkInstructionStatus   @default(DRAFT)
  effectiveDate        DateTime?
  supersededDate       DateTime?
  ecoNumber            String?
  toolType             ToolType
  toolSubtype          String?
  dimensions           Json?
  material             String?
  weight               Float?
  weightUnit           String?
  vendorId             String?
  vendorName           String?
  vendorPartNumber     String?
  catalogNumber        String?
  cost                 Float?
  costCurrency         String?
  applicablePartIds    String[]
  applicableOperations String[]
  usageInstructions    String?
  maintenanceProcedure String?
  requiresCalibration  Boolean                 @default(false)
  calibrationInterval  Int?
  lastCalibrationDate  DateTime?
  nextCalibrationDate  DateTime?
  storageLocation      String?
  quantityOnHand       Int?
  minimumQuantity      Int?
  cadFileUrls          String[]
  imageUrls            String[]
  videoUrls            String[]
  attachmentUrls       String[]
  tags                 String[]
  categories           String[]
  keywords             String[]
  thumbnailUrl         String?
  parentVersionId      String?
  approvalWorkflowId   String?
  approvedById         String?
  approvedAt           DateTime?
  approvalHistory      Json?
  isActive             Boolean                 @default(true)
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
  createdById          String
  updatedById          String
  calibrationRecords   ToolCalibrationRecord[]
  approvedBy           User?                   @relation("ToolDrawingApprovedBy", fields: [approvedById], references: [id])
  createdBy            User                    @relation("ToolDrawingCreatedBy", fields: [createdById], references: [id])
  parentVersion        ToolDrawing?            @relation("ToolDrawingVersionHistory", fields: [parentVersionId], references: [id])
  childVersions        ToolDrawing[]           @relation("ToolDrawingVersionHistory")
  updatedBy            User                    @relation("ToolDrawingUpdatedBy", fields: [updatedById], references: [id])
  maintenanceRecords   ToolMaintenanceRecord[]
  usageLogs            ToolUsageLog[]

  @@index([documentNumber])
  @@index([status])
  @@index([toolType])
  @@index([vendorId])
  @@index([nextCalibrationDate])
  @@map("tool_drawings")
}

model ToolMaintenanceRecord {
  id                  String          @id @default(cuid())
  toolDrawingId       String
  maintenanceDate     DateTime
  performedById       String
  performedByName     String
  maintenanceType     MaintenanceType
  description         String
  partsReplaced       Json?
  cost                Float?
  toolConditionBefore String?
  toolConditionAfter  String?
  performedBy         User            @relation("ToolMaintenancePerformedBy", fields: [performedById], references: [id])
  toolDrawing         ToolDrawing     @relation(fields: [toolDrawingId], references: [id])

  @@index([toolDrawingId])
  @@index([maintenanceDate])
  @@map("tool_maintenance_records")
}

model ToolCalibrationRecord {
  id                  String      @id @default(cuid())
  toolDrawingId       String
  calibrationDate     DateTime
  performedById       String
  performedByName     String
  calibrationResults  Json
  passed              Boolean
  certificationNumber String?
  certificateUrl      String?
  nextDueDate         DateTime
  performedBy         User        @relation("ToolCalibrationPerformedBy", fields: [performedById], references: [id])
  toolDrawing         ToolDrawing @relation(fields: [toolDrawingId], references: [id])

  @@index([toolDrawingId])
  @@index([calibrationDate])
  @@map("tool_calibration_records")
}

model ToolUsageLog {
  id                String      @id @default(cuid())
  toolDrawingId     String
  usedAt            DateTime    @default(now())
  usedById          String
  usedByName        String
  workOrderId       String?
  operationId       String?
  usageDuration     Int?
  conditionAfterUse String?
  toolDrawing       ToolDrawing @relation(fields: [toolDrawingId], references: [id])
  usedBy            User        @relation("ToolUsageLogUsedBy", fields: [usedById], references: [id])

  @@index([toolDrawingId])
  @@index([usedAt])
  @@map("tool_usage_logs")
}

/// Standardized document templates for creating consistent manufacturing documents, forms, and reports
///
/// **Business Purpose:** Provides reusable document structures and formatting to ensure consistency, compliance, and efficiency in document creation across manufacturing operations
/// **Data Owner:** Quality Management and Document Control Teams
/// **Update Frequency:** Updated when document standards change or new template requirements are identified
/// **Compliance:** Templates must comply with regulatory document requirements (AS9100, ISO 9001, FDA) and corporate documentation standards
/// **Data Retention:** Permanent retention for template library and version history
/// **Security:** Internal - Contains document structure and formatting standards
/// **Integrations:** Document Management System, Form Generation Tools, Report Generation, Quality Management
/// **Related Tables:** User, DocumentComment, DocumentActivity
///
/// **Examples:**
/// - Quality inspection report template: Standardized template for generating dimensional inspection reports with consistent format
/// - Work instruction template: Reusable template for creating consistent work instructions across manufacturing operations
///
/// **Common Queries:**
/// - Find available templates by document type
/// - Generate new documents from templates
/// - Track template usage and effectiveness
///
model DocumentTemplate {
  id               String       @id @default(cuid())
  name             String
  description      String?
  documentType     DocumentType
  templateData     Json
  defaultValues    Json?
  isPublic         Boolean      @default(false)
  isSystemTemplate Boolean      @default(false)
  tags             String[]
  category         String?
  usageCount       Int          @default(0)
  isActive         Boolean      @default(true)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  createdById      String
  updatedById      String
  createdBy        User         @relation("DocumentTemplateCreatedBy", fields: [createdById], references: [id])
  updatedBy        User         @relation("DocumentTemplateUpdatedBy", fields: [updatedById], references: [id])

  @@index([documentType])
  @@index([isPublic])
  @@index([category])
  @@map("document_templates")
}

/// User Workstation Preference - Manages user layout preferences for work instruction execution
/// User-specific workstation display and interface preferences for optimized work instruction execution and system interaction
///
/// **Business Purpose:** Enhances operator productivity and ergonomics by providing customizable interface layouts and display configurations
/// **Data Owner:** Manufacturing Engineering and User Experience Teams
/// **Update Frequency:** Updated as users modify their interface preferences and workstation configurations
/// **Compliance:** Interface configurations should maintain regulatory compliance and safety visibility requirements
/// **Data Retention:** 5 years for user experience analysis and interface optimization
/// **Security:** Internal - User interface preferences and productivity optimization data
/// **Integrations:** Work Instruction Systems, Display Management, Ergonomics Analysis, User Interface Systems
/// **Related Tables:** User, WorkInstruction, WorkstationDisplayConfig
///
/// **Examples:**
/// - Dual monitor machining operator setup: Machining operator configuration with dual monitors and automatic step advancement for efficiency
/// - Compact inspection workstation: Quality inspector setup with compact layout optimized for inspection workflow
///
/// **Common Queries:**
/// - Load user preferences for workstation initialization
/// - Analyze interface usage patterns for optimization
/// - Track productivity improvements from preference customization
///
model UserWorkstationPreference {
  id                    String         @id @default(cuid())
  userId                String
  workstationId         String?
  layoutMode            LayoutMode     @default(SPLIT_VERTICAL)
  splitRatio            Float?         @default(0.6)
  panelPosition         PanelPosition? @default(LEFT)
  autoAdvanceSteps      Boolean        @default(false)
  showStepTimer         Boolean        @default(true)
  compactMode           Boolean        @default(false)
  useSecondMonitor      Boolean        @default(false)
  secondMonitorPosition Json?
  isActive              Boolean        @default(true)
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt

  @@unique([userId, workstationId])
  @@index([userId])
  @@index([workstationId])
  @@map("user_workstation_preferences")
}

/// Workstation Display Config - Physical display configuration for workstations
model WorkstationDisplayConfig {
  id                String      @id @default(cuid())
  workstationId     String      @unique
  screenWidth       Int?
  screenHeight      Int?
  isMultiMonitor    Boolean     @default(false)
  monitorCount      Int         @default(1)
  forcedLayout      LayoutMode?
  allowUserOverride Boolean     @default(true)
  isTouchScreen     Boolean     @default(false)
  touchTargetSize   Int?        @default(48)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  updatedById       String

  @@index([workstationId])
  @@map("workstation_display_configs")
}

model WorkflowDefinition {
  id           String             @id @default(cuid())
  name         String
  description  String?
  workflowType WorkflowType
  version      String             @default("1.0.0")
  structure    Json
  isActive     Boolean            @default(true)
  isTemplate   Boolean            @default(false)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  createdById  String
  updatedById  String
  instances    WorkflowInstance[]
  rules        WorkflowRule[]
  stages       WorkflowStage[]

  @@index([workflowType])
  @@index([isActive])
  @@map("workflow_definitions")
}

model WorkflowStage {
  id                 String                  @id @default(cuid())
  workflowId         String
  stageNumber        Int
  stageName          String
  description        String?
  approvalType       ApprovalType            @default(ALL_REQUIRED)
  minimumApprovals   Int?
  approvalThreshold  Float?
  requiredRoles      String[]
  optionalRoles      String[]
  assignmentStrategy AssignmentStrategy      @default(MANUAL)
  deadlineHours      Int?
  escalationRules    Json?
  allowDelegation    Boolean                 @default(true)
  allowSkip          Boolean                 @default(false)
  skipConditions     Json?
  requiresSignature  Boolean                 @default(false)
  signatureType      String?
  stageInstances     WorkflowStageInstance[]
  workflow           WorkflowDefinition      @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@unique([workflowId, stageNumber])
  @@index([workflowId])
  @@map("workflow_stages")
}

model WorkflowRule {
  id                String             @id @default(cuid())
  workflowId        String
  ruleName          String
  description       String?
  conditionField    String
  conditionOperator ConditionOperator
  conditionValue    Json
  actionType        RuleActionType
  actionConfig      Json
  priority          Int                @default(0)
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  workflow          WorkflowDefinition @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@index([workflowId])
  @@index([priority])
  @@map("workflow_rules")
}

model WorkflowInstance {
  id                 String                  @id @default(cuid())
  workflowId         String
  entityType         String
  entityId           String
  status             WorkflowStatus          @default(IN_PROGRESS)
  currentStageNumber Int?
  contextData        Json?
  startedAt          DateTime                @default(now())
  completedAt        DateTime?
  deadline           DateTime?
  priority           Priority                @default(NORMAL)
  impactLevel        ImpactLevel?
  createdById        String
  history            WorkflowHistory[]
  workflow           WorkflowDefinition      @relation(fields: [workflowId], references: [id])
  stageInstances     WorkflowStageInstance[]

  @@unique([entityType, entityId])
  @@index([workflowId])
  @@index([status])
  @@index([deadline])
  @@index([createdById])
  @@map("workflow_instances")
}

model WorkflowStageInstance {
  id                   String                         @id @default(cuid())
  workflowInstanceId   String
  stageId              String
  stageNumber          Int
  stageName            String
  status               StageStatus                    @default(PENDING)
  startedAt            DateTime?
  completedAt          DateTime?
  deadline             DateTime?
  outcome              StageOutcome?
  notes                String?
  assignments          WorkflowAssignment[]
  parallelCoordination WorkflowParallelCoordination[]
  stage                WorkflowStage                  @relation(fields: [stageId], references: [id])
  workflowInstance     WorkflowInstance               @relation(fields: [workflowInstanceId], references: [id], onDelete: Cascade)

  @@unique([workflowInstanceId, stageNumber])
  @@index([workflowInstanceId])
  @@index([status])
  @@index([deadline])
  @@map("workflow_stage_instances")
}

model WorkflowAssignment {
  id               String                @id @default(cuid())
  stageInstanceId  String
  assignedToId     String
  assignedToRole   String?
  assignmentType   AssignmentType        @default(REQUIRED)
  delegatedFromId  String?
  delegationReason String?
  delegationExpiry DateTime?
  action           ApprovalAction?
  actionTakenAt    DateTime?
  comments         String?
  signatureId      String?
  signatureType    String?
  assignedAt       DateTime              @default(now())
  dueDate          DateTime?
  escalationLevel  Int                   @default(0)
  escalatedAt      DateTime?
  escalatedToId    String?
  stageInstance    WorkflowStageInstance @relation(fields: [stageInstanceId], references: [id], onDelete: Cascade)

  @@index([stageInstanceId])
  @@index([assignedToId])
  @@index([dueDate])
  @@index([action])
  @@map("workflow_assignments")
}

model WorkflowHistory {
  id                 String            @id @default(cuid())
  workflowInstanceId String
  eventType          WorkflowEventType
  eventDescription   String
  stageNumber        Int?
  fromStatus         String?
  toStatus           String?
  performedById      String
  performedByName    String
  performedByRole    String?
  details            Json?
  occurredAt         DateTime          @default(now())
  workflowInstance   WorkflowInstance  @relation(fields: [workflowInstanceId], references: [id], onDelete: Cascade)

  @@index([workflowInstanceId])
  @@index([eventType])
  @@index([occurredAt])
  @@map("workflow_history")
}

model WorkflowDelegation {
  id                 String        @id @default(cuid())
  delegatorId        String
  delegateeId        String
  workflowType       WorkflowType?
  specificWorkflowId String?
  startDate          DateTime
  endDate            DateTime?
  reason             String
  isActive           Boolean       @default(true)
  createdAt          DateTime      @default(now())

  @@index([delegatorId])
  @@index([delegateeId])
  @@index([isActive])
  @@map("workflow_delegations")
}

model WorkflowTemplate {
  id                 String       @id @default(cuid())
  name               String
  description        String?
  workflowType       WorkflowType
  category           String       @default("STANDARD")
  templateDefinition Json
  usageCount         Int          @default(0)
  lastUsedAt         DateTime?
  isActive           Boolean      @default(true)
  isBuiltIn          Boolean      @default(false)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  createdById        String

  @@index([workflowType])
  @@index([category])
  @@index([isActive])
  @@map("workflow_templates")
}

model WorkflowTask {
  id                 String     @id @default(cuid())
  assignmentId       String     @unique
  assignedToId       String
  workflowInstanceId String
  stageNumber        Int
  entityType         String
  entityId           String
  taskTitle          String
  taskDescription    String?
  priority           Priority   @default(NORMAL)
  status             TaskStatus @default(PENDING)
  createdAt          DateTime   @default(now())
  dueDate            DateTime?
  lastReminderSent   DateTime?
  reminderCount      Int        @default(0)

  @@index([assignedToId, status])
  @@index([dueDate])
  @@index([priority])
  @@index([workflowInstanceId])
  @@map("workflow_tasks")
}

model WorkflowMetrics {
  id                 String        @id @default(cuid())
  periodStart        DateTime
  periodEnd          DateTime
  workflowId         String?
  stageId            String?
  workflowType       WorkflowType?
  userId             String?
  roleId             String?
  totalAssignments   Int           @default(0)
  completedOnTime    Int           @default(0)
  completedLate      Int           @default(0)
  avgCompletionHours Float?
  escalationCount    Int           @default(0)
  rejectionCount     Int           @default(0)
  onTimePercentage   Float?
  avgResponseHours   Float?
  updatedAt          DateTime      @updatedAt

  @@index([periodStart, periodEnd])
  @@index([workflowType])
  @@index([userId])
  @@map("workflow_metrics")
}

model WorkflowParallelCoordination {
  id                   String                @id @default(cuid())
  stageInstanceId      String
  groupId              String
  groupName            String?
  groupType            String
  completionType       String
  thresholdValue       Int?
  totalAssignments     Int                   @default(0)
  completedAssignments Int                   @default(0)
  approvedAssignments  Int                   @default(0)
  rejectedAssignments  Int                   @default(0)
  groupStatus          String                @default("PENDING")
  groupDecision        String?
  completedAt          DateTime?
  metadata             Json?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  stageInstance        WorkflowStageInstance @relation(fields: [stageInstanceId], references: [id], onDelete: Cascade)

  @@unique([stageInstanceId, groupId])
  @@index([stageInstanceId])
  @@index([groupStatus])
  @@map("workflow_parallel_coordination")
}

/// Engineering Change Order - Core ECO entity for formal change management
model EngineeringChangeOrder {
  id                     String                @id @default(cuid())
  ecoNumber              String                @unique
  title                  String
  description            String
  ecoType                ECOType
  priority               ECOPriority
  status                 ECOStatus             @default(REQUESTED)
  currentState           String
  proposedChange         String
  reasonForChange        String
  benefitsExpected       String?
  risksIfNotImplemented  String?
  requestorId            String
  requestorName          String
  requestorDept          String?
  requestDate            DateTime              @default(now())
  sponsorId              String?
  sponsorName            String?
  impactAnalysis         Json?
  affectedParts          String[]
  affectedOperations     String[]
  estimatedCost          Float?
  actualCost             Float?
  estimatedSavings       Float?
  actualSavings          Float?
  costCurrency           String                @default("USD")
  requestedEffectiveDate DateTime?
  plannedEffectiveDate   DateTime?
  actualEffectiveDate    DateTime?
  effectivityType        EffectivityType?
  effectivityValue       String?
  isInterchangeable      Boolean               @default(false)
  crbReviewDate          DateTime?
  crbDecision            CRBDecision?
  crbNotes               String?
  completedDate          DateTime?
  verifiedDate           DateTime?
  closedDate             DateTime?
  closedById             String?
  isActive               Boolean               @default(true)
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  affectedDocuments      ECOAffectedDocument[]
  attachments            ECOAttachment[]
  crbReviews             ECOCRBReview[]
  history                ECOHistory[]
  relatedECOs            ECORelation[]         @relation("ParentECO")
  parentRelations        ECORelation[]         @relation("RelatedECO")
  tasks                  ECOTask[]

  @@index([ecoNumber])
  @@index([status])
  @@index([priority])
  @@index([requestDate])
  @@index([requestorId])
  @@map("engineering_change_orders")
}

/// ECO Affected Document - Links ECOs to documents that need updates
model ECOAffectedDocument {
  id                String                 @id @default(cuid())
  ecoId             String
  documentType      String
  documentId        String
  documentTitle     String
  currentVersion    String?
  targetVersion     String?
  status            DocUpdateStatus        @default(PENDING)
  assignedToId      String?
  assignedToName    String?
  updateStartedAt   DateTime?
  updateCompletedAt DateTime?
  approvedAt        DateTime?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  eco               EngineeringChangeOrder @relation(fields: [ecoId], references: [id], onDelete: Cascade)

  @@unique([ecoId, documentType, documentId])
  @@index([ecoId])
  @@index([status])
  @@index([assignedToId])
  @@map("eco_affected_documents")
}

/// ECO Task - Implementation tasks for ECO completion
model ECOTask {
  id                String                 @id @default(cuid())
  ecoId             String
  taskName          String
  description       String?
  taskType          ECOTaskType
  assignedToId      String?
  assignedToName    String?
  assignedToDept    String?
  status            ECOTaskStatus          @default(PENDING)
  dueDate           DateTime?
  startedAt         DateTime?
  completedAt       DateTime?
  prerequisiteTasks String[]
  completionNotes   String?
  verifiedById      String?
  verifiedAt        DateTime?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  eco               EngineeringChangeOrder @relation(fields: [ecoId], references: [id], onDelete: Cascade)

  @@index([ecoId])
  @@index([assignedToId])
  @@index([status])
  @@index([dueDate])
  @@map("eco_tasks")
}

/// ECO Attachment - Supporting documents for ECOs
model ECOAttachment {
  id             String                 @id @default(cuid())
  ecoId          String
  fileName       String
  fileUrl        String
  fileSize       Int
  mimeType       String
  attachmentType AttachmentType
  description    String?
  uploadedById   String
  uploadedByName String
  uploadedAt     DateTime               @default(now())
  eco            EngineeringChangeOrder @relation(fields: [ecoId], references: [id], onDelete: Cascade)

  @@index([ecoId])
  @@index([attachmentType])
  @@map("eco_attachments")
}

/// ECO History - Complete audit trail for ECO changes
model ECOHistory {
  id               String                 @id @default(cuid())
  ecoId            String
  eventType        ECOEventType
  eventDescription String
  fromStatus       ECOStatus?
  toStatus         ECOStatus?
  details          Json?
  performedById    String
  performedByName  String
  performedByRole  String?
  occurredAt       DateTime               @default(now())
  eco              EngineeringChangeOrder @relation(fields: [ecoId], references: [id], onDelete: Cascade)

  @@index([ecoId])
  @@index([eventType])
  @@index([occurredAt])
  @@map("eco_history")
}

/// ECO CRB Review - Change Review Board meeting records
model ECOCRBReview {
  id                String                 @id @default(cuid())
  ecoId             String
  meetingDate       DateTime
  meetingAgenda     String?
  members           Json
  discussionNotes   String?
  questionsConcerns String?
  decision          CRBDecision
  decisionRationale String?
  votesFor          Int?
  votesAgainst      Int?
  votesAbstain      Int?
  conditions        String?
  actionItems       Json?
  nextReviewDate    DateTime?
  createdById       String
  createdAt         DateTime               @default(now())
  eco               EngineeringChangeOrder @relation(fields: [ecoId], references: [id], onDelete: Cascade)

  @@index([ecoId])
  @@index([meetingDate])
  @@map("eco_crb_reviews")
}

/// ECO Relation - Relationships between ECOs
model ECORelation {
  id           String                 @id @default(cuid())
  parentEcoId  String
  relatedEcoId String
  relationType ECORelationType
  description  String?
  createdAt    DateTime               @default(now())
  parentEco    EngineeringChangeOrder @relation("ParentECO", fields: [parentEcoId], references: [id], onDelete: Cascade)
  relatedEco   EngineeringChangeOrder @relation("RelatedECO", fields: [relatedEcoId], references: [id], onDelete: Cascade)

  @@unique([parentEcoId, relatedEcoId])
  @@index([parentEcoId])
  @@index([relatedEcoId])
  @@map("eco_relations")
}

/// CRB Configuration - Change Review Board setup
model CRBConfiguration {
  id               String     @id @default(cuid())
  boardMembers     Json
  meetingFrequency String?
  meetingDay       String?
  meetingTime      String?
  votingRule       VotingRule @default(MAJORITY)
  quorumRequired   Int?
  preReviewDays    Int        @default(3)
  isActive         Boolean    @default(true)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  @@index([isActive])
  @@map("crb_configurations")
}

/// Document Comment - Threaded comments on documents
model DocumentComment {
  id               String              @id @default(cuid())
  documentType     String
  documentId       String
  contextType      CommentContextType?
  contextId        String?
  contextPath      String?
  commentText      String
  attachments      String[]
  parentCommentId  String?
  status           CommentStatus       @default(OPEN)
  priority         CommentPriority     @default(MEDIUM)
  tags             String[]
  isPinned         Boolean             @default(false)
  isResolved       Boolean             @default(false)
  resolvedAt       DateTime?
  resolvedById     String?
  authorId         String
  authorName       String
  mentionedUserIds String[]
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  editedAt         DateTime?
  reactions        CommentReaction[]
  parentComment    DocumentComment?    @relation("CommentThread", fields: [parentCommentId], references: [id], onDelete: Cascade)
  replies          DocumentComment[]   @relation("CommentThread")

  @@index([documentType, documentId])
  @@index([parentCommentId])
  @@index([authorId])
  @@index([status])
  @@index([createdAt])
  @@map("document_comments")
}

/// Comment Reaction - Reactions to comments
model CommentReaction {
  id           String          @id @default(cuid())
  commentId    String
  userId       String
  userName     String
  reactionType ReactionType
  createdAt    DateTime        @default(now())
  comment      DocumentComment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId, reactionType])
  @@index([commentId])
  @@map("comment_reactions")
}

/// Document Annotation - Visual annotations on media
model DocumentAnnotation {
  id             String         @id @default(cuid())
  documentType   String
  documentId     String
  mediaType      String?
  mediaUrl       String?
  annotationType AnnotationType
  annotationData Json
  text           String?
  color          String?
  strokeWidth    Int?
  opacity        Float?
  fontSize       Int?
  timestamp      Float?
  authorId       String
  authorName     String
  isResolved     Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@index([documentType, documentId])
  @@index([authorId])
  @@map("document_annotations")
}

/// Review Assignment - Document review assignments
model ReviewAssignment {
  id              String                @id @default(cuid())
  documentType    String
  documentId      String
  documentVersion String
  reviewerId      String
  reviewerName    String
  assignedById    String
  assignedByName  String
  assignedAt      DateTime              @default(now())
  reviewType      ReviewType
  instructions    String?
  focusAreas      String[]
  isRequired      Boolean               @default(true)
  deadline        DateTime?
  checklistItems  Json?
  status          ReviewStatus          @default(NOT_STARTED)
  startedAt       DateTime?
  completedAt     DateTime?
  recommendation  ReviewRecommendation?
  summary         String?
  timeSpent       Int?
  signatureId     String?
  signedOffAt     DateTime?

  @@unique([documentType, documentId, reviewerId])
  @@index([reviewerId])
  @@index([status])
  @@index([deadline])
  @@map("review_assignments")
}

/// Document Activity - Activity log for documents
model DocumentActivity {
  id              String       @id @default(cuid())
  documentType    String
  documentId      String
  activityType    ActivityType
  description     String
  changesSummary  Json?
  performedById   String
  performedByName String
  performedByRole String?
  metadata        Json?
  occurredAt      DateTime     @default(now())

  @@index([documentType, documentId])
  @@index([activityType])
  @@index([occurredAt])
  @@index([performedById])
  @@map("document_activities")
}

/// Document Subscription - User subscriptions to document updates
model DocumentSubscription {
  id               String   @id @default(cuid())
  userId           String
  documentType     String
  documentId       String
  notifyOnEdit     Boolean  @default(true)
  notifyOnComment  Boolean  @default(true)
  notifyOnApproval Boolean  @default(true)
  notifyOnVersion  Boolean  @default(true)
  subscribedAt     DateTime @default(now())

  @@unique([userId, documentType, documentId])
  @@index([userId])
  @@index([documentType, documentId])
  @@map("document_subscriptions")
}

/// User Notification - System notifications
/// System-generated notifications and alerts delivered to users for operational updates, task assignments, and system events
///
/// **Business Purpose:** Ensures timely communication of critical information, task assignments, and system status to enable efficient operations
/// **Data Owner:** System Administration and Operations Management Teams
/// **Update Frequency:** Real-time generation as events occur and notifications are triggered
/// **Compliance:** Notification delivery and acknowledgment may be required for critical safety and quality alerts
/// **Data Retention:** 1 year for operational analysis and communication audit trails
/// **Security:** Internal - Operational communications and task assignment information
/// **Integrations:** Workflow Management, Alert Systems, Email Systems, Mobile Applications
/// **Related Tables:** User, WorkOrder, NCR, Alert
///
/// **Examples:**
/// - Quality alert notification: Critical quality notification requiring immediate inspector attention and action
/// - Work assignment notification: Work assignment notification with direct link to work order details
///
/// **Common Queries:**
/// - Find unread notifications by user for dashboard display
/// - Track notification delivery and response rates
/// - Generate communication audit reports for compliance
///
model UserNotification {
  id               String           @id @default(cuid())
  userId           String
  notificationType NotificationType
  title            String
  message          String
  entityType       String?
  entityId         String?
  actionUrl        String?
  isRead           Boolean          @default(false)
  readAt           DateTime?
  createdAt        DateTime         @default(now())
  expiresAt        DateTime?

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@map("user_notifications")
}

/// Document Edit Session - Real-time collaboration sessions
model DocumentEditSession {
  id             String    @id @default(cuid())
  documentType   String
  documentId     String
  userId         String
  userName       String
  sessionId      String    @unique
  startedAt      DateTime  @default(now())
  lastActivityAt DateTime  @default(now())
  endedAt        DateTime?
  cursorPosition Json?
  lockedSections String[]
  isActive       Boolean   @default(true)

  @@index([documentType, documentId])
  @@index([userId])
  @@index([isActive])
  @@map("document_edit_sessions")
}

/// Conflict Resolution - Merge conflict resolutions
model ConflictResolution {
  id             String         @id @default(cuid())
  documentType   String
  documentId     String
  conflictPath   String
  baseVersion    String
  yourVersion    Json
  theirVersion   Json
  theirUserId    String
  resolution     ResolutionType
  mergedVersion  Json
  resolvedById   String
  resolvedByName String
  resolvedAt     DateTime       @default(now())

  @@index([documentType, documentId])
  @@index([resolvedById])
  @@map("conflict_resolutions")
}

/// Cloud storage file registry
/// Tracks all files stored in S3/MinIO with versioning, deduplication, and metadata
model StoredFile {
  id                  String              @id @default(uuid())
  storagePath         String              @unique
  storageProvider     String
  bucket              String
  fileName            String
  originalFileName    String
  fileSize            Int
  mimeType            String
  fileHash            String
  versionId           String?
  isLatestVersion     Boolean             @default(true)
  versionNumber       Int                 @default(1)
  storageClass        StorageClass        @default(HOT)
  transitionedAt      DateTime?
  metadata            Json?
  tags                String[]
  cdnUrl              String?
  cacheStatus         CacheStatus?
  lastCacheUpdate     DateTime?
  accessCount         Int                 @default(0)
  lastAccessedAt      DateTime?
  downloadCount       Int                 @default(0)
  documentType        String?
  documentId          String?
  attachmentType      FileAttachmentType?
  deduplicationRefs   Int                 @default(1)
  originalFileId      String?
  retentionPolicy     String?
  expiresAt           DateTime?
  autoDeleteAt        DateTime?
  isEncrypted         Boolean             @default(false)
  encryptionKeyId     String?
  encryptionAlgorithm String?
  uploadedById        String
  uploadedByName      String
  uploadedAt          DateTime            @default(now())
  uploadMethod        UploadMethod        @default(DIRECT)
  uploadSessionId     String?
  processingStatus    ProcessingStatus    @default(COMPLETED)
  processingError     String?
  thumbnailGenerated  Boolean             @default(false)
  thumbnailPath       String?
  backupEntries       BackupEntry[]
  accessLogs          FileAccessLog[]
  versions            FileVersion[]
  originalFile        StoredFile?         @relation("FileDuplicates", fields: [originalFileId], references: [id])
  duplicateFiles      StoredFile[]        @relation("FileDuplicates")

  @@index([storagePath])
  @@index([fileHash])
  @@index([documentType, documentId])
  @@index([storageClass])
  @@index([uploadedAt])
  @@index([isLatestVersion])
  @@index([originalFileId])
  @@map("stored_files")
}

/// File version history for comprehensive version tracking
model FileVersion {
  id                String            @id @default(uuid())
  fileId            String
  versionNumber     Int
  versionId         String
  storagePath       String
  fileSize          Int
  fileHash          String
  mimeType          String
  changeDescription String?
  changeType        VersionChangeType @default(UPDATE)
  storageClass      StorageClass      @default(HOT)
  metadata          Json?
  createdAt         DateTime          @default(now())
  createdById       String
  createdByName     String
  retentionPolicy   String?
  expiresAt         DateTime?
  file              StoredFile        @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@unique([fileId, versionNumber])
  @@index([fileId])
  @@index([createdAt])
  @@map("file_versions")
}

/// Backup schedules for automated backup management
model BackupSchedule {
  id                     String          @id @default(uuid())
  name                   String
  description            String?
  bucketName             String
  backupBucket           String?
  includePattern         String?
  excludePattern         String?
  frequency              BackupFrequency
  cronExpression         String?
  timezone               String          @default("UTC")
  retentionDays          Int             @default(30)
  maxBackups             Int?
  enableCompression      Boolean         @default(true)
  enableEncryption       Boolean         @default(true)
  crossRegionReplication Boolean         @default(false)
  isActive               Boolean         @default(true)
  lastBackupAt           DateTime?
  nextBackupAt           DateTime?
  lastSuccessAt          DateTime?
  lastFailureAt          DateTime?
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  createdById            String
  updatedById            String?
  backupHistory          BackupHistory[]

  @@index([isActive])
  @@index([nextBackupAt])
  @@map("backup_schedules")
}

/// Backup execution history and status tracking
model BackupHistory {
  id               String          @id @default(uuid())
  scheduleId       String?
  backupType       BackupType
  status           BackupStatus
  sourceBucket     String
  destBucket       String
  backupLocation   String
  fileCount        Int?
  totalSize        Int?
  compressedSize   Int?
  compressionRatio Float?
  startedAt        DateTime
  completedAt      DateTime?
  duration         Int?
  errorMessage     String?
  errorCode        String?
  checksumVerified Boolean         @default(false)
  verificationDate DateTime?
  metadata         Json?
  backupEntries    BackupEntry[]
  schedule         BackupSchedule? @relation(fields: [scheduleId], references: [id])

  @@index([scheduleId])
  @@index([status])
  @@index([startedAt])
  @@index([backupType])
  @@map("backup_history")
}

/// Backup entries linking files to backup instances
model BackupEntry {
  id               String        @id @default(uuid())
  backupId         String
  fileId           String
  backupPath       String
  originalPath     String
  checksum         String
  checksumVerified Boolean       @default(false)
  metadata         Json?
  backup           BackupHistory @relation(fields: [backupId], references: [id], onDelete: Cascade)
  file             StoredFile    @relation(fields: [fileId], references: [id])

  @@unique([backupId, fileId])
  @@index([backupId])
  @@index([fileId])
  @@map("backup_entries")
}

/// File access logging for security and analytics
model FileAccessLog {
  id             String     @id @default(uuid())
  fileId         String
  accessType     AccessType
  accessMethod   String
  userId         String?
  userName       String?
  userAgent      String?
  ipAddress      String?
  referrer       String?
  requestHeaders Json?
  responseCode   Int?
  responseSize   Int?
  accessedAt     DateTime   @default(now())
  duration       Int?
  country        String?
  region         String?
  city           String?
  cdnHit         Boolean?
  edgeLocation   String?
  file           StoredFile @relation(fields: [fileId], references: [id])

  @@index([fileId])
  @@index([accessedAt])
  @@index([userId])
  @@index([accessType])
  @@map("file_access_logs")
}

/// Storage analytics and metrics for monitoring
model StorageMetrics {
  id               String   @id @default(uuid())
  date             DateTime @unique
  hour             Int?
  totalFiles       Int      @default(0)
  totalSize        Int      @default(0)
  hotStorageFiles  Int      @default(0)
  hotStorageSize   Int      @default(0)
  warmStorageFiles Int      @default(0)
  warmStorageSize  Int      @default(0)
  coldStorageFiles Int      @default(0)
  coldStorageSize  Int      @default(0)
  archiveFiles     Int      @default(0)
  archiveSize      Int      @default(0)
  imageFiles       Int      @default(0)
  imageSize        Int      @default(0)
  videoFiles       Int      @default(0)
  videoSize        Int      @default(0)
  documentFiles    Int      @default(0)
  documentSize     Int      @default(0)
  cadFiles         Int      @default(0)
  cadSize          Int      @default(0)
  uploads          Int      @default(0)
  downloads        Int      @default(0)
  deletes          Int      @default(0)
  totalRequests    Int      @default(0)
  totalBandwidth   Int      @default(0)
  cdnHits          Int      @default(0)
  cdnMisses        Int      @default(0)
  duplicateFiles   Int      @default(0)
  spaceSaved       Int      @default(0)
  estimatedCost    Decimal? @db.Decimal(10, 2)

  @@index([date])
  @@index([hour])
  @@map("storage_metrics")
}

/// Multipart upload session tracking
model MultipartUpload {
  id             String       @id @default(uuid())
  uploadId       String       @unique
  fileName       String
  storagePath    String
  totalSize      Int
  chunkSize      Int
  totalChunks    Int
  uploadedChunks Int          @default(0)
  status         UploadStatus @default(IN_PROGRESS)
  parts          Json[]
  uploadedById   String
  uploadedByName String
  startedAt      DateTime     @default(now())
  lastActivityAt DateTime     @default(now())
  completedAt    DateTime?
  expiresAt      DateTime
  errorMessage   String?
  retryCount     Int          @default(0)
  metadata       Json?

  @@index([uploadId])
  @@index([status])
  @@index([uploadedById])
  @@index([expiresAt])
  @@map("multipart_uploads")
}

/// Enhanced Role model - Replaces placeholder in auth service
/// Supports both global and site-specific roles with flexible permission assignment
model Role {
  id            String           @id @default(cuid())
  roleCode      String           @unique
  /// Unique name identifier for the role following corporate role naming standards
  /// **Business Rule:** Must be unique across the system and follow role naming convention for clarity
  /// **Data Source:** Security administration and human resources role definitions
  /// **Format:** DEPARTMENT_FUNCTION format (e.g., PRODUCTION_OPERATOR, QUALITY_ENGINEER)
  /// **Validation:** Must be unique, alphanumeric with underscores, all uppercase
  /// **Business Impact:** Primary identifier for role-based access control and security management
  /// **Examples:**
  /// - PRODUCTION_OPERATOR - Shop floor production worker
  /// - QUALITY_ENGINEER - Quality control and inspection authority
  /// - MAINTENANCE_TECHNICIAN - Equipment maintenance and repair
  /// - PLANT_MANAGER - Site-level management authority
  roleName      String
  /// Detailed description of the role's responsibilities and scope of authority
  /// **Business Rule:** Should clearly define role responsibilities for security and compliance purposes
  /// **Data Source:** Human resources job descriptions and security policy documentation
  /// **Business Impact:** Provides clear understanding of role scope for access control decisions
  /// **Examples:**
  /// - Authorized to perform production operations and data entry
  /// - Quality inspection authority with approval permissions
  /// - Equipment maintenance with safety lockout authority
  description   String?
  /// Indicates whether the role is currently active and available for assignment
  /// **Business Rule:** Inactive roles cannot be assigned to users but existing assignments remain for audit trail
  /// **Data Source:** Security administration and role lifecycle management
  /// **Validation:** Boolean field, defaults to true for new roles
  /// **Business Impact:** Controls role availability while maintaining audit history
  isActive      Boolean          @default(true)
  isGlobal      Boolean          @default(true)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  createdBy     String?
  /// Array of permission identifiers that define what actions this role can perform
  /// **Business Rule:** Permissions must follow principle of least privilege and be regularly reviewed
  /// **Data Source:** Security policy and role-based access control matrix
  /// **Validation:** All permissions must exist in Permission table
  /// **Business Impact:** Determines system access levels and operational capabilities
  /// **Compliance:** Permission assignments must be auditable for SOX and security compliance
  /// **Examples:**
  /// - ['READ_WORK_ORDERS', 'UPDATE_PRODUCTION_DATA'] - Production operator permissions
  /// - ['READ_QUALITY_PLANS', 'APPROVE_INSPECTIONS'] - Quality engineer permissions
  /// - ['READ_ALL_DATA', 'MANAGE_USERS'] - Administrative permissions
  permissions   RolePermission[]
  userRoles     UserRole[]
  userSiteRoles UserSiteRole[]

  // Role Template relationship
  templateInstance RoleTemplateInstance?

  @@index([roleCode])
  @@index([isActive])
  @@index([isGlobal])
  @@map("roles")
}

/// Enhanced Permission model - Replaces placeholder in auth service
/// Granular permissions with wildcard support and categorization
model Permission {
  id             String           @id @default(cuid())
  permissionCode String           @unique
  /// Unique identifier for the specific system permission or access right
  /// **Business Rule:** Must be unique and follow permission naming convention for consistency
  /// **Data Source:** Security policy definitions and system access control requirements
  /// **Format:** ACTION_RESOURCE format (e.g., READ_WORK_ORDERS, APPROVE_QUALITY_PLANS)
  /// **Validation:** Must be unique, alphanumeric with underscores, all uppercase
  /// **Business Impact:** Granular access control for system security and compliance
  /// **Examples:**
  /// - READ_WORK_ORDERS - View work order information
  /// - UPDATE_PRODUCTION_DATA - Modify production records
  /// - APPROVE_QUALITY_PLANS - Quality plan approval authority
  /// - MANAGE_USERS - User administration permissions
  permissionName String
  /// Human-readable description of what this permission allows users to do
  /// **Business Rule:** Should be clear enough for role administrators to make informed assignment decisions
  /// **Data Source:** Security documentation and user training materials
  /// **Business Impact:** Facilitates proper permission assignment and security training
  /// **Examples:**
  /// - Allows viewing of all work order details and status information
  /// - Grants authority to approve quality inspection results
  /// - Enables creation and modification of user accounts
  description    String?
  category       String?
  isActive       Boolean          @default(true)
  isWildcard     Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  roles          RolePermission[]

  // Role Template relationship
  templatePermissions RoleTemplatePermission[]

  @@index([permissionCode])
  @@index([category])
  @@index([isActive])
  @@index([isWildcard])
  @@map("permissions")
}

/// Junction table: Role ↔ Permission (many-to-many)
/// Defines which permissions are assigned to each role
model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  grantedAt    DateTime   @default(now())
  grantedBy    String?
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
  @@map("role_permissions")
}

/// Junction table: User ↔ Role (many-to-many, global)
/// Assigns global roles to users that apply across all sites
/// Assignment of system roles to users establishing access permissions and functional capabilities within the MES
///
/// **Business Purpose:** Controls user access to system functions and data based on job responsibilities and security requirements
/// **Data Owner:** IT Security and System Administration Teams
/// **Update Frequency:** Real-time updates as personnel roles change or access requirements are modified
/// **Compliance:** Role assignments must follow principle of least privilege and regulatory access control requirements
/// **Data Retention:** 7 years for security audit and compliance requirements
/// **Security:** Confidential - Contains access control and security authorization information
/// **Integrations:** Active Directory, Role Management, Permission Systems, Audit Management
/// **Related Tables:** User, Role, UserSiteRole, PermissionChangeLog
///
/// **Examples:**
/// - Production operator role assignment: Standard operator role providing access to production systems and work instructions
/// - Temporary quality role assignment: Temporary quality inspector role with defined expiration for project-based assignment
///
/// **Common Queries:**
/// - Find users by role for access management
/// - Track role assignment history for security audits
/// - Generate access reports for compliance verification
///
model UserRole {
  id         String    @id @default(cuid())
  userId     String
  roleId     String
  assignedAt DateTime  @default(now())
  assignedBy String?
  expiresAt  DateTime?
  role       Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
  @@index([expiresAt])
  @@map("user_roles")
}

/// Junction table: User ↔ Role ↔ Site (many-to-many, site-specific)
/// Assigns site-specific roles to users for enhanced granular control
model UserSiteRole {
  id         String    @id @default(cuid())
  /// Foreign key reference to the user being assigned a site-specific role
  /// **Business Rule:** Must reference valid active user account
  /// **Data Source:** User management system and role assignment workflow
  /// **Validation:** Must exist in User table, user must be active
  /// **Business Impact:** Links users to their site-specific access rights and responsibilities
  userId     String
  roleId     String
  /// Foreign key reference to the specific site where this role assignment applies
  /// **Business Rule:** Role assignment is site-specific to control access by location
  /// **Data Source:** Site organization structure and security policies
  /// **Validation:** Must exist in Site table
  /// **Business Impact:** Enables site-specific access control for multi-site operations
  siteId     String
  /// Timestamp when the role assignment was created
  /// **Business Rule:** Automatically set when assignment is created, cannot be modified
  /// **Data Source:** System timestamp at assignment creation
  /// **Format:** ISO 8601 timestamp with timezone
  /// **Business Impact:** Enables tracking of role assignment timeline for security analysis
  /// **Audit Trail:** Required for security audit and compliance reporting
  assignedAt DateTime  @default(now())
  /// User who authorized and created this role assignment
  /// **Business Rule:** Assigning user must have role management permissions for the target site
  /// **Data Source:** User management workflow and authorization system
  /// **Validation:** Must be valid user with appropriate administrative permissions
  /// **Business Impact:** Provides accountability for role assignment decisions
  /// **Audit Trail:** Critical for security audit and role assignment accountability
  assignedBy String?
  expiresAt  DateTime?
  role       Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  site       Site      @relation(fields: [siteId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId, siteId])
  @@index([userId])
  @@index([roleId])
  @@index([siteId])
  @@index([expiresAt])
  @@map("user_site_roles")
}

/// Time tracking configuration (site level)
/// Controls how time tracking behaves at each manufacturing site
model TimeTrackingConfiguration {
  id                     String                  @id @default(cuid())
  /// Foreign key reference to the site where this time tracking configuration applies
  /// **Business Rule:** Each site can have unique time tracking rules and requirements
  /// **Data Source:** Site operations management and time tracking policy
  /// **Validation:** Must exist in Site table
  /// **Business Impact:** Enables site-specific time tracking policies for multi-site operations
  siteId                 String                  @unique
  timeTrackingEnabled    Boolean                 @default(true)
  trackingGranularity    TimeTrackingGranularity @default(OPERATION)
  costingModel           CostingModel            @default(LABOR_HOURS)
  allowMultiTasking      Boolean                 @default(false)
  multiTaskingMode       MultiTaskingMode?
  autoSubtractBreaks     Boolean                 @default(false)
  standardBreakMinutes   Int?
  requireBreakClockOut   Boolean                 @default(false)
  /// Number of hours per day after which overtime rules apply
  /// **Business Rule:** Must comply with labor regulations and union agreements
  /// **Data Source:** Labor law requirements and collective bargaining agreements
  /// **Format:** Decimal hours (e.g., 8.0, 10.0, 12.0)
  /// **Validation:** Must be positive, typically 8-12 hours
  /// **Business Impact:** Determines overtime calculation for payroll and cost management
  /// **Compliance:** Must comply with Fair Labor Standards Act and local labor laws
  overtimeThresholdHours Float?                  @default(8.0)
  warnOnOvertime         Boolean                 @default(true)
  enableMachineTracking  Boolean                 @default(false)
  autoStartFromMachine   Boolean                 @default(false)
  autoStopFromMachine    Boolean                 @default(false)
  requireTimeApproval    Boolean                 @default(true)
  approvalFrequency      ApprovalFrequency       @default(DAILY)
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  createdBy              String
  site                   Site                    @relation(fields: [siteId], references: [id])

  @@index([siteId])
  @@map("time_tracking_configurations")
}

/// Labor time entry (operator clocking in/out)
/// Records when operators clock in and out for work orders, operations, or indirect activities
model LaborTimeEntry {
  id                   String              @id @default(cuid())
  /// Foreign key reference to the user/operator who performed the work
  /// **Business Rule:** Must reference valid active user account for accountability
  /// **Data Source:** User authentication and badge scanning systems
  /// **Validation:** Must exist in User table and user must be active
  /// **Business Impact:** Provides individual productivity tracking and payroll allocation
  userId               String
  /// Foreign key reference to the work order this labor time is charged against
  /// **Business Rule:** Required for direct labor entries, optional for indirect labor activities
  /// **Data Source:** Production planning system and work order assignment
  /// **Validation:** Must exist in WorkOrder table if specified
  /// **Business Impact:** Links labor costs to specific production jobs for accurate costing
  workOrderId          String?
  /// Foreign key reference to the specific operation within the work order
  /// **Business Rule:** Provides granular tracking of labor time by operation step
  /// **Data Source:** Work order operation definitions and routing specifications
  /// **Validation:** Must exist in WorkOrderOperation table if specified
  /// **Business Impact:** Enables detailed operation-level labor cost analysis and efficiency tracking
  operationId          String?
  indirectCodeId       String?
  timeType             TimeType
  /// Timestamp when the operator clocked in to start work on the assigned task or operation
  /// **Business Rule:** Must be valid timestamp, cannot be future time, creates labor time tracking record
  /// **Data Source:** Shop floor terminals, badge scanners, or mobile time tracking applications
  /// **Format:** ISO 8601 timestamp with timezone (e.g., 2024-10-30T08:00:00Z)
  /// **Validation:** Cannot be future time, must be reasonable for shift timing
  /// **Business Impact:** Determines start of billable labor time for cost accounting and payroll
  /// **Audit Trail:** Critical for labor cost tracking and compliance reporting
  clockInTime          DateTime
  /// Timestamp when the operator clocked out after completing work on the assigned task
  /// **Business Rule:** Must be after clock in time, creates completed labor time record
  /// **Data Source:** Shop floor terminals, badge scanners, or mobile time tracking applications
  /// **Format:** ISO 8601 timestamp with timezone
  /// **Validation:** Must be after clockInTime, cannot be future time
  /// **Business Impact:** Determines end of billable labor time and calculates total work duration
  clockOutTime         DateTime?
  duration             Float?
  entrySource          TimeEntrySource
  deviceId             String?
  location             String?
  status               TimeEntryStatus     @default(ACTIVE)
  approvedBy           String?
  approvedAt           DateTime?
  rejectionReason      String?
  costCenter           String?
  /// Hourly labor rate applied to this time entry for cost calculation
  /// **Business Rule:** Must reflect current rate structure based on operator skill level and shift
  /// **Data Source:** Human resources rate tables and labor contract specifications
  /// **Format:** Currency amount per hour
  /// **Validation:** Must be positive value, reasonable for labor category
  /// **Business Impact:** Determines labor cost for work order costing and financial reporting
  /// **Privacy:** Confidential payroll information - restricted access
  laborRate            Float?
  laborCost            Float?
  originalClockInTime  DateTime?
  originalClockOutTime DateTime?
  editedBy             String?
  editedAt             DateTime?
  editReason           String?
  exportedToSystem     String?
  exportedAt           DateTime?
  externalReferenceId  String?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  indirectCode         IndirectCostCode?   @relation(fields: [indirectCodeId], references: [id])
  operation            WorkOrderOperation? @relation(fields: [operationId], references: [id])
  user                 User                @relation(fields: [userId], references: [id])
  workOrder            WorkOrder?          @relation(fields: [workOrderId], references: [id])

  @@index([userId])
  @@index([workOrderId])
  @@index([operationId])
  @@index([status])
  @@index([clockInTime])
  @@index([timeType])
  @@map("labor_time_entries")
}

/// Machine time entry (equipment run time)
/// Records machine run time separately from labor for equipment-based costing
model MachineTimeEntry {
  id                 String              @id @default(cuid())
  /// Foreign key reference to the equipment/machine for which time is being tracked
  /// **Business Rule:** Must reference valid equipment that supports time tracking
  /// **Data Source:** Equipment management system and time tracking integration
  /// **Validation:** Must exist in Equipment table
  /// **Business Impact:** Links machine utilization to specific equipment for efficiency analysis
  equipmentId        String
  workOrderId        String?
  operationId        String?
  /// Timestamp when the machine started operating or processing
  /// **Business Rule:** Automatically captured from machine control systems or manually entered
  /// **Data Source:** Machine control systems, PLCs, or operator entry
  /// **Format:** ISO 8601 timestamp with timezone
  /// **Validation:** Cannot be future time, must be reasonable for operation
  /// **Business Impact:** Tracks machine utilization for capacity planning and OEE calculation
  startTime          DateTime
  /// Timestamp when the machine stopped operating or completed processing
  /// **Business Rule:** Must be after start time, indicates completion of machine cycle
  /// **Data Source:** Machine control systems, PLCs, or operator entry
  /// **Format:** ISO 8601 timestamp with timezone
  /// **Validation:** Must be after startTime
  /// **Business Impact:** Calculates actual machine run time for efficiency and costing analysis
  endTime            DateTime?
  duration           Float?
  entrySource        TimeEntrySource
  dataSource         String?
  /// Number of machine cycles or parts processed during this time period
  /// **Business Rule:** Must be non-negative integer representing actual production output
  /// **Data Source:** Machine counters, sensors, or operator counting
  /// **Format:** Integer count of cycles or parts
  /// **Validation:** Must be non-negative, reasonable for time period
  /// **Business Impact:** Measures actual production output for efficiency and capacity analysis
  cycleCount         Int?
  partCount          Int?
  machineUtilization Float?
  status             TimeEntryStatus     @default(ACTIVE)
  machineRate        Float?
  machineCost        Float?
  exportedToSystem   String?
  exportedAt         DateTime?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  equipment          Equipment           @relation(fields: [equipmentId], references: [id])
  operation          WorkOrderOperation? @relation(fields: [operationId], references: [id])
  workOrder          WorkOrder?          @relation(fields: [workOrderId], references: [id])

  @@index([equipmentId])
  @@index([workOrderId])
  @@index([operationId])
  @@index([status])
  @@index([startTime])
  @@map("machine_time_entries")
}

/// Indirect cost codes (non-productive time)
/// Defines categories for non-productive time like breaks, training, meetings
model IndirectCostCode {
  id           String           @id @default(cuid())
  code         String           @unique
  description  String
  category     IndirectCategory
  costCenter   String?
  glAccount    String?
  isActive     Boolean          @default(true)
  siteId       String?
  displayColor String?
  displayIcon  String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  createdBy    String
  site         Site?            @relation(fields: [siteId], references: [id])
  laborEntries LaborTimeEntry[]

  @@index([code])
  @@index([category])
  @@index([siteId])
  @@map("indirect_cost_codes")
}

/// Time entry validation rules (business logic)
/// Configurable rules for validating time entries and preventing common errors
model TimeEntryValidationRule {
  id           String                 @id @default(cuid())
  ruleName     String
  ruleType     TimeValidationRuleType
  condition    String
  errorMessage String
  severity     String
  isActive     Boolean                @default(true)
  siteId       String?
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt

  @@index([ruleType])
  @@index([siteId])
  @@map("time_entry_validation_rules")
}

/// SSO Provider Registry
/// Centralized registry of all configured SSO providers
model SsoProvider {
  id                   String                @id @default(cuid())
  name                 String                @unique
  type                 SsoProviderType
  configId             String
  priority             Int                   @default(0)
  isActive             Boolean               @default(true)
  isDefault            Boolean               @default(false)
  domainRestrictions   String[]
  groupRestrictions    String[]
  metadata             Json?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  authenticationEvents AuthenticationEvent[]
  homeRealmRules       HomeRealmDiscovery[]
  ssoSessions          SsoSession[]

  @@index([type])
  @@index([isActive])
  @@index([isDefault])
  @@index([priority])
  @@map("sso_providers")
}

/// SSO Session Management
/// Unified session handling across multiple providers
model SsoSession {
  id                String      @id @default(cuid())
  userId            String
  primaryProviderId String
  activeProviders   String[]
  sessionData       Json?
  expiresAt         DateTime?
  lastActivityAt    DateTime    @default(now())
  createdAt         DateTime    @default(now())
  primaryProvider   SsoProvider @relation(fields: [primaryProviderId], references: [id])
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([primaryProviderId])
  @@index([expiresAt])
  @@index([lastActivityAt])
  @@map("sso_sessions")
}

/// Authentication Analytics
/// Comprehensive tracking of authentication events and metrics
model AuthenticationEvent {
  id           String                  @id @default(cuid())
  userId       String?
  providerId   String
  eventType    AuthenticationEventType
  userAgent    String?
  ipAddress    String?
  location     String?
  responseTime Int?
  errorCode    String?
  errorMessage String?
  metadata     Json?
  createdAt    DateTime                @default(now())
  provider     SsoProvider             @relation(fields: [providerId], references: [id])
  user         User?                   @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([providerId])
  @@index([eventType])
  @@index([createdAt])
  @@index([ipAddress])
  @@map("authentication_events")
}

/// Home Realm Discovery Rules
/// Automatic provider selection based on user attributes
model HomeRealmDiscovery {
  id         String      @id @default(cuid())
  name       String
  pattern    String
  providerId String
  priority   Int         @default(0)
  isActive   Boolean     @default(true)
  createdAt  DateTime    @default(now())
  provider   SsoProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@index([pattern])
  @@index([providerId])
  @@index([priority])
  @@index([isActive])
  @@map("home_realm_discovery")
}

/// Permission Usage Tracking
/// Logs every permission check with full context for security monitoring
model PermissionUsageLog {
  id         String   @id @default(cuid())
  userId     String
  permission String
  endpoint   String?
  method     String?
  success    Boolean
  timestamp  DateTime @default(now())
  ip         String?
  userAgent  String?
  siteId     String?
  duration   Int?
  context    Json?
  site       Site?    @relation(fields: [siteId], references: [id])
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, timestamp])
  @@index([permission, timestamp])
  @@index([success, timestamp])
  @@index([siteId, timestamp])
  @@index([endpoint, method])
  @@map("permission_usage_logs")
}

/// Security Event Monitoring
/// Tracks security-related events for threat detection and compliance
model SecurityEvent {
  id             String            @id @default(cuid())
  eventType      SecurityEventType
  severity       SecuritySeverity
  userId         String?
  ip             String?
  userAgent      String?
  description    String
  metadata       Json?
  timestamp      DateTime          @default(now())
  resolved       Boolean           @default(false)
  resolvedBy     String?
  resolvedAt     DateTime?
  siteId         String?
  resolvedByUser User?             @relation("SecurityEventResolvedBy", fields: [resolvedBy], references: [id])
  site           Site?             @relation(fields: [siteId], references: [id])
  user           User?             @relation(fields: [userId], references: [id])

  @@index([eventType, timestamp])
  @@index([severity, resolved])
  @@index([userId, timestamp])
  @@index([ip, timestamp])
  @@index([siteId, timestamp])
  @@map("security_events")
}

/// User Session Tracking
/// Comprehensive session monitoring for analytics and security
/// Comprehensive logging of user session activities including login times, access patterns, and system interaction tracking
///
/// **Business Purpose:** Provides security monitoring, usage analytics, and compliance audit trails for user system access and activities
/// **Data Owner:** IT Security and System Administration Teams
/// **Update Frequency:** Real-time logging as users access and interact with the system
/// **Compliance:** Session logging required for security compliance, fraud detection, and regulatory audit requirements
/// **Data Retention:** 3 years for security analysis and compliance requirements
/// **Security:** Confidential - Contains user access patterns and security-sensitive information
/// **Integrations:** Authentication Systems, Security Monitoring, Audit Management, Analytics Platforms
/// **Related Tables:** User, SecurityEvent, AuditReport, PermissionUsageLog
///
/// **Examples:**
/// - Active production operator session: Active production session with shop floor access across multiple sites and tracked activities
/// - Completed administrative session: Completed administrative session with full duration tracking for security audit
///
/// **Common Queries:**
/// - Track user access patterns for security analysis
/// - Generate session reports for compliance audits
/// - Monitor concurrent sessions and system usage
///
model UserSessionLog {
  id           String    @id @default(cuid())
  userId       String
  sessionId    String    @unique
  ip           String?
  userAgent    String?
  startTime    DateTime  @default(now())
  endTime      DateTime?
  duration     Int?
  actionsCount Int       @default(0)
  siteAccess   String[]
  lastActivity DateTime  @default(now())
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, startTime])
  @@index([sessionId])
  @@index([ip, startTime])
  @@index([lastActivity])
  @@map("user_session_logs")
}

/// Audit Report Management
/// Tracks generated compliance and security reports
/// Automated audit reports and compliance documentation generated for regulatory requirements and quality system audits
///
/// **Business Purpose:** Provides automated generation of audit trails, compliance reports, and quality documentation for regulatory agencies and customers
/// **Data Owner:** Quality Assurance and Compliance Teams
/// **Update Frequency:** Generated on-demand for audits, scheduled for periodic compliance reporting
/// **Compliance:** Reports must meet regulatory requirements for AS9100, ISO 9001, FDA, and customer-specific audit standards
/// **Data Retention:** 7 years minimum for regulatory compliance, permanent for critical quality documentation
/// **Security:** Internal - Audit and compliance information with regulatory significance
/// **Integrations:** Quality Management Systems, Audit Management, Regulatory Reporting, Document Management
/// **Related Tables:** User, Site, QualityInspection, NCR
///
/// **Examples:**
/// - AS9100 compliance audit report: Quarterly aerospace compliance report documenting quality system performance
/// - Customer quality audit preparation: Customer-specific audit documentation package for supplier assessment
///
/// **Common Queries:**
/// - Generate audit reports for regulatory compliance
/// - Track audit report generation and access
/// - Create customer-specific quality documentation packages
///
model AuditReport {
  id              String       @id @default(cuid())
  reportType      ReportType
  title           String
  parameters      Json
  generatedBy     String
  generatedAt     DateTime     @default(now())
  filePath        String?
  status          ReportStatus
  error           String?
  downloadCount   Int          @default(0)
  siteId          String?
  generatedByUser User         @relation(fields: [generatedBy], references: [id], onDelete: Cascade)
  site            Site?        @relation(fields: [siteId], references: [id])

  @@index([reportType, generatedAt])
  @@index([generatedBy, generatedAt])
  @@index([status])
  @@index([siteId, reportType])
  @@map("audit_reports")
}

/// Permission Change History
/// Tracks all changes to user permissions and roles for compliance
model PermissionChangeLog {
  id            String               @id @default(cuid())
  /// Type of permission change that was performed
  /// **Business Rule:** Must accurately reflect the nature of the permission change
  /// **Data Source:** Permission management system and change workflow
  /// **Business Impact:** Enables tracking of permission lifecycle and security posture
  /// **Audit Trail:** Required for security compliance and access reviews
  /// **Valid Values:**
  /// - GRANT - Permission was granted to user
  /// - REVOKE - Permission was removed from user
  /// - MODIFY - Permission scope or details were changed
  /// - SUSPEND - Permission temporarily disabled
  /// - RESTORE - Previously suspended permission reactivated
  changeType    PermissionChangeType
  targetUserId  String
  targetRole    String?
  permission    String?
  /// Previous permission configuration before the change
  /// **Business Rule:** Must accurately capture the prior state for change tracking
  /// **Data Source:** Permission management system state before change
  /// **Format:** JSON structure containing previous permission details
  /// **Business Impact:** Enables understanding of what access was previously available
  /// **Audit Trail:** Essential for rollback capabilities and audit compliance
  oldValue      Json?
  /// New permission configuration after the change
  /// **Business Rule:** Must accurately reflect the updated permission state
  /// **Data Source:** Permission management system state after change
  /// **Format:** JSON structure containing updated permission details
  /// **Business Impact:** Documents what access is now available to the user
  /// **Audit Trail:** Required for current state verification and audit compliance
  newValue      Json?
  /// User who authorized and performed the permission change
  /// **Business Rule:** Must have appropriate administrative permissions to make the change
  /// **Data Source:** User authentication and authorization system
  /// **Validation:** Must be valid user with permission management authority
  /// **Business Impact:** Provides responsibility tracking for permission management
  /// **Audit Trail:** Critical for accountability and security investigation
  changedBy     String
  reason        String?
  timestamp     DateTime             @default(now())
  siteId        String?
  changedByUser User                 @relation("PermissionChangeChanger", fields: [changedBy], references: [id], onDelete: Cascade)
  site          Site?                @relation(fields: [siteId], references: [id])
  targetUser    User                 @relation("PermissionChangeTarget", fields: [targetUserId], references: [id], onDelete: Cascade)

  @@index([targetUserId, timestamp])
  @@index([changedBy, timestamp])
  @@index([changeType, timestamp])
  @@index([siteId, timestamp])
  @@map("permission_change_logs")
}

enum QualificationType {
  CERTIFICATION
  LICENSE
  TRAINING
  SKILL
}

enum CertificationStatus {
  ACTIVE
  EXPIRED
  SUSPENDED
  REVOKED
  PENDING
}

enum SkillCategory {
  MACHINING
  WELDING
  INSPECTION
  ASSEMBLY
  PROGRAMMING
  MAINTENANCE
  QUALITY
  SAFETY
  MANAGEMENT
  OTHER
}

enum CompetencyLevel {
  NOVICE
  ADVANCED_BEGINNER
  COMPETENT
  PROFICIENT
  EXPERT
}

enum AvailabilityType {
  AVAILABLE
  VACATION
  SICK_LEAVE
  TRAINING
  MEETING
  UNAVAILABLE
}

enum MaterialType {
  RAW_MATERIAL
  COMPONENT
  SUBASSEMBLY
  ASSEMBLY
  FINISHED_GOODS
  WIP
  CONSUMABLE
  PACKAGING
  TOOLING
  MAINTENANCE
}

enum MaterialPropertyType {
  PHYSICAL
  CHEMICAL
  MECHANICAL
  THERMAL
  ELECTRICAL
  OPTICAL
  REGULATORY
  OTHER
}

enum MaterialLotStatus {
  AVAILABLE
  RESERVED
  IN_USE
  DEPLETED
  QUARANTINED
  EXPIRED
  REJECTED
  RETURNED
  SCRAPPED
}

enum MaterialLotState {
  RECEIVED
  INSPECTED
  APPROVED
  ISSUED
  IN_PROCESS
  CONSUMED
  RETURNED
  DISPOSED
}

enum QualityLotStatus {
  PENDING
  IN_INSPECTION
  APPROVED
  REJECTED
  CONDITIONAL
}

enum SublotOperationType {
  SPLIT
  MERGE
  TRANSFER
  REWORK
}

enum GenealogyRelationType {
  CONSUMED_BY
  PRODUCED_FROM
  REWORKED_TO
  BLENDED_WITH
  SPLIT_FROM
  MERGED_INTO
  TRANSFERRED_TO
}

enum StateTransitionType {
  MANUAL
  AUTOMATIC
  SYSTEM
  SCHEDULED
  INTEGRATION
}

enum OperationType {
  PRODUCTION
  QUALITY
  MATERIAL_HANDLING
  MAINTENANCE
  SETUP
  CLEANING
  PACKAGING
  TESTING
  REWORK
  OTHER
}

enum OperationClassification {
  MAKE
  ASSEMBLY
  INSPECTION
  TEST
  REWORK
  SETUP
  SUBCONTRACT
  PACKING
}

enum ParameterType {
  INPUT
  OUTPUT
  SET_POINT
  MEASURED
  CALCULATED
}

enum ParameterDataType {
  NUMBER
  STRING
  BOOLEAN
  ENUM
  DATE
  JSON
}

enum ParameterGroupType {
  PROCESS
  QUALITY
  MATERIAL
  EQUIPMENT
  ENVIRONMENTAL
  CUSTOM
}

enum FormulaLanguage {
  JAVASCRIPT
  PYTHON
  SQL
}

enum EvaluationTrigger {
  ON_CHANGE
  SCHEDULED
  MANUAL
}

enum DependencyType {
  MUST_COMPLETE
  MUST_START
  OVERLAP_ALLOWED
  PARALLEL
}

enum DependencyTimingType {
  FINISH_TO_START
  START_TO_START
  FINISH_TO_FINISH
  START_TO_FINISH
}

enum ConsumptionType {
  PER_UNIT
  PER_BATCH
  FIXED
  SETUP
}

enum PhysicalAssetType {
  TOOLING
  FIXTURE
  GAUGE
  CONSUMABLE
  PPE
  MOLD
  PATTERN
  SOFTWARE
  OTHER
}

enum ProductType {
  MADE_TO_STOCK
  MADE_TO_ORDER
  ENGINEER_TO_ORDER
  CONFIGURE_TO_ORDER
  ASSEMBLE_TO_ORDER
}

enum ProductLifecycleState {
  DESIGN
  PROTOTYPE
  PILOT_PRODUCTION
  PRODUCTION
  MATURE
  PHASE_OUT
  OBSOLETE
  ARCHIVED
}

enum ConfigurationType {
  STANDARD
  VARIANT
  CUSTOM
  CONFIGURABLE
}

enum SpecificationType {
  PHYSICAL
  CHEMICAL
  MECHANICAL
  ELECTRICAL
  PERFORMANCE
  REGULATORY
  ENVIRONMENTAL
  SAFETY
  QUALITY
  OTHER
}

enum WorkOrderPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum WorkOrderStatus {
  CREATED
  RELEASED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum RoutingLifecycleState {
  DRAFT
  REVIEW
  RELEASED
  PRODUCTION
  OBSOLETE
}

enum RoutingType {
  PRIMARY
  ALTERNATE
  REWORK
  PROTOTYPE
  ENGINEERING
}

enum StepType {
  PROCESS
  INSPECTION
  DECISION
  PARALLEL_SPLIT
  PARALLEL_JOIN
  OSP
  LOT_SPLIT
  LOT_MERGE
  TELESCOPING
  START
  END
}

enum ControlType {
  LOT_CONTROLLED
  SERIAL_CONTROLLED
  MIXED
}

enum WorkOrderOperationStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  SKIPPED
}

enum ScheduleState {
  FORECAST
  RELEASED
  DISPATCHED
  RUNNING
  COMPLETED
  CLOSED
}

enum SchedulePriority {
  URGENT
  HIGH
  NORMAL
  LOW
}

enum ConstraintType {
  CAPACITY
  MATERIAL
  PERSONNEL
  EQUIPMENT
  DATE
  CUSTOM
}

enum WorkPerformanceType {
  LABOR
  MATERIAL
  EQUIPMENT
  QUALITY
  SETUP
  DOWNTIME
}

enum VarianceType {
  QUANTITY
  TIME
  COST
  EFFICIENCY
  YIELD
  MATERIAL
}

enum QualityToleranceType {
  BILATERAL
  UNILATERAL_PLUS
  UNILATERAL_MINUS
  NOMINAL
}

enum QualityInspectionStatus {
  CREATED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum QualityInspectionResult {
  PASS
  FAIL
  CONDITIONAL
}

enum NCRSeverity {
  MINOR
  MAJOR
  CRITICAL
}

enum NCRStatus {
  OPEN
  IN_REVIEW
  CORRECTIVE_ACTION
  CLOSED
}

enum EquipmentClass {
  PRODUCTION
  MAINTENANCE
  QUALITY
  MATERIAL_HANDLING
  LABORATORY
  STORAGE
  ASSEMBLY
}

enum EquipmentStatus {
  AVAILABLE
  IN_USE
  OPERATIONAL
  MAINTENANCE
  DOWN
  RETIRED
}

enum EquipmentState {
  IDLE
  RUNNING
  BLOCKED
  STARVED
  FAULT
  MAINTENANCE
  SETUP
  EMERGENCY
}

enum EquipmentLogType {
  MAINTENANCE
  REPAIR
  CALIBRATION
  STATUS_CHANGE
  USAGE
}

enum PerformancePeriodType {
  HOUR
  SHIFT
  DAY
  WEEK
  MONTH
  QUARTER
  YEAR
}

enum MaterialTransactionType {
  RECEIPT
  ISSUE
  RETURN
  ADJUSTMENT
  SCRAP
}

enum WorkInstructionStatus {
  DRAFT
  REVIEW
  APPROVED
  REJECTED
  SUPERSEDED
  ARCHIVED
}

enum WorkInstructionExecutionStatus {
  IN_PROGRESS
  COMPLETED
  PAUSED
  CANCELLED
}

enum ElectronicSignatureType {
  BASIC
  ADVANCED
  QUALIFIED
}

enum ElectronicSignatureLevel {
  OPERATOR
  SUPERVISOR
  QUALITY
  ENGINEER
  MANAGER
}

enum BiometricType {
  FINGERPRINT
  FACIAL
  IRIS
  VOICE
  NONE
}

enum FAIStatus {
  IN_PROGRESS
  REVIEW
  APPROVED
  REJECTED
  SUPERSEDED
}

enum IntegrationType {
  ERP
  PLM
  CMMS
  WMS
  QMS
  HISTORIAN
  DNC
  SFC
  SKILLS
  CALIBRATION
  PDM
  CMM
  CUSTOM
}

enum IntegrationDirection {
  INBOUND
  OUTBOUND
  BIDIRECTIONAL
}

enum IntegrationLogStatus {
  PENDING
  IN_PROGRESS
  SUCCESS
  FAILED
  PARTIAL
  TIMEOUT
  CANCELLED
}

enum ScheduleType {
  MASTER
  DETAILED
  DISPATCH
}

enum B2MMessageStatus {
  PENDING
  VALIDATED
  PROCESSING
  PROCESSED
  SENT
  CONFIRMED
  ACCEPTED
  FAILED
  REJECTED
  TIMEOUT
}

enum ERPTransactionType {
  ISSUE
  RECEIPT
  RETURN
  TRANSFER
  ADJUSTMENT
  SCRAP
  CONSUMPTION
}

enum PersonnelActionType {
  CREATE
  UPDATE
  DEACTIVATE
  SKILL_UPDATE
  SCHEDULE_UPDATE
}

enum DataCollectionType {
  SENSOR
  ALARM
  EVENT
  MEASUREMENT
  STATUS
  PERFORMANCE
}

enum CommandType {
  START
  STOP
  PAUSE
  RESUME
  RESET
  CONFIGURE
  LOAD_PROGRAM
  UNLOAD_PROGRAM
  DIAGNOSTIC
  CALIBRATE
  EMERGENCY_STOP
}

enum CommandStatus {
  PENDING
  SENT
  ACKNOWLEDGED
  EXECUTING
  COMPLETED
  FAILED
  TIMEOUT
  CANCELLED
}

enum SPCChartType {
  X_BAR_R
  X_BAR_S
  I_MR
  P_CHART
  NP_CHART
  C_CHART
  U_CHART
  EWMA
  CUSUM
}

enum LimitCalculationMethod {
  HISTORICAL_DATA
  SPEC_LIMITS
  MANUAL
}

enum SamplingPlanType {
  SINGLE
  DOUBLE
  MULTIPLE
  SEQUENTIAL
}

/// Work Instruction Format - Different content formats supported
enum WorkInstructionFormat {
  NATIVE
  IMPORTED_PDF
  IMPORTED_DOC
  IMPORTED_PPT
  HYBRID
}

/// Media Type - Types of media supported in work instructions
enum MediaType {
  IMAGE
  VIDEO
  DOCUMENT
  DIAGRAM
  CAD_MODEL
  ANIMATION
}

/// Relation Type - Types of relationships between work instructions
enum RelationType {
  PREREQUISITE
  SUPERSEDES
  RELATED_TO
  ALTERNATIVE_TO
  REFERENCED_BY
}

/// Export Template Type - Types of export templates
enum ExportTemplateType {
  WORK_INSTRUCTION
  SETUP_SHEET
  INSPECTION_PLAN
  SOP
}

/// Export Format - Supported export formats
enum ExportFormat {
  PDF
  DOCX
  PPTX
}

enum InspectionType {
  FIRST_ARTICLE
  IN_PROCESS
  FINAL
  RECEIVING
  AUDIT
  PATROL
}

enum InspectionFrequency {
  PER_PIECE
  PER_BATCH
  PER_LOT
  PERIODIC
  SAMPLING
  ON_DEMAND
}

enum MeasurementType {
  DIMENSIONAL
  VISUAL
  FUNCTIONAL
  MATERIAL
  SURFACE_FINISH
  GEOMETRIC_TOLERANCE
}

enum InspectionResult {
  PASS
  FAIL
  CONDITIONAL_PASS
  PENDING_REVIEW
}

enum Disposition {
  ACCEPT
  REJECT
  REWORK
  USE_AS_IS
  RETURN_TO_VENDOR
  SCRAP
}

enum SOPType {
  SAFETY
  QUALITY
  MAINTENANCE
  TRAINING
  EMERGENCY
  ENVIRONMENTAL
  SECURITY
  GENERAL
}

enum ToolType {
  CUTTING_TOOL
  GAGE
  FIXTURE
  JIG
  DIE
  MOLD
  HAND_TOOL
  MEASURING_INSTRUMENT
  WORK_HOLDING
  OTHER
}

enum MaintenanceType {
  PREVENTIVE
  CORRECTIVE
  PREDICTIVE
  BREAKDOWN
}

enum DocumentType {
  WORK_INSTRUCTION
  SETUP_SHEET
  INSPECTION_PLAN
  SOP
  TOOL_DRAWING
}

/// Layout Mode - Different layout modes for execution interface
enum LayoutMode {
  SPLIT_VERTICAL
  SPLIT_HORIZONTAL
  TABBED
  OVERLAY
  PICTURE_IN_PICTURE
}

/// Panel Position - Position of panels in the layout
enum PanelPosition {
  LEFT
  RIGHT
  TOP
  BOTTOM
  CENTER
}

enum WorkflowType {
  WORK_INSTRUCTION
  SETUP_SHEET
  INSPECTION_PLAN
  SOP
  TOOL_DRAWING
  ECO
  NCR
  CAPA
  CHANGE_REQUEST
  DOCUMENT_APPROVAL
  FAI_REPORT
  QUALITY_PROCESS
}

enum ApprovalType {
  ALL_REQUIRED
  ANY_ONE
  THRESHOLD
  PERCENTAGE
  WEIGHTED
}

enum AssignmentStrategy {
  MANUAL
  ROLE_BASED
  LOAD_BALANCED
  ROUND_ROBIN
}

enum ConditionOperator {
  EQUALS
  NOT_EQUALS
  GREATER_THAN
  LESS_THAN
  GREATER_THAN_OR_EQUAL
  LESS_THAN_OR_EQUAL
  IN
  NOT_IN
  CONTAINS
  REGEX_MATCH
}

enum RuleActionType {
  ADD_STAGE
  SKIP_STAGE
  CHANGE_APPROVERS
  SET_DEADLINE
  SEND_NOTIFICATION
  REQUIRE_SIGNATURE_TYPE
}

enum WorkflowStatus {
  IN_PROGRESS
  COMPLETED
  REJECTED
  CANCELLED
  ON_HOLD
}

enum Priority {
  LOW
  NORMAL
  HIGH
  CRITICAL
}

enum ImpactLevel {
  NONE
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum StageStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  SKIPPED
  ESCALATED
}

enum StageOutcome {
  APPROVED
  REJECTED
  CHANGES_REQUESTED
  DELEGATED
  SKIPPED
}

enum AssignmentType {
  REQUIRED
  OPTIONAL
  OBSERVER
}

enum ApprovalAction {
  APPROVED
  REJECTED
  CHANGES_REQUESTED
  DELEGATED
  SKIPPED
}

enum WorkflowEventType {
  WORKFLOW_STARTED
  STAGE_STARTED
  STAGE_COMPLETED
  APPROVAL_GRANTED
  APPROVAL_REJECTED
  CHANGES_REQUESTED
  DELEGATED
  ESCALATED
  DEADLINE_EXTENDED
  WORKFLOW_COMPLETED
  WORKFLOW_CANCELLED
  REMINDER_SENT
  RULE_EVALUATED
  STAGE_ADDED
  STAGE_SKIPPED
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  ESCALATED
  DELEGATED
}

/// ECO Type classification
enum ECOType {
  CORRECTIVE
  IMPROVEMENT
  COST_REDUCTION
  COMPLIANCE
  CUSTOMER_REQUEST
  ENGINEERING
  EMERGENCY
}

/// ECO Priority levels
enum ECOPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
  EMERGENCY
}

/// ECO Status lifecycle
enum ECOStatus {
  REQUESTED
  UNDER_REVIEW
  PENDING_CRB
  CRB_APPROVED
  IMPLEMENTATION
  VERIFICATION
  COMPLETED
  REJECTED
  CANCELLED
  ON_HOLD
}

/// Effectivity type definitions
enum EffectivityType {
  BY_DATE
  BY_SERIAL_NUMBER
  BY_WORK_ORDER
  BY_LOT_BATCH
  IMMEDIATE
}

/// Change Review Board decision options
enum CRBDecision {
  APPROVED
  REJECTED
  DEFERRED
  REQUEST_MORE_INFO
}

/// Document update status
enum DocUpdateStatus {
  PENDING
  IN_PROGRESS
  AWAITING_APPROVAL
  APPROVED
  COMPLETED
}

/// ECO Task type classification
enum ECOTaskType {
  DOCUMENT_UPDATE
  ROUTING_UPDATE
  BOM_UPDATE
  PART_MASTER_UPDATE
  TOOLING_CREATION
  EQUIPMENT_SETUP
  TRAINING
  VERIFICATION
  FIRST_ARTICLE
  PROCESS_VALIDATION
}

/// ECO Task status options
enum ECOTaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  BLOCKED
  CANCELLED
}

/// Attachment type classification
enum AttachmentType {
  SUPPORTING_DOC
  DRAWING_CURRENT
  DRAWING_PROPOSED
  CALCULATION
  TEST_RESULT
  SUPPLIER_DOC
  CUSTOMER_CORRESPONDENCE
  ANALYSIS_REPORT
  PHOTO
  OTHER
}

/// ECO Event types for audit trail
enum ECOEventType {
  ECO_CREATED
  STATUS_CHANGED
  CRB_REVIEW_SCHEDULED
  CRB_REVIEW_COMPLETED
  TASK_CREATED
  TASK_COMPLETED
  DOCUMENT_UPDATED
  EFFECTIVITY_SET
  ECO_COMPLETED
  ECO_CANCELLED
  COMMENT_ADDED
  ATTACHMENT_ADDED
}

/// ECO Relation types
enum ECORelationType {
  DEPENDS_ON
  BLOCKS
  RELATED_TO
  SUPERSEDES
  DUPLICATE_OF
  CHILD_OF
}

/// Voting rule options
enum VotingRule {
  UNANIMOUS
  MAJORITY
  SUPERMAJORITY
  CONSENSUS
}

/// Comment context types
enum CommentContextType {
  DOCUMENT
  STEP
  PARAMETER
  CHARACTERISTIC
  IMAGE
  VIDEO
  TEXT_SECTION
}

/// Comment status options
enum CommentStatus {
  OPEN
  RESOLVED
  ARCHIVED
}

/// Comment priority levels
enum CommentPriority {
  LOW
  MEDIUM
  HIGH
}

/// Reaction type options
enum ReactionType {
  LIKE
  AGREE
  DISAGREE
  HELPFUL
  QUESTION
}

/// Annotation type options
enum AnnotationType {
  ARROW
  CALLOUT
  HIGHLIGHT
  TEXT_LABEL
  FREEHAND
  RECTANGLE
  CIRCLE
  LINE
  BLUR
  STICKY_NOTE
  STRIKETHROUGH
  UNDERLINE
  STAMP
}

/// Review type options
enum ReviewType {
  TECHNICAL
  EDITORIAL
  QUALITY
  SAFETY
  COMPLIANCE
  GENERAL
}

/// Review status options
enum ReviewStatus {
  NOT_STARTED
  IN_PROGRESS
  FEEDBACK_PROVIDED
  COMPLETED
  OVERDUE
}

/// Review recommendation options
enum ReviewRecommendation {
  APPROVE
  REQUEST_CHANGES
  REJECT
  NO_RECOMMENDATION
}

/// Activity type options
enum ActivityType {
  CREATED
  EDITED
  COMMENTED
  ANNOTATED
  REVIEW_ASSIGNED
  REVIEW_COMPLETED
  APPROVED
  REJECTED
  VERSION_CREATED
  LINKED
  ECO_LINKED
  SHARED
  EXPORTED
  VIEWED
}

/// Notification type options
enum NotificationType {
  MENTION
  COMMENT_REPLY
  REVIEW_ASSIGNED
  DOCUMENT_UPDATED
  APPROVAL_GRANTED
  APPROVAL_REJECTED
  COMMENT_RESOLVED
  DEADLINE_APPROACHING
  REVIEW_COMPLETED
}

/// Conflict resolution type options
enum ResolutionType {
  ACCEPT_YOURS
  ACCEPT_THEIRS
  MANUAL_MERGE
  AUTO_MERGED
}

/// Storage class for lifecycle management
enum StorageClass {
  HOT
  WARM
  COLD
  ARCHIVE
}

/// CDN cache status
enum CacheStatus {
  CACHED
  NOT_CACHED
  INVALIDATED
  EXPIRED
}

/// File upload method
enum UploadMethod {
  DIRECT
  MULTIPART
  PRESIGNED
  RESUMABLE
}

/// File processing status
enum ProcessingStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
}

/// File attachment types for cloud storage
enum FileAttachmentType {
  PRIMARY
  ATTACHMENT
  THUMBNAIL
  PREVIEW
  EXPORT
  BACKUP
  TEMP
}

/// Version change types
enum VersionChangeType {
  CREATE
  UPDATE
  RENAME
  METADATA
  RESTORE
  MIGRATE
}

/// Backup frequency options
enum BackupFrequency {
  REAL_TIME
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
  CUSTOM
}

/// Backup types
enum BackupType {
  FULL
  INCREMENTAL
  DIFFERENTIAL
  SNAPSHOT
}

/// Backup status
enum BackupStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
  PARTIAL
}

/// File access types for logging
enum AccessType {
  READ
  WRITE
  DELETE
  METADATA
  LIST
  PREVIEW
}

/// Upload status for multipart uploads
enum UploadStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
  EXPIRED
}

enum TimeTrackingGranularity {
  NONE
  WORK_ORDER
  OPERATION
}

enum CostingModel {
  LABOR_HOURS
  MACHINE_HOURS
  BOTH
}

enum MultiTaskingMode {
  CONCURRENT
  SPLIT_ALLOCATION
}

enum ApprovalFrequency {
  DAILY
  WEEKLY
  BIWEEKLY
  NONE
}

enum TimeType {
  DIRECT_LABOR
  INDIRECT
  MACHINE
}

enum TimeEntrySource {
  MANUAL
  KIOSK
  MOBILE
  MACHINE_AUTO
  API
  HISTORIAN
}

enum TimeEntryStatus {
  ACTIVE
  COMPLETED
  PENDING_APPROVAL
  APPROVED
  REJECTED
  EXPORTED
}

enum IndirectCategory {
  BREAK
  LUNCH
  TRAINING
  MEETING
  MAINTENANCE
  SETUP
  CLEANUP
  WAITING
  ADMINISTRATIVE
  OTHER
}

enum TimeValidationRuleType {
  MAX_DURATION
  MIN_DURATION
  MISSING_CLOCK_OUT
  CONCURRENT_ENTRIES
  OVERTIME_THRESHOLD
  INVALID_TIME_RANGE
}

/// Types of security events that can be monitored
enum SecurityEventType {
  AUTH_FAILURE
  PRIVILEGE_ESCALATION
  EMERGENCY_ACCESS
  UNUSUAL_PATTERN
  MULTIPLE_SESSIONS
  PERMISSION_DENIED
  SUSPICIOUS_IP
  SESSION_HIJACK
  BRUTE_FORCE
  ACCOUNT_LOCKOUT
  DATA_EXPORT
  ADMIN_ACTION
  SYSTEM_ACCESS
}

/// Severity levels for security events
enum SecuritySeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

/// Types of audit reports that can be generated
enum ReportType {
  USER_ACCESS
  PERMISSION_CHANGES
  SECURITY_EVENTS
  SESSION_ANALYTICS
  COMPLIANCE_SOX
  COMPLIANCE_GDPR
  COMPLIANCE_ISO27001
  USAGE_ANALYTICS
  TREND_ANALYSIS
}

/// Status of report generation
enum ReportStatus {
  GENERATING
  COMPLETED
  FAILED
  EXPIRED
}

/// Types of permission changes that can occur
enum PermissionChangeType {
  ROLE_ASSIGNED
  ROLE_REMOVED
  PERMISSION_GRANTED
  PERMISSION_REVOKED
  ROLE_MODIFIED
  SITE_ACCESS_GRANTED
  SITE_ACCESS_REVOKED
  EMERGENCY_OVERRIDE
  BULK_CHANGE
}

enum SsoProviderType {
  SAML
  OIDC
  AZURE_AD
  LDAP
  INTERNAL
}

enum AuthenticationEventType {
  LOGIN
  LOGOUT
  REFRESH
  FAILURE
  PROVIDER_ERROR
  SESSION_TIMEOUT
  FORCED_LOGOUT
}

// ============================================================================
// ROLE TEMPLATE SYSTEM - GitHub Issue #125
// ============================================================================

/// Role Template Categories for Manufacturing
enum RoleTemplateCategory {
  PRODUCTION
  QUALITY
  MAINTENANCE
  MANAGEMENT
  ADMINISTRATION
  ENGINEERING
  SAFETY
  COMPLIANCE
  CUSTOM
}

/// Role Template Actions for Audit Trail
enum RoleTemplateAction {
  TEMPLATE_CREATED
  TEMPLATE_UPDATED
  TEMPLATE_DELETED
  TEMPLATE_ACTIVATED
  TEMPLATE_DEACTIVATED
  ROLE_INSTANTIATED
  ROLE_CUSTOMIZED
  PERMISSIONS_MODIFIED
  USER_ASSIGNED
  USER_REMOVED
}

/// Role Template - Master template definition for role configurations
model RoleTemplate {
  id              String                    @id @default(cuid())
  templateCode    String                    @unique
  templateName    String
  description     String?
  category        RoleTemplateCategory
  isActive        Boolean                   @default(true)
  isGlobal        Boolean                   @default(true)
  version         String                    @default("1.0.0")
  metadata        Json?                     // Manufacturing-specific configuration
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
  createdBy       String
  updatedBy       String?

  // Relationships
  permissions     RoleTemplatePermission[]
  instances       RoleTemplateInstance[]
  usageLogs       RoleTemplateUsageLog[]
  creator         User                      @relation("RoleTemplateCreator", fields: [createdBy], references: [id])
  updater         User?                     @relation("RoleTemplateUpdater", fields: [updatedBy], references: [id])

  @@index([templateCode])
  @@index([category])
  @@index([isActive])
  @@index([isGlobal])
  @@map("role_templates")
}

/// Role Template Permissions - Defines permissions included in each template
model RoleTemplatePermission {
  id           String       @id @default(cuid())
  templateId   String
  permissionId String
  isRequired   Boolean      @default(true)
  isOptional   Boolean      @default(false)
  metadata     Json?        // Additional permission context
  createdAt    DateTime     @default(now())

  // Relationships
  template     RoleTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  permission   Permission   @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([templateId, permissionId])
  @@index([templateId])
  @@index([permissionId])
  @@map("role_template_permissions")
}

/// Role Template Instance - Tracks when templates are instantiated into actual roles
model RoleTemplateInstance {
  id                String              @id @default(cuid())
  templateId        String
  roleId            String              @unique
  instanceName      String?
  siteId            String?
  customPermissions Json?               // Site-specific permission adjustments
  isActive          Boolean             @default(true)
  instantiatedAt    DateTime            @default(now())
  instantiatedBy    String
  metadata          Json?               // Instance-specific metadata

  // Relationships
  template          RoleTemplate        @relation(fields: [templateId], references: [id])
  role              Role                @relation(fields: [roleId], references: [id], onDelete: Cascade)
  site              Site?               @relation(fields: [siteId], references: [id])
  instantiator      User                @relation(fields: [instantiatedBy], references: [id])
  usageLogs         RoleTemplateUsageLog[]

  @@index([templateId])
  @@index([roleId])
  @@index([siteId])
  @@index([instantiatedBy])
  @@map("role_template_instances")
}

/// Role Template Usage Log - Audit trail for template operations
model RoleTemplateUsageLog {
  id            String                    @id @default(cuid())
  templateId    String?
  instanceId    String?
  action        RoleTemplateAction
  performedBy   String
  targetUserId  String?
  siteId        String?
  details       Json?
  timestamp     DateTime                  @default(now())

  // Relationships
  template      RoleTemplate?             @relation(fields: [templateId], references: [id])
  instance      RoleTemplateInstance?     @relation(fields: [instanceId], references: [id])
  performer     User                      @relation("RoleTemplateLogPerformer", fields: [performedBy], references: [id])
  targetUser    User?                     @relation("RoleTemplateLogTarget", fields: [targetUserId], references: [id])
  site          Site?                     @relation(fields: [siteId], references: [id])

  @@index([templateId])
  @@index([instanceId])
  @@index([performedBy])
  @@index([targetUserId])
  @@index([timestamp])
  @@map("role_template_usage_logs")
}
