generator client {
  provider = "prisma-client-js"

generator erd {
  provider = "prisma-erd-generator"
  output   = "../docs/erd.md"
  theme    = "default"

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")



// ====================================================================
// WORK ORDERS MODULE
// Work orders and production execution
// ====================================================================

model WorkOrder {
  id                           String                        @id @default(cuid())
  workOrderNumber              String                        @unique
  partId                       String
  partNumber                   String?
  quantity                     Int
  quantityCompleted            Int                           @default(0)
  quantityScrapped             Int                           @default(0)
  priority                     WorkOrderPriority
  status                       WorkOrderStatus
  dueDate                      DateTime?
  customerOrder                String?
  routingId                    String?
  siteId                       String?
  createdById                  String
  assignedToId                 String?
  startedAt                    DateTime?
  actualStartDate              DateTime?
  completedAt                  DateTime?
  actualEndDate                DateTime?
  createdAt                    DateTime                      @default(now())
  updatedAt                    DateTime                      @updatedAt
  dispatchLogs                 DispatchLog[]
  equipmentCommands            EquipmentCommand[]
  equipmentDataCollections     EquipmentDataCollection[]
  equipmentMaterialMovements   EquipmentMaterialMovement[]
  erpMaterialTransactions      ERPMaterialTransaction[]
  laborTimeEntries             LaborTimeEntry[]
  machineTimeEntries           MachineTimeEntry[]
  materialTransactions         MaterialTransaction[]
  ncrs                         NCR[]
  processDataCollections       ProcessDataCollection[]
  productionPerformanceActuals ProductionPerformanceActual[]
  productionScheduleRequests   ProductionScheduleRequest[]
  variances                    ProductionVariance[]
  qifMeasurementPlans          QIFMeasurementPlan[]
  qifMeasurementResults        QIFMeasurementResult[]
  qualityInspections           QualityInspection[]
  scheduleEntry                ScheduleEntry?
  operations                   WorkOrderOperation[]
  statusHistory                WorkOrderStatusHistory[]
  assignedTo                   User?                         @relation("AssignedTo", fields: [assignedToId], references: [id])
  createdBy                    User                          @relation("CreatedBy", fields: [createdById], references: [id])
  part                         Part                          @relation(fields: [partId], references: [id])
  routing                      Routing?                      @relation(fields: [routingId], references: [id])
  site                         Site?                         @relation(fields: [siteId], references: [id])
  workPerformance              WorkPerformance[]

  @@map("work_orders")
}
model WorkUnit {
  id           String      @id @default(cuid())
  workUnitCode String      @unique
  workUnitName String
  description  String?
  workCenterId String
  isActive     Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  equipment    Equipment[]
  workCenter   WorkCenter  @relation(fields: [workCenterId], references: [id])

  @@index([workCenterId])
  @@map("work_units")
}
model WorkOrderOperation {
  id                 String                   @id @default(cuid())
  workOrderId        String
  routingOperationId String
  status             WorkOrderOperationStatus
  quantity           Int
  quantityCompleted  Int                      @default(0)
  quantityScrap      Int                      @default(0)
  startedAt          DateTime?
  completedAt        DateTime?
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  routingStepId      String?
  laborTimeEntries   LaborTimeEntry[]
  machineTimeEntries MachineTimeEntry[]
  variances          ProductionVariance[]
  routingOperation   RoutingOperation         @relation(fields: [routingOperationId], references: [id])
  RoutingStep        RoutingStep?             @relation(fields: [routingStepId], references: [id])
  workOrder          WorkOrder                @relation(fields: [workOrderId], references: [id])
  workPerformance    WorkPerformance[]

  @@map("work_order_operations")
}
model ScheduleStateHistory {
  id                String             @id @default(cuid())
  scheduleId        String
  previousState     ScheduleState?
  newState          ScheduleState
  transitionDate    DateTime           @default(now())
  reason            String?
  changedBy         String?
  entriesAffected   Int?
  notificationsSent Boolean            @default(false)
  notes             String?
  metadata          Json?
  createdAt         DateTime           @default(now())
  schedule          ProductionSchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  @@index([scheduleId])
  @@index([newState])
  @@index([transitionDate])
  @@map("schedule_state_history")
}
model WorkOrderStatusHistory {
  id                   String           @id @default(cuid())
  workOrderId          String
  previousStatus       WorkOrderStatus?
  newStatus            WorkOrderStatus
  transitionDate       DateTime         @default(now())
  reason               String?
  changedBy            String?
  notes                String?
  quantityAtTransition Int?
  scrapAtTransition    Int?
  metadata             Json?
  createdAt            DateTime         @default(now())
  workOrder            WorkOrder        @relation(fields: [workOrderId], references: [id], onDelete: Cascade)

  @@index([workOrderId])
  @@index([newStatus])
  @@index([transitionDate])
  @@map("work_order_status_history")
}
model WorkPerformance {
  id               String              @id @default(cuid())
  workOrderId      String
  operationId      String?
  performanceType  WorkPerformanceType
  recordedAt       DateTime            @default(now())
  recordedBy       String?
  personnelId      String?
  laborHours       Float?
  laborCost        Float?
  laborEfficiency  Float?
  partId           String?
  quantityConsumed Float?
  quantityPlanned  Float?
  materialVariance Float?
  unitCost         Float?
  totalCost        Float?
  equipmentId      String?
  setupTime        Float?
  runTime          Float?
  plannedSetupTime Float?
  plannedRunTime   Float?
  quantityProduced Int?
  quantityGood     Int?
  quantityScrap    Int?
  quantityRework   Int?
  yieldPercentage  Float?
  scrapReason      String?
  downtimeMinutes  Float?
  downtimeReason   String?
  downtimeCategory String?
  notes            String?
  metadata         Json?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  operation        WorkOrderOperation? @relation(fields: [operationId], references: [id], onDelete: Cascade)
  personnel        User?               @relation("WorkPerformancePersonnel", fields: [personnelId], references: [id])
  workOrder        WorkOrder           @relation(fields: [workOrderId], references: [id], onDelete: Cascade)

  @@index([workOrderId])
  @@index([operationId])
  @@index([performanceType])
  @@index([recordedAt])
  @@index([personnelId])
  @@map("work_performance")
}
model ProductionVariance {
  id               String              @id @default(cuid())
  workOrderId      String
  operationId      String?
  varianceType     VarianceType
  varianceName     String
  plannedValue     Float
  actualValue      Float
  variance         Float
  variancePercent  Float
  isFavorable      Boolean             @default(false)
  costImpact       Float?
  rootCause        String?
  correctiveAction String?
  responsibleParty String?
  calculatedAt     DateTime            @default(now())
  periodStart      DateTime?
  periodEnd        DateTime?
  isResolved       Boolean             @default(false)
  resolvedAt       DateTime?
  resolvedBy       String?
  notes            String?
  metadata         Json?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  operation        WorkOrderOperation? @relation(fields: [operationId], references: [id], onDelete: Cascade)
  workOrder        WorkOrder           @relation(fields: [workOrderId], references: [id], onDelete: Cascade)

  @@index([workOrderId])
  @@index([operationId])
  @@index([varianceType])
  @@index([isFavorable])
  @@index([calculatedAt])
  @@map("production_variances")
}
model WorkInstruction {
  id                   String                    @id @default(cuid())
  title                String
  description          String?
  partId               String?
  operationId          String?
  version              String                    @default("1.0.0")
  status               WorkInstructionStatus     @default(DRAFT)
  effectiveDate        DateTime?
  supersededDate       DateTime?
  ecoNumber            String?
  approvedById         String?
  approvedAt           DateTime?
  approvalHistory      Json?
  createdById          String
  updatedById          String
  createdAt            DateTime                  @default(now())
  updatedAt            DateTime                  @updatedAt
  operationType        String?
  requiredForExecution Boolean                   @default(false)
  contentFormat        WorkInstructionFormat     @default(NATIVE)
  nativeContent        Json?
  importedFromFile     String?
  exportTemplateId     String?
  tags                 String[]
  categories           String[]
  keywords             String[]
  thumbnailUrl         String?
  operationStandard    Operation[]               @relation("OperationStandardWI")
  routingStepOverrides RoutingStep[]             @relation("RoutingStepWorkInstruction")
  mediaLibraryItems    WorkInstructionMedia[]
  relatedDocuments     WorkInstructionRelation[] @relation("ParentInstruction")
  steps                WorkInstructionStep[]
  approvedBy           User?                     @relation("WorkInstructionApprovedBy", fields: [approvedById], references: [id])
  createdBy            User                      @relation("WorkInstructionCreatedBy", fields: [createdById], references: [id])
  exportTemplate       ExportTemplate?           @relation(fields: [exportTemplateId], references: [id])
  updatedBy            User                      @relation("WorkInstructionUpdatedBy", fields: [updatedById], references: [id])

  @@index([status])
  @@index([partId])
  @@index([contentFormat])
  @@index([tags])
  @@index([categories])
  @@map("work_instructions")
}
model WorkInstructionStep {
  id                String          @id @default(cuid())
  workInstructionId String
  stepNumber        Int
  title             String
  content           String
  imageUrls         String[]
  videoUrls         String[]
  attachmentUrls    String[]
  estimatedDuration Int?
  isCritical        Boolean         @default(false)
  requiresSignature Boolean         @default(false)
  dataEntryFields   Json?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  workInstruction   WorkInstruction @relation(fields: [workInstructionId], references: [id], onDelete: Cascade)

  @@unique([workInstructionId, stepNumber])
  @@index([workInstructionId])
  @@map("work_instruction_steps")
}
model WorkInstructionExecution {
  id                String                         @id @default(cuid())
  workInstructionId String
  workOrderId       String
  operationId       String?
  operatorId        String
  currentStepNumber Int                            @default(1)
  status            WorkInstructionExecutionStatus @default(IN_PROGRESS)
  startedAt         DateTime                       @default(now())
  completedAt       DateTime?
  createdAt         DateTime                       @default(now())
  updatedAt         DateTime                       @updatedAt
  operator          User                           @relation("WIExecutionOperator", fields: [operatorId], references: [id])
  stepExecutions    WorkInstructionStepExecution[]

  @@index([workOrderId])
  @@index([operatorId])
  @@map("work_instruction_executions")
}
model WorkInstructionStepExecution {
  id          String                   @id @default(cuid())
  executionId String
  stepNumber  Int
  status      String                   @default("PENDING")
  dataEntered Json?
  notes       String?
  signedById  String?
  signedAt    DateTime?
  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  execution   WorkInstructionExecution @relation(fields: [executionId], references: [id], onDelete: Cascade)
  signedBy    User?                    @relation("WIStepExecutionSignedBy", fields: [signedById], references: [id])

  @@unique([executionId, stepNumber])
  @@index([executionId])
  @@map("work_instruction_step_executions")
}
model ProductionScheduleRequest {
  id                    String                      @id @default(cuid())
  messageId             String                      @unique
  configId              String
  scheduleType          ScheduleType
  priority              SchedulePriority
  requestedBy           String
  requestedDate         DateTime                    @default(now())
  effectiveStartDate    DateTime
  effectiveEndDate      DateTime
  workOrderId           String?
  externalWorkOrderId   String
  partId                String?
  partNumber            String?
  quantity              Float
  unitOfMeasure         String
  dueDate               DateTime
  workCenterId          String?
  equipmentRequirements Json?
  personnelRequirements Json?
  materialRequirements  Json?
  status                B2MMessageStatus
  processedAt           DateTime?
  errorMessage          String?
  validationErrors      Json?
  requestPayload        Json
  responsePayload       Json?
  createdAt             DateTime                    @default(now())
  updatedAt             DateTime                    @updatedAt
  config                IntegrationConfig           @relation(fields: [configId], references: [id], onDelete: Cascade)
  part                  Part?                       @relation(fields: [partId], references: [id])
  workCenter            Equipment?                  @relation(fields: [workCenterId], references: [id])
  workOrder             WorkOrder?                  @relation(fields: [workOrderId], references: [id])
  response              ProductionScheduleResponse?

  @@index([configId])
  @@index([status])
  @@index([externalWorkOrderId])
  @@index([requestedDate])
  @@map("production_schedule_requests")
}
model ProductionScheduleResponse {
  id                 String                    @id @default(cuid())
  requestId          String                    @unique
  messageId          String                    @unique
  accepted           Boolean
  confirmedStartDate DateTime?
  confirmedEndDate   DateTime?
  confirmedQuantity  Float?
  rejectionReason    String?
  modifications      Json?
  constraints        Json?
  proposedStartDate  DateTime?
  proposedEndDate    DateTime?
  proposedQuantity   Float?
  respondedBy        String
  respondedAt        DateTime                  @default(now())
  sentToERP          Boolean                   @default(false)
  sentAt             DateTime?
  responsePayload    Json
  createdAt          DateTime                  @default(now())
  request            ProductionScheduleRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)

  @@index([requestId])
  @@index([respondedAt])
  @@map("production_schedule_responses")
}
model ProductionPerformanceActual {
  id                   String            @id @default(cuid())
  messageId            String            @unique
  configId             String
  workOrderId          String
  externalWorkOrderId  String
  operationId          String?
  reportingPeriodStart DateTime
  reportingPeriodEnd   DateTime
  quantityProduced     Float
  quantityGood         Float
  quantityScrap        Float
  quantityRework       Float
  yieldPercentage      Float?
  setupTimeActual      Float?
  runTimeActual        Float?
  downtimeActual       Float?
  laborHoursActual     Float?
  laborCostActual      Float?
  materialCostActual   Float?
  overheadCostActual   Float?
  totalCostActual      Float?
  quantityVariance     Float?
  timeVariance         Float?
  costVariance         Float?
  efficiencyVariance   Float?
  personnelActuals     Json?
  equipmentActuals     Json?
  materialActuals      Json?
  status               B2MMessageStatus
  sentToERP            Boolean           @default(false)
  sentAt               DateTime?
  erpConfirmation      String?
  errorMessage         String?
  messagePayload       Json
  createdBy            String
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  config               IntegrationConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  workOrder            WorkOrder         @relation(fields: [workOrderId], references: [id], onDelete: Cascade)

  @@index([configId])
  @@index([workOrderId])
  @@index([externalWorkOrderId])
  @@index([status])
  @@index([sentToERP])
  @@index([reportingPeriodStart])
  @@map("production_performance_actuals")
}
model WorkInstructionMedia {
  id            String          @id @default(cuid())
  instructionId String
  mediaType     MediaType
  fileName      String
  fileUrl       String
  fileSize      Int
  mimeType      String
  title         String?
  description   String?
  tags          String[]
  annotations   Json?
  usageCount    Int             @default(0)
  lastUsedAt    DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  instruction   WorkInstruction @relation(fields: [instructionId], references: [id], onDelete: Cascade)

  @@index([instructionId])
  @@index([mediaType])
  @@map("work_instruction_media")
}
model WorkInstructionRelation {
  id           String          @id @default(cuid())
  parentId     String
  relatedId    String
  relationType RelationType
  description  String?
  createdAt    DateTime        @default(now())
  parent       WorkInstruction @relation("ParentInstruction", fields: [parentId], references: [id], onDelete: Cascade)

  @@unique([parentId, relatedId, relationType])
  @@index([parentId])
  @@index([relatedId])
  @@map("work_instruction_relations")
}
model WorkstationDisplayConfig {
  id                String      @id @default(cuid())
  workstationId     String      @unique
  screenWidth       Int?
  screenHeight      Int?
  isMultiMonitor    Boolean     @default(false)
  monitorCount      Int         @default(1)
  forcedLayout      LayoutMode?
  allowUserOverride Boolean     @default(true)
  isTouchScreen     Boolean     @default(false)
  touchTargetSize   Int?        @default(48)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  updatedById       String

  @@index([workstationId])
  @@map("workstation_display_configs")
}
model WorkflowDefinition {
  id           String             @id @default(cuid())
  name         String
  description  String?
  workflowType WorkflowType
  version      String             @default("1.0.0")
  structure    Json
  isActive     Boolean            @default(true)
  isTemplate   Boolean            @default(false)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  createdById  String
  updatedById  String
  instances    WorkflowInstance[]
  rules        WorkflowRule[]
  stages       WorkflowStage[]

  @@index([workflowType])
  @@index([isActive])
  @@map("workflow_definitions")
}
model WorkflowStage {
  id                 String                  @id @default(cuid())
  workflowId         String
  stageNumber        Int
  stageName          String
  description        String?
  approvalType       ApprovalType            @default(ALL_REQUIRED)
  minimumApprovals   Int?
  approvalThreshold  Float?
  requiredRoles      String[]
  optionalRoles      String[]
  assignmentStrategy AssignmentStrategy      @default(MANUAL)
  deadlineHours      Int?
  escalationRules    Json?
  allowDelegation    Boolean                 @default(true)
  allowSkip          Boolean                 @default(false)
  skipConditions     Json?
  requiresSignature  Boolean                 @default(false)
  signatureType      String?
  stageInstances     WorkflowStageInstance[]
  workflow           WorkflowDefinition      @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@unique([workflowId, stageNumber])
  @@index([workflowId])
  @@map("workflow_stages")
}
model WorkflowRule {
  id                String             @id @default(cuid())
  workflowId        String
  ruleName          String
  description       String?
  conditionField    String
  conditionOperator ConditionOperator
  conditionValue    Json
  actionType        RuleActionType
  actionConfig      Json
  priority          Int                @default(0)
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  workflow          WorkflowDefinition @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@index([workflowId])
  @@index([priority])
  @@map("workflow_rules")
}
model WorkflowInstance {
  id                 String                  @id @default(cuid())
  workflowId         String
  entityType         String
  entityId           String
  status             WorkflowStatus          @default(IN_PROGRESS)
  currentStageNumber Int?
  contextData        Json?
  startedAt          DateTime                @default(now())
  completedAt        DateTime?
  deadline           DateTime?
  priority           Priority                @default(NORMAL)
  impactLevel        ImpactLevel?
  createdById        String
  history            WorkflowHistory[]
  workflow           WorkflowDefinition      @relation(fields: [workflowId], references: [id])
  stageInstances     WorkflowStageInstance[]

  @@unique([entityType, entityId])
  @@index([workflowId])
  @@index([status])
  @@index([deadline])
  @@index([createdById])
  @@map("workflow_instances")
}
model WorkflowStageInstance {
  id                   String                         @id @default(cuid())
  workflowInstanceId   String
  stageId              String
  stageNumber          Int
  stageName            String
  status               StageStatus                    @default(PENDING)
  startedAt            DateTime?
  completedAt          DateTime?
  deadline             DateTime?
  outcome              StageOutcome?
  notes                String?
  assignments          WorkflowAssignment[]
  parallelCoordination WorkflowParallelCoordination[]
  stage                WorkflowStage                  @relation(fields: [stageId], references: [id])
  workflowInstance     WorkflowInstance               @relation(fields: [workflowInstanceId], references: [id], onDelete: Cascade)

  @@unique([workflowInstanceId, stageNumber])
  @@index([workflowInstanceId])
  @@index([status])
  @@index([deadline])
  @@map("workflow_stage_instances")
}
model WorkflowAssignment {
  id               String                @id @default(cuid())
  stageInstanceId  String
  assignedToId     String
  assignedToRole   String?
  assignmentType   AssignmentType        @default(REQUIRED)
  delegatedFromId  String?
  delegationReason String?
  delegationExpiry DateTime?
  action           ApprovalAction?
  actionTakenAt    DateTime?
  comments         String?
  signatureId      String?
  signatureType    String?
  assignedAt       DateTime              @default(now())
  dueDate          DateTime?
  escalationLevel  Int                   @default(0)
  escalatedAt      DateTime?
  escalatedToId    String?
  stageInstance    WorkflowStageInstance @relation(fields: [stageInstanceId], references: [id], onDelete: Cascade)

  @@index([stageInstanceId])
  @@index([assignedToId])
  @@index([dueDate])
  @@index([action])
  @@map("workflow_assignments")
}
model WorkflowHistory {
  id                 String            @id @default(cuid())
  workflowInstanceId String
  eventType          WorkflowEventType
  eventDescription   String
  stageNumber        Int?
  fromStatus         String?
  toStatus           String?
  performedById      String
  performedByName    String
  performedByRole    String?
  details            Json?
  occurredAt         DateTime          @default(now())
  workflowInstance   WorkflowInstance  @relation(fields: [workflowInstanceId], references: [id], onDelete: Cascade)

  @@index([workflowInstanceId])
  @@index([eventType])
  @@index([occurredAt])
  @@map("workflow_history")
}
model WorkflowDelegation {
  id                 String        @id @default(cuid())
  delegatorId        String
  delegateeId        String
  workflowType       WorkflowType?
  specificWorkflowId String?
  startDate          DateTime
  endDate            DateTime?
  reason             String
  isActive           Boolean       @default(true)
  createdAt          DateTime      @default(now())

  @@index([delegatorId])
  @@index([delegateeId])
  @@index([isActive])
  @@map("workflow_delegations")
}
model WorkflowTemplate {
  id                 String       @id @default(cuid())
  name               String
  description        String?
  workflowType       WorkflowType
  category           String       @default("STANDARD")
  templateDefinition Json
  usageCount         Int          @default(0)
  lastUsedAt         DateTime?
  isActive           Boolean      @default(true)
  isBuiltIn          Boolean      @default(false)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  createdById        String

  @@index([workflowType])
  @@index([category])
  @@index([isActive])
  @@map("workflow_templates")
}
model WorkflowTask {
  id                 String     @id @default(cuid())
  assignmentId       String     @unique
  assignedToId       String
  workflowInstanceId String
  stageNumber        Int
  entityType         String
  entityId           String
  taskTitle          String
  taskDescription    String?
  priority           Priority   @default(NORMAL)
  status             TaskStatus @default(PENDING)
  createdAt          DateTime   @default(now())
  dueDate            DateTime?
  lastReminderSent   DateTime?
  reminderCount      Int        @default(0)

  @@index([assignedToId, status])
  @@index([dueDate])
  @@index([priority])
  @@index([workflowInstanceId])
  @@map("workflow_tasks")
}
model WorkflowMetrics {
  id                 String        @id @default(cuid())
  periodStart        DateTime
  periodEnd          DateTime
  workflowId         String?
  stageId            String?
  workflowType       WorkflowType?
  userId             String?
  roleId             String?
  totalAssignments   Int           @default(0)
  completedOnTime    Int           @default(0)
  completedLate      Int           @default(0)
  avgCompletionHours Float?
  escalationCount    Int           @default(0)
  rejectionCount     Int           @default(0)
  onTimePercentage   Float?
  avgResponseHours   Float?
  updatedAt          DateTime      @updatedAt

  @@index([periodStart, periodEnd])
  @@index([workflowType])
  @@index([userId])
  @@map("workflow_metrics")
}
model WorkflowParallelCoordination {
  id                   String                @id @default(cuid())
  stageInstanceId      String
  groupId              String
  groupName            String?
  groupType            String
  completionType       String
  thresholdValue       Int?
  totalAssignments     Int                   @default(0)
  completedAssignments Int                   @default(0)
  approvedAssignments  Int                   @default(0)
  rejectedAssignments  Int                   @default(0)
  groupStatus          String                @default("PENDING")
  groupDecision        String?
  completedAt          DateTime?
  metadata             Json?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  stageInstance        WorkflowStageInstance @relation(fields: [stageInstanceId], references: [id], onDelete: Cascade)

  @@unique([stageInstanceId, groupId])
  @@index([stageInstanceId])
  @@index([groupStatus])
  @@map("workflow_parallel_coordination")
}