generator client {
  provider = "prisma-client-js"

generator erd {
  provider = "prisma-erd-generator"
  output   = "../docs/erd.md"
  theme    = "default"

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")



// ====================================================================
// PRODUCTION SCHEDULING MODULE
// Production scheduling and capacity planning
// ====================================================================

/**
 * Master production schedules coordinating work orders, resources, and timeline across the manufacturing facility
 *
 * @businessPurpose Optimizes production flow by sequencing work orders, allocating equipment and personnel, and managing capacity constraints to meet delivery commitments
 * @dataOwner Production Planning Team
 * @updateFrequency Daily schedule generation with real-time adjustments for disruptions and priority changes
 * @complianceNotes Schedule changes affecting customer deliveries must be documented for contract compliance and quality system requirements
 * @dataRetention 5 years for production planning optimization and performance analysis
 * @securityClassification Internal - Contains production capacity and customer delivery information
 * @integrations ERP Planning System, Shop Floor Control, Customer Order Management, Capacity Planning, Material Requirements Planning
 * @relatedTables ScheduleEntry, WorkOrder, Equipment, PersonnelWorkCenterAssignment, Site
 *
 * @examples
 * - Weekly production schedule for Cell A: Coordinated schedule balancing multiple work orders across available equipment
 *
 * @commonQueries
 * - Find schedules with capacity availability for rush orders
 * - Generate resource utilization reports by time period
 * - Track schedule adherence and variance analysis
 */
model ProductionSchedule {
  id               String                 @id @default(cuid())
  scheduleNumber   String                 @unique
  /// Human-readable identifier for the production schedule
  /// @businessRule Should include time period and area/equipment group for clarity
  /// @dataSource Production planning system or manual assignment
  /// @format Descriptive format including location and time period
  /// @businessImpact Provides clear identification for schedule communication and management
  /// @examples
  /// - Cell A - Week 43 2024
  /// - CNC Department - Daily Schedule 2024-10-21
  /// - Assembly Line 1 - Shift 1 Schedule
  scheduleName     String
  description      String?
  periodStart      DateTime
  periodEnd        DateTime
  periodType       String                 @default("MONTHLY")
  siteId           String?
  areaId           String?
  state            ScheduleState          @default(FORECAST)
  stateChangedAt   DateTime               @default(now())
  stateChangedBy   String?
  priority         SchedulePriority       @default(NORMAL)
  plannedBy        String?
  approvedBy       String?
  approvedAt       DateTime?
  dispatchedCount  Int                    @default(0)
  totalEntries     Int                    @default(0)
  isLocked         Boolean                @default(false)
  isFeasible       Boolean                @default(true)
  feasibilityNotes String?
  notes            String?
  metadata         Json?
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  site             Site?                  @relation(fields: [siteId], references: [id])
  entries          ScheduleEntry[]
  stateHistory     ScheduleStateHistory[]

  @@index([siteId])
  @@index([state])
  @@index([periodStart])
  @@index([periodEnd])
  @@map("production_schedules")
}
/**
 * Individual scheduled activities linking specific work order operations to equipment, personnel, and time slots
 *
 * @businessPurpose Provides detailed scheduling granularity for shop floor execution, ensuring the right work is assigned to the right resources at the right time
 * @dataOwner Production Planning Team
 * @updateFrequency Real-time updates as work progresses and schedules are adjusted for operational realities
 * @complianceNotes Schedule entries provide audit trail for production decisions and resource allocation compliance
 * @dataRetention 3 years for operational analysis and continuous improvement
 * @securityClassification Internal - Contains detailed resource allocation and timing information
 * @integrations Shop Floor Terminals, Equipment Controllers, Time Tracking Systems, Labor Management, Real-time Production Monitoring
 * @relatedTables ProductionSchedule, WorkOrderOperation, Equipment, User, ScheduleConstraint
 *
 * @examples
 * - CNC operation scheduled for morning shift: Specific time slot assignment for machining operation with designated resources
 * - Setup and changeover activity: Equipment preparation time allocated before production operation
 *
 * @commonQueries
 * - Find available schedule slots for urgent work orders
 * - Track actual vs. planned execution times for schedule optimization
 * - Generate daily work assignments for shop floor personnel
 */
model ScheduleEntry {
  id                 String               @id @default(cuid())
  scheduleId         String
  entryNumber        Int
  partId             String
  partNumber         String
  description        String?
  plannedQuantity    Float
  dispatchedQuantity Float                @default(0)
  completedQuantity  Float                @default(0)
  unitOfMeasure      String               @default("EA")
  plannedStartDate   DateTime
  plannedEndDate     DateTime
  actualStartDate    DateTime?
  actualEndDate      DateTime?
  priority           SchedulePriority     @default(NORMAL)
  sequenceNumber     Int?
  estimatedDuration  Int?
  workCenterId       String?
  routingId          String?
  customerOrder      String?
  customerDueDate    DateTime?
  salesOrder         String?
  isDispatched       Boolean              @default(false)
  dispatchedAt       DateTime?
  dispatchedBy       String?
  workOrderId        String?              @unique
  isCancelled        Boolean              @default(false)
  cancelledAt        DateTime?
  cancelledReason    String?
  notes              String?
  metadata           Json?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  constraints        ScheduleConstraint[]
  part               Part                 @relation(fields: [partId], references: [id])
  routing            Routing?             @relation(fields: [routingId], references: [id])
  schedule           ProductionSchedule   @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  workCenter         WorkCenter?          @relation(fields: [workCenterId], references: [id])
  workOrder          WorkOrder?           @relation(fields: [workOrderId], references: [id])

  @@unique([scheduleId, entryNumber])
  @@index([scheduleId])
  @@index([partId])
  @@index([plannedStartDate])
  @@index([plannedEndDate])
  @@index([priority])
  @@index([isDispatched])
  @@index([workOrderId])
  @@map("schedule_entries")
}
model ScheduleConstraint {
  id                String         @id @default(cuid())
  entryId           String
  constraintType    ConstraintType
  constraintName    String
  description       String?
  resourceId        String?
  resourceType      String?
  requiredQuantity  Float?
  availableQuantity Float?
  unitOfMeasure     String?
  constraintDate    DateTime?
  leadTimeDays      Int?
  isViolated        Boolean        @default(false)
  violationSeverity String?
  violationMessage  String?
  isResolved        Boolean        @default(false)
  resolvedAt        DateTime?
  resolvedBy        String?
  resolutionNotes   String?
  notes             String?
  metadata          Json?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  entry             ScheduleEntry  @relation(fields: [entryId], references: [id], onDelete: Cascade)

  @@index([entryId])
  @@index([constraintType])
  @@index([isViolated])
  @@index([constraintDate])
  @@map("schedule_constraints")
}