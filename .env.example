# MES System Environment Configuration
# Copy this file to .env and update with your actual values
# This configuration works with both Docker Compose and Kubernetes deployments

# =============================================================================
# General Configuration
# =============================================================================

NODE_ENV=development
PORT=3000
LOG_LEVEL=debug

# =============================================================================
# Database Connection Pool Configuration
# =============================================================================

# Maximum number of database connections in the pool
# CRITICAL FOR PRODUCTION STABILITY!
#
# ===================================================================
# ENTERPRISE SCALE DEPLOYMENT (30 sites, 6000 users):
# Use PgBouncer for connection pooling + multiple backend instances
# ===================================================================
#
# Recommended values:
# - Development: 15-20 connections (single developer)
# - Test: 25-30 connections (handles E2E test parallelism)
# - Production (Small): 50-100 connections (10-50 users, single instance)
# - Production (Enterprise): 150-200 connections per pod
#
# ENTERPRISE CALCULATION:
# - Backend pods: 10-15 (with auto-scaling)
# - Connections per pod: 150
# - Total frontend connections: 1500-2250
# - PgBouncer multiplexing (10:1): 150-225 actual DB connections
# - Database handles: 150-225 connections (well within PostgreSQL limits)
#
# Formula (without PgBouncer): (Expected concurrent users × 1.5) + 10
# Example: 30 users → 30 × 1.5 + 10 = 55 connections
#
# Formula (with PgBouncer): connections_per_pod = 100-200
#   Total capacity = pods × connections_per_pod / 10 (multiplexing)
#
# WARNING: Setting this too low will cause "connection pool exhausted" errors
# under load, leading to backend crashes and production outages!
#
# For 6000 concurrent users, you MUST use:
# - PgBouncer (transaction mode, 10:1 multiplexing)
# - 10-15 backend pods with 150 connections each
# - Kubernetes HPA for auto-scaling
# - Read replicas for query load distribution
#
DB_CONNECTION_LIMIT=150

# =============================================================================
# PostgreSQL Database Credentials (Docker Compose)
# =============================================================================

# Auth Service Database
POSTGRES_AUTH_USER=mes_auth_user
POSTGRES_AUTH_PASSWORD=dev_password_auth

# Work Order Service Database
POSTGRES_WORK_ORDER_USER=mes_work_order_user
POSTGRES_WORK_ORDER_PASSWORD=dev_password_work_order

# Quality Service Database
POSTGRES_QUALITY_USER=mes_quality_user
POSTGRES_QUALITY_PASSWORD=dev_password_quality

# Material Service Database
POSTGRES_MATERIAL_USER=mes_material_user
POSTGRES_MATERIAL_PASSWORD=dev_password_material

# Traceability Service Database
POSTGRES_TRACEABILITY_USER=mes_traceability_user
POSTGRES_TRACEABILITY_PASSWORD=dev_password_traceability

# Resource Service Database
POSTGRES_RESOURCE_USER=mes_resource_user
POSTGRES_RESOURCE_PASSWORD=dev_password_resource

# Reporting Service Database
POSTGRES_REPORTING_USER=mes_reporting_user
POSTGRES_REPORTING_PASSWORD=dev_password_reporting

# Integration Service Database
POSTGRES_INTEGRATION_USER=mes_integration_user
POSTGRES_INTEGRATION_PASSWORD=dev_password_integration

# =============================================================================
# Database URLs (for Prisma - automatically constructed from above)
# =============================================================================
# NOTE: These are automatically used by the microservices
# For Docker Compose: postgres-auth:5432, postgres-work-order:5432, etc.
# For local development: localhost:5432, localhost:5433, etc.

# Authentication Service Database (Port 5432 in Docker, 5432 locally)
AUTH_DATABASE_URL=postgresql://mes_auth_user:dev_password_auth@localhost:5432/mes_auth

# Work Order Service Database (Port 5432 in Docker, 5433 locally)
WORK_ORDER_DATABASE_URL=postgresql://mes_work_order_user:dev_password_work_order@localhost:5433/mes_work_order

# Quality Service Database (Port 5432 in Docker, 5434 locally)
QUALITY_DATABASE_URL=postgresql://mes_quality_user:dev_password_quality@localhost:5434/mes_quality

# Material Service Database (Port 5432 in Docker, 5435 locally)
MATERIAL_DATABASE_URL=postgresql://mes_material_user:dev_password_material@localhost:5435/mes_material

# Traceability Service Database (Port 5432 in Docker, 5436 locally)
TRACEABILITY_DATABASE_URL=postgresql://mes_traceability_user:dev_password_traceability@localhost:5436/mes_traceability

# Resource Service Database (Port 5432 in Docker, 5437 locally)
RESOURCE_DATABASE_URL=postgresql://mes_resource_user:dev_password_resource@localhost:5437/mes_resource

# Reporting Service Database (Port 5432 in Docker, 5438 locally)
REPORTING_DATABASE_URL=postgresql://mes_reporting_user:dev_password_reporting@localhost:5438/mes_reporting

# Integration Service Database (Port 5432 in Docker, 5439 locally)
INTEGRATION_DATABASE_URL=postgresql://mes_integration_user:dev_password_integration@localhost:5439/mes_integration

# Database Connection Pool Settings (applies to all services)
DB_POOL_MIN=2
DB_POOL_MAX=10
DB_CONNECTION_TIMEOUT=30000

# Redis Configuration
REDIS_URL=redis://localhost:6379
REDIS_PASSWORD=

# =============================================================================
# JWT Authentication
# =============================================================================

JWT_SECRET=your-super-secret-jwt-key-at-least-32-characters-long
JWT_EXPIRES_IN=24h
JWT_EXPIRE=24h
JWT_REFRESH_EXPIRE=7d

# Security Configuration
BCRYPT_ROUNDS=12
SESSION_SECRET=your-super-secret-session-key-at-least-32-characters

# CORS Configuration
CORS_ORIGINS=http://localhost:3000,http://localhost:3001

# Frontend Development Server Configuration (Vite)
# API Service URL for frontend proxy fallback
API_SERVICE_URL=http://localhost:3001

# File Upload Configuration
MAX_FILE_SIZE=10485760
UPLOAD_PATH=./uploads

# External Services Configuration
ERP_API_URL=
ERP_API_KEY=
PLM_API_URL=
PLM_API_KEY=

# Message Queue Configuration
KAFKA_BROKERS=localhost:9092
KAFKA_CLIENT_ID=mes-api

# Logging Configuration
LOG_LEVEL=info
LOG_FORMAT=json

# Performance Configuration
CLUSTER_MODE=false
RATE_LIMIT_WINDOW=900000
RATE_LIMIT_MAX=1000

# =============================================================================
# Monitoring Configuration
# =============================================================================

# Application Metrics
METRICS_ENABLED=true
HEALTH_CHECK_INTERVAL=30000

# Grafana Admin Credentials (Docker Compose)
GRAFANA_USER=admin
GRAFANA_PASSWORD=admin

# Email Configuration
SMTP_HOST=
SMTP_PORT=
SMTP_USER=
SMTP_PASS=

# Time Series Database Configuration
INFLUXDB_URL=http://localhost:8086
INFLUXDB_TOKEN=
INFLUXDB_ORG=mes
INFLUXDB_BUCKET=manufacturing

# GE Proficy Historian Configuration
PROFICY_HISTORIAN_URL=http://localhost:8080
PROFICY_HISTORIAN_USERNAME=
PROFICY_HISTORIAN_PASSWORD=
PROFICY_HISTORIAN_SERVER=DefaultServer
PROFICY_HISTORIAN_AUTH_TYPE=basic
PROFICY_HISTORIAN_BUFFER_SIZE=100
PROFICY_HISTORIAN_AUTO_CONFIGURE=false

# Integration Framework Configuration
INTEGRATION_ENCRYPTION_KEY=your-super-secret-encryption-key-at-least-32-chars

# ===================================================
# AEROSPACE INTEGRATION CONFIGURATIONS (AS9100 Rev D)
# ===================================================

# IBM Maximo CMMS Configuration
# AS9100 Clause 7.1.3: Infrastructure
MAXIMO_BASE_URL=https://your-maximo-server.com
MAXIMO_USERNAME=
MAXIMO_PASSWORD=
MAXIMO_API_KEY=
MAXIMO_TIMEOUT=30000
MAXIMO_RETRY_ATTEMPTS=3
MAXIMO_USE_OSLC=true
MAXIMO_OSLC_VERSION=2.0
MAXIMO_SYNC_INTERVAL=900000
MAXIMO_AUTO_CREATE_WORK_ORDERS=false

# Indysoft Gauge Calibration Configuration
# AS9100 Clause 7.1.5: Monitoring and measuring resources
# ISO 17025: Calibration laboratory competence
INDYSOFT_BASE_URL=https://your-indysoft-server.com
INDYSOFT_USERNAME=
INDYSOFT_PASSWORD=
INDYSOFT_TIMEOUT=30000
INDYSOFT_RETRY_ATTEMPTS=3
INDYSOFT_ENABLE_ISO17025=true
INDYSOFT_ENABLE_MSA=true
INDYSOFT_ENABLE_GAGE_RR=true
INDYSOFT_SYNC_INTERVAL=3600000
INDYSOFT_ALERT_ON_OUT_OF_CAL=true
INDYSOFT_AUTO_QUARANTINE=true

# Covalent Skills Tracking Configuration
# AS9100 Clause 7.2: Competence
COVALENT_BASE_URL=https://your-covalent-server.com
COVALENT_API_KEY=
COVALENT_TIMEOUT=30000
COVALENT_RETRY_ATTEMPTS=3
COVALENT_ENABLE_AS9100_COMPLIANCE=true
COVALENT_FAI_INSPECTOR_VALIDATION=true
COVALENT_SPECIAL_PROCESS_TRACKING=true
COVALENT_SYNC_INTERVAL=3600000
COVALENT_CERT_EXPIRY_WARNING_DAYS=30

# Shop Floor Connect (SFC) Configuration
# AS9100 Clause 8.5.6: Control of changes
SHOP_FLOOR_CONNECT_BASE_URL=https://your-sfc-server.com
SHOP_FLOOR_CONNECT_USERNAME=
SHOP_FLOOR_CONNECT_PASSWORD=
SHOP_FLOOR_CONNECT_TIMEOUT=30000
SHOP_FLOOR_CONNECT_RETRY_ATTEMPTS=3
SHOP_FLOOR_CONNECT_PLM_INTEGRATION=TEAMCENTER
SHOP_FLOOR_CONNECT_ENABLE_ECO_TRACKING=true
SHOP_FLOOR_CONNECT_ENABLE_MBE=true
SHOP_FLOOR_CONNECT_SYNC_INTERVAL=300000
SHOP_FLOOR_CONNECT_AUTO_VERSION_CHECK=true

# Predator PDM (Production Data Management) Configuration
PREDATOR_PDM_BASE_URL=https://your-pdm-server.com
PREDATOR_PDM_USERNAME=
PREDATOR_PDM_PASSWORD=
PREDATOR_PDM_TIMEOUT=30000
PREDATOR_PDM_RETRY_ATTEMPTS=3
PREDATOR_PDM_ENABLE_MBE=true
PREDATOR_PDM_ENABLE_REQIF=true
PREDATOR_PDM_AUTO_VERSIONING=true

# Predator DNC (Distributed Numerical Control) Configuration
# CRITICAL: Multi-system authorization handshake for program loading
PREDATOR_DNC_BASE_URL=https://your-dnc-server.com
PREDATOR_DNC_USERNAME=
PREDATOR_DNC_PASSWORD=
PREDATOR_DNC_TIMEOUT=60000
PREDATOR_DNC_RETRY_ATTEMPTS=3
PREDATOR_DNC_ENABLE_AUTHORIZATION_HANDSHAKE=true
PREDATOR_DNC_ENABLE_OPERATOR_VALIDATION=true
PREDATOR_DNC_ENABLE_PROGRAM_VERSIONING=true
PREDATOR_DNC_ENABLE_GAUGE_VALIDATION=true
PREDATOR_DNC_ALERT_ON_AUTHORIZATION_FAILURE=true
PREDATOR_DNC_MTCONNECT_ENABLED=true

# CMM (Coordinate Measuring Machine) Configuration
# QIF 3.0 (Quality Information Framework) for dimensional inspection
# AS9102 Clause: Form 3 - Characteristic Accountability
# Supported Systems: PC-DMIS (Hexagon), Calypso (Carl Zeiss)
CMM_BASE_URL=https://your-cmm-server.com
CMM_TYPE=PC-DMIS
CMM_USERNAME=
CMM_PASSWORD=
CMM_API_KEY=
CMM_TIMEOUT=60000
CMM_RETRY_ATTEMPTS=3
CMM_AUTO_IMPORT_RESULTS=true
CMM_POLL_INTERVAL=30000
CMM_QIF_VERSION=3.0.0
CMM_ENABLE_AS9102_FAI=true
CMM_ENABLE_QIF_EXPORT=true
CMM_ENABLE_STATISTICAL_ANALYSIS=true

# =============================================================================
# CyberArk Privileged Access Management (PAM) Configuration
# =============================================================================
# Enterprise-grade credential management for secure storage and retrieval
# of database passwords, API keys, and application secrets
#
# Security Benefits:
# - Centralized credential storage and rotation
# - Audit trails for all credential access
# - Eliminates hardcoded credentials
# - Supports AS9100 configuration management requirements
# - Enables NIST 800-171 compliance for cryptographic protection
#
# Production Deployment:
# - Use CyberArk Conjur for containerized environments
# - Integrate with Kubernetes Secrets Provider
# - Enable automatic credential rotation
# - Configure audit log forwarding to SIEM
#
# Authentication Methods (choose one):
# 1. API Key (recommended for microservices)
# 2. Username/Password (for interactive applications)
# 3. Client Certificates (for high-security environments)

# Enable/disable CyberArk integration (fallback to environment variables if disabled)
CYBERARK_ENABLED=false

# CyberArk Conjur Server Configuration
CYBERARK_URL=https://your-conjur-server.company.com
CYBERARK_ACCOUNT=production-mes
CYBERARK_AUTHENTICATOR=authn

# Authentication Method 1: API Key (Recommended for Production)
CYBERARK_API_KEY=

# Authentication Method 2: Username/Password
CYBERARK_USERNAME=
CYBERARK_PASSWORD=

# Authentication Method 3: Client Certificates (High Security)
CYBERARK_CLIENT_CERT_PATH=/etc/ssl/certs/conjur-client.crt
CYBERARK_CLIENT_KEY_PATH=/etc/ssl/private/conjur-client.key
CYBERARK_CA_CERT_PATH=/etc/ssl/certs/conjur-ca.crt

# Performance and Caching Configuration
CYBERARK_CACHE_TTL=300000        # 5 minutes (in milliseconds)
CYBERARK_TIMEOUT=30000           # 30 seconds (in milliseconds)

# Fallback Configuration (used when CyberArk is unavailable)
# These values are used if CyberArk integration is disabled or fails
# In production, these should be empty - force CyberArk usage

# Database credential fallbacks
FALLBACK_AUTH_USERNAME=mes_auth_user
FALLBACK_AUTH_PASSWORD=dev_password_auth
FALLBACK_WORK_ORDER_USERNAME=mes_work_order_user
FALLBACK_WORK_ORDER_PASSWORD=dev_password_work_order
FALLBACK_QUALITY_USERNAME=mes_quality_user
FALLBACK_QUALITY_PASSWORD=dev_password_quality
FALLBACK_MATERIAL_USERNAME=mes_material_user
FALLBACK_MATERIAL_PASSWORD=dev_password_material
FALLBACK_TRACEABILITY_USERNAME=mes_traceability_user
FALLBACK_TRACEABILITY_PASSWORD=dev_password_traceability
FALLBACK_RESOURCE_USERNAME=mes_resource_user
FALLBACK_RESOURCE_PASSWORD=dev_password_resource
FALLBACK_REPORTING_USERNAME=mes_reporting_user
FALLBACK_REPORTING_PASSWORD=dev_password_reporting
FALLBACK_INTEGRATION_USERNAME=mes_integration_user
FALLBACK_INTEGRATION_PASSWORD=dev_password_integration

# Application secret fallbacks
FALLBACK_JWT_SECRET=your-super-secret-jwt-key-at-least-32-characters-long-development-only
FALLBACK_SESSION_SECRET=your-super-secret-session-key-at-least-32-characters-development-only
FALLBACK_INTEGRATION_ENCRYPTION_KEY=your-super-secret-encryption-key-at-least-32-chars-dev-only

# External integration credential fallbacks
FALLBACK_ERP_API_KEY=dev-erp-api-key
FALLBACK_PLM_API_KEY=dev-plm-api-key
FALLBACK_MAXIMO_PASSWORD=dev-maximo-password
FALLBACK_INDYSOFT_PASSWORD=dev-indysoft-password
FALLBACK_COVALENT_API_KEY=dev-covalent-api-key
FALLBACK_SHOP_FLOOR_CONNECT_PASSWORD=dev-sfc-password
FALLBACK_PREDATOR_DNC_PASSWORD=dev-dnc-password
FALLBACK_CMM_PASSWORD=dev-cmm-password
FALLBACK_CMM_API_KEY=dev-cmm-api-key
