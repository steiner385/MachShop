# Microservice Deployment Template
# Copy and customize this template for each of the 8 MES microservices
# Services: auth, work-order, quality, material, traceability, resource, reporting, integration

---
apiVersion: v1
kind: Service
metadata:
  name: SERVICE_NAME-service
  namespace: mes-production
  labels:
    app: SERVICE_NAME
    component: microservice
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
    name: http
  selector:
    app: SERVICE_NAME

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: SERVICE_NAME
  namespace: mes-production
  labels:
    app: SERVICE_NAME
    component: microservice
spec:
  replicas: 2
  selector:
    matchLabels:
      app: SERVICE_NAME
  template:
    metadata:
      labels:
        app: SERVICE_NAME
        component: microservice
    spec:
      containers:
      - name: SERVICE_NAME
        image: REGISTRY/mes-SERVICE_NAME:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        - name: SERVICE_NAME
          value: "SERVICE_NAME"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: SERVICE_NAME-db-secret
              key: database-url
        - name: KAFKA_BROKERS
          value: "kafka-0.kafka:9092,kafka-1.kafka:9092,kafka-2.kafka:9092"
        - name: KAFKA_CLIENT_ID
          value: "SERVICE_NAME-service"
        - name: KAFKA_TOPIC
          value: "mes-events"
        - name: REDIS_HOST
          value: "redis"
        - name: REDIS_PORT
          value: "6379"
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: mes-secrets
              key: jwt-secret
        envFrom:
        - configMapRef:
            name: mes-config
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      restartPolicy: Always

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: SERVICE_NAME-hpa
  namespace: mes-production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: SERVICE_NAME
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
