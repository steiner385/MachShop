# PostgreSQL Database Secrets Template
# IMPORTANT: Do NOT commit actual secrets to Git!
# Generate actual secrets using: kubectl create secret generic <name> --from-literal=username=<user> --from-literal=password=<pass>

# Example commands to create secrets:

# kubectl create secret generic postgres-auth-secret \
#   --namespace=mes-production \
#   --from-literal=username=mes_auth_user \
#   --from-literal=password=$(openssl rand -base64 32)

# kubectl create secret generic postgres-work-order-secret \
#   --namespace=mes-production \
#   --from-literal=username=mes_workorder_user \
#   --from-literal=password=$(openssl rand -base64 32)

# kubectl create secret generic postgres-quality-secret \
#   --namespace=mes-production \
#   --from-literal=username=mes_quality_user \
#   --from-literal=password=$(openssl rand -base64 32)

# kubectl create secret generic postgres-material-secret \
#   --namespace=mes-production \
#   --from-literal=username=mes_material_user \
#   --from-literal=password=$(openssl rand -base64 32)

# kubectl create secret generic postgres-traceability-secret \
#   --namespace=mes-production \
#   --from-literal=username=mes_traceability_user \
#   --from-literal=password=$(openssl rand -base64 32)

# kubectl create secret generic postgres-resource-secret \
#   --namespace=mes-production \
#   --from-literal=username=mes_resource_user \
#   --from-literal=password=$(openssl rand -base64 32)

# kubectl create secret generic postgres-reporting-secret \
#   --namespace=mes-production \
#   --from-literal=username=mes_reporting_user \
#   --from-literal=password=$(openssl rand -base64 32)

# kubectl create secret generic postgres-integration-secret \
#   --namespace=mes-production \
#   --from-literal=username=mes_integration_user \
#   --from-literal=password=$(openssl rand -base64 32)

# Script to create all database secrets at once:
# for service in auth work-order quality material traceability resource reporting integration; do
#   kubectl create secret generic postgres-${service}-secret \
#     --namespace=mes-production \
#     --from-literal=username=mes_${service//-/_}_user \
#     --from-literal=password=$(openssl rand -base64 32) \
#     --dry-run=client -o yaml | kubectl apply -f -
# done
