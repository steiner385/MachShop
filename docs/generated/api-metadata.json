{
  "modules": [
    {
      "filePath": "src/routes/routings.ts",
      "moduleName": "routings",
      "baseRoute": "/routings",
      "endpoints": [
        {
          "method": "POST",
          "path": "/api/v1/routings",
          "description": "Create a new routing",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/routings",
          "description": "Create a new routing",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/routings/:id",
          "description": "Create a new routing",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/routings/number/:routingNumber",
          "description": "Create a new routing",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/routings/:id",
          "description": "Create a new routing",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/routings/:id",
          "description": "Create a new routing",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/routings/:routingId/steps",
          "description": "Create a new routing",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/routings/:routingId/steps",
          "description": "Create a new routing",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/routings/steps/:stepId",
          "description": "Create a new routing",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/routings/steps/:stepId",
          "description": "Create a new routing",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/routings/steps/:stepId",
          "description": "Create a new routing",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/routings/:routingId/steps/resequence",
          "description": "Create a new routing",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/routings/steps/dependencies",
          "description": "Create a new routing",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/routings/steps/dependencies/:dependencyId",
          "description": "Create a new routing",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/routings/part-site-availability",
          "description": "Create a new routing",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/routings/part-site-availability/:partId/:siteId",
          "description": "Create a new routing",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/routings/parts/:partId/available-sites",
          "description": "Create a new routing",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/routings/part-site-availability/:id",
          "description": "Create a new routing",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/routings/part-site-availability/:id",
          "description": "Create a new routing",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/routings/:id/copy",
          "description": "Create a new routing",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/routings/:id/approve",
          "description": "Create a new routing",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/routings/:id/activate",
          "description": "Create a new routing",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/routings/:id/obsolete",
          "description": "Create a new routing",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/routings/:partId/:siteId/versions",
          "description": "Create a new routing",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/routings/:id/timing",
          "description": "Create a new routing",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/routings/:id/validate",
          "description": "Create a new routing",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/routings/templates",
          "description": "Create a new routing",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/routings/templates/categories",
          "description": "Create a new routing",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/routings/templates",
          "description": "Create a new routing",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/routings/templates/:id",
          "description": "Create a new routing",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/routings/templates/:id",
          "description": "Create a new routing",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/routings/templates/:id",
          "description": "Create a new routing",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/routings/templates/:id/favorite",
          "description": "Create a new routing",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/routings/templates/:id/use",
          "description": "Create a new routing",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/routings/:id/visual-data",
          "description": "Create a new routing",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/routings/visual",
          "description": "Create a new routing",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/routings/:id/visual",
          "description": "Create a new routing",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/routings/by-type/:partId/:siteId/:routingType",
          "description": "Create a new routing",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/routings/primary/:partId/:siteId",
          "description": "Create a new routing",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/routings/:id/alternates",
          "description": "Create a new routing",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/routings/steps/:stepId/parameters",
          "description": "Create a new routing",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/routings/steps/:stepId/parameters",
          "description": "Create a new routing",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/routings/steps/:stepId/parameters/effective",
          "description": "Create a new routing",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/routings/steps/:stepId/parameters/:parameterName",
          "description": "Create a new routing",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/routings/steps/:stepId/work-instruction",
          "description": "Create a new routing",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/routings/steps/:stepId/work-instruction",
          "description": "Create a new routing",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/routings/steps/:stepId/work-instruction/effective",
          "description": "Create a new routing",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "zod",
        "../services/RoutingService",
        "../middleware/auth",
        "../middleware/errorHandler",
        "../utils/logger",
        "../types/routing"
      ],
      "services": [
        "routingService",
        "RoutingService"
      ],
      "schemas": [
        {
          "name": "createRoutingSchema",
          "type": "body",
          "schema": {
            "routingNumber": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            },
            "partId": {
              "type": "string",
              "required": true,
              "modifiers": ""
            },
            "siteId": {
              "type": "string",
              "required": true,
              "modifiers": ""
            },
            "version": {
              "type": "string",
              "required": false,
              "modifiers": ".optional().default('1.0')"
            },
            "lifecycleState": {
              "type": "nativeEnum",
              "required": false,
              "modifiers": ".optional().default(RoutingLifecycleState.DRAFT)"
            },
            "description": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "isPrimaryRoute": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional().default(false)"
            },
            "isActive": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional().default(true)"
            },
            "effectiveDate": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional()"
            },
            "expirationDate": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional()"
            },
            "createdBy": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "notes": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "steps": {
              "type": "array",
              "required": true,
              "modifiers": ".int().positive()"
            },
            "operationId": {
              "type": "string",
              "required": true,
              "modifiers": ""
            },
            "workCenterId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "setupTimeOverride": {
              "type": "number",
              "required": false,
              "modifiers": ".int().nonnegative().optional()"
            },
            "cycleTimeOverride": {
              "type": "number",
              "required": false,
              "modifiers": ".int().nonnegative().optional()"
            },
            "teardownTimeOverride": {
              "type": "number",
              "required": false,
              "modifiers": ".int().nonnegative().optional()"
            },
            "isOptional": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional().default(false)"
            },
            "isQualityInspection": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional().default(false)"
            },
            "isCriticalPath": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional().default(false)"
            },
            "stepInstructions": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const createRoutingSchema = z.object({\n  routingNumber: z.string().min(1),\n  partId: z.string(), // Cuid2 format\n  siteId: z.string(), // Cuid2 format\n  version: z.string().optional().default('1.0'),\n  lifecycleState: z.nativeEnum(RoutingLifecycleState).optional().default(RoutingLifecycleState.DRAFT),\n  description: z.string().optional(),\n  isPrimaryRoute: z.boolean().optional().default(false),\n  isActive: z.boolean().optional().default(true),\n  effectiveDate: z.string().datetime().optional(),\n  expirationDate: z.string().datetime().optional(),\n  createdBy: z.string().optional(),\n  notes: z.string().optional(),\n  steps: z.array(z.object({\n    stepNumber: z.number().int().positive(),\n    operationId: z.string(), // ISA-95: processSegmentId (Cuid2 format)\n    workCenterId: z.string().optional(), // Cuid2 format\n    setupTimeOverride: z.number().int().nonnegative().optional(),\n    cycleTimeOverride: z.number().int().nonnegative().optional(),\n    teardownTimeOverride: z.number().int().nonnegative().optional(),\n    isOptional: z.boolean().optional().default(false),\n    isQualityInspection: z.boolean().optional().default(false),\n    isCriticalPath: z.boolean().optional().default(false),\n    stepInstructions: z.string().optional(),\n    notes: z.string().optional()\n  })"
        },
        {
          "name": "updateRoutingSchema",
          "type": "body",
          "schema": {
            "routingNumber": {
              "type": "string",
              "required": false,
              "modifiers": ".min(1).optional()"
            },
            "partId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "siteId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "version": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "lifecycleState": {
              "type": "nativeEnum",
              "required": false,
              "modifiers": ".optional()"
            },
            "description": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "isPrimaryRoute": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional()"
            },
            "isActive": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional()"
            },
            "effectiveDate": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional()"
            },
            "expirationDate": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional()"
            },
            "approvedBy": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "approvedAt": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional()"
            },
            "createdBy": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "notes": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "currentVersion": {
              "type": "string",
              "required": false,
              "modifiers": ".optional() // For optimistic locking"
            }
          },
          "zodDefinition": "const updateRoutingSchema = z.object({\n  routingNumber: z.string().min(1).optional(),\n  partId: z.string().optional(), // Cuid2 format\n  siteId: z.string().optional(), // Cuid2 format\n  version: z.string().optional(),\n  lifecycleState: z.nativeEnum(RoutingLifecycleState).optional(),\n  description: z.string().optional(),\n  isPrimaryRoute: z.boolean().optional(),\n  isActive: z.boolean().optional(),\n  effectiveDate: z.string().datetime().optional(),\n  expirationDate: z.string().datetime().optional(),\n  approvedBy: z.string().optional(),\n  approvedAt: z.string().datetime().optional(),\n  createdBy: z.string().optional(),\n  notes: z.string().optional(),\n  currentVersion: z.string().optional() // For optimistic locking\n})"
        },
        {
          "name": "createRoutingStepSchema",
          "type": "body",
          "schema": {
            "routingId": {
              "type": "string",
              "required": true,
              "modifiers": ".uuid()"
            },
            "stepNumber": {
              "type": "number",
              "required": true,
              "modifiers": ".int().positive()"
            },
            "operationId": {
              "type": "string",
              "required": true,
              "modifiers": ".uuid()"
            },
            "workCenterId": {
              "type": "string",
              "required": false,
              "modifiers": ".uuid().optional()"
            },
            "setupTimeOverride": {
              "type": "number",
              "required": false,
              "modifiers": ".int().nonnegative().optional()"
            },
            "cycleTimeOverride": {
              "type": "number",
              "required": false,
              "modifiers": ".int().nonnegative().optional()"
            },
            "teardownTimeOverride": {
              "type": "number",
              "required": false,
              "modifiers": ".int().nonnegative().optional()"
            },
            "isOptional": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional().default(false)"
            },
            "isQualityInspection": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional().default(false)"
            },
            "isCriticalPath": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional().default(false)"
            },
            "stepInstructions": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "notes": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const createRoutingStepSchema = z.object({\n  routingId: z.string().uuid(),\n  stepNumber: z.number().int().positive(),\n  operationId: z.string().uuid(), // ISA-95: processSegmentId\n  workCenterId: z.string().uuid().optional(),\n  setupTimeOverride: z.number().int().nonnegative().optional(),\n  cycleTimeOverride: z.number().int().nonnegative().optional(),\n  teardownTimeOverride: z.number().int().nonnegative().optional(),\n  isOptional: z.boolean().optional().default(false),\n  isQualityInspection: z.boolean().optional().default(false),\n  isCriticalPath: z.boolean().optional().default(false),\n  stepInstructions: z.string().optional(),\n  notes: z.string().optional()\n})"
        },
        {
          "name": "updateRoutingStepSchema",
          "type": "body",
          "schema": {
            "stepNumber": {
              "type": "number",
              "required": false,
              "modifiers": ".int().positive().optional()"
            },
            "operationId": {
              "type": "string",
              "required": false,
              "modifiers": ".uuid().optional()"
            },
            "workCenterId": {
              "type": "string",
              "required": false,
              "modifiers": ".uuid().optional()"
            },
            "setupTimeOverride": {
              "type": "number",
              "required": false,
              "modifiers": ".int().nonnegative().optional()"
            },
            "cycleTimeOverride": {
              "type": "number",
              "required": false,
              "modifiers": ".int().nonnegative().optional()"
            },
            "teardownTimeOverride": {
              "type": "number",
              "required": false,
              "modifiers": ".int().nonnegative().optional()"
            },
            "isOptional": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional()"
            },
            "isQualityInspection": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional()"
            },
            "isCriticalPath": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional()"
            },
            "stepInstructions": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "notes": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const updateRoutingStepSchema = z.object({\n  stepNumber: z.number().int().positive().optional(),\n  operationId: z.string().uuid().optional(), // ISA-95: processSegmentId\n  workCenterId: z.string().uuid().optional(),\n  setupTimeOverride: z.number().int().nonnegative().optional(),\n  cycleTimeOverride: z.number().int().nonnegative().optional(),\n  teardownTimeOverride: z.number().int().nonnegative().optional(),\n  isOptional: z.boolean().optional(),\n  isQualityInspection: z.boolean().optional(),\n  isCriticalPath: z.boolean().optional(),\n  stepInstructions: z.string().optional(),\n  notes: z.string().optional()\n})"
        },
        {
          "name": "createStepDependencySchema",
          "type": "body",
          "schema": {
            "dependentStepId": {
              "type": "string",
              "required": true,
              "modifiers": ".uuid()"
            },
            "prerequisiteStepId": {
              "type": "string",
              "required": true,
              "modifiers": ".uuid()"
            },
            "dependencyType": {
              "type": "nativeEnum",
              "required": true,
              "modifiers": ""
            },
            "timingType": {
              "type": "nativeEnum",
              "required": true,
              "modifiers": ""
            },
            "lagTime": {
              "type": "number",
              "required": false,
              "modifiers": ".int().nonnegative().optional()"
            },
            "leadTime": {
              "type": "number",
              "required": false,
              "modifiers": ".int().nonnegative().optional()"
            }
          },
          "zodDefinition": "const createStepDependencySchema = z.object({\n  dependentStepId: z.string().uuid(),\n  prerequisiteStepId: z.string().uuid(),\n  dependencyType: z.nativeEnum(DependencyType),\n  timingType: z.nativeEnum(DependencyTimingType),\n  lagTime: z.number().int().nonnegative().optional(),\n  leadTime: z.number().int().nonnegative().optional()\n})"
        },
        {
          "name": "createPartSiteAvailabilitySchema",
          "type": "body",
          "schema": {
            "partId": {
              "type": "string",
              "required": true,
              "modifiers": ".uuid()"
            },
            "siteId": {
              "type": "string",
              "required": true,
              "modifiers": ".uuid()"
            },
            "isPreferred": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional().default(false)"
            },
            "isActive": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional().default(true)"
            },
            "leadTimeDays": {
              "type": "number",
              "required": false,
              "modifiers": ".int().nonnegative().optional()"
            },
            "minimumLotSize": {
              "type": "number",
              "required": false,
              "modifiers": ".int().positive().optional()"
            },
            "maximumLotSize": {
              "type": "number",
              "required": false,
              "modifiers": ".int().positive().optional()"
            },
            "standardCost": {
              "type": "number",
              "required": false,
              "modifiers": ".nonnegative().optional()"
            },
            "setupCost": {
              "type": "number",
              "required": false,
              "modifiers": ".nonnegative().optional()"
            },
            "effectiveDate": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional()"
            },
            "expirationDate": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional()"
            },
            "notes": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const createPartSiteAvailabilitySchema = z.object({\n  partId: z.string().uuid(),\n  siteId: z.string().uuid(),\n  isPreferred: z.boolean().optional().default(false),\n  isActive: z.boolean().optional().default(true),\n  leadTimeDays: z.number().int().nonnegative().optional(),\n  minimumLotSize: z.number().int().positive().optional(),\n  maximumLotSize: z.number().int().positive().optional(),\n  standardCost: z.number().nonnegative().optional(),\n  setupCost: z.number().nonnegative().optional(),\n  effectiveDate: z.string().datetime().optional(),\n  expirationDate: z.string().datetime().optional(),\n  notes: z.string().optional()\n})"
        },
        {
          "name": "updatePartSiteAvailabilitySchema",
          "type": "body",
          "schema": {
            "isPreferred": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional()"
            },
            "isActive": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional()"
            },
            "leadTimeDays": {
              "type": "number",
              "required": false,
              "modifiers": ".int().nonnegative().optional()"
            },
            "minimumLotSize": {
              "type": "number",
              "required": false,
              "modifiers": ".int().positive().optional()"
            },
            "maximumLotSize": {
              "type": "number",
              "required": false,
              "modifiers": ".int().positive().optional()"
            },
            "standardCost": {
              "type": "number",
              "required": false,
              "modifiers": ".nonnegative().optional()"
            },
            "setupCost": {
              "type": "number",
              "required": false,
              "modifiers": ".nonnegative().optional()"
            },
            "effectiveDate": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional()"
            },
            "expirationDate": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional()"
            },
            "notes": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const updatePartSiteAvailabilitySchema = z.object({\n  isPreferred: z.boolean().optional(),\n  isActive: z.boolean().optional(),\n  leadTimeDays: z.number().int().nonnegative().optional(),\n  minimumLotSize: z.number().int().positive().optional(),\n  maximumLotSize: z.number().int().positive().optional(),\n  standardCost: z.number().nonnegative().optional(),\n  setupCost: z.number().nonnegative().optional(),\n  effectiveDate: z.string().datetime().optional(),\n  expirationDate: z.string().datetime().optional(),\n  notes: z.string().optional()\n})"
        },
        {
          "name": "copyRoutingSchema",
          "type": "body",
          "schema": {
            "targetSiteId": {
              "type": "string",
              "required": false,
              "modifiers": ".uuid().optional()"
            },
            "newVersion": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "includeSteps": {
              "type": "boolean",
              "required": true,
              "modifiers": ".default(true)"
            },
            "includeDependencies": {
              "type": "boolean",
              "required": true,
              "modifiers": ".default(true)"
            },
            "newLifecycleState": {
              "type": "nativeEnum",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const copyRoutingSchema = z.object({\n  targetSiteId: z.string().uuid().optional(),\n  newVersion: z.string().optional(),\n  includeSteps: z.boolean().default(true),\n  includeDependencies: z.boolean().default(true),\n  newLifecycleState: z.nativeEnum(RoutingLifecycleState).optional()\n})"
        },
        {
          "name": "approveRoutingSchema",
          "type": "body",
          "schema": {
            "routingId": {
              "type": "string",
              "required": true,
              "modifiers": ".uuid()"
            },
            "approvedBy": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            },
            "notes": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const approveRoutingSchema = z.object({\n  routingId: z.string().uuid(),\n  approvedBy: z.string().min(1),\n  notes: z.string().optional()\n})"
        },
        {
          "name": "resequenceStepsSchema",
          "type": "body",
          "schema": {
            "routingId": {
              "type": "string",
              "required": true,
              "modifiers": ".uuid()"
            },
            "stepOrder": {
              "type": "array",
              "required": true,
              "modifiers": ".uuid()"
            },
            "newStepNumber": {
              "type": "number",
              "required": true,
              "modifiers": ".int().positive()"
            }
          },
          "zodDefinition": "const resequenceStepsSchema = z.object({\n  routingId: z.string().uuid(),\n  stepOrder: z.array(z.object({\n    stepId: z.string().uuid(),\n    newStepNumber: z.number().int().positive()\n  })"
        }
      ],
      "businessDomain": "Production Management",
      "description": "Routing API Routes"
    },
    {
      "filePath": "src/routes/workflows.ts",
      "moduleName": "workflows",
      "baseRoute": "/workflows",
      "endpoints": [
        {
          "method": "POST",
          "path": "/api/v1/workflows/definitions",
          "description": "Create a new workflow definition",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/workflows/definitions",
          "description": "Create a new workflow definition",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/workflows/definitions/:id",
          "description": "Create a new workflow definition",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/workflows/definitions/:id",
          "description": "Create a new workflow definition",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/workflows/definitions/:id",
          "description": "Create a new workflow definition",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/workflows/definitions/:id/version",
          "description": "Create a new workflow definition",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/workflows/definitions/:id/clone",
          "description": "Create a new workflow definition",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/workflows/instances",
          "description": "Create a new workflow definition",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/workflows/instances",
          "description": "Create a new workflow definition",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/workflows/instances/:id",
          "description": "Create a new workflow definition",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/workflows/instances/:id/advance",
          "description": "Create a new workflow definition",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/workflows/instances/:id/abort",
          "description": "Create a new workflow definition",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/workflows/instances/:id/reset",
          "description": "Create a new workflow definition",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/workflows/tasks",
          "description": "Create a new workflow definition",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/workflows/tasks/:assignmentId/approve",
          "description": "Create a new workflow definition",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/workflows/tasks/:assignmentId/reject",
          "description": "Create a new workflow definition",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/workflows/tasks/:assignmentId/delegate",
          "description": "Create a new workflow definition",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/workflows/tasks/bulk-action",
          "description": "Create a new workflow definition",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/workflows/analytics",
          "description": "Create a new workflow definition",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/workflows/instances/:id/status",
          "description": "Create a new workflow definition",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/workflows/templates",
          "description": "Create a new workflow definition",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/workflows/templates",
          "description": "Create a new workflow definition",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/workflows/templates/:id",
          "description": "Create a new workflow definition",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/workflows/templates/:id/instantiate",
          "description": "Create a new workflow definition",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/workflows/definitions/:workflowId/rules",
          "description": "Create a new workflow definition",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/workflows/definitions/:workflowId/rules",
          "description": "Create a new workflow definition",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/workflows/assignments/:assignmentId/approve-with-signature",
          "description": "Create a new workflow definition",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/workflows/assignments/:assignmentId/signature-required",
          "description": "Create a new workflow definition",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/workflows/assignments/:assignmentId/signature",
          "description": "Create a new workflow definition",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/workflows/instances/:workflowId/signatures",
          "description": "Create a new workflow definition",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/workflows/instances/:workflowId/verify-signatures",
          "description": "Create a new workflow definition",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/workflows/instances/:workflowId/signature-audit-report",
          "description": "Create a new workflow definition",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/workflows/instances/:workflowId/signature-status",
          "description": "Create a new workflow definition",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "zod",
        "@prisma/client",
        "../types/workflow",
        "../services/WorkflowEngineService",
        "../services/WorkflowDefinitionService",
        "../services/WorkflowNotificationService",
        "../utils/logger"
      ],
      "services": [
        "WorkflowEngineService",
        "WorkflowDefinitionService",
        "WorkflowNotificationService",
        "workflowDefinitionService",
        "notificationService",
        "workflowEngineService"
      ],
      "schemas": [
        {
          "name": "createWorkflowDefinitionSchema",
          "type": "body",
          "schema": {
            "name": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1"
            },
            "description": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "workflowType": {
              "type": "nativeEnum",
              "required": true,
              "modifiers": ""
            },
            "version": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "structure": {
              "type": "object",
              "required": true,
              "modifiers": ".int().positive()"
            },
            "stageName": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            },
            "approvalType": {
              "type": "nativeEnum",
              "required": true,
              "modifiers": ""
            },
            "minimumApprovals": {
              "type": "number",
              "required": false,
              "modifiers": ".int().optional()"
            },
            "approvalThreshold": {
              "type": "number",
              "required": false,
              "modifiers": ".int().optional()"
            },
            "requiredRoles": {
              "type": "array",
              "required": true,
              "modifiers": ")"
            },
            "optionalRoles": {
              "type": "array",
              "required": true,
              "modifiers": ")"
            },
            "assignmentStrategy": {
              "type": "nativeEnum",
              "required": true,
              "modifiers": ""
            },
            "deadlineHours": {
              "type": "number",
              "required": false,
              "modifiers": ".int().positive().optional()"
            },
            "allowDelegation": {
              "type": "boolean",
              "required": true,
              "modifiers": ".default(false)"
            },
            "allowSkip": {
              "type": "boolean",
              "required": true,
              "modifiers": ".default(false)"
            },
            "requiresSignature": {
              "type": "boolean",
              "required": true,
              "modifiers": ".default(false)"
            },
            "signatureType": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const createWorkflowDefinitionSchema = z.object({\n  name: z.string().min(1, 'Name is required'),\n  description: z.string().optional(),\n  workflowType: z.nativeEnum(WorkflowType),\n  version: z.string().optional(),\n  structure: z.object({\n    stages: z.array(z.object({\n      stageNumber: z.number().int().positive(),\n      stageName: z.string().min(1),\n      description: z.string().optional(),\n      approvalType: z.nativeEnum(ApprovalType),\n      minimumApprovals: z.number().int().optional(),\n      approvalThreshold: z.number().int().optional(),\n      requiredRoles: z.array(z.string()),\n      optionalRoles: z.array(z.string()),\n      assignmentStrategy: z.nativeEnum(AssignmentStrategy),\n      deadlineHours: z.number().int().positive().optional(),\n      allowDelegation: z.boolean().default(false),\n      allowSkip: z.boolean().default(false),\n      requiresSignature: z.boolean().default(false),\n      signatureType: z.string().optional()\n    })"
        },
        {
          "name": "updateWorkflowDefinitionSchema",
          "type": "body",
          "schema": {
            "name": {
              "type": "string",
              "required": false,
              "modifiers": ".min(1).optional()"
            },
            "description": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "isActive": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional()"
            },
            "structure": {
              "type": "object",
              "required": true,
              "modifiers": ".int().positive()"
            },
            "stageName": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            },
            "approvalType": {
              "type": "nativeEnum",
              "required": true,
              "modifiers": ""
            },
            "minimumApprovals": {
              "type": "number",
              "required": false,
              "modifiers": ".int().optional()"
            },
            "approvalThreshold": {
              "type": "number",
              "required": false,
              "modifiers": ".int().optional()"
            },
            "requiredRoles": {
              "type": "array",
              "required": true,
              "modifiers": ")"
            },
            "optionalRoles": {
              "type": "array",
              "required": true,
              "modifiers": ")"
            },
            "assignmentStrategy": {
              "type": "nativeEnum",
              "required": true,
              "modifiers": ""
            },
            "deadlineHours": {
              "type": "number",
              "required": false,
              "modifiers": ".int().positive().optional()"
            },
            "allowDelegation": {
              "type": "boolean",
              "required": true,
              "modifiers": ".default(false)"
            },
            "allowSkip": {
              "type": "boolean",
              "required": true,
              "modifiers": ".default(false)"
            },
            "requiresSignature": {
              "type": "boolean",
              "required": true,
              "modifiers": ".default(false)"
            },
            "signatureType": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const updateWorkflowDefinitionSchema = z.object({\n  name: z.string().min(1).optional(),\n  description: z.string().optional(),\n  isActive: z.boolean().optional(),\n  structure: z.object({\n    stages: z.array(z.object({\n      stageNumber: z.number().int().positive(),\n      stageName: z.string().min(1),\n      description: z.string().optional(),\n      approvalType: z.nativeEnum(ApprovalType),\n      minimumApprovals: z.number().int().optional(),\n      approvalThreshold: z.number().int().optional(),\n      requiredRoles: z.array(z.string()),\n      optionalRoles: z.array(z.string()),\n      assignmentStrategy: z.nativeEnum(AssignmentStrategy),\n      deadlineHours: z.number().int().positive().optional(),\n      allowDelegation: z.boolean().default(false),\n      allowSkip: z.boolean().default(false),\n      requiresSignature: z.boolean().default(false),\n      signatureType: z.string().optional()\n    })"
        },
        {
          "name": "createWorkflowInstanceSchema",
          "type": "body",
          "schema": {
            "workflowId": {
              "type": "string",
              "required": true,
              "modifiers": ".uuid()"
            },
            "entityType": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            },
            "entityId": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            },
            "priority": {
              "type": "nativeEnum",
              "required": true,
              "modifiers": ".default('MEDIUM')"
            },
            "impactLevel": {
              "type": "nativeEnum",
              "required": false,
              "modifiers": ".optional()"
            },
            "contextData": {
              "type": "record",
              "required": false,
              "modifiers": ").optional()"
            },
            "deadline": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional().transform(val => val ? new Date(val) : undefined)"
            }
          },
          "zodDefinition": "const createWorkflowInstanceSchema = z.object({\n  workflowId: z.string().uuid(),\n  entityType: z.string().min(1),\n  entityId: z.string().min(1),\n  priority: z.nativeEnum(Priority).default('MEDIUM'),\n  impactLevel: z.nativeEnum(ImpactLevel).optional(),\n  contextData: z.record(z.any()).optional(),\n  deadline: z.string().datetime().optional().transform(val => val ? new Date(val) : undefined)\n})"
        },
        {
          "name": "approvalActionSchema",
          "type": "body",
          "schema": {
            "action": {
              "type": "nativeEnum",
              "required": true,
              "modifiers": ""
            },
            "comments": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "signatureId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "signatureType": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const approvalActionSchema = z.object({\n  action: z.nativeEnum(ApprovalAction),\n  comments: z.string().optional(),\n  signatureId: z.string().optional(),\n  signatureType: z.string().optional()\n})"
        },
        {
          "name": "delegationSchema",
          "type": "body",
          "schema": {
            "delegateeId": {
              "type": "string",
              "required": true,
              "modifiers": ".uuid()"
            },
            "reason": {
              "type": "string",
              "required": true,
              "modifiers": ".min(10"
            },
            "expiry": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional().transform(val => val ? new Date(val) : undefined)"
            }
          },
          "zodDefinition": "const delegationSchema = z.object({\n  delegateeId: z.string().uuid(),\n  reason: z.string().min(10, 'Reason must be at least 10 characters'),\n  expiry: z.string().datetime().optional().transform(val => val ? new Date(val) : undefined)\n})"
        },
        {
          "name": "workflowRuleSchema",
          "type": "body",
          "schema": {
            "ruleName": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            },
            "description": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "conditionField": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            },
            "conditionOperator": {
              "type": "nativeEnum",
              "required": true,
              "modifiers": ""
            },
            "conditionValue": {
              "type": "any",
              "required": true,
              "modifiers": ""
            },
            "actionType": {
              "type": "nativeEnum",
              "required": true,
              "modifiers": ""
            },
            "actionConfig": {
              "type": "record",
              "required": true,
              "modifiers": ")"
            },
            "priority": {
              "type": "number",
              "required": true,
              "modifiers": ".int().default(1)"
            },
            "isActive": {
              "type": "boolean",
              "required": true,
              "modifiers": ".default(true)"
            }
          },
          "zodDefinition": "const workflowRuleSchema = z.object({\n  ruleName: z.string().min(1),\n  description: z.string().optional(),\n  conditionField: z.string().min(1),\n  conditionOperator: z.nativeEnum(ConditionOperator),\n  conditionValue: z.any(),\n  actionType: z.nativeEnum(RuleActionType),\n  actionConfig: z.record(z.any()),\n  priority: z.number().int().default(1),\n  isActive: z.boolean().default(true)\n})"
        },
        {
          "name": "assignmentSchema",
          "type": "body",
          "schema": {
            "assignedToId": {
              "type": "string",
              "required": true,
              "modifiers": ".uuid()"
            },
            "assignedToRole": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "assignmentType": {
              "type": "string",
              "required": true,
              "modifiers": ""
            },
            "dueDate": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional().transform(val => val ? new Date(val) : undefined)"
            }
          },
          "zodDefinition": "const assignmentSchema = z.object({\n  assignedToId: z.string().uuid(),\n  assignedToRole: z.string().optional(),\n  assignmentType: z.string(),\n  dueDate: z.string().datetime().optional().transform(val => val ? new Date(val) : undefined)\n})"
        },
        {
          "name": "taskFiltersSchema",
          "type": "body",
          "schema": {
            "status": {
              "type": "array",
              "required": false,
              "modifiers": ").optional()"
            },
            "priority": {
              "type": "array",
              "required": false,
              "modifiers": ").optional()"
            },
            "entityType": {
              "type": "array",
              "required": false,
              "modifiers": ").optional()"
            },
            "dueDateBefore": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional().transform(val => val ? new Date(val) : undefined)"
            },
            "dueDateAfter": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional().transform(val => val ? new Date(val) : undefined)"
            },
            "overdue": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional()"
            },
            "assignedToId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "workflowType": {
              "type": "array",
              "required": false,
              "modifiers": ").optional()"
            },
            "page": {
              "type": "number",
              "required": true,
              "modifiers": ".int().positive().default(1)"
            },
            "limit": {
              "type": "number",
              "required": true,
              "modifiers": ".int().positive().max(100).default(20)"
            },
            "sortBy": {
              "type": "enum",
              "required": true,
              "modifiers": ".default('dueDate')"
            },
            "sortOrder": {
              "type": "enum",
              "required": true,
              "modifiers": ".default('asc')"
            }
          },
          "zodDefinition": "const taskFiltersSchema = z.object({\n  status: z.array(z.nativeEnum(TaskStatus)).optional(),\n  priority: z.array(z.nativeEnum(Priority)).optional(),\n  entityType: z.array(z.string()).optional(),\n  dueDateBefore: z.string().datetime().optional().transform(val => val ? new Date(val) : undefined),\n  dueDateAfter: z.string().datetime().optional().transform(val => val ? new Date(val) : undefined),\n  overdue: z.boolean().optional(),\n  assignedToId: z.string().optional(),\n  workflowType: z.array(z.nativeEnum(WorkflowType)).optional(),\n  page: z.number().int().positive().default(1),\n  limit: z.number().int().positive().max(100).default(20),\n  sortBy: z.enum(['dueDate', 'priority', 'createdAt']).default('dueDate'),\n  sortOrder: z.enum(['asc', 'desc']).default('asc')\n})"
        },
        {
          "name": "bulkActionSchema",
          "type": "body",
          "schema": {
            "assignmentIds": {
              "type": "array",
              "required": true,
              "modifiers": ".uuid())"
            },
            "action": {
              "type": "nativeEnum",
              "required": true,
              "modifiers": ""
            },
            "comments": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const bulkActionSchema = z.object({\n  assignmentIds: z.array(z.string().uuid()),\n  action: z.nativeEnum(ApprovalAction),\n  comments: z.string().optional()\n})"
        },
        {
          "name": "workflowTemplateSchema",
          "type": "body",
          "schema": {
            "name": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            },
            "description": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "workflowType": {
              "type": "nativeEnum",
              "required": true,
              "modifiers": ""
            },
            "category": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "templateDefinition": {
              "type": "object",
              "required": true,
              "modifiers": ".int().positive()"
            },
            "stageName": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            },
            "approvalType": {
              "type": "nativeEnum",
              "required": true,
              "modifiers": ""
            },
            "minimumApprovals": {
              "type": "number",
              "required": false,
              "modifiers": ".int().optional()"
            },
            "approvalThreshold": {
              "type": "number",
              "required": false,
              "modifiers": ".int().optional()"
            },
            "requiredRoles": {
              "type": "array",
              "required": true,
              "modifiers": ")"
            },
            "optionalRoles": {
              "type": "array",
              "required": true,
              "modifiers": ")"
            },
            "assignmentStrategy": {
              "type": "nativeEnum",
              "required": true,
              "modifiers": ""
            },
            "deadlineHours": {
              "type": "number",
              "required": false,
              "modifiers": ".int().positive().optional()"
            },
            "allowDelegation": {
              "type": "boolean",
              "required": true,
              "modifiers": ".default(false)"
            },
            "allowSkip": {
              "type": "boolean",
              "required": true,
              "modifiers": ".default(false)"
            },
            "requiresSignature": {
              "type": "boolean",
              "required": true,
              "modifiers": ".default(false)"
            },
            "signatureType": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const workflowTemplateSchema = z.object({\n  name: z.string().min(1),\n  description: z.string().optional(),\n  workflowType: z.nativeEnum(WorkflowType),\n  category: z.string().optional(),\n  templateDefinition: z.object({\n    stages: z.array(z.object({\n      stageNumber: z.number().int().positive(),\n      stageName: z.string().min(1),\n      description: z.string().optional(),\n      approvalType: z.nativeEnum(ApprovalType),\n      minimumApprovals: z.number().int().optional(),\n      approvalThreshold: z.number().int().optional(),\n      requiredRoles: z.array(z.string()),\n      optionalRoles: z.array(z.string()),\n      assignmentStrategy: z.nativeEnum(AssignmentStrategy),\n      deadlineHours: z.number().int().positive().optional(),\n      allowDelegation: z.boolean().default(false),\n      allowSkip: z.boolean().default(false),\n      requiresSignature: z.boolean().default(false),\n      signatureType: z.string().optional()\n    })"
        }
      ],
      "businessDomain": "Workflow Management",
      "description": "✅ GITHUB ISSUE #21: Advanced Multi-Stage Approval Workflow Engine"
    },
    {
      "filePath": "src/routes/materials.ts",
      "moduleName": "materials",
      "baseRoute": "/materials",
      "endpoints": [
        {
          "method": "GET",
          "path": "/api/v1/materials/classes",
          "description": "Get all material classes",
          "middleware": [
            "requireProductionAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/materials/classes/:id",
          "description": "Get all material classes",
          "middleware": [
            "requireProductionAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/materials/classes/:id/hierarchy",
          "description": "Get all material classes",
          "middleware": [
            "requireProductionAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/materials/classes/:id/children",
          "description": "Get all material classes",
          "middleware": [
            "requireProductionAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/materials/definitions",
          "description": "Get all material classes",
          "middleware": [
            "requireProductionAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/materials/definitions/:id",
          "description": "Get all material classes",
          "middleware": [
            "requireProductionAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/materials/definitions/number/:materialNumber",
          "description": "Get all material classes",
          "middleware": [
            "requireProductionAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/materials/definitions/:id",
          "description": "Get all material classes",
          "middleware": [
            "requireProductionAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/materials/definitions/:materialId/properties",
          "description": "Get all material classes",
          "middleware": [
            "requireProductionAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/materials/properties",
          "description": "Get all material classes",
          "middleware": [
            "requireProductionAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/materials/lots",
          "description": "Get all material classes",
          "middleware": [
            "requireProductionAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/materials/lots/:id",
          "description": "Get all material classes",
          "middleware": [
            "requireProductionAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/materials/lots/number/:lotNumber",
          "description": "Get all material classes",
          "middleware": [
            "requireProductionAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/materials/lots/:id",
          "description": "Get all material classes",
          "middleware": [
            "requireProductionAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/materials/lots/expiring/soon",
          "description": "Get all material classes",
          "middleware": [
            "requireProductionAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/materials/lots/expired/all",
          "description": "Get all material classes",
          "middleware": [
            "requireProductionAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/materials/lots/statistics/summary",
          "description": "Get all material classes",
          "middleware": [
            "requireProductionAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/materials/lots/:lotId/sublots",
          "description": "Get all material classes",
          "middleware": [
            "requireProductionAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/materials/lots/:lotId/split",
          "description": "Get all material classes",
          "middleware": [
            "requireProductionAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/materials/lots/merge",
          "middleware": [
            "requireProductionAccess",
            "asyncHandler"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/materials/lots/:lotId/genealogy",
          "description": "Get all material classes",
          "middleware": [
            "requireProductionAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/materials/lots/:lotId/genealogy/tree",
          "description": "Get all material classes",
          "middleware": [
            "requireProductionAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/materials/genealogy",
          "description": "Get all material classes",
          "middleware": [
            "requireProductionAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/materials/lots/:lotId/history",
          "description": "Get all material classes",
          "middleware": [
            "requireProductionAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/materials/lots/:lotId/state",
          "description": "Get all material classes",
          "middleware": [
            "requireProductionAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/materials/lots/:lotId/quarantine",
          "description": "Get all material classes",
          "middleware": [
            "requireProductionAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/materials/lots/:lotId/release",
          "description": "Get all material classes",
          "middleware": [
            "requireProductionAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/materials/lots/:lotId/reject",
          "description": "Get all material classes",
          "middleware": [
            "requireProductionAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/materials/work-orders/:workOrderId/usage",
          "description": "Get all material classes",
          "middleware": [
            "requireProductionAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/materials/inventory",
          "description": "Get all material classes",
          "middleware": [
            "requireProductionAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/materials/consumption",
          "description": "Get all material classes",
          "middleware": [
            "requireProductionAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "../middleware/auth",
        "../middleware/errorHandler",
        "../services/MaterialService"
      ],
      "services": [
        "MaterialService"
      ],
      "schemas": [],
      "businessDomain": "Material Management"
    },
    {
      "filePath": "src/routes/processSegments.ts",
      "moduleName": "processSegments",
      "baseRoute": "/process-segments",
      "endpoints": [
        {
          "method": "POST",
          "path": "/api/v1/process-segments",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/process-segments",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/process-segments/code/:segmentCode",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/process-segments/by-code/:operationCode",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/process-segments/by-classification/:classification",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/process-segments/search",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/process-segments/hierarchy/roots",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/process-segments/statistics/overview",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/process-segments/:id",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/process-segments/:id",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/process-segments/:id",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/process-segments/:id/hierarchy-tree",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/process-segments/:id/ancestors",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/process-segments/:id/children",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/process-segments/:id/parameters",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/process-segments/:id/parameters",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/process-segments/parameters/:parameterId",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/process-segments/parameters/:parameterId",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/process-segments/dependencies",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/process-segments/:id/dependencies",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/process-segments/dependencies/:dependencyId",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/process-segments/:id/personnel-specs",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/process-segments/:id/equipment-specs",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/process-segments/:id/material-specs",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/process-segments/:id/asset-specs",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/process-segments/:id/resource-specs",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/process-segments/:id/total-time",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/process-segments/:id/terminology",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/process-segments/:id/work-instruction",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/process-segments/:id/work-instruction",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/process-segments/:id/work-instruction",
          "middleware": [],
          "tags": [],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "../services/OperationService"
      ],
      "services": [
        "OperationService"
      ],
      "schemas": [],
      "businessDomain": "Production Management",
      "description": "Process Segment Routes"
    },
    {
      "filePath": "src/routes/l2EquipmentRoutes.ts",
      "moduleName": "l2Equipment",
      "baseRoute": "/l2-equipment",
      "endpoints": [
        {
          "method": "POST",
          "path": "/api/v1/l2-equipment/equipment/data/collect",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/l2-equipment/equipment/data/collect-batch",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/l2-equipment/equipment/data/query",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/l2-equipment/equipment/data/:equipmentId/latest",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/l2-equipment/equipment/data/:equipmentId/summary",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/l2-equipment/equipment/data/:equipmentId/trend",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/l2-equipment/equipment/data/utilization",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/l2-equipment/equipment/commands/issue",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/l2-equipment/equipment/commands/:commandId/status",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/l2-equipment/equipment/commands/:commandId/complete",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/l2-equipment/equipment/commands/:commandId/fail",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/l2-equipment/equipment/commands/:commandId/retry",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/l2-equipment/equipment/commands/query",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/l2-equipment/equipment/commands/:equipmentId/pending",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/l2-equipment/equipment/commands/:equipmentId/summary",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/l2-equipment/equipment/commands/check-timeouts",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/l2-equipment/equipment/material/movement",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/l2-equipment/equipment/material/query",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/l2-equipment/equipment/material/:equipmentId/summary",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/l2-equipment/equipment/material/traceability/:movementId",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/l2-equipment/equipment/material/:equipmentId/balance",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/l2-equipment/equipment/process/start",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/l2-equipment/equipment/process/:processDataCollectionId/complete",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/l2-equipment/equipment/process/:processDataCollectionId/parameters",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/l2-equipment/equipment/process/query",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/l2-equipment/equipment/process/:equipmentId/active",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/l2-equipment/equipment/process/:equipmentId/summary",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/l2-equipment/equipment/process/:equipmentId/trend",
          "middleware": [],
          "tags": [],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "../services/EquipmentDataCollectionService",
        "../services/EquipmentCommandService",
        "../services/MaterialMovementTrackingService",
        "../services/ProcessDataCollectionService",
        "@prisma/client"
      ],
      "services": [
        "EquipmentDataCollectionService",
        "EquipmentCommandService",
        "MaterialMovementTrackingService",
        "ProcessDataCollectionService"
      ],
      "schemas": [],
      "businessDomain": "Other",
      "description": "ISA-95 Level 2 (Equipment) Integration Routes"
    },
    {
      "filePath": "src/routes/products.ts",
      "moduleName": "products",
      "baseRoute": "/products",
      "endpoints": [
        {
          "method": "POST",
          "path": "/api/v1/products",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/products/:id",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/products/part-number/:partNumber",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/products",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/products/:id",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/products/:id",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/products/:id/specifications",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/products/:id/specifications",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/products/specifications/:specificationId",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/products/specifications/:specificationId",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/products/configurations/:configurationId/options",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/products/configurations/:configurationId",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/products/configurations/:configurationId",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/products/:id/configurations",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/products/:id/configurations",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/products/configurations/:configurationId",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/products/options/:optionId",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/products/options/:optionId",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/products/:id/lifecycle/transition",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/products/:id/lifecycle/history",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/products/:id/bom",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/products/:id/bom",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/products/:id/where-used",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/products/bom/:bomItemId",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/products/bom/:bomItemId",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/products/statistics/overview",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/products/configurable/list",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/products/lifecycle/:state",
          "middleware": [],
          "tags": [],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "../services/ProductService"
      ],
      "services": [
        "ProductService"
      ],
      "schemas": [],
      "businessDomain": "Material Management",
      "description": "Product Routes (ISA-95 Product Definition Model - Task 1.5)"
    },
    {
      "filePath": "src/routes/equipment.ts",
      "moduleName": "equipment",
      "baseRoute": "/equipment",
      "endpoints": [
        {
          "method": "GET",
          "path": "/api/v1/equipment",
          "description": "Get equipment list with filtering and pagination",
          "middleware": [
            "requireSiteAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/equipment/:id",
          "description": "Get equipment list with filtering and pagination",
          "middleware": [
            "requireSiteAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/equipment",
          "description": "Get equipment list with filtering and pagination",
          "middleware": [
            "requireSiteAccess"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/equipment/:id",
          "description": "Get equipment list with filtering and pagination",
          "middleware": [
            "requireSiteAccess"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/equipment/:id",
          "description": "Get equipment list with filtering and pagination",
          "middleware": [
            "requireSiteAccess"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/equipment/statistics",
          "description": "Get equipment list with filtering and pagination",
          "middleware": [
            "requireSiteAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/equipment/:id/status",
          "description": "Get equipment list with filtering and pagination",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/equipment/:id/history",
          "description": "Get equipment list with filtering and pagination",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/equipment/:id/status",
          "description": "Get equipment list with filtering and pagination",
          "middleware": [
            "requireSiteAccess"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/equipment/:id/maintenance",
          "description": "Get equipment list with filtering and pagination",
          "middleware": [
            "requireSiteAccess"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/equipment/:id/children",
          "description": "Get equipment list with filtering and pagination",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/equipment/:id/hierarchy",
          "description": "Get equipment list with filtering and pagination",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/equipment/:id/ancestors",
          "description": "Get equipment list with filtering and pagination",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/equipment/:id/state-history",
          "description": "Get equipment list with filtering and pagination",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/equipment/:id/state",
          "description": "Get equipment list with filtering and pagination",
          "middleware": [
            "requireSiteAccess"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/equipment/:id/oee",
          "description": "Get equipment list with filtering and pagination",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/equipment/:id/oee",
          "description": "Get equipment list with filtering and pagination",
          "middleware": [
            "requireSiteAccess"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/equipment/:id/oee/current",
          "description": "Get equipment list with filtering and pagination",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/equipment/:id/capabilities",
          "description": "Get equipment list with filtering and pagination",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/equipment/:id/capabilities",
          "description": "Get equipment list with filtering and pagination",
          "middleware": [
            "requireSiteAccess"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/equipment/:id/capabilities/:capabilityId",
          "description": "Get equipment list with filtering and pagination",
          "middleware": [
            "requireSiteAccess"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/equipment/:id/capabilities/:capabilityId",
          "description": "Get equipment list with filtering and pagination",
          "middleware": [
            "requireSiteAccess"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/equipment/by-capability/:capability",
          "description": "Get equipment list with filtering and pagination",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/equipment/:id/hierarchy-path",
          "description": "Get equipment list with filtering and pagination",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/equipment/oee/dashboard",
          "description": "Get equipment list with filtering and pagination",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/equipment/work-centers",
          "description": "Get equipment list with filtering and pagination",
          "middleware": [
            "requireSiteAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/equipment/work-centers",
          "description": "Get equipment list with filtering and pagination",
          "middleware": [
            "requireSiteAccess"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "zod",
        "../lib/database",
        "../middleware/auth",
        "../middleware/errorHandler",
        "../middleware/requestLogger",
        "../utils/logger",
        "../services/EquipmentService",
        "../services/OEECalculationService",
        "@prisma/client"
      ],
      "services": [
        "EquipmentService",
        "OEECalculationService"
      ],
      "schemas": [
        {
          "name": "querySchema",
          "type": "query",
          "schema": {
            "status": {
              "type": "enum",
              "required": false,
              "modifiers": ".optional()"
            },
            "equipmentClass": {
              "type": "enum",
              "required": false,
              "modifiers": ".optional()"
            },
            "equipmentType": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "type": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "search": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "page": {
              "type": "string",
              "required": false,
              "modifiers": ".regex(/^\\d+$/).transform(Number).optional()"
            },
            "limit": {
              "type": "string",
              "required": false,
              "modifiers": ".regex(/^\\d+$/).transform(Number).optional()"
            },
            "siteId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "areaId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "workCenterId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "parentEquipmentId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "includeRelations": {
              "type": "enum",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const querySchema = z.object({\n  status: z.enum(['OPERATIONAL', 'MAINTENANCE', 'DOWN', 'AVAILABLE']).optional(),\n  equipmentClass: z.enum(['PRODUCTION', 'MAINTENANCE', 'QUALITY', 'MATERIAL_HANDLING', 'LABORATORY', 'STORAGE', 'ASSEMBLY']).optional(),\n  equipmentType: z.string().optional(),\n  type: z.string().optional(),\n  search: z.string().optional(),\n  page: z.string().regex(/^\\d+$/).transform(Number).optional(),\n  limit: z.string().regex(/^\\d+$/).transform(Number).optional(),\n  siteId: z.string().optional(),\n  areaId: z.string().optional(),\n  workCenterId: z.string().optional(),\n  parentEquipmentId: z.string().optional(),\n  includeRelations: z.enum(['true', 'false']).optional()\n})"
        },
        {
          "name": "updateStatusSchema",
          "type": "body",
          "schema": {
            "status": {
              "type": "enum",
              "required": true,
              "modifiers": ""
            },
            "notes": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const updateStatusSchema = z.object({\n  status: z.enum(['OPERATIONAL', 'MAINTENANCE', 'DOWN']),\n  notes: z.string().optional()\n})"
        },
        {
          "name": "scheduleMaintenanceSchema",
          "type": "body",
          "schema": {
            "maintenanceDate": {
              "type": "string",
              "required": true,
              "modifiers": ".datetime()"
            },
            "notes": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const scheduleMaintenanceSchema = z.object({\n  maintenanceDate: z.string().datetime(),\n  notes: z.string().optional()\n})"
        }
      ],
      "businessDomain": "Equipment Management"
    },
    {
      "filePath": "src/routes/ecoRoutes.ts",
      "moduleName": "eco",
      "baseRoute": "/eco",
      "endpoints": [
        {
          "method": "GET",
          "path": "/api/v1/eco",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/eco",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/eco/:id",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/eco/:id",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/eco/:id",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/eco/number/:ecoNumber",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/eco/my-ecos",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/eco/:id/status",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/eco/:id/complete",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/eco/:id/analyze-impact",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/eco/:id/affected-documents",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/eco/:id/tasks",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/eco/:id/tasks",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/eco/tasks/:taskId/assign",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/eco/tasks/:taskId/complete",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/eco/:id/attachments",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/eco/:id/attachments",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/eco/crb/configuration",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/eco/crb/configuration",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/eco/:id/crb/schedule",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/eco/crb/agenda/:date",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/eco/crb/upcoming-meetings",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/eco/:id/effectivity",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/eco/effectivity/version",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/eco/:id/transition-plan",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/eco/:id/validate-effectivity",
          "middleware": [],
          "tags": [],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "@prisma/client",
        "../middleware/auth",
        "../services/ECOService",
        "../services/CRBService",
        "../services/EffectivityService",
        "../types/eco",
        "@prisma/client"
      ],
      "services": [
        "ECOService",
        "CRBService",
        "EffectivityService",
        "ecoService",
        "crbService",
        "effectivityService"
      ],
      "schemas": [],
      "businessDomain": "Other",
      "description": "✅ GITHUB ISSUE #22: ECO (Engineering Change Order) API Routes"
    },
    {
      "filePath": "src/routes/productionSchedules.ts",
      "moduleName": "productionSchedules",
      "baseRoute": "/production-schedules",
      "endpoints": [
        {
          "method": "POST",
          "path": "/api/v1/production-schedules",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/production-schedules/number/:scheduleNumber",
          "middleware": [
            "requireProductionAccess"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/production-schedules/:id",
          "middleware": [
            "requireProductionAccess"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/production-schedules",
          "middleware": [
            "requireProductionAccess"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/production-schedules/:id",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/production-schedules/:id",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/production-schedules/:id/entries",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/production-schedules/:id/entries",
          "middleware": [
            "requireProductionAccess"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/production-schedules/entries/:entryId",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/production-schedules/entries/:entryId/cancel",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/production-schedules/entries/:entryId/constraints",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/production-schedules/entries/:entryId/constraints",
          "middleware": [
            "requireProductionAccess"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/production-schedules/constraints/:constraintId",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/production-schedules/constraints/:constraintId/resolve",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/production-schedules/constraints/:constraintId/check",
          "middleware": [
            "requireProductionAccess"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/production-schedules/:id/state/transition",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/production-schedules/:id/state/history",
          "middleware": [
            "requireProductionAccess"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/production-schedules/:id/sequencing/priority",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/production-schedules/:id/sequencing/edd",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/production-schedules/:id/feasibility/check",
          "middleware": [
            "requireProductionAccess"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/production-schedules/entries/:entryId/dispatch",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/production-schedules/:id/dispatch/all",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/production-schedules/dispatch/ready",
          "middleware": [
            "requireProductionAccess"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/production-schedules/statistics/overview",
          "middleware": [
            "requireProductionAccess"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/production-schedules/state/:state",
          "middleware": [
            "requireProductionAccess"
          ],
          "tags": [],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "../services/ProductionScheduleService",
        "../middleware/auth"
      ],
      "services": [
        "scheduleService",
        "ProductionScheduleService"
      ],
      "schemas": [],
      "businessDomain": "Production Management",
      "description": "Production Schedule Routes (ISA-95 Production Scheduling - Task 1.6)"
    },
    {
      "filePath": "src/routes/workInstructions.ts",
      "moduleName": "workInstructions",
      "baseRoute": "/work-instructions",
      "endpoints": [
        {
          "method": "POST",
          "path": "/api/v1/work-instructions",
          "description": "Create a new work instruction",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/work-instructions",
          "description": "Create a new work instruction",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/work-instructions/:id",
          "description": "Create a new work instruction",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/work-instructions/:id",
          "description": "Create a new work instruction",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/work-instructions/:id",
          "description": "Create a new work instruction",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/work-instructions/:id/steps",
          "description": "Create a new work instruction",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/work-instructions/:id/steps/:stepId",
          "description": "Create a new work instruction",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/work-instructions/:id/steps/:stepId",
          "description": "Create a new work instruction",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/work-instructions/:id/approve",
          "description": "Create a new work instruction",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/work-instructions/:id/reject",
          "description": "Create a new work instruction",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/work-instructions/:id/steps/reorder",
          "description": "Create a new work instruction",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/work-instructions/part/:partId",
          "description": "Create a new work instruction",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/work-instructions/import/pdf",
          "description": "Create a new work instruction",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/work-instructions/import/docx",
          "description": "Create a new work instruction",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/work-instructions/:id/export/pdf",
          "description": "Create a new work instruction",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/work-instructions/:id/export/docx",
          "description": "Create a new work instruction",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/work-instructions/:id/export/pptx",
          "description": "Create a new work instruction",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/work-instructions/:id/media",
          "description": "Create a new work instruction",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/work-instructions/:id/media",
          "description": "Create a new work instruction",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/work-instructions/search",
          "description": "Create a new work instruction",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/work-instructions/:id/start-workflow",
          "description": "Create a new work instruction",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/work-instructions/:id/workflow-status",
          "description": "Create a new work instruction",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/work-instructions/:id/workflow-callback",
          "description": "Create a new work instruction",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/work-instructions/workflows/available",
          "description": "Create a new work instruction",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/work-instructions/:id/abort-workflow",
          "description": "Create a new work instruction",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "multer",
        "zod",
        "../services/WorkInstructionService",
        "../types/workInstruction",
        "../services/DocumentManagementService",
        "../services/MediaLibraryService",
        "../utils/logger",
        "../services/WorkflowEngineService",
        "../services/WorkflowDefinitionService",
        "@prisma/client"
      ],
      "services": [
        "workInstructionService",
        "WorkInstructionService",
        "DocumentManagementService",
        "MediaLibraryService",
        "documentService",
        "mediaService",
        "unifiedApprovalService",
        "WorkflowEngineService",
        "WorkflowDefinitionService",
        "workflowDefinitionService"
      ],
      "schemas": [
        {
          "name": "importMetadataSchema",
          "type": "body",
          "schema": {
            "title": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1"
            },
            "description": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "partId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "operationId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "tags": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "categories": {
              "type": "string",
              "required": false,
              "modifiers": ".optional() // JSON string array"
            }
          },
          "zodDefinition": "const importMetadataSchema = z.object({\n  title: z.string().min(1, 'Title is required'),\n  description: z.string().optional(),\n  partId: z.string().optional(),\n  operationId: z.string().optional(),\n  tags: z.string().optional(), // JSON string array\n  categories: z.string().optional() // JSON string array\n})"
        }
      ],
      "businessDomain": "Document Management"
    },
    {
      "filePath": "src/routes/toolDrawings.ts",
      "moduleName": "toolDrawings",
      "baseRoute": "/tool-drawings",
      "endpoints": [
        {
          "method": "POST",
          "path": "/api/v1/tool-drawings",
          "description": "Create a new tool drawing",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/tool-drawings",
          "description": "Create a new tool drawing",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/tool-drawings/:id",
          "description": "Create a new tool drawing",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/tool-drawings/:id",
          "description": "Create a new tool drawing",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/tool-drawings/:id",
          "description": "Create a new tool drawing",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/tool-drawings/:id/maintenance",
          "description": "Create a new tool drawing",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/tool-drawings/:id/maintenance",
          "description": "Create a new tool drawing",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/tool-drawings/maintenance/due",
          "description": "Create a new tool drawing",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/tool-drawings/:id/calibration",
          "description": "Create a new tool drawing",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/tool-drawings/:id/calibration",
          "description": "Create a new tool drawing",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/tool-drawings/calibration/due",
          "description": "Create a new tool drawing",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/tool-drawings/:id/calibration/status",
          "description": "Create a new tool drawing",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/tool-drawings/:id/usage",
          "description": "Create a new tool drawing",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/tool-drawings/:id/usage",
          "description": "Create a new tool drawing",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/tool-drawings/:id/usage/statistics",
          "description": "Create a new tool drawing",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/tool-drawings/inventory",
          "description": "Create a new tool drawing",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/tool-drawings/:id/availability",
          "description": "Create a new tool drawing",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/tool-drawings/:id/location",
          "description": "Create a new tool drawing",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/tool-drawings/:id/approve",
          "description": "Create a new tool drawing",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/tool-drawings/:id/reject",
          "description": "Create a new tool drawing",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/tool-drawings/part/:partId",
          "description": "Create a new tool drawing",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/tool-drawings/operation/:operationId",
          "description": "Create a new tool drawing",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/tool-drawings/tool-number/:toolNumber",
          "description": "Create a new tool drawing",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/tool-drawings/:id/media",
          "description": "Create a new tool drawing",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "multer",
        "zod",
        "../services/ToolDrawingService",
        "../utils/logger",
        "@prisma/client"
      ],
      "services": [
        "toolDrawingService",
        "ToolDrawingService",
        "MediaLibraryService"
      ],
      "schemas": [
        {
          "name": "createToolDrawingSchema",
          "type": "body",
          "schema": {
            "title": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1"
            },
            "description": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "toolType": {
              "type": "nativeEnum",
              "required": false,
              "modifiers": ".optional().default(ToolType.FIXTURE)"
            },
            "toolNumber": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "partId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "operationId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "manufacturer": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "model": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "serialNumber": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "specifications": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "dimensions": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "weight": {
              "type": "number",
              "required": false,
              "modifiers": ".optional()"
            },
            "material": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "hardnessRequirement": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "accuracy": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "tolerances": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "maintenanceInstructions": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "calibrationRequired": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional().default(false)"
            },
            "calibrationFrequencyDays": {
              "type": "number",
              "required": false,
              "modifiers": ".int().positive().optional()"
            },
            "safetyRequirements": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "storageRequirements": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "notes": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "tags": {
              "type": "array",
              "required": false,
              "modifiers": ").optional()"
            },
            "categories": {
              "type": "array",
              "required": false,
              "modifiers": ").optional()"
            }
          },
          "zodDefinition": "const createToolDrawingSchema = z.object({\n  title: z.string().min(1, 'Title is required'),\n  description: z.string().optional(),\n  toolType: z.nativeEnum(ToolType).optional().default(ToolType.FIXTURE),\n  toolNumber: z.string().optional(),\n  partId: z.string().optional(),\n  operationId: z.string().optional(),\n  manufacturer: z.string().optional(),\n  model: z.string().optional(),\n  serialNumber: z.string().optional(),\n  specifications: z.string().optional(),\n  dimensions: z.string().optional(),\n  weight: z.number().optional(),\n  material: z.string().optional(),\n  hardnessRequirement: z.string().optional(),\n  accuracy: z.string().optional(),\n  tolerances: z.string().optional(),\n  maintenanceInstructions: z.string().optional(),\n  calibrationRequired: z.boolean().optional().default(false),\n  calibrationFrequencyDays: z.number().int().positive().optional(),\n  safetyRequirements: z.string().optional(),\n  storageRequirements: z.string().optional(),\n  notes: z.string().optional(),\n  tags: z.array(z.string()).optional(),\n  categories: z.array(z.string()).optional()\n})"
        },
        {
          "name": "updateToolDrawingSchema",
          "type": "body",
          "schema": {
            "title": {
              "type": "string",
              "required": false,
              "modifiers": ".min(1).optional()"
            },
            "description": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "toolType": {
              "type": "nativeEnum",
              "required": false,
              "modifiers": ".optional()"
            },
            "toolNumber": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "partId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "operationId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "manufacturer": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "model": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "serialNumber": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "specifications": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "dimensions": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "weight": {
              "type": "number",
              "required": false,
              "modifiers": ".optional()"
            },
            "material": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "hardnessRequirement": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "accuracy": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "tolerances": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "maintenanceInstructions": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "calibrationRequired": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional()"
            },
            "calibrationFrequencyDays": {
              "type": "number",
              "required": false,
              "modifiers": ".int().positive().optional()"
            },
            "safetyRequirements": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "storageRequirements": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "notes": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "tags": {
              "type": "array",
              "required": false,
              "modifiers": ").optional()"
            },
            "categories": {
              "type": "array",
              "required": false,
              "modifiers": ").optional()"
            }
          },
          "zodDefinition": "const updateToolDrawingSchema = z.object({\n  title: z.string().min(1).optional(),\n  description: z.string().optional(),\n  toolType: z.nativeEnum(ToolType).optional(),\n  toolNumber: z.string().optional(),\n  partId: z.string().optional(),\n  operationId: z.string().optional(),\n  manufacturer: z.string().optional(),\n  model: z.string().optional(),\n  serialNumber: z.string().optional(),\n  specifications: z.string().optional(),\n  dimensions: z.string().optional(),\n  weight: z.number().optional(),\n  material: z.string().optional(),\n  hardnessRequirement: z.string().optional(),\n  accuracy: z.string().optional(),\n  tolerances: z.string().optional(),\n  maintenanceInstructions: z.string().optional(),\n  calibrationRequired: z.boolean().optional(),\n  calibrationFrequencyDays: z.number().int().positive().optional(),\n  safetyRequirements: z.string().optional(),\n  storageRequirements: z.string().optional(),\n  notes: z.string().optional(),\n  tags: z.array(z.string()).optional(),\n  categories: z.array(z.string()).optional()\n})"
        },
        {
          "name": "recordMaintenanceSchema",
          "type": "body",
          "schema": {
            "maintenanceType": {
              "type": "nativeEnum",
              "required": true,
              "modifiers": ""
            },
            "performedBy": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            },
            "description": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            },
            "partsReplaced": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "cost": {
              "type": "number",
              "required": false,
              "modifiers": ".nonnegative().optional()"
            },
            "downtime": {
              "type": "number",
              "required": false,
              "modifiers": ".int().nonnegative().optional()"
            },
            "nextMaintenanceDate": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional()"
            },
            "notes": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const recordMaintenanceSchema = z.object({\n  maintenanceType: z.nativeEnum(MaintenanceType),\n  performedBy: z.string().min(1),\n  description: z.string().min(1),\n  partsReplaced: z.string().optional(),\n  cost: z.number().nonnegative().optional(),\n  downtime: z.number().int().nonnegative().optional(),\n  nextMaintenanceDate: z.string().datetime().optional(),\n  notes: z.string().optional()\n})"
        },
        {
          "name": "recordCalibrationSchema",
          "type": "body",
          "schema": {
            "performedBy": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            },
            "calibrationStandard": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "results": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "passed": {
              "type": "boolean",
              "required": true,
              "modifiers": ""
            },
            "adjustmentsMade": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "nextCalibrationDate": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional()"
            },
            "certificateNumber": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "notes": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const recordCalibrationSchema = z.object({\n  performedBy: z.string().min(1),\n  calibrationStandard: z.string().optional(),\n  results: z.string().optional(),\n  passed: z.boolean(),\n  adjustmentsMade: z.string().optional(),\n  nextCalibrationDate: z.string().datetime().optional(),\n  certificateNumber: z.string().optional(),\n  notes: z.string().optional()\n})"
        },
        {
          "name": "recordUsageSchema",
          "type": "body",
          "schema": {
            "operatorId": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            },
            "operationId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "workOrderId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "partId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "quantity": {
              "type": "number",
              "required": false,
              "modifiers": ".int().positive().optional().default(1)"
            },
            "cycleCount": {
              "type": "number",
              "required": false,
              "modifiers": ".int().nonnegative().optional()"
            },
            "usageTime": {
              "type": "number",
              "required": false,
              "modifiers": ".int().nonnegative().optional()"
            },
            "condition": {
              "type": "enum",
              "required": true,
              "modifiers": ""
            },
            "notes": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const recordUsageSchema = z.object({\n  operatorId: z.string().min(1),\n  operationId: z.string().optional(),\n  workOrderId: z.string().optional(),\n  partId: z.string().optional(),\n  quantity: z.number().int().positive().optional().default(1),\n  cycleCount: z.number().int().nonnegative().optional(),\n  usageTime: z.number().int().nonnegative().optional(), // minutes\n  condition: z.enum(['EXCELLENT', 'GOOD', 'FAIR', 'POOR']),\n  notes: z.string().optional()\n})"
        }
      ],
      "businessDomain": "Document Management",
      "description": "Tool Drawing API Routes"
    },
    {
      "filePath": "src/routes/unifiedDocuments.ts",
      "moduleName": "unifiedDocuments",
      "baseRoute": "/documents",
      "endpoints": [
        {
          "method": "POST",
          "path": "/api/v1/documents/search",
          "description": "Search across all document types",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/documents/search",
          "description": "Search across all document types",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/documents/part/:partId",
          "description": "Search across all document types",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/documents/operation/:operationId",
          "description": "Search across all document types",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/documents/work-center/:workCenterId",
          "description": "Search across all document types",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/documents/impact-analysis/part/:partId",
          "description": "Search across all document types",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/documents/impact-analysis/operation/:operationId",
          "description": "Search across all document types",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/documents/impact-analysis/work-center/:workCenterId",
          "description": "Search across all document types",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/documents/bulk-update",
          "description": "Search across all document types",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/documents/bulk-approve",
          "description": "Search across all document types",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/documents/templates",
          "description": "Search across all document types",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/documents/templates",
          "description": "Search across all document types",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/documents/templates/:id",
          "description": "Search across all document types",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/documents/templates/:id",
          "description": "Search across all document types",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/documents/templates/:id",
          "description": "Search across all document types",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/documents/templates/:id/use",
          "description": "Search across all document types",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/documents/analytics/summary",
          "description": "Search across all document types",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/documents/analytics/trends",
          "description": "Search across all document types",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/documents/analytics/status-distribution",
          "description": "Search across all document types",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/documents/types",
          "description": "Search across all document types",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/documents/tags",
          "description": "Search across all document types",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/documents/categories",
          "description": "Search across all document types",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/documents/health-check",
          "description": "Search across all document types",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "zod",
        "../services/UnifiedDocumentService",
        "../utils/logger",
        "@prisma/client"
      ],
      "services": [
        "unifiedDocumentService",
        "UnifiedDocumentService"
      ],
      "schemas": [
        {
          "name": "searchDocumentsSchema",
          "type": "body",
          "schema": {
            "query": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "documentTypes": {
              "type": "array",
              "required": false,
              "modifiers": ").optional()"
            },
            "partId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "operationId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "workCenterId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "status": {
              "type": "array",
              "required": false,
              "modifiers": ").optional()"
            },
            "tags": {
              "type": "array",
              "required": false,
              "modifiers": ").optional()"
            },
            "categories": {
              "type": "array",
              "required": false,
              "modifiers": ").optional()"
            },
            "dateFrom": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional()"
            },
            "dateTo": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional()"
            },
            "createdBy": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "approvedBy": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "page": {
              "type": "number",
              "required": false,
              "modifiers": ".int().positive().optional().default(1)"
            },
            "pageSize": {
              "type": "number",
              "required": false,
              "modifiers": ".int().positive().max(100).optional().default(25)"
            },
            "sortBy": {
              "type": "enum",
              "required": false,
              "modifiers": ".optional().default('updatedAt')"
            },
            "sortOrder": {
              "type": "enum",
              "required": false,
              "modifiers": ".optional().default('desc')"
            }
          },
          "zodDefinition": "const searchDocumentsSchema = z.object({\n  query: z.string().optional(),\n  documentTypes: z.array(z.nativeEnum(DocumentType)).optional(),\n  partId: z.string().optional(),\n  operationId: z.string().optional(),\n  workCenterId: z.string().optional(),\n  status: z.array(z.string()).optional(),\n  tags: z.array(z.string()).optional(),\n  categories: z.array(z.string()).optional(),\n  dateFrom: z.string().datetime().optional(),\n  dateTo: z.string().datetime().optional(),\n  createdBy: z.string().optional(),\n  approvedBy: z.string().optional(),\n  page: z.number().int().positive().optional().default(1),\n  pageSize: z.number().int().positive().max(100).optional().default(25),\n  sortBy: z.enum(['createdAt', 'updatedAt', 'title', 'documentNumber', 'status']).optional().default('updatedAt'),\n  sortOrder: z.enum(['asc', 'desc']).optional().default('desc')\n})"
        },
        {
          "name": "bulkUpdateSchema",
          "type": "body",
          "schema": {
            "documentIds": {
              "type": "array",
              "required": true,
              "modifiers": ").min(1"
            },
            "updates": {
              "type": "object",
              "required": false,
              "modifiers": ").optional()"
            },
            "categories": {
              "type": "array",
              "required": false,
              "modifiers": ").optional()"
            },
            "status": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const bulkUpdateSchema = z.object({\n  documentIds: z.array(z.string()).min(1, 'At least one document ID is required'),\n  updates: z.object({\n    tags: z.array(z.string()).optional(),\n    categories: z.array(z.string()).optional(),\n    status: z.string().optional()\n  })"
        },
        {
          "name": "createTemplateSchema",
          "type": "body",
          "schema": {
            "name": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1"
            },
            "description": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "documentType": {
              "type": "nativeEnum",
              "required": true,
              "modifiers": ""
            },
            "templateData": {
              "type": "record",
              "required": true,
              "modifiers": ")"
            },
            "tags": {
              "type": "array",
              "required": false,
              "modifiers": ").optional()"
            },
            "categories": {
              "type": "array",
              "required": false,
              "modifiers": ").optional()"
            },
            "isPublic": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional().default(false)"
            }
          },
          "zodDefinition": "const createTemplateSchema = z.object({\n  name: z.string().min(1, 'Template name is required'),\n  description: z.string().optional(),\n  documentType: z.nativeEnum(DocumentType),\n  templateData: z.record(z.any()),\n  tags: z.array(z.string()).optional(),\n  categories: z.array(z.string()).optional(),\n  isPublic: z.boolean().optional().default(false)\n})"
        },
        {
          "name": "updateTemplateSchema",
          "type": "body",
          "schema": {
            "name": {
              "type": "string",
              "required": false,
              "modifiers": ".min(1).optional()"
            },
            "description": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "templateData": {
              "type": "record",
              "required": false,
              "modifiers": ").optional()"
            },
            "tags": {
              "type": "array",
              "required": false,
              "modifiers": ").optional()"
            },
            "categories": {
              "type": "array",
              "required": false,
              "modifiers": ").optional()"
            },
            "isPublic": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const updateTemplateSchema = z.object({\n  name: z.string().min(1).optional(),\n  description: z.string().optional(),\n  templateData: z.record(z.any()).optional(),\n  tags: z.array(z.string()).optional(),\n  categories: z.array(z.string()).optional(),\n  isPublic: z.boolean().optional()\n})"
        }
      ],
      "businessDomain": "Document Management",
      "description": "Unified Document API Routes"
    },
    {
      "filePath": "src/routes/fai.ts",
      "moduleName": "fai",
      "baseRoute": "/fai",
      "endpoints": [
        {
          "method": "POST",
          "path": "/api/v1/fai",
          "description": "Create a new FAI report",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/fai",
          "description": "Create a new FAI report",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/fai/:id",
          "description": "Create a new FAI report",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/fai/number/:faiNumber",
          "description": "Create a new FAI report",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/fai/:id",
          "description": "Create a new FAI report",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/fai/:id",
          "description": "Create a new FAI report",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/fai/:id/characteristics",
          "description": "Create a new FAI report",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/fai/:id/characteristics",
          "description": "Create a new FAI report",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/fai/:id/characteristics/:charId",
          "description": "Create a new FAI report",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/fai/:id/characteristics/:charId",
          "description": "Create a new FAI report",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/fai/:id/approve",
          "description": "Create a new FAI report",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/fai/:id/form1",
          "description": "Create a new FAI report",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/fai/:id/form2",
          "description": "Create a new FAI report",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/fai/:id/import-cmm/preview",
          "description": "Create a new FAI report",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/fai/:id/import-cmm",
          "description": "Create a new FAI report",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/fai/:id/import-cmm/validate",
          "description": "Create a new FAI report",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/fai/:id/generate-pdf",
          "description": "Create a new FAI report",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/fai/:id/download-pdf",
          "description": "Create a new FAI report",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/fai/:id/qif/plan",
          "description": "Create a new FAI report",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/fai/:id/qif/results",
          "description": "Create a new FAI report",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/fai/:id/qif/export",
          "description": "Create a new FAI report",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/fai/:id/qif/import",
          "description": "Create a new FAI report",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "../services/FAIService",
        "../services/CMMImportService",
        "../services/FAIRPDFService",
        "../types/fai",
        "../utils/logger"
      ],
      "services": [
        "faiService",
        "FAIService",
        "cmmImportService",
        "CMMImportService",
        "fairPDFService",
        "FAIRPDFService",
        "unifiedApprovalService"
      ],
      "schemas": [],
      "businessDomain": "Quality Management"
    },
    {
      "filePath": "src/routes/sops.ts",
      "moduleName": "sops",
      "baseRoute": "/sops",
      "endpoints": [
        {
          "method": "POST",
          "path": "/api/v1/sops",
          "description": "Create a new SOP",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/sops",
          "description": "Create a new SOP",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/sops/:id",
          "description": "Create a new SOP",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/sops/:id",
          "description": "Create a new SOP",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/sops/:id",
          "description": "Create a new SOP",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/sops/:id/steps",
          "description": "Create a new SOP",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/sops/steps/:stepId",
          "description": "Create a new SOP",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/sops/steps/:stepId",
          "description": "Create a new SOP",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/sops/:id/acknowledgments",
          "description": "Create a new SOP",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/sops/:id/acknowledgments",
          "description": "Create a new SOP",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/sops/:id/training-status/:userId",
          "description": "Create a new SOP",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/sops/:id/audits",
          "description": "Create a new SOP",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/sops/:id/audits",
          "description": "Create a new SOP",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/sops/due-for-review",
          "description": "Create a new SOP",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/sops/training-compliance",
          "description": "Create a new SOP",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/sops/:id/schedule-review",
          "description": "Create a new SOP",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/sops/:id/approve",
          "description": "Create a new SOP",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/sops/:id/reject",
          "description": "Create a new SOP",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/sops/part/:partId",
          "description": "Create a new SOP",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/sops/operation/:operationId",
          "description": "Create a new SOP",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/sops/department/:department",
          "description": "Create a new SOP",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/sops/:id/media",
          "description": "Create a new SOP",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "multer",
        "zod",
        "../services/SOPService",
        "../utils/logger",
        "@prisma/client"
      ],
      "services": [
        "sopService",
        "SOPService",
        "MediaLibraryService"
      ],
      "schemas": [
        {
          "name": "createSOPSchema",
          "type": "body",
          "schema": {
            "title": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            },
            "description": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "sopType": {
              "type": "nativeEnum",
              "required": false,
              "modifiers": ".optional().default(SOPType.SAFETY)"
            },
            "partId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "operationId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "department": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "scope": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "purpose": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "safetyRequirements": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "trainingRequired": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional().default(false)"
            },
            "reviewFrequencyDays": {
              "type": "number",
              "required": false,
              "modifiers": ".int().positive().optional().default(365)"
            },
            "notes": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "tags": {
              "type": "array",
              "required": false,
              "modifiers": ").optional()"
            },
            "categories": {
              "type": "array",
              "required": false,
              "modifiers": ").optional()"
            },
            "steps": {
              "type": "array",
              "required": true,
              "modifiers": ".int().positive()"
            },
            "instructions": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "estimatedTime": {
              "type": "number",
              "required": false,
              "modifiers": ".int().nonnegative().optional()"
            },
            "isRequired": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional().default(true)"
            },
            "safetyNotes": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "warningLevel": {
              "type": "enum",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const createSOPSchema = z.object({\n  title: z.string().min(1, 'Title is required'),\n  description: z.string().optional(),\n  sopType: z.nativeEnum(SOPType).optional().default(SOPType.SAFETY),\n  partId: z.string().optional(),\n  operationId: z.string().optional(),\n  department: z.string().optional(),\n  scope: z.string().optional(),\n  purpose: z.string().optional(),\n  safetyRequirements: z.string().optional(),\n  trainingRequired: z.boolean().optional().default(false),\n  reviewFrequencyDays: z.number().int().positive().optional().default(365),\n  notes: z.string().optional(),\n  tags: z.array(z.string()).optional(),\n  categories: z.array(z.string()).optional(),\n  steps: z.array(z.object({\n    stepNumber: z.number().int().positive(),\n    title: z.string().min(1),\n    description: z.string().optional(),\n    instructions: z.string().optional(),\n    estimatedTime: z.number().int().nonnegative().optional(),\n    isRequired: z.boolean().optional().default(true),\n    safetyNotes: z.string().optional(),\n    warningLevel: z.enum(['LOW', 'MEDIUM', 'HIGH', 'CRITICAL']).optional()\n  })"
        },
        {
          "name": "updateSOPSchema",
          "type": "body",
          "schema": {
            "title": {
              "type": "string",
              "required": false,
              "modifiers": ".min(1).optional()"
            },
            "description": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "sopType": {
              "type": "nativeEnum",
              "required": false,
              "modifiers": ".optional()"
            },
            "partId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "operationId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "department": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "scope": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "purpose": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "safetyRequirements": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "trainingRequired": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional()"
            },
            "reviewFrequencyDays": {
              "type": "number",
              "required": false,
              "modifiers": ".int().positive().optional()"
            },
            "notes": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "tags": {
              "type": "array",
              "required": false,
              "modifiers": ").optional()"
            },
            "categories": {
              "type": "array",
              "required": false,
              "modifiers": ").optional()"
            }
          },
          "zodDefinition": "const updateSOPSchema = z.object({\n  title: z.string().min(1).optional(),\n  description: z.string().optional(),\n  sopType: z.nativeEnum(SOPType).optional(),\n  partId: z.string().optional(),\n  operationId: z.string().optional(),\n  department: z.string().optional(),\n  scope: z.string().optional(),\n  purpose: z.string().optional(),\n  safetyRequirements: z.string().optional(),\n  trainingRequired: z.boolean().optional(),\n  reviewFrequencyDays: z.number().int().positive().optional(),\n  notes: z.string().optional(),\n  tags: z.array(z.string()).optional(),\n  categories: z.array(z.string()).optional()\n})"
        },
        {
          "name": "addSOPStepSchema",
          "type": "body",
          "schema": {
            "stepNumber": {
              "type": "number",
              "required": true,
              "modifiers": ".int().positive()"
            },
            "title": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            },
            "description": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "instructions": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "estimatedTime": {
              "type": "number",
              "required": false,
              "modifiers": ".int().nonnegative().optional()"
            },
            "isRequired": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional().default(true)"
            },
            "safetyNotes": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "warningLevel": {
              "type": "enum",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const addSOPStepSchema = z.object({\n  stepNumber: z.number().int().positive(),\n  title: z.string().min(1),\n  description: z.string().optional(),\n  instructions: z.string().optional(),\n  estimatedTime: z.number().int().nonnegative().optional(),\n  isRequired: z.boolean().optional().default(true),\n  safetyNotes: z.string().optional(),\n  warningLevel: z.enum(['LOW', 'MEDIUM', 'HIGH', 'CRITICAL']).optional()\n})"
        },
        {
          "name": "updateSOPStepSchema",
          "type": "body",
          "schema": {
            "stepNumber": {
              "type": "number",
              "required": false,
              "modifiers": ".int().positive().optional()"
            },
            "title": {
              "type": "string",
              "required": false,
              "modifiers": ".min(1).optional()"
            },
            "description": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "instructions": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "estimatedTime": {
              "type": "number",
              "required": false,
              "modifiers": ".int().nonnegative().optional()"
            },
            "isRequired": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional()"
            },
            "safetyNotes": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "warningLevel": {
              "type": "enum",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const updateSOPStepSchema = z.object({\n  stepNumber: z.number().int().positive().optional(),\n  title: z.string().min(1).optional(),\n  description: z.string().optional(),\n  instructions: z.string().optional(),\n  estimatedTime: z.number().int().nonnegative().optional(),\n  isRequired: z.boolean().optional(),\n  safetyNotes: z.string().optional(),\n  warningLevel: z.enum(['LOW', 'MEDIUM', 'HIGH', 'CRITICAL']).optional()\n})"
        },
        {
          "name": "createSOPAcknowledgmentSchema",
          "type": "body",
          "schema": {
            "userId": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            },
            "acknowledgmentType": {
              "type": "enum",
              "required": true,
              "modifiers": ""
            },
            "trainingScore": {
              "type": "number",
              "required": false,
              "modifiers": ".min(0).max(100).optional()"
            },
            "assessmentPassed": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional()"
            },
            "notes": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const createSOPAcknowledgmentSchema = z.object({\n  userId: z.string().min(1),\n  acknowledgmentType: z.enum(['READ', 'trained', 'certified']),\n  trainingScore: z.number().min(0).max(100).optional(),\n  assessmentPassed: z.boolean().optional(),\n  notes: z.string().optional()\n})"
        },
        {
          "name": "createSOPAuditSchema",
          "type": "body",
          "schema": {
            "auditorId": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            },
            "auditType": {
              "type": "enum",
              "required": true,
              "modifiers": ""
            },
            "findings": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "recommendations": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "score": {
              "type": "number",
              "required": false,
              "modifiers": ".min(0).max(100).optional()"
            },
            "nextAuditDate": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional()"
            }
          },
          "zodDefinition": "const createSOPAuditSchema = z.object({\n  auditorId: z.string().min(1),\n  auditType: z.enum(['compliance', 'effectiveness', 'training']),\n  findings: z.string().optional(),\n  recommendations: z.string().optional(),\n  score: z.number().min(0).max(100).optional(),\n  nextAuditDate: z.string().datetime().optional()\n})"
        }
      ],
      "businessDomain": "Document Management",
      "description": "Standard Operating Procedure (SOP) API Routes"
    },
    {
      "filePath": "src/routes/inspectionPlans.ts",
      "moduleName": "inspectionPlans",
      "baseRoute": "/inspection-plans",
      "endpoints": [
        {
          "method": "POST",
          "path": "/api/v1/inspection-plans",
          "description": "Create a new inspection plan",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/inspection-plans",
          "description": "Create a new inspection plan",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/inspection-plans/:id",
          "description": "Create a new inspection plan",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/inspection-plans/:id",
          "description": "Create a new inspection plan",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/inspection-plans/:id",
          "description": "Create a new inspection plan",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/inspection-plans/:id/characteristics",
          "description": "Create a new inspection plan",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/inspection-plans/characteristics/:characteristicId",
          "description": "Create a new inspection plan",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/inspection-plans/characteristics/:characteristicId",
          "description": "Create a new inspection plan",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/inspection-plans/:id/steps",
          "description": "Create a new inspection plan",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/inspection-plans/steps/:stepId",
          "description": "Create a new inspection plan",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/inspection-plans/:id/executions",
          "description": "Create a new inspection plan",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/inspection-plans/executions/:executionId/results",
          "description": "Create a new inspection plan",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/inspection-plans/executions/:executionId/complete",
          "description": "Create a new inspection plan",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/inspection-plans/:id/executions",
          "description": "Create a new inspection plan",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/inspection-plans/:id/statistics",
          "description": "Create a new inspection plan",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/inspection-plans/statistics/summary",
          "description": "Create a new inspection plan",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/inspection-plans/:id/approve",
          "description": "Create a new inspection plan",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/inspection-plans/:id/reject",
          "description": "Create a new inspection plan",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/inspection-plans/part/:partId",
          "description": "Create a new inspection plan",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/inspection-plans/operation/:operationId",
          "description": "Create a new inspection plan",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/inspection-plans/:id/media",
          "description": "Create a new inspection plan",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "multer",
        "zod",
        "../services/InspectionPlanService",
        "../utils/logger",
        "@prisma/client"
      ],
      "services": [
        "inspectionPlanService",
        "InspectionPlanService",
        "MediaLibraryService"
      ],
      "schemas": [
        {
          "name": "createInspectionPlanSchema",
          "type": "body",
          "schema": {
            "title": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1"
            },
            "description": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "partId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "operationId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "inspectionType": {
              "type": "nativeEnum",
              "required": false,
              "modifiers": ".optional().default(InspectionType.INCOMING)"
            },
            "frequency": {
              "type": "nativeEnum",
              "required": false,
              "modifiers": ".optional().default(InspectionFrequency.EVERY_PIECE)"
            },
            "sampleSize": {
              "type": "number",
              "required": false,
              "modifiers": ".int().positive().optional()"
            },
            "acceptanceLevel": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "safetyRequirements": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "equipmentRequired": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "notes": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "tags": {
              "type": "array",
              "required": false,
              "modifiers": ").optional()"
            },
            "categories": {
              "type": "array",
              "required": false,
              "modifiers": ").optional()"
            },
            "characteristics": {
              "type": "array",
              "required": true,
              "modifiers": ".min(1)"
            },
            "measurementType": {
              "type": "nativeEnum",
              "required": true,
              "modifiers": ""
            },
            "specification": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "tolerance": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "unitOfMeasure": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "targetValue": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "inspectionMethod": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "isRequired": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional().default(true)"
            }
          },
          "zodDefinition": "const createInspectionPlanSchema = z.object({\n  title: z.string().min(1, 'Title is required'),\n  description: z.string().optional(),\n  partId: z.string().optional(),\n  operationId: z.string().optional(),\n  inspectionType: z.nativeEnum(InspectionType).optional().default(InspectionType.INCOMING),\n  frequency: z.nativeEnum(InspectionFrequency).optional().default(InspectionFrequency.EVERY_PIECE),\n  sampleSize: z.number().int().positive().optional(),\n  acceptanceLevel: z.string().optional(),\n  safetyRequirements: z.string().optional(),\n  equipmentRequired: z.string().optional(),\n  notes: z.string().optional(),\n  tags: z.array(z.string()).optional(),\n  categories: z.array(z.string()).optional(),\n  characteristics: z.array(z.object({\n    characteristicName: z.string().min(1),\n    description: z.string().optional(),\n    measurementType: z.nativeEnum(MeasurementType),\n    specification: z.string().optional(),\n    tolerance: z.string().optional(),\n    unitOfMeasure: z.string().optional(),\n    targetValue: z.string().optional(),\n    inspectionMethod: z.string().optional(),\n    isRequired: z.boolean().optional().default(true),\n    notes: z.string().optional()\n  })"
        },
        {
          "name": "updateInspectionPlanSchema",
          "type": "body",
          "schema": {
            "title": {
              "type": "string",
              "required": false,
              "modifiers": ".min(1).optional()"
            },
            "description": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "partId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "operationId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "inspectionType": {
              "type": "nativeEnum",
              "required": false,
              "modifiers": ".optional()"
            },
            "frequency": {
              "type": "nativeEnum",
              "required": false,
              "modifiers": ".optional()"
            },
            "sampleSize": {
              "type": "number",
              "required": false,
              "modifiers": ".int().positive().optional()"
            },
            "acceptanceLevel": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "safetyRequirements": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "equipmentRequired": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "notes": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "tags": {
              "type": "array",
              "required": false,
              "modifiers": ").optional()"
            },
            "categories": {
              "type": "array",
              "required": false,
              "modifiers": ").optional()"
            }
          },
          "zodDefinition": "const updateInspectionPlanSchema = z.object({\n  title: z.string().min(1).optional(),\n  description: z.string().optional(),\n  partId: z.string().optional(),\n  operationId: z.string().optional(),\n  inspectionType: z.nativeEnum(InspectionType).optional(),\n  frequency: z.nativeEnum(InspectionFrequency).optional(),\n  sampleSize: z.number().int().positive().optional(),\n  acceptanceLevel: z.string().optional(),\n  safetyRequirements: z.string().optional(),\n  equipmentRequired: z.string().optional(),\n  notes: z.string().optional(),\n  tags: z.array(z.string()).optional(),\n  categories: z.array(z.string()).optional()\n})"
        },
        {
          "name": "addInspectionCharacteristicSchema",
          "type": "body",
          "schema": {
            "characteristicName": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            },
            "description": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "measurementType": {
              "type": "nativeEnum",
              "required": true,
              "modifiers": ""
            },
            "specification": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "tolerance": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "unitOfMeasure": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "targetValue": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "inspectionMethod": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "isRequired": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional().default(true)"
            },
            "notes": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const addInspectionCharacteristicSchema = z.object({\n  characteristicName: z.string().min(1),\n  description: z.string().optional(),\n  measurementType: z.nativeEnum(MeasurementType),\n  specification: z.string().optional(),\n  tolerance: z.string().optional(),\n  unitOfMeasure: z.string().optional(),\n  targetValue: z.string().optional(),\n  inspectionMethod: z.string().optional(),\n  isRequired: z.boolean().optional().default(true),\n  notes: z.string().optional()\n})"
        },
        {
          "name": "updateInspectionCharacteristicSchema",
          "type": "body",
          "schema": {
            "characteristicName": {
              "type": "string",
              "required": false,
              "modifiers": ".min(1).optional()"
            },
            "description": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "measurementType": {
              "type": "nativeEnum",
              "required": false,
              "modifiers": ".optional()"
            },
            "specification": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "tolerance": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "unitOfMeasure": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "targetValue": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "inspectionMethod": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "isRequired": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional()"
            },
            "notes": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const updateInspectionCharacteristicSchema = z.object({\n  characteristicName: z.string().min(1).optional(),\n  description: z.string().optional(),\n  measurementType: z.nativeEnum(MeasurementType).optional(),\n  specification: z.string().optional(),\n  tolerance: z.string().optional(),\n  unitOfMeasure: z.string().optional(),\n  targetValue: z.string().optional(),\n  inspectionMethod: z.string().optional(),\n  isRequired: z.boolean().optional(),\n  notes: z.string().optional()\n})"
        },
        {
          "name": "addInspectionStepSchema",
          "type": "body",
          "schema": {
            "stepNumber": {
              "type": "number",
              "required": true,
              "modifiers": ".int().positive()"
            },
            "title": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            },
            "description": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "instructions": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "estimatedTime": {
              "type": "number",
              "required": false,
              "modifiers": ".int().nonnegative().optional()"
            },
            "isRequired": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional().default(true)"
            },
            "safetyNotes": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "qualityNotes": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const addInspectionStepSchema = z.object({\n  stepNumber: z.number().int().positive(),\n  title: z.string().min(1),\n  description: z.string().optional(),\n  instructions: z.string().optional(),\n  estimatedTime: z.number().int().nonnegative().optional(),\n  isRequired: z.boolean().optional().default(true),\n  safetyNotes: z.string().optional(),\n  qualityNotes: z.string().optional()\n})"
        },
        {
          "name": "createInspectionExecutionSchema",
          "type": "body",
          "schema": {
            "inspectorId": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            },
            "batchNumber": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "lotNumber": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "workOrderId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "notes": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const createInspectionExecutionSchema = z.object({\n  inspectorId: z.string().min(1),\n  batchNumber: z.string().optional(),\n  lotNumber: z.string().optional(),\n  workOrderId: z.string().optional(),\n  notes: z.string().optional()\n})"
        },
        {
          "name": "recordInspectionResultSchema",
          "type": "body",
          "schema": {
            "characteristicId": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            },
            "measuredValue": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "result": {
              "type": "enum",
              "required": true,
              "modifiers": ""
            },
            "disposition": {
              "type": "enum",
              "required": false,
              "modifiers": ".optional()"
            },
            "notes": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const recordInspectionResultSchema = z.object({\n  characteristicId: z.string().min(1),\n  measuredValue: z.string().optional(),\n  result: z.enum(['PASS', 'FAIL', 'NA']),\n  disposition: z.enum(['ACCEPT', 'REJECT', 'REWORK', 'USE_AS_IS']).optional(),\n  notes: z.string().optional()\n})"
        }
      ],
      "businessDomain": "Quality Management",
      "description": "Inspection Plan API Routes"
    },
    {
      "filePath": "src/routes/setupSheets.ts",
      "moduleName": "setupSheets",
      "baseRoute": "/setup-sheets",
      "endpoints": [
        {
          "method": "POST",
          "path": "/api/v1/setup-sheets",
          "description": "Create a new setup sheet",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/setup-sheets",
          "description": "Create a new setup sheet",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/setup-sheets/:id",
          "description": "Create a new setup sheet",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/setup-sheets/:id",
          "description": "Create a new setup sheet",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/setup-sheets/:id",
          "description": "Create a new setup sheet",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/setup-sheets/:id/steps",
          "description": "Create a new setup sheet",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/setup-sheets/steps/:stepId",
          "description": "Create a new setup sheet",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/setup-sheets/steps/:stepId",
          "description": "Create a new setup sheet",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/setup-sheets/:id/parameters",
          "description": "Create a new setup sheet",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/setup-sheets/parameters/:parameterId",
          "description": "Create a new setup sheet",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/setup-sheets/:id/tools",
          "description": "Create a new setup sheet",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/setup-sheets/tools/:toolId",
          "description": "Create a new setup sheet",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/setup-sheets/:id/executions",
          "description": "Create a new setup sheet",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/setup-sheets/executions/:executionId/complete",
          "description": "Create a new setup sheet",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/setup-sheets/:id/executions",
          "description": "Create a new setup sheet",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/setup-sheets/:id/approve",
          "description": "Create a new setup sheet",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/setup-sheets/:id/reject",
          "description": "Create a new setup sheet",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/setup-sheets/part/:partId",
          "description": "Create a new setup sheet",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/setup-sheets/operation/:operationId",
          "description": "Create a new setup sheet",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/setup-sheets/:id/media",
          "description": "Create a new setup sheet",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "multer",
        "zod",
        "../services/SetupSheetService",
        "../utils/logger"
      ],
      "services": [
        "setupSheetService",
        "SetupSheetService",
        "MediaLibraryService"
      ],
      "schemas": [
        {
          "name": "createSetupSheetSchema",
          "type": "body",
          "schema": {
            "title": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            },
            "description": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "partId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "operationId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "machineId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "setupTime": {
              "type": "number",
              "required": false,
              "modifiers": ".int().nonnegative().optional()"
            },
            "teardownTime": {
              "type": "number",
              "required": false,
              "modifiers": ".int().nonnegative().optional()"
            },
            "safetyRequirements": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "qualityRequirements": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "notes": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "tags": {
              "type": "array",
              "required": false,
              "modifiers": ").optional()"
            },
            "categories": {
              "type": "array",
              "required": false,
              "modifiers": ").optional()"
            },
            "steps": {
              "type": "array",
              "required": true,
              "modifiers": ".int().positive()"
            },
            "instructions": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "estimatedTime": {
              "type": "number",
              "required": false,
              "modifiers": ".int().nonnegative().optional()"
            },
            "isRequired": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional().default(true)"
            },
            "safetyNotes": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "qualityNotes": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const createSetupSheetSchema = z.object({\n  title: z.string().min(1, 'Title is required'),\n  description: z.string().optional(),\n  partId: z.string().optional(),\n  operationId: z.string().optional(),\n  machineId: z.string().optional(),\n  setupTime: z.number().int().nonnegative().optional(),\n  teardownTime: z.number().int().nonnegative().optional(),\n  safetyRequirements: z.string().optional(),\n  qualityRequirements: z.string().optional(),\n  notes: z.string().optional(),\n  tags: z.array(z.string()).optional(),\n  categories: z.array(z.string()).optional(),\n  steps: z.array(z.object({\n    stepNumber: z.number().int().positive(),\n    title: z.string().min(1),\n    description: z.string().optional(),\n    instructions: z.string().optional(),\n    estimatedTime: z.number().int().nonnegative().optional(),\n    isRequired: z.boolean().optional().default(true),\n    safetyNotes: z.string().optional(),\n    qualityNotes: z.string().optional()\n  })"
        },
        {
          "name": "updateSetupSheetSchema",
          "type": "body",
          "schema": {
            "title": {
              "type": "string",
              "required": false,
              "modifiers": ".min(1).optional()"
            },
            "description": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "partId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "operationId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "machineId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "setupTime": {
              "type": "number",
              "required": false,
              "modifiers": ".int().nonnegative().optional()"
            },
            "teardownTime": {
              "type": "number",
              "required": false,
              "modifiers": ".int().nonnegative().optional()"
            },
            "safetyRequirements": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "qualityRequirements": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "notes": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "tags": {
              "type": "array",
              "required": false,
              "modifiers": ").optional()"
            },
            "categories": {
              "type": "array",
              "required": false,
              "modifiers": ").optional()"
            }
          },
          "zodDefinition": "const updateSetupSheetSchema = z.object({\n  title: z.string().min(1).optional(),\n  description: z.string().optional(),\n  partId: z.string().optional(),\n  operationId: z.string().optional(),\n  machineId: z.string().optional(),\n  setupTime: z.number().int().nonnegative().optional(),\n  teardownTime: z.number().int().nonnegative().optional(),\n  safetyRequirements: z.string().optional(),\n  qualityRequirements: z.string().optional(),\n  notes: z.string().optional(),\n  tags: z.array(z.string()).optional(),\n  categories: z.array(z.string()).optional()\n})"
        },
        {
          "name": "addSetupStepSchema",
          "type": "body",
          "schema": {
            "stepNumber": {
              "type": "number",
              "required": true,
              "modifiers": ".int().positive()"
            },
            "title": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            },
            "description": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "instructions": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "estimatedTime": {
              "type": "number",
              "required": false,
              "modifiers": ".int().nonnegative().optional()"
            },
            "isRequired": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional().default(true)"
            },
            "safetyNotes": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "qualityNotes": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const addSetupStepSchema = z.object({\n  stepNumber: z.number().int().positive(),\n  title: z.string().min(1),\n  description: z.string().optional(),\n  instructions: z.string().optional(),\n  estimatedTime: z.number().int().nonnegative().optional(),\n  isRequired: z.boolean().optional().default(true),\n  safetyNotes: z.string().optional(),\n  qualityNotes: z.string().optional()\n})"
        },
        {
          "name": "updateSetupStepSchema",
          "type": "body",
          "schema": {
            "stepNumber": {
              "type": "number",
              "required": false,
              "modifiers": ".int().positive().optional()"
            },
            "title": {
              "type": "string",
              "required": false,
              "modifiers": ".min(1).optional()"
            },
            "description": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "instructions": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "estimatedTime": {
              "type": "number",
              "required": false,
              "modifiers": ".int().nonnegative().optional()"
            },
            "isRequired": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional()"
            },
            "safetyNotes": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "qualityNotes": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const updateSetupStepSchema = z.object({\n  stepNumber: z.number().int().positive().optional(),\n  title: z.string().min(1).optional(),\n  description: z.string().optional(),\n  instructions: z.string().optional(),\n  estimatedTime: z.number().int().nonnegative().optional(),\n  isRequired: z.boolean().optional(),\n  safetyNotes: z.string().optional(),\n  qualityNotes: z.string().optional()\n})"
        },
        {
          "name": "addSetupParameterSchema",
          "type": "params",
          "schema": {
            "parameterName": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            },
            "targetValue": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            },
            "tolerance": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "unitOfMeasure": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "measurementMethod": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "isRequired": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional().default(true)"
            },
            "notes": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const addSetupParameterSchema = z.object({\n  parameterName: z.string().min(1),\n  targetValue: z.string().min(1),\n  tolerance: z.string().optional(),\n  unitOfMeasure: z.string().optional(),\n  measurementMethod: z.string().optional(),\n  isRequired: z.boolean().optional().default(true),\n  notes: z.string().optional()\n})"
        },
        {
          "name": "addSetupToolSchema",
          "type": "body",
          "schema": {
            "toolName": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            },
            "toolNumber": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "quantity": {
              "type": "number",
              "required": false,
              "modifiers": ".int().positive().optional().default(1)"
            },
            "isRequired": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional().default(true)"
            },
            "notes": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const addSetupToolSchema = z.object({\n  toolName: z.string().min(1),\n  toolNumber: z.string().optional(),\n  quantity: z.number().int().positive().optional().default(1),\n  isRequired: z.boolean().optional().default(true),\n  notes: z.string().optional()\n})"
        },
        {
          "name": "startSetupExecutionSchema",
          "type": "body",
          "schema": {
            "operatorId": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            },
            "machineId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "workOrderId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "lotNumber": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "notes": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const startSetupExecutionSchema = z.object({\n  operatorId: z.string().min(1),\n  machineId: z.string().optional(),\n  workOrderId: z.string().optional(),\n  lotNumber: z.string().optional(),\n  notes: z.string().optional()\n})"
        },
        {
          "name": "completeSetupExecutionSchema",
          "type": "body",
          "schema": {
            "actualSetupTime": {
              "type": "number",
              "required": false,
              "modifiers": ".int().nonnegative().optional()"
            },
            "actualTeardownTime": {
              "type": "number",
              "required": false,
              "modifiers": ".int().nonnegative().optional()"
            },
            "isFirstPieceGood": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional()"
            },
            "firstPieceNotes": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "completionNotes": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const completeSetupExecutionSchema = z.object({\n  actualSetupTime: z.number().int().nonnegative().optional(),\n  actualTeardownTime: z.number().int().nonnegative().optional(),\n  isFirstPieceGood: z.boolean().optional(),\n  firstPieceNotes: z.string().optional(),\n  completionNotes: z.string().optional()\n})"
        }
      ],
      "businessDomain": "Document Management",
      "description": "Setup Sheet API Routes"
    },
    {
      "filePath": "src/routes/b2mRoutes.ts",
      "moduleName": "b2m",
      "baseRoute": "/b2m",
      "endpoints": [
        {
          "method": "POST",
          "path": "/api/v1/b2m/production-performance/export/:workOrderId",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/b2m/production-performance/:messageId",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/b2m/production-performance/work-order/:workOrderId",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/b2m/production-performance/:messageId/retry",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/b2m/material-transactions/export",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/b2m/material-transactions/inbound",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/b2m/material-transactions/:messageId",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/b2m/material-transactions/part/:partId",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/b2m/material-transactions/work-order/:workOrderId",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/b2m/material-transactions/:messageId/retry",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/b2m/material-transactions/bulk-export/:workOrderId",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/b2m/personnel/export",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/b2m/personnel/inbound",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/b2m/personnel/:messageId",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/b2m/personnel/user/:userId",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/b2m/personnel/external/:externalId",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/b2m/personnel/:messageId/retry",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/b2m/personnel/bulk-sync",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/b2m/personnel/sync-all",
          "middleware": [],
          "tags": [],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "@prisma/client",
        "../middleware/auth",
        "../services/ProductionPerformanceExportService",
        "../services/MaterialTransactionService",
        "../services/PersonnelInfoSyncService"
      ],
      "services": [
        "productionPerformanceExportService",
        "ProductionPerformanceExportService",
        "MaterialTransactionService",
        "PersonnelInfoSyncService"
      ],
      "schemas": [],
      "businessDomain": "Other",
      "description": "B2M Integration API Routes"
    },
    {
      "filePath": "src/routes/ssoAdmin.ts",
      "moduleName": "ssoAdmin",
      "baseRoute": "/sso-admin",
      "endpoints": [
        {
          "method": "GET",
          "path": "/api/v1/sso-admin/providers",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/sso-admin/providers/:id",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/sso-admin/providers",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/sso-admin/providers/:id",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/sso-admin/providers/:id",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/sso-admin/providers/:id/test",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/sso-admin/discovery-rules",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/sso-admin/discovery-rules",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/sso-admin/discovery-rules/:id",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/sso-admin/discovery-rules/:id",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/sso-admin/discovery-rules/:id/test",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/sso-admin/sessions",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/sso-admin/sessions/:id",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/sso-admin/sessions/:id",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/sso-admin/users/:userId/sessions",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/sso-admin/dashboard",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/sso-admin/analytics",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/sso-admin/health",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "zod",
        "@prisma/client",
        "../middleware/errorHandler",
        "../middleware/auth",
        "../utils/logger",
        "../services/SsoProviderService",
        "../services/HomeRealmDiscoveryService",
        "../services/SsoSessionService"
      ],
      "services": [
        "SsoProviderService",
        "HomeRealmDiscoveryService",
        "SsoSessionService",
        "providerService",
        "discoveryService",
        "sessionService"
      ],
      "schemas": [
        {
          "name": "createProviderSchema",
          "type": "body",
          "schema": {
            "name": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1"
            },
            "type": {
              "type": "nativeEnum",
              "required": true,
              "modifiers": ""
            },
            "configId": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1"
            },
            "priority": {
              "type": "number",
              "required": true,
              "modifiers": ".int().min(0).default(0)"
            },
            "isActive": {
              "type": "boolean",
              "required": true,
              "modifiers": ".default(true)"
            },
            "isDefault": {
              "type": "boolean",
              "required": true,
              "modifiers": ".default(false)"
            },
            "domainRestrictions": {
              "type": "array",
              "required": true,
              "modifiers": ").default([])"
            },
            "groupRestrictions": {
              "type": "array",
              "required": true,
              "modifiers": ").default([])"
            },
            "metadata": {
              "type": "record",
              "required": true,
              "modifiers": ").default({"
            }
          },
          "zodDefinition": "const createProviderSchema = z.object({\n  name: z.string().min(1, 'Provider name is required'),\n  type: z.nativeEnum(SsoProviderType),\n  configId: z.string().min(1, 'Configuration ID is required'),\n  priority: z.number().int().min(0).default(0),\n  isActive: z.boolean().default(true),\n  isDefault: z.boolean().default(false),\n  domainRestrictions: z.array(z.string()).default([]),\n  groupRestrictions: z.array(z.string()).default([]),\n  metadata: z.record(z.any()).default({})"
        },
        {
          "name": "createDiscoveryRuleSchema",
          "type": "body",
          "schema": {
            "name": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1"
            },
            "pattern": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1"
            },
            "providerId": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1"
            },
            "priority": {
              "type": "number",
              "required": true,
              "modifiers": ".int().min(0).default(0)"
            },
            "isActive": {
              "type": "boolean",
              "required": true,
              "modifiers": ".default(true)"
            }
          },
          "zodDefinition": "const createDiscoveryRuleSchema = z.object({\n  name: z.string().min(1, 'Rule name is required'),\n  pattern: z.string().min(1, 'Pattern is required'),\n  providerId: z.string().min(1, 'Provider ID is required'),\n  priority: z.number().int().min(0).default(0),\n  isActive: z.boolean().default(true)\n})"
        }
      ],
      "businessDomain": "Authentication & Security",
      "description": "SSO Administration API Routes (Issue #134)"
    },
    {
      "filePath": "src/routes/activities.ts",
      "moduleName": "activities",
      "baseRoute": "/activities",
      "endpoints": [
        {
          "method": "POST",
          "path": "/api/v1/activities",
          "description": "Log a document activity",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/activities/document/:documentType/:documentId",
          "description": "Log a document activity",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/activities/user/:userId",
          "description": "Log a document activity",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/activities/feed",
          "description": "Log a document activity",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/activities/document/:documentType/:documentId/summary",
          "description": "Log a document activity",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/activities/user/:userId/summary",
          "description": "Log a document activity",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/activities/document-created",
          "description": "Log a document activity",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/activities/document-updated",
          "description": "Log a document activity",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/activities/document-approved",
          "description": "Log a document activity",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/activities/document-rejected",
          "description": "Log a document activity",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/activities/comment-created",
          "description": "Log a document activity",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/activities/annotation-created",
          "description": "Log a document activity",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/activities/user-accessed",
          "description": "Log a document activity",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/activities/content-change",
          "description": "Log a document activity",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/activities/statistics",
          "description": "Log a document activity",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/activities/cleanup",
          "description": "Log a document activity",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/activities/types",
          "description": "Log a document activity",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "zod",
        "../services/ActivityService",
        "../utils/logger",
        "@prisma/client"
      ],
      "services": [
        "activityService",
        "ActivityService",
        "CollaborationService"
      ],
      "schemas": [
        {
          "name": "logActivitySchema",
          "type": "body",
          "schema": {
            "documentType": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1"
            },
            "documentId": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1"
            },
            "activityType": {
              "type": "nativeEnum",
              "required": true,
              "modifiers": ""
            },
            "description": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1"
            },
            "details": {
              "type": "any",
              "required": false,
              "modifiers": ".optional()"
            },
            "relatedEntityType": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "relatedEntityId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "metadata": {
              "type": "any",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const logActivitySchema = z.object({\n  documentType: z.string().min(1, 'Document type is required'),\n  documentId: z.string().min(1, 'Document ID is required'),\n  activityType: z.nativeEnum(ActivityType),\n  description: z.string().min(1, 'Description is required').max(500, 'Description too long'),\n  details: z.any().optional(),\n  relatedEntityType: z.string().optional(),\n  relatedEntityId: z.string().optional(),\n  metadata: z.any().optional()\n})"
        },
        {
          "name": "getActivitiesSchema",
          "type": "body",
          "schema": {
            "documentType": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "documentId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "activityTypes": {
              "type": "array",
              "required": false,
              "modifiers": ").optional()"
            },
            "userId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "relatedEntityType": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "createdAfter": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional()"
            },
            "createdBefore": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional()"
            },
            "limit": {
              "type": "number",
              "required": false,
              "modifiers": ".int().positive().max(100).optional().default(25)"
            },
            "offset": {
              "type": "number",
              "required": false,
              "modifiers": ".int().nonnegative().optional().default(0)"
            }
          },
          "zodDefinition": "const getActivitiesSchema = z.object({\n  documentType: z.string().optional(),\n  documentId: z.string().optional(),\n  activityTypes: z.array(z.nativeEnum(ActivityType)).optional(),\n  userId: z.string().optional(),\n  relatedEntityType: z.string().optional(),\n  createdAfter: z.string().datetime().optional(),\n  createdBefore: z.string().datetime().optional(),\n  limit: z.number().int().positive().max(100).optional().default(25),\n  offset: z.number().int().nonnegative().optional().default(0)\n})"
        },
        {
          "name": "getStatisticsSchema",
          "type": "body",
          "schema": {
            "startDate": {
              "type": "string",
              "required": true,
              "modifiers": ".datetime()"
            },
            "endDate": {
              "type": "string",
              "required": true,
              "modifiers": ".datetime()"
            },
            "documentType": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const getStatisticsSchema = z.object({\n  startDate: z.string().datetime(),\n  endDate: z.string().datetime(),\n  documentType: z.string().optional()\n})"
        },
        {
          "name": "contentChangeSchema",
          "type": "body",
          "schema": {
            "documentType": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            },
            "documentId": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            },
            "changeData": {
              "type": "any",
              "required": true,
              "modifiers": ""
            }
          },
          "zodDefinition": "const contentChangeSchema = z.object({\n  documentType: z.string().min(1),\n  documentId: z.string().min(1),\n  changeData: z.any()\n})"
        }
      ],
      "businessDomain": "Collaboration",
      "description": "Document Activities API Routes"
    },
    {
      "filePath": "src/routes/reviews.ts",
      "moduleName": "reviews",
      "baseRoute": "/reviews",
      "endpoints": [
        {
          "method": "POST",
          "path": "/api/v1/reviews/assign",
          "description": "Assign a review to a user",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/reviews/bulk-assign",
          "description": "Assign a review to a user",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/reviews",
          "description": "Assign a review to a user",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/reviews/:reviewId",
          "description": "Assign a review to a user",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/reviews/:reviewId",
          "description": "Assign a review to a user",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/reviews/:reviewId",
          "description": "Assign a review to a user",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/reviews/:reviewId/complete",
          "description": "Assign a review to a user",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/reviews/:reviewId/start",
          "description": "Assign a review to a user",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/reviews/:reviewId/progress",
          "description": "Assign a review to a user",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/reviews/user/:userId/dashboard",
          "description": "Assign a review to a user",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/reviews/document/:documentType/:documentId",
          "description": "Assign a review to a user",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/reviews/overdue",
          "description": "Assign a review to a user",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/reviews/:reviewId/remind",
          "description": "Assign a review to a user",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/reviews/stats/summary",
          "description": "Assign a review to a user",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/reviews/stats/performance",
          "description": "Assign a review to a user",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/reviews/templates/:reviewType",
          "description": "Assign a review to a user",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/reviews/types",
          "description": "Assign a review to a user",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "zod",
        "../services/ReviewService",
        "../utils/logger",
        "@prisma/client"
      ],
      "services": [
        "reviewService",
        "ReviewService"
      ],
      "schemas": [
        {
          "name": "assignReviewSchema",
          "type": "body",
          "schema": {
            "documentType": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1"
            },
            "documentId": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1"
            },
            "reviewType": {
              "type": "nativeEnum",
              "required": true,
              "modifiers": ""
            },
            "assigneeId": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1"
            },
            "assigneeName": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1"
            },
            "dueDate": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional()"
            },
            "priority": {
              "type": "enum",
              "required": false,
              "modifiers": ".optional().default('MEDIUM')"
            },
            "instructions": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "checklist": {
              "type": "array",
              "required": true,
              "modifiers": ""
            },
            "title": {
              "type": "string",
              "required": true,
              "modifiers": ""
            },
            "description": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "isRequired": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional().default(false)"
            },
            "category": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const assignReviewSchema = z.object({\n  documentType: z.string().min(1, 'Document type is required'),\n  documentId: z.string().min(1, 'Document ID is required'),\n  reviewType: z.nativeEnum(ReviewType),\n  assigneeId: z.string().min(1, 'Assignee ID is required'),\n  assigneeName: z.string().min(1, 'Assignee name is required'),\n  dueDate: z.string().datetime().optional(),\n  priority: z.enum(['LOW', 'MEDIUM', 'HIGH', 'URGENT']).optional().default('MEDIUM'),\n  instructions: z.string().optional(),\n  checklist: z.array(z.object({\n    id: z.string(),\n    title: z.string(),\n    description: z.string().optional(),\n    isRequired: z.boolean().optional().default(false),\n    category: z.string().optional()\n  })"
        },
        {
          "name": "updateReviewSchema",
          "type": "body",
          "schema": {
            "status": {
              "type": "nativeEnum",
              "required": false,
              "modifiers": ".optional()"
            },
            "priority": {
              "type": "enum",
              "required": false,
              "modifiers": ".optional()"
            },
            "instructions": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "dueDate": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional()"
            },
            "customFields": {
              "type": "record",
              "required": false,
              "modifiers": ").optional()"
            }
          },
          "zodDefinition": "const updateReviewSchema = z.object({\n  status: z.nativeEnum(ReviewStatus).optional(),\n  priority: z.enum(['LOW', 'MEDIUM', 'HIGH', 'URGENT']).optional(),\n  instructions: z.string().optional(),\n  dueDate: z.string().datetime().optional(),\n  customFields: z.record(z.any()).optional()\n})"
        },
        {
          "name": "completeReviewSchema",
          "type": "body",
          "schema": {
            "outcome": {
              "type": "enum",
              "required": true,
              "modifiers": ""
            },
            "comments": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "checklist": {
              "type": "array",
              "required": true,
              "modifiers": ""
            },
            "completed": {
              "type": "boolean",
              "required": true,
              "modifiers": ""
            },
            "notes": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const completeReviewSchema = z.object({\n  outcome: z.enum(['APPROVED', 'REJECTED', 'NEEDS_CHANGES']),\n  comments: z.string().optional(),\n  checklist: z.array(z.object({\n    id: z.string(),\n    completed: z.boolean(),\n    notes: z.string().optional()\n  })"
        },
        {
          "name": "getReviewsSchema",
          "type": "body",
          "schema": {
            "status": {
              "type": "nativeEnum",
              "required": false,
              "modifiers": ".optional()"
            },
            "reviewType": {
              "type": "nativeEnum",
              "required": false,
              "modifiers": ".optional()"
            },
            "assigneeId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "assignerId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "documentType": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "priority": {
              "type": "enum",
              "required": false,
              "modifiers": ".optional()"
            },
            "overdue": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional()"
            },
            "dueDateAfter": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional()"
            },
            "dueDateBefore": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional()"
            },
            "createdAfter": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional()"
            },
            "createdBefore": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional()"
            },
            "limit": {
              "type": "number",
              "required": false,
              "modifiers": ".int().positive().max(100).optional().default(25)"
            },
            "offset": {
              "type": "number",
              "required": false,
              "modifiers": ".int().nonnegative().optional().default(0)"
            }
          },
          "zodDefinition": "const getReviewsSchema = z.object({\n  status: z.nativeEnum(ReviewStatus).optional(),\n  reviewType: z.nativeEnum(ReviewType).optional(),\n  assigneeId: z.string().optional(),\n  assignerId: z.string().optional(),\n  documentType: z.string().optional(),\n  priority: z.enum(['LOW', 'MEDIUM', 'HIGH', 'URGENT']).optional(),\n  overdue: z.boolean().optional(),\n  dueDateAfter: z.string().datetime().optional(),\n  dueDateBefore: z.string().datetime().optional(),\n  createdAfter: z.string().datetime().optional(),\n  createdBefore: z.string().datetime().optional(),\n  limit: z.number().int().positive().max(100).optional().default(25),\n  offset: z.number().int().nonnegative().optional().default(0)\n})"
        },
        {
          "name": "bulkAssignSchema",
          "type": "body",
          "schema": {
            "documentIds": {
              "type": "array",
              "required": true,
              "modifiers": ").min(1"
            },
            "reviewType": {
              "type": "nativeEnum",
              "required": true,
              "modifiers": ""
            },
            "assigneeIds": {
              "type": "array",
              "required": true,
              "modifiers": ").min(1"
            },
            "dueDate": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional()"
            },
            "priority": {
              "type": "enum",
              "required": false,
              "modifiers": ".optional().default('MEDIUM')"
            },
            "instructions": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const bulkAssignSchema = z.object({\n  documentIds: z.array(z.string()).min(1, 'At least one document ID is required'),\n  reviewType: z.nativeEnum(ReviewType),\n  assigneeIds: z.array(z.string()).min(1, 'At least one assignee is required'),\n  dueDate: z.string().datetime().optional(),\n  priority: z.enum(['LOW', 'MEDIUM', 'HIGH', 'URGENT']).optional().default('MEDIUM'),\n  instructions: z.string().optional()\n})"
        }
      ],
      "businessDomain": "Collaboration",
      "description": "Document Reviews API Routes"
    },
    {
      "filePath": "src/routes/workOrders.ts",
      "moduleName": "workOrders",
      "baseRoute": "/workorders",
      "endpoints": [
        {
          "method": "GET",
          "path": "/api/v1/workorders",
          "description": "Get work orders list with filtering and pagination",
          "middleware": [
            "requireSiteAccess",
            "requireProductionAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/workorders/:id",
          "description": "Get work orders list with filtering and pagination",
          "middleware": [
            "requireSiteAccess",
            "requireProductionAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/workorders",
          "description": "Get work orders list with filtering and pagination",
          "middleware": [
            "requirePermission"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/workorders/:id",
          "description": "Get work orders list with filtering and pagination",
          "middleware": [
            "requirePermission"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/workorders/:id",
          "description": "Get work orders list with filtering and pagination",
          "middleware": [
            "requirePermission"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/workorders/:id/release",
          "description": "Get work orders list with filtering and pagination",
          "middleware": [
            "requirePermission"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/workorders/:id/operations",
          "description": "Get work orders list with filtering and pagination",
          "middleware": [
            "requireProductionAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/workorders/operations/my-assignments",
          "description": "Get work orders list with filtering and pagination",
          "middleware": [
            "requirePermission"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/workorders/:id/operations/:operationNumber",
          "description": "Get work orders list with filtering and pagination",
          "middleware": [
            "requirePermission"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/workorders/:id/operations/:operationNumber/start",
          "description": "Get work orders list with filtering and pagination",
          "middleware": [
            "requirePermission"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/workorders/:id/operations/:operationNumber/record",
          "description": "Get work orders list with filtering and pagination",
          "middleware": [
            "requirePermission"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/workorders/:id/operations/:operationNumber/complete",
          "description": "Get work orders list with filtering and pagination",
          "middleware": [
            "requirePermission"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/workorders/:id/operations/:operationNumber/issues",
          "description": "Get work orders list with filtering and pagination",
          "middleware": [
            "requirePermission"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/workorders/dashboard/metrics",
          "description": "Get work orders list with filtering and pagination",
          "middleware": [
            "requireProductionAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/workorders/:id/assign",
          "description": "Get work orders list with filtering and pagination",
          "middleware": [
            "requirePermission"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/workorders/:id/status",
          "description": "Get work orders list with filtering and pagination",
          "middleware": [
            "requirePermission"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/workorders/team-queue",
          "description": "Get work orders list with filtering and pagination",
          "middleware": [
            "requirePermission"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "zod",
        "../services/WorkOrderService",
        "../types/workOrder",
        "../middleware/errorHandler",
        "../middleware/auth",
        "../middleware/requestLogger",
        "../utils/logger",
        "../lib/database"
      ],
      "services": [
        "WorkOrderService",
        "workOrderService"
      ],
      "schemas": [
        {
          "name": "createWorkOrderSchema",
          "type": "body",
          "schema": {
            "partNumber": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1"
            },
            "quantityOrdered": {
              "type": "number",
              "required": true,
              "modifiers": ".min(1"
            },
            "priority": {
              "type": "nativeEnum",
              "required": false,
              "modifiers": ".optional()"
            },
            "customerOrder": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "dueDate": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional()"
            },
            "siteId": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1"
            }
          },
          "zodDefinition": "const createWorkOrderSchema = z.object({\n  partNumber: z.string().min(1, 'Part number is required'),\n  quantityOrdered: z.number().min(1, 'Quantity must be greater than 0'),\n  priority: z.nativeEnum(WorkOrderPriority).optional(),\n  customerOrder: z.string().optional(),\n  dueDate: z.string().datetime().optional(),\n  siteId: z.string().min(1, 'Site ID is required')\n})"
        },
        {
          "name": "updateWorkOrderSchema",
          "type": "body",
          "schema": {
            "quantityOrdered": {
              "type": "number",
              "required": false,
              "modifiers": ".min(1).optional()"
            },
            "priority": {
              "type": "nativeEnum",
              "required": false,
              "modifiers": ".optional()"
            },
            "customerOrder": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "dueDate": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional()"
            },
            "scheduledStartDate": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional()"
            },
            "scheduledEndDate": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional()"
            }
          },
          "zodDefinition": "const updateWorkOrderSchema = z.object({\n  quantityOrdered: z.number().min(1).optional(),\n  priority: z.nativeEnum(WorkOrderPriority).optional(),\n  customerOrder: z.string().optional(),\n  dueDate: z.string().datetime().optional(),\n  scheduledStartDate: z.string().datetime().optional(),\n  scheduledEndDate: z.string().datetime().optional()\n})"
        },
        {
          "name": "querySchema",
          "type": "query",
          "schema": {
            "page": {
              "type": "string",
              "required": false,
              "modifiers": ".regex(/^\\d+$/).transform(Number).optional()"
            },
            "limit": {
              "type": "string",
              "required": false,
              "modifiers": ".regex(/^\\d+$/).transform(Number).optional()"
            },
            "status": {
              "type": "nativeEnum",
              "required": false,
              "modifiers": ".optional()"
            },
            "partNumber": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "siteId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "dueDateFrom": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional()"
            },
            "dueDateTo": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional()"
            },
            "priority": {
              "type": "nativeEnum",
              "required": false,
              "modifiers": ".optional()"
            },
            "search": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const querySchema = z.object({\n  page: z.string().regex(/^\\d+$/).transform(Number).optional(),\n  limit: z.string().regex(/^\\d+$/).transform(Number).optional(),\n  status: z.nativeEnum(WorkOrderStatus).optional(),\n  partNumber: z.string().optional(),\n  siteId: z.string().optional(),\n  dueDateFrom: z.string().datetime().optional(),\n  dueDateTo: z.string().datetime().optional(),\n  priority: z.nativeEnum(WorkOrderPriority).optional(),\n  search: z.string().optional()\n})"
        }
      ],
      "businessDomain": "Production Management"
    },
    {
      "filePath": "src/routes/collaboration.ts",
      "moduleName": "collaboration",
      "baseRoute": "/collaboration",
      "endpoints": [
        {
          "method": "POST",
          "path": "/api/v1/collaboration/sessions/start",
          "description": "Start an edit session for a document",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/collaboration/sessions/:sessionId/end",
          "description": "Start an edit session for a document",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/collaboration/sessions/:sessionId/heartbeat",
          "description": "Start an edit session for a document",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/collaboration/sessions/document/:documentType/:documentId",
          "description": "Start an edit session for a document",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/collaboration/conflicts/detect",
          "description": "Start an edit session for a document",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/collaboration/conflicts/:conflictId/resolve",
          "description": "Start an edit session for a document",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/collaboration/conflicts/document/:documentType/:documentId",
          "description": "Start an edit session for a document",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/collaboration/subscriptions",
          "description": "Start an edit session for a document",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/collaboration/subscriptions/:documentType/:documentId",
          "description": "Start an edit session for a document",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/collaboration/subscriptions/:documentType/:documentId",
          "description": "Start an edit session for a document",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/collaboration/state/:documentType/:documentId",
          "description": "Start an edit session for a document",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/collaboration/content-change",
          "description": "Start an edit session for a document",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/collaboration/stats/user/:userId",
          "description": "Start an edit session for a document",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/collaboration/events/stream",
          "description": "Start an edit session for a document",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/collaboration/conflict-types",
          "description": "Start an edit session for a document",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/collaboration/resolution-strategies",
          "description": "Start an edit session for a document",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "zod",
        "../services/CollaborationService",
        "../utils/logger",
        "@prisma/client"
      ],
      "services": [
        "collaborationService",
        "CollaborationService"
      ],
      "schemas": [
        {
          "name": "startSessionSchema",
          "type": "body",
          "schema": {
            "documentType": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1"
            },
            "documentId": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1"
            },
            "sessionData": {
              "type": "any",
              "required": false,
              "modifiers": ".optional()"
            },
            "metadata": {
              "type": "any",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const startSessionSchema = z.object({\n  documentType: z.string().min(1, 'Document type is required'),\n  documentId: z.string().min(1, 'Document ID is required'),\n  sessionData: z.any().optional(),\n  metadata: z.any().optional()\n})"
        },
        {
          "name": "detectConflictSchema",
          "type": "body",
          "schema": {
            "documentType": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1"
            },
            "documentId": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1"
            },
            "conflictType": {
              "type": "nativeEnum",
              "required": true,
              "modifiers": ""
            },
            "conflictData": {
              "type": "any",
              "required": true,
              "modifiers": ""
            },
            "affectedUsers": {
              "type": "array",
              "required": true,
              "modifiers": ").min(1"
            },
            "severity": {
              "type": "enum",
              "required": true,
              "modifiers": ""
            }
          },
          "zodDefinition": "const detectConflictSchema = z.object({\n  documentType: z.string().min(1, 'Document type is required'),\n  documentId: z.string().min(1, 'Document ID is required'),\n  conflictType: z.nativeEnum(ConflictType),\n  conflictData: z.any(),\n  affectedUsers: z.array(z.string()).min(1, 'At least one affected user is required'),\n  severity: z.enum(['LOW', 'MEDIUM', 'HIGH', 'CRITICAL'])\n})"
        },
        {
          "name": "resolveConflictSchema",
          "type": "body",
          "schema": {
            "conflictId": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1"
            },
            "resolutionStrategy": {
              "type": "nativeEnum",
              "required": true,
              "modifiers": ""
            },
            "resolutionData": {
              "type": "any",
              "required": true,
              "modifiers": ""
            },
            "notes": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const resolveConflictSchema = z.object({\n  conflictId: z.string().min(1, 'Conflict ID is required'),\n  resolutionStrategy: z.nativeEnum(ResolutionStrategy),\n  resolutionData: z.any(),\n  notes: z.string().optional()\n})"
        },
        {
          "name": "subscribeSchema",
          "type": "body",
          "schema": {
            "documentType": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1"
            },
            "documentId": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1"
            },
            "subscriptionTypes": {
              "type": "array",
              "required": true,
              "modifiers": ").min(1"
            },
            "preferences": {
              "type": "any",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const subscribeSchema = z.object({\n  documentType: z.string().min(1, 'Document type is required'),\n  documentId: z.string().min(1, 'Document ID is required'),\n  subscriptionTypes: z.array(z.string()).min(1, 'At least one subscription type is required'),\n  preferences: z.any().optional()\n})"
        },
        {
          "name": "contentChangeSchema",
          "type": "body",
          "schema": {
            "documentType": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            },
            "documentId": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            },
            "changeData": {
              "type": "any",
              "required": true,
              "modifiers": ""
            }
          },
          "zodDefinition": "const contentChangeSchema = z.object({\n  documentType: z.string().min(1),\n  documentId: z.string().min(1),\n  changeData: z.any()\n})"
        },
        {
          "name": "collaborationStatsSchema",
          "type": "body",
          "schema": {
            "startDate": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional()"
            },
            "endDate": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional()"
            }
          },
          "zodDefinition": "const collaborationStatsSchema = z.object({\n  startDate: z.string().datetime().optional(),\n  endDate: z.string().datetime().optional()\n})"
        }
      ],
      "businessDomain": "Collaboration",
      "description": "Collaboration API Routes"
    },
    {
      "filePath": "src/routes/notifications.ts",
      "moduleName": "notifications",
      "baseRoute": "/notifications",
      "endpoints": [
        {
          "method": "POST",
          "path": "/api/v1/notifications",
          "description": "Create a new notification",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/notifications/bulk",
          "description": "Create a new notification",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/notifications/user/:userId",
          "description": "Create a new notification",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/notifications/:notificationId/read",
          "description": "Create a new notification",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/notifications/user/:userId/read-all",
          "description": "Create a new notification",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/notifications/:notificationId",
          "description": "Create a new notification",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/notifications/comment-mention",
          "description": "Create a new notification",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/notifications/comment-reply",
          "description": "Create a new notification",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/notifications/review-assignment",
          "description": "Create a new notification",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/notifications/review-deadline",
          "description": "Create a new notification",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/notifications/document-update",
          "description": "Create a new notification",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/notifications/user/:userId/stats",
          "description": "Create a new notification",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/notifications/cleanup-expired",
          "description": "Create a new notification",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/notifications/overdue-reviews",
          "description": "Create a new notification",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/notifications/types",
          "description": "Create a new notification",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/notifications/channels",
          "description": "Create a new notification",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "zod",
        "../services/NotificationService",
        "../utils/logger",
        "@prisma/client"
      ],
      "services": [
        "notificationService",
        "NotificationService"
      ],
      "schemas": [
        {
          "name": "createNotificationSchema",
          "type": "body",
          "schema": {
            "userId": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1"
            },
            "type": {
              "type": "nativeEnum",
              "required": true,
              "modifiers": ""
            },
            "title": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1"
            },
            "message": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1"
            },
            "relatedEntityType": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "relatedEntityId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "relatedUserId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "actionUrl": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "metadata": {
              "type": "any",
              "required": false,
              "modifiers": ".optional()"
            },
            "channels": {
              "type": "array",
              "required": false,
              "modifiers": ").optional()"
            },
            "priority": {
              "type": "enum",
              "required": false,
              "modifiers": ".optional()"
            },
            "expiresAt": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional()"
            }
          },
          "zodDefinition": "const createNotificationSchema = z.object({\n  userId: z.string().min(1, 'User ID is required'),\n  type: z.nativeEnum(NotificationType),\n  title: z.string().min(1, 'Title is required').max(200, 'Title too long'),\n  message: z.string().min(1, 'Message is required').max(1000, 'Message too long'),\n  relatedEntityType: z.string().optional(),\n  relatedEntityId: z.string().optional(),\n  relatedUserId: z.string().optional(),\n  actionUrl: z.string().optional(),\n  metadata: z.any().optional(),\n  channels: z.array(z.nativeEnum(NotificationChannel)).optional(),\n  priority: z.enum(['LOW', 'MEDIUM', 'HIGH', 'URGENT']).optional(),\n  expiresAt: z.string().datetime().optional()\n})"
        },
        {
          "name": "bulkNotificationSchema",
          "type": "body",
          "schema": {
            "userIds": {
              "type": "array",
              "required": true,
              "modifiers": ").min(1"
            },
            "type": {
              "type": "nativeEnum",
              "required": true,
              "modifiers": ""
            },
            "title": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1"
            },
            "message": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1"
            },
            "relatedEntityType": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "relatedEntityId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "relatedUserId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "actionUrl": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "metadata": {
              "type": "any",
              "required": false,
              "modifiers": ".optional()"
            },
            "channels": {
              "type": "array",
              "required": false,
              "modifiers": ").optional()"
            },
            "priority": {
              "type": "enum",
              "required": false,
              "modifiers": ".optional()"
            },
            "expiresAt": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional()"
            }
          },
          "zodDefinition": "const bulkNotificationSchema = z.object({\n  userIds: z.array(z.string()).min(1, 'At least one user ID is required'),\n  type: z.nativeEnum(NotificationType),\n  title: z.string().min(1, 'Title is required').max(200, 'Title too long'),\n  message: z.string().min(1, 'Message is required').max(1000, 'Message too long'),\n  relatedEntityType: z.string().optional(),\n  relatedEntityId: z.string().optional(),\n  relatedUserId: z.string().optional(),\n  actionUrl: z.string().optional(),\n  metadata: z.any().optional(),\n  channels: z.array(z.nativeEnum(NotificationChannel)).optional(),\n  priority: z.enum(['LOW', 'MEDIUM', 'HIGH', 'URGENT']).optional(),\n  expiresAt: z.string().datetime().optional()\n})"
        },
        {
          "name": "getNotificationsSchema",
          "type": "body",
          "schema": {
            "types": {
              "type": "array",
              "required": false,
              "modifiers": ").optional()"
            },
            "status": {
              "type": "array",
              "required": false,
              "modifiers": ").optional()"
            },
            "isRead": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional()"
            },
            "priority": {
              "type": "array",
              "required": false,
              "modifiers": ").optional()"
            },
            "createdAfter": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional()"
            },
            "createdBefore": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional()"
            },
            "limit": {
              "type": "number",
              "required": false,
              "modifiers": ".int().positive().max(100).optional().default(25)"
            },
            "offset": {
              "type": "number",
              "required": false,
              "modifiers": ".int().nonnegative().optional().default(0)"
            }
          },
          "zodDefinition": "const getNotificationsSchema = z.object({\n  types: z.array(z.nativeEnum(NotificationType)).optional(),\n  status: z.array(z.nativeEnum(NotificationStatus)).optional(),\n  isRead: z.boolean().optional(),\n  priority: z.array(z.enum(['LOW', 'MEDIUM', 'HIGH', 'URGENT'])).optional(),\n  createdAfter: z.string().datetime().optional(),\n  createdBefore: z.string().datetime().optional(),\n  limit: z.number().int().positive().max(100).optional().default(25),\n  offset: z.number().int().nonnegative().optional().default(0)\n})"
        },
        {
          "name": "commentMentionNotificationSchema",
          "type": "body",
          "schema": {
            "mentionedUserId": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            },
            "mentionerName": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            },
            "commentText": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            },
            "documentType": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            },
            "documentId": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            },
            "commentId": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            }
          },
          "zodDefinition": "const commentMentionNotificationSchema = z.object({\n  mentionedUserId: z.string().min(1),\n  mentionerName: z.string().min(1),\n  commentText: z.string().min(1),\n  documentType: z.string().min(1),\n  documentId: z.string().min(1),\n  commentId: z.string().min(1)\n})"
        },
        {
          "name": "reviewAssignmentNotificationSchema",
          "type": "body",
          "schema": {
            "assigneeId": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            },
            "assigner": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            },
            "documentTitle": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            },
            "documentType": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            },
            "documentId": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            },
            "reviewId": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            },
            "dueDate": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional()"
            }
          },
          "zodDefinition": "const reviewAssignmentNotificationSchema = z.object({\n  assigneeId: z.string().min(1),\n  assigner: z.string().min(1),\n  documentTitle: z.string().min(1),\n  documentType: z.string().min(1),\n  documentId: z.string().min(1),\n  reviewId: z.string().min(1),\n  dueDate: z.string().datetime().optional()\n})"
        }
      ],
      "businessDomain": "Collaboration",
      "description": "Notifications API Routes"
    },
    {
      "filePath": "src/routes/spc.ts",
      "moduleName": "spc",
      "baseRoute": "/spc",
      "endpoints": [
        {
          "method": "POST",
          "path": "/api/v1/spc/configurations",
          "description": "Create SPC configuration for a parameter",
          "middleware": [
            "authMiddleware"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/spc/configurations/:parameterId",
          "description": "Create SPC configuration for a parameter",
          "middleware": [
            "authMiddleware"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/spc/configurations",
          "description": "Create SPC configuration for a parameter",
          "middleware": [
            "authMiddleware"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/spc/configurations/:parameterId",
          "description": "Create SPC configuration for a parameter",
          "middleware": [
            "authMiddleware"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/spc/configurations/:parameterId",
          "description": "Create SPC configuration for a parameter",
          "middleware": [
            "authMiddleware"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/spc/control-limits/xbar-r",
          "description": "Create SPC configuration for a parameter",
          "middleware": [
            "authMiddleware"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/spc/control-limits/xbar-s",
          "description": "Create SPC configuration for a parameter",
          "middleware": [
            "authMiddleware"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/spc/control-limits/imr",
          "description": "Create SPC configuration for a parameter",
          "middleware": [
            "authMiddleware"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/spc/control-limits/p-chart",
          "description": "Create SPC configuration for a parameter",
          "middleware": [
            "authMiddleware"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/spc/control-limits/c-chart",
          "description": "Create SPC configuration for a parameter",
          "middleware": [
            "authMiddleware"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/spc/capability",
          "description": "Create SPC configuration for a parameter",
          "middleware": [
            "authMiddleware"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/spc/evaluate-rules",
          "description": "Create SPC configuration for a parameter",
          "middleware": [
            "authMiddleware"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/spc/rule-violations/:parameterId",
          "description": "Create SPC configuration for a parameter",
          "middleware": [
            "authMiddleware"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/spc/rule-violations/:violationId/acknowledge",
          "description": "Create SPC configuration for a parameter",
          "middleware": [
            "authMiddleware"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/spc/rules",
          "description": "Create SPC configuration for a parameter",
          "middleware": [
            "authMiddleware"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/spc/analyze",
          "description": "Create SPC configuration for a parameter",
          "middleware": [
            "authMiddleware"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "../services/SPCService",
        "../services/WesternElectricRulesEngine",
        "@prisma/client",
        "../middleware/auth",
        "../utils/logger"
      ],
      "services": [
        "spcService",
        "SPCService"
      ],
      "schemas": [],
      "businessDomain": "Quality Management"
    },
    {
      "filePath": "src/routes/upload.ts",
      "moduleName": "upload",
      "baseRoute": "/upload",
      "endpoints": [
        {
          "method": "POST",
          "path": "/api/v1/upload/single",
          "description": "Upload a single file",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/upload/multiple",
          "description": "Upload a single file",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/upload/file",
          "description": "Upload a single file",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/upload/files",
          "description": "Upload a single file",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/upload/file/metadata",
          "description": "Upload a single file",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/upload/enhanced/single",
          "description": "Upload a single file",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/upload/enhanced/multiple",
          "description": "Upload a single file",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/upload/multipart/initialize",
          "description": "Upload a single file",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/upload/multipart/:uploadId/part/:partNumber",
          "description": "Upload a single file",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/upload/multipart/:uploadId/complete",
          "description": "Upload a single file",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/upload/multipart/:uploadId/abort",
          "description": "Upload a single file",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/upload/multipart/:uploadId/progress",
          "description": "Upload a single file",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/upload/file/:fileId/info",
          "description": "Upload a single file",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/upload/enhanced/file",
          "description": "Upload a single file",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/upload/statistics",
          "description": "Upload a single file",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/upload/cleanup",
          "description": "Upload a single file",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "../services/FileUploadService",
        "../services/MultipartUploadService",
        "../services/CloudStorageService",
        "../utils/logger"
      ],
      "services": [
        "fileUploadService",
        "FileUploadService",
        "multipartUploadService",
        "MultipartUploadService",
        "cloudStorageService",
        "CloudStorageService"
      ],
      "schemas": [],
      "businessDomain": "Document Management"
    },
    {
      "filePath": "src/routes/timeTracking.ts",
      "moduleName": "timeTracking",
      "baseRoute": "/time-tracking",
      "endpoints": [
        {
          "method": "POST",
          "path": "/api/v1/time-tracking/clock-in",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/time-tracking/clock-out/:timeEntryId",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/time-tracking/active-entries/:userId",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/time-tracking/stop-all/:userId",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/time-tracking/machine/start",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/time-tracking/machine/stop/:machineTimeEntryId",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/time-tracking/entries",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/time-tracking/entries/:id",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/time-tracking/entries/:id/edit",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/time-tracking/sites/:siteId/configuration",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/time-tracking/sites/:siteId/configuration",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/time-tracking/indirect-cost-codes",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/time-tracking/indirect-cost-codes",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/time-tracking/indirect-cost-codes/:id",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/time-tracking/indirect-cost-codes/:id",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "zod",
        "@prisma/client",
        "../services/TimeTrackingService",
        "../middleware/auth"
      ],
      "services": [
        "timeTrackingService",
        "TimeTrackingService"
      ],
      "schemas": [
        {
          "name": "clockInSchema",
          "type": "body",
          "schema": {
            "userId": {
              "type": "string",
              "required": true,
              "modifiers": ""
            },
            "workOrderId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "operationId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "indirectCodeId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "entrySource": {
              "type": "enum",
              "required": false,
              "modifiers": ".optional()"
            },
            "deviceId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "location": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const clockInSchema = z.object({\n  userId: z.string(),\n  workOrderId: z.string().optional(),\n  operationId: z.string().optional(),\n  indirectCodeId: z.string().optional(),\n  entrySource: z.enum(['MANUAL', 'KIOSK', 'MOBILE', 'MACHINE_AUTO', 'API', 'HISTORIAN']).optional(),\n  deviceId: z.string().optional(),\n  location: z.string().optional(),\n})"
        },
        {
          "name": "clockOutSchema",
          "type": "body",
          "schema": {
            "clockOutTime": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional()"
            }
          },
          "zodDefinition": "const clockOutSchema = z.object({\n  clockOutTime: z.string().datetime().optional(),\n})"
        },
        {
          "name": "machineTimeStartSchema",
          "type": "body",
          "schema": {
            "equipmentId": {
              "type": "string",
              "required": true,
              "modifiers": ""
            },
            "workOrderId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "operationId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "entrySource": {
              "type": "enum",
              "required": false,
              "modifiers": ".optional()"
            },
            "dataSource": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const machineTimeStartSchema = z.object({\n  equipmentId: z.string(),\n  workOrderId: z.string().optional(),\n  operationId: z.string().optional(),\n  entrySource: z.enum(['MANUAL', 'KIOSK', 'MOBILE', 'MACHINE_AUTO', 'API', 'HISTORIAN']).optional(),\n  dataSource: z.string().optional(),\n})"
        },
        {
          "name": "timeEntryFiltersSchema",
          "type": "body",
          "schema": {
            "userId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "workOrderId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "operationId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "status": {
              "type": "enum",
              "required": false,
              "modifiers": ".optional()"
            },
            "timeType": {
              "type": "enum",
              "required": false,
              "modifiers": ".optional()"
            },
            "startDate": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional()"
            },
            "endDate": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional()"
            }
          },
          "zodDefinition": "const timeEntryFiltersSchema = z.object({\n  userId: z.string().optional(),\n  workOrderId: z.string().optional(),\n  operationId: z.string().optional(),\n  status: z.enum(['ACTIVE', 'COMPLETED', 'PENDING_APPROVAL', 'APPROVED', 'REJECTED', 'EXPORTED']).optional(),\n  timeType: z.enum(['DIRECT_LABOR', 'INDIRECT', 'MACHINE']).optional(),\n  startDate: z.string().datetime().optional(),\n  endDate: z.string().datetime().optional(),\n  limit: z.coerce.number().min(1).max(100).optional(),\n  offset: z.coerce.number().min(0).optional(),\n})"
        },
        {
          "name": "editTimeEntrySchema",
          "type": "body",
          "schema": {
            "clockInTime": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional()"
            },
            "clockOutTime": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional()"
            },
            "editReason": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            }
          },
          "zodDefinition": "const editTimeEntrySchema = z.object({\n  clockInTime: z.string().datetime().optional(),\n  clockOutTime: z.string().datetime().optional(),\n  editReason: z.string().min(1),\n})"
        },
        {
          "name": "configurationUpdateSchema",
          "type": "body",
          "schema": {
            "timeTrackingEnabled": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional()"
            },
            "trackingGranularity": {
              "type": "enum",
              "required": false,
              "modifiers": ".optional()"
            },
            "costingModel": {
              "type": "enum",
              "required": false,
              "modifiers": ".optional()"
            },
            "allowMultiTasking": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional()"
            },
            "multiTaskingMode": {
              "type": "enum",
              "required": false,
              "modifiers": ".optional()"
            },
            "autoSubtractBreaks": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional()"
            },
            "standardBreakMinutes": {
              "type": "number",
              "required": false,
              "modifiers": ".min(0).optional()"
            },
            "requireBreakClockOut": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional()"
            },
            "overtimeThresholdHours": {
              "type": "number",
              "required": false,
              "modifiers": ".min(0).optional()"
            },
            "warnOnOvertime": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional()"
            },
            "enableMachineTracking": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional()"
            },
            "autoStartFromMachine": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional()"
            },
            "autoStopFromMachine": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional()"
            },
            "requireTimeApproval": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional()"
            },
            "approvalFrequency": {
              "type": "enum",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const configurationUpdateSchema = z.object({\n  timeTrackingEnabled: z.boolean().optional(),\n  trackingGranularity: z.enum(['NONE', 'WORK_ORDER', 'OPERATION']).optional(),\n  costingModel: z.enum(['LABOR_HOURS', 'MACHINE_HOURS', 'BOTH']).optional(),\n  allowMultiTasking: z.boolean().optional(),\n  multiTaskingMode: z.enum(['CONCURRENT', 'SPLIT_ALLOCATION']).optional(),\n  autoSubtractBreaks: z.boolean().optional(),\n  standardBreakMinutes: z.number().min(0).optional(),\n  requireBreakClockOut: z.boolean().optional(),\n  overtimeThresholdHours: z.number().min(0).optional(),\n  warnOnOvertime: z.boolean().optional(),\n  enableMachineTracking: z.boolean().optional(),\n  autoStartFromMachine: z.boolean().optional(),\n  autoStopFromMachine: z.boolean().optional(),\n  requireTimeApproval: z.boolean().optional(),\n  approvalFrequency: z.enum(['DAILY', 'WEEKLY', 'BIWEEKLY', 'NONE']).optional(),\n})"
        },
        {
          "name": "indirectCostCodeSchema",
          "type": "body",
          "schema": {
            "code": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1).max(20)"
            },
            "description": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            },
            "category": {
              "type": "enum",
              "required": true,
              "modifiers": ""
            },
            "costCenter": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "glAccount": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "siteId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "displayColor": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "displayIcon": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const indirectCostCodeSchema = z.object({\n  code: z.string().min(1).max(20),\n  description: z.string().min(1),\n  category: z.enum(['BREAK', 'LUNCH', 'TRAINING', 'MEETING', 'MAINTENANCE', 'SETUP', 'CLEANUP', 'WAITING', 'ADMINISTRATIVE', 'OTHER']),\n  costCenter: z.string().optional(),\n  glAccount: z.string().optional(),\n  siteId: z.string().optional(),\n  displayColor: z.string().optional(),\n  displayIcon: z.string().optional(),\n})"
        }
      ],
      "businessDomain": "Time Tracking",
      "description": "Time Tracking API Routes"
    },
    {
      "filePath": "src/routes/parameterFormulas.ts",
      "moduleName": "parameterFormulas",
      "baseRoute": "/parameter-formulas",
      "endpoints": [
        {
          "method": "POST",
          "path": "/api/v1/parameter-formulas",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/parameter-formulas/:id",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/parameter-formulas/:id",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/parameter-formulas/:id",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/parameter-formulas",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/parameter-formulas/:id/evaluate",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/parameter-formulas/evaluate-expression",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/parameter-formulas/validate",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/parameter-formulas/test",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/parameter-formulas/extract-dependencies",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "PATCH",
          "path": "/api/v1/parameter-formulas/:id/active",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/parameter-formulas/parameter/:parameterId",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/parameter-formulas/triggered/:parameterId",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/parameter-formulas/evaluate-triggered/:parameterId",
          "middleware": [],
          "tags": [],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "../services/FormulaEngine",
        "../utils/logger"
      ],
      "services": [],
      "schemas": [],
      "businessDomain": "Quality Management",
      "description": "Parameter Formulas Routes"
    },
    {
      "filePath": "src/routes/audit.ts",
      "moduleName": "audit",
      "baseRoute": "/audit",
      "endpoints": [
        {
          "method": "GET",
          "path": "/api/v1/audit/permission-usage",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/audit/permission-usage/stats",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/audit/security-events",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/audit/security-events/:eventId/resolve",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/audit/security-events/metrics",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/audit/user-sessions",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/audit/user-sessions/metrics",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/audit/reports/generate",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/audit/reports",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/audit/reports/:reportId/download",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/audit/reports/:reportId",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/audit/dashboard",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/audit/trends",
          "middleware": [
            "requirePermission"
          ],
          "tags": [],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "zod",
        "../utils/logger",
        "../middleware/errorHandler",
        "../middleware/auth",
        "../middleware/auditMiddleware",
        "../services/AuditingService",
        "@prisma/client",
        "../lib/database"
      ],
      "services": [
        "auditingService",
        "AuditingService"
      ],
      "schemas": [],
      "businessDomain": "Authentication & Security",
      "description": "Audit API Routes - GitHub Issue #127"
    },
    {
      "filePath": "src/routes/roleTemplates.ts",
      "moduleName": "roleTemplates",
      "baseRoute": "/role-templates",
      "endpoints": [
        {
          "method": "GET",
          "path": "/api/v1/role-templates",
          "description": "List role templates with filtering and pagination",
          "middleware": [
            "requirePermission",
            "authMiddleware"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/role-templates/:id",
          "description": "List role templates with filtering and pagination",
          "middleware": [
            "requirePermission",
            "authMiddleware"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/role-templates/code/:templateCode",
          "description": "List role templates with filtering and pagination",
          "middleware": [
            "requirePermission",
            "authMiddleware"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/role-templates",
          "description": "List role templates with filtering and pagination",
          "middleware": [
            "requirePermission",
            "authMiddleware"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/role-templates/:id",
          "description": "List role templates with filtering and pagination",
          "middleware": [
            "requirePermission",
            "authMiddleware"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/role-templates/:id",
          "description": "List role templates with filtering and pagination",
          "middleware": [
            "requirePermission",
            "authMiddleware"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/role-templates/:id/instantiate",
          "description": "List role templates with filtering and pagination",
          "middleware": [
            "requirePermission",
            "authMiddleware"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/role-templates/:id/usage-stats",
          "description": "List role templates with filtering and pagination",
          "middleware": [
            "requirePermission",
            "authMiddleware"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/role-templates/initialize-manufacturing",
          "description": "List role templates with filtering and pagination",
          "middleware": [
            "requireRole",
            "authMiddleware"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/role-templates/manufacturing/status",
          "description": "List role templates with filtering and pagination",
          "middleware": [
            "requirePermission",
            "authMiddleware"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/role-templates/manufacturing/create-missing",
          "description": "List role templates with filtering and pagination",
          "middleware": [
            "requireRole",
            "authMiddleware"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/role-templates/categories",
          "description": "List role templates with filtering and pagination",
          "middleware": [
            "requirePermission",
            "authMiddleware"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/role-templates/export",
          "description": "List role templates with filtering and pagination",
          "middleware": [
            "requirePermission",
            "authMiddleware"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "zod",
        "../middleware/auth",
        "../middleware/errorHandler",
        "../middleware/errorHandler",
        "../utils/logger",
        "../lib/database",
        "../services/RoleTemplateService",
        "../services/ManufacturingRoleTemplatesInitializer",
        "../types/roleTemplate"
      ],
      "services": [
        "RoleTemplateService",
        "roleTemplateService"
      ],
      "schemas": [
        {
          "name": "createRoleTemplateSchema",
          "type": "body",
          "schema": {
            "templateCode": {
              "type": "string",
              "required": true,
              "modifiers": ".min(3).max(50).regex(/^[A-Z0-9_-]+$/"
            },
            "templateName": {
              "type": "string",
              "required": true,
              "modifiers": ".min(3).max(100)"
            },
            "description": {
              "type": "string",
              "required": false,
              "modifiers": ".max(500).optional()"
            },
            "category": {
              "type": "enum",
              "required": true,
              "modifiers": ""
            },
            "isActive": {
              "type": "boolean",
              "required": true,
              "modifiers": ".default(true)"
            },
            "isGlobal": {
              "type": "boolean",
              "required": true,
              "modifiers": ".default(true)"
            },
            "version": {
              "type": "string",
              "required": true,
              "modifiers": ".default('1.0.0')"
            },
            "metadata": {
              "type": "record",
              "required": false,
              "modifiers": ").optional()"
            },
            "permissions": {
              "type": "array",
              "required": true,
              "modifiers": ""
            },
            "isRequired": {
              "type": "boolean",
              "required": true,
              "modifiers": ".default(true)"
            },
            "isOptional": {
              "type": "boolean",
              "required": true,
              "modifiers": ".default(false)"
            }
          },
          "zodDefinition": "const createRoleTemplateSchema = z.object({\n  templateCode: z.string().min(3).max(50).regex(/^[A-Z0-9_-]+$/, 'Template code must be uppercase alphanumeric with underscores/hyphens'),\n  templateName: z.string().min(3).max(100),\n  description: z.string().max(500).optional(),\n  category: z.enum(['PRODUCTION', 'QUALITY', 'MAINTENANCE', 'MANAGEMENT', 'ADMINISTRATION', 'ENGINEERING', 'SAFETY', 'COMPLIANCE', 'CUSTOM']),\n  isActive: z.boolean().default(true),\n  isGlobal: z.boolean().default(true),\n  version: z.string().default('1.0.0'),\n  metadata: z.record(z.any()).optional(),\n  permissions: z.array(z.object({\n    permissionId: z.string(),\n    isRequired: z.boolean().default(true),\n    isOptional: z.boolean().default(false),\n    metadata: z.record(z.any()).optional()\n  })"
        },
        {
          "name": "instantiateRoleTemplateSchema",
          "type": "body",
          "schema": {
            "templateId": {
              "type": "string",
              "required": true,
              "modifiers": ""
            },
            "roleName": {
              "type": "string",
              "required": true,
              "modifiers": ".min(3).max(100)"
            },
            "roleCode": {
              "type": "string",
              "required": false,
              "modifiers": ".max(50).optional()"
            },
            "description": {
              "type": "string",
              "required": false,
              "modifiers": ".max(500).optional()"
            },
            "instanceName": {
              "type": "string",
              "required": false,
              "modifiers": ".max(100).optional()"
            },
            "siteId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "customPermissions": {
              "type": "object",
              "required": false,
              "modifiers": ").optional()"
            },
            "removePermissions": {
              "type": "array",
              "required": false,
              "modifiers": ").optional()"
            }
          },
          "zodDefinition": "const instantiateRoleTemplateSchema = z.object({\n  templateId: z.string(),\n  roleName: z.string().min(3).max(100),\n  roleCode: z.string().max(50).optional(),\n  description: z.string().max(500).optional(),\n  instanceName: z.string().max(100).optional(),\n  siteId: z.string().optional(),\n  customPermissions: z.object({\n    addPermissions: z.array(z.string()).optional(),\n    removePermissions: z.array(z.string()).optional()\n  })"
        },
        {
          "name": "listTemplatesQuerySchema",
          "type": "query",
          "schema": {
            "page": {
              "type": "string",
              "required": true,
              "modifiers": ".regex(/^\\d+$/).transform(Number).default('1')"
            },
            "limit": {
              "type": "string",
              "required": true,
              "modifiers": ".regex(/^\\d+$/).transform(Number).default('20')"
            },
            "category": {
              "type": "enum",
              "required": false,
              "modifiers": ".optional()"
            },
            "isActive": {
              "type": "string",
              "required": false,
              "modifiers": ".transform(val => val === 'true').optional()"
            },
            "isGlobal": {
              "type": "string",
              "required": false,
              "modifiers": ".transform(val => val === 'true').optional()"
            },
            "search": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "sortBy": {
              "type": "enum",
              "required": true,
              "modifiers": ".default('createdAt')"
            },
            "sortOrder": {
              "type": "enum",
              "required": true,
              "modifiers": ".default('desc')"
            }
          },
          "zodDefinition": "const listTemplatesQuerySchema = z.object({\n  page: z.string().regex(/^\\d+$/).transform(Number).default('1'),\n  limit: z.string().regex(/^\\d+$/).transform(Number).default('20'),\n  category: z.enum(['PRODUCTION', 'QUALITY', 'MAINTENANCE', 'MANAGEMENT', 'ADMINISTRATION', 'ENGINEERING', 'SAFETY', 'COMPLIANCE', 'CUSTOM']).optional(),\n  isActive: z.string().transform(val => val === 'true').optional(),\n  isGlobal: z.string().transform(val => val === 'true').optional(),\n  search: z.string().optional(),\n  sortBy: z.enum(['templateName', 'templateCode', 'category', 'createdAt', 'updatedAt']).default('createdAt'),\n  sortOrder: z.enum(['asc', 'desc']).default('desc')\n})"
        }
      ],
      "businessDomain": "Administration",
      "description": "✅ GITHUB ISSUE #125: Role Templates for Predefined Role Configurations"
    },
    {
      "filePath": "src/routes/workOrderExecution.ts",
      "moduleName": "workOrderExecution",
      "baseRoute": "/workorders/execution",
      "endpoints": [
        {
          "method": "POST",
          "path": "/api/v1/workorders/execution/dispatch",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/workorders/execution/dispatch/ready",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/workorders/execution/dispatch/bulk",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/workorders/execution/:id/status",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/workorders/execution/:id/status/history",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/workorders/execution/status/:status",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/workorders/execution/:id/performance",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/workorders/execution/:id/performance",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/workorders/execution/:id/performance/:type",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/workorders/execution/:id/variances",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/workorders/execution/:id/variances/summary",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/workorders/execution/:id/variances/:type",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/workorders/execution/dashboard",
          "middleware": [],
          "tags": [],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "../services/WorkOrderExecutionService"
      ],
      "services": [
        "WorkOrderExecutionService"
      ],
      "schemas": [],
      "businessDomain": "Production Management",
      "description": "Work Order Execution Routes (ISA-95 Production Dispatching & Execution - Task 1.7)"
    },
    {
      "filePath": "src/routes/traceability.ts",
      "moduleName": "traceability",
      "baseRoute": "/traceability",
      "endpoints": [
        {
          "method": "GET",
          "path": "/api/v1/traceability/forward/:lotNumber",
          "description": "Forward traceability - Find all products made from a specific lot",
          "middleware": [
            "requireProductionAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/traceability/backward/:serialNumber",
          "description": "Forward traceability - Find all products made from a specific lot",
          "middleware": [
            "requireProductionAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/traceability/genealogy-graph/:serialNumber",
          "description": "Forward traceability - Find all products made from a specific lot",
          "middleware": [
            "requireProductionAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/traceability/genealogy",
          "description": "Forward traceability - Find all products made from a specific lot",
          "middleware": [
            "requireProductionAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/traceability/circular-check/:serialNumber",
          "description": "Forward traceability - Find all products made from a specific lot",
          "middleware": [
            "requireProductionAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/traceability/serial/:serialNumber",
          "description": "Forward traceability - Find all products made from a specific lot",
          "middleware": [
            "requireProductionAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/traceability/genealogy/:serialNumber",
          "description": "Forward traceability - Find all products made from a specific lot",
          "middleware": [
            "requireProductionAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/traceability/history/:serialNumber",
          "description": "Forward traceability - Find all products made from a specific lot",
          "middleware": [
            "requireProductionAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/traceability/certificates/:serialNumber",
          "description": "Forward traceability - Find all products made from a specific lot",
          "middleware": [
            "requireProductionAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/traceability/quality/:serialNumber",
          "description": "Forward traceability - Find all products made from a specific lot",
          "middleware": [
            "requireProductionAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/traceability/forward-legacy/:materialLot",
          "description": "Forward traceability - Find all products made from a specific lot",
          "middleware": [
            "requireProductionAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented",
            "deprecated"
          ],
          "deprecated": true
        },
        {
          "method": "GET",
          "path": "/api/v1/traceability/search",
          "description": "Forward traceability - Find all products made from a specific lot",
          "middleware": [
            "requireSiteAccess",
            "requireProductionAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented",
            "deprecated"
          ],
          "deprecated": true
        }
      ],
      "imports": [
        "express",
        "zod",
        "../lib/database",
        "../services/TraceabilityService",
        "../middleware/auth",
        "../middleware/errorHandler",
        "../utils/logger"
      ],
      "services": [
        "traceabilityService",
        "TraceabilityService"
      ],
      "schemas": [
        {
          "name": "searchSchema",
          "type": "body",
          "schema": {
            "serialNumber": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "partNumber": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "lotNumber": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "workOrderNumber": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "startDate": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional()"
            },
            "endDate": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional()"
            }
          },
          "zodDefinition": "const searchSchema = z.object({\n  serialNumber: z.string().optional(),\n  partNumber: z.string().optional(),\n  lotNumber: z.string().optional(),\n  workOrderNumber: z.string().optional(),\n  startDate: z.string().datetime().optional(),\n  endDate: z.string().datetime().optional()\n})"
        },
        {
          "name": "createGenealogySchema",
          "type": "body",
          "schema": {
            "parentSerialNumber": {
              "type": "string",
              "required": true,
              "modifiers": ""
            },
            "componentSerialNumber": {
              "type": "string",
              "required": true,
              "modifiers": ""
            },
            "assemblyDate": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional()"
            },
            "assemblyOperator": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const createGenealogySchema = z.object({\n  parentSerialNumber: z.string(),\n  componentSerialNumber: z.string(),\n  assemblyDate: z.string().datetime().optional(),\n  assemblyOperator: z.string().optional(),\n})"
        }
      ],
      "businessDomain": "Material Management"
    },
    {
      "filePath": "src/routes/annotations.ts",
      "moduleName": "annotations",
      "baseRoute": "/annotations",
      "endpoints": [
        {
          "method": "POST",
          "path": "/api/v1/annotations",
          "description": "Create a new annotation on a document",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/annotations/:documentType/:documentId",
          "description": "Create a new annotation on a document",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/annotations/:documentType/:documentId/media",
          "description": "Create a new annotation on a document",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/annotations/:annotationId",
          "description": "Create a new annotation on a document",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/annotations/:annotationId",
          "description": "Create a new annotation on a document",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/annotations/:annotationId/resolve",
          "description": "Create a new annotation on a document",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/annotations/templates",
          "description": "Create a new annotation on a document",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/annotations/:documentType/:documentId/export",
          "description": "Create a new annotation on a document",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/annotations/:documentType/:documentId/stats",
          "description": "Create a new annotation on a document",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/annotations/types",
          "description": "Create a new annotation on a document",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/annotations/validate",
          "description": "Create a new annotation on a document",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "zod",
        "../services/AnnotationService",
        "../utils/logger",
        "@prisma/client"
      ],
      "services": [
        "annotationService",
        "AnnotationService"
      ],
      "schemas": [
        {
          "name": "getAnnotationsSchema",
          "type": "body",
          "schema": {
            "mediaType": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "annotationType": {
              "type": "nativeEnum",
              "required": false,
              "modifiers": ".optional()"
            },
            "authorId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "isResolved": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional()"
            },
            "createdAfter": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional()"
            },
            "createdBefore": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional()"
            },
            "limit": {
              "type": "number",
              "required": false,
              "modifiers": ".int().positive().max(100).optional().default(25)"
            },
            "offset": {
              "type": "number",
              "required": false,
              "modifiers": ".int().nonnegative().optional().default(0)"
            }
          },
          "zodDefinition": "const getAnnotationsSchema = z.object({\n  mediaType: z.string().optional(),\n  annotationType: z.nativeEnum(AnnotationType).optional(),\n  authorId: z.string().optional(),\n  isResolved: z.boolean().optional(),\n  createdAfter: z.string().datetime().optional(),\n  createdBefore: z.string().datetime().optional(),\n  limit: z.number().int().positive().max(100).optional().default(25),\n  offset: z.number().int().nonnegative().optional().default(0)\n})"
        },
        {
          "name": "exportAnnotationsSchema",
          "type": "body",
          "schema": {
            "format": {
              "type": "enum",
              "required": false,
              "modifiers": ".optional().default('JSON')"
            }
          },
          "zodDefinition": "const exportAnnotationsSchema = z.object({\n  format: z.enum(['JSON', 'CSV']).optional().default('JSON')\n})"
        }
      ],
      "businessDomain": "Collaboration",
      "description": "Document Annotations API Routes"
    },
    {
      "filePath": "src/routes/cmmRoutes.ts",
      "moduleName": "cmm",
      "baseRoute": "/cmm",
      "endpoints": [
        {
          "method": "POST",
          "path": "/api/v1/cmm/qif/plan/import",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/cmm/qif/plan/:qifPlanId",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/cmm/qif/results/import",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/cmm/qif/results/:qifResultsId",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/cmm/inspection/execute",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/cmm/inspection/:inspectionId",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/cmm/inspection/:inspectionId/results",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/cmm/inspection/:inspectionId/qif",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/cmm/programs",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/cmm/plan/create",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/cmm/health",
          "middleware": [],
          "tags": [],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "../middleware/auth",
        "../services/IntegrationManager",
        "../services/CMMAdapter"
      ],
      "services": [],
      "schemas": [],
      "businessDomain": "Other",
      "description": "CMM (Coordinate Measuring Machine) Integration Routes"
    },
    {
      "filePath": "src/routes/comments.ts",
      "moduleName": "comments",
      "baseRoute": "/comments",
      "endpoints": [
        {
          "method": "POST",
          "path": "/api/v1/comments",
          "description": "Create a new comment on a document",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/comments/reply",
          "description": "Create a new comment on a document",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/comments/:documentType/:documentId",
          "description": "Create a new comment on a document",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/comments/:commentId",
          "description": "Create a new comment on a document",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/comments/:commentId",
          "description": "Create a new comment on a document",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/comments/:commentId/resolve",
          "description": "Create a new comment on a document",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/comments/:commentId/pin",
          "description": "Create a new comment on a document",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/comments/:commentId/reactions",
          "description": "Create a new comment on a document",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/comments/:commentId/reactions/:reactionType",
          "description": "Create a new comment on a document",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/comments/:documentType/:documentId/stats",
          "description": "Create a new comment on a document",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/comments/extract-mentions",
          "description": "Create a new comment on a document",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "zod",
        "../services/CommentService",
        "../utils/logger",
        "@prisma/client"
      ],
      "services": [
        "commentService",
        "CommentService"
      ],
      "schemas": [
        {
          "name": "createCommentSchema",
          "type": "body",
          "schema": {
            "documentType": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1"
            },
            "documentId": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1"
            },
            "contextType": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "contextId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "contextPath": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "commentText": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1"
            },
            "attachments": {
              "type": "array",
              "required": false,
              "modifiers": ").optional()"
            },
            "priority": {
              "type": "nativeEnum",
              "required": false,
              "modifiers": ".optional()"
            },
            "tags": {
              "type": "array",
              "required": false,
              "modifiers": ").optional()"
            },
            "mentionedUserIds": {
              "type": "array",
              "required": false,
              "modifiers": ").optional()"
            }
          },
          "zodDefinition": "const createCommentSchema = z.object({\n  documentType: z.string().min(1, 'Document type is required'),\n  documentId: z.string().min(1, 'Document ID is required'),\n  contextType: z.string().optional(),\n  contextId: z.string().optional(),\n  contextPath: z.string().optional(),\n  commentText: z.string().min(1, 'Comment text is required').max(10000, 'Comment text too long'),\n  attachments: z.array(z.string()).optional(),\n  priority: z.nativeEnum(CommentPriority).optional(),\n  tags: z.array(z.string()).optional(),\n  mentionedUserIds: z.array(z.string()).optional()\n})"
        },
        {
          "name": "replyCommentSchema",
          "type": "body",
          "schema": {
            "parentCommentId": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1"
            },
            "commentText": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1"
            },
            "attachments": {
              "type": "array",
              "required": false,
              "modifiers": ").optional()"
            },
            "mentionedUserIds": {
              "type": "array",
              "required": false,
              "modifiers": ").optional()"
            }
          },
          "zodDefinition": "const replyCommentSchema = z.object({\n  parentCommentId: z.string().min(1, 'Parent comment ID is required'),\n  commentText: z.string().min(1, 'Comment text is required').max(10000, 'Comment text too long'),\n  attachments: z.array(z.string()).optional(),\n  mentionedUserIds: z.array(z.string()).optional()\n})"
        },
        {
          "name": "updateCommentSchema",
          "type": "body",
          "schema": {
            "commentText": {
              "type": "string",
              "required": false,
              "modifiers": ".min(1).max(10000).optional()"
            },
            "attachments": {
              "type": "array",
              "required": false,
              "modifiers": ").optional()"
            },
            "priority": {
              "type": "nativeEnum",
              "required": false,
              "modifiers": ".optional()"
            },
            "tags": {
              "type": "array",
              "required": false,
              "modifiers": ").optional()"
            },
            "isPinned": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const updateCommentSchema = z.object({\n  commentText: z.string().min(1).max(10000).optional(),\n  attachments: z.array(z.string()).optional(),\n  priority: z.nativeEnum(CommentPriority).optional(),\n  tags: z.array(z.string()).optional(),\n  isPinned: z.boolean().optional()\n})"
        },
        {
          "name": "getCommentsSchema",
          "type": "body",
          "schema": {
            "status": {
              "type": "nativeEnum",
              "required": false,
              "modifiers": ".optional()"
            },
            "priority": {
              "type": "nativeEnum",
              "required": false,
              "modifiers": ".optional()"
            },
            "authorId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "contextType": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "isResolved": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional()"
            },
            "isPinned": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional()"
            },
            "tags": {
              "type": "array",
              "required": false,
              "modifiers": ").optional()"
            },
            "createdAfter": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional()"
            },
            "createdBefore": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional()"
            },
            "limit": {
              "type": "number",
              "required": false,
              "modifiers": ".int().positive().max(100).optional().default(25)"
            },
            "offset": {
              "type": "number",
              "required": false,
              "modifiers": ".int().nonnegative().optional().default(0)"
            }
          },
          "zodDefinition": "const getCommentsSchema = z.object({\n  status: z.nativeEnum(CommentStatus).optional(),\n  priority: z.nativeEnum(CommentPriority).optional(),\n  authorId: z.string().optional(),\n  contextType: z.string().optional(),\n  isResolved: z.boolean().optional(),\n  isPinned: z.boolean().optional(),\n  tags: z.array(z.string()).optional(),\n  createdAfter: z.string().datetime().optional(),\n  createdBefore: z.string().datetime().optional(),\n  limit: z.number().int().positive().max(100).optional().default(25),\n  offset: z.number().int().nonnegative().optional().default(0)\n})"
        },
        {
          "name": "reactionSchema",
          "type": "body",
          "schema": {
            "reactionType": {
              "type": "nativeEnum",
              "required": true,
              "modifiers": ""
            }
          },
          "zodDefinition": "const reactionSchema = z.object({\n  reactionType: z.nativeEnum(ReactionType)\n})"
        }
      ],
      "businessDomain": "Collaboration",
      "description": "Document Comments API Routes"
    },
    {
      "filePath": "src/routes/indysoftRoutes.ts",
      "moduleName": "indysoft",
      "baseRoute": "/indysoft",
      "endpoints": [
        {
          "method": "POST",
          "path": "/api/v1/indysoft/sync-gauges",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/indysoft/gauge/:gaugeId/certificate",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/indysoft/gauge/:gaugeId/uncertainty",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/indysoft/gauge/:gaugeId/gage-rr",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/indysoft/gauge/:gaugeId/validate",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/indysoft/out-of-cal",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/indysoft/gauge/:gaugeId/qif/resource",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/indysoft/qif/resources",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/indysoft/qif/resources/measurement-type/:type",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/indysoft/health",
          "middleware": [],
          "tags": [],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "../middleware/auth",
        "../services/IntegrationManager",
        "../services/IndysoftAdapter"
      ],
      "services": [],
      "schemas": [],
      "businessDomain": "Other",
      "description": "Indysoft Gauge Calibration Integration Routes"
    },
    {
      "filePath": "src/routes/integrationRoutes.ts",
      "moduleName": "integration",
      "baseRoute": "/integration",
      "endpoints": [
        {
          "method": "GET",
          "path": "/api/v1/integration",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/integration/:id",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/integration",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/integration/:id",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/integration/:id",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/integration/:id/sync",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/integration/:id/health",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/integration/health/all",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/integration/:id/logs",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/integration/:id/test",
          "middleware": [],
          "tags": [],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "@prisma/client",
        "../middleware/auth",
        "../services/IntegrationManager"
      ],
      "services": [],
      "schemas": [],
      "businessDomain": "Other",
      "description": "Integration API Routes"
    },
    {
      "filePath": "src/routes/predatorPDMRoutes.ts",
      "moduleName": "predatorPDM",
      "baseRoute": "/predator-p-d-m",
      "endpoints": [
        {
          "method": "GET",
          "path": "/api/v1/predator-p-d-m/nc-program/:partNumber/:operationCode",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/predator-p-d-m/work-instruction/:partNumber/:operationCode",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/predator-p-d-m/step-ap242/:partNumber",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/predator-p-d-m/requirements/:partNumber",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/predator-p-d-m/fai-template/:partNumber",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/predator-p-d-m/search-documents",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/predator-p-d-m/approve-document",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/predator-p-d-m/revision-history/:partNumber",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/predator-p-d-m/link-requirement",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/predator-p-d-m/health",
          "middleware": [],
          "tags": [],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "../middleware/auth",
        "../services/IntegrationManager",
        "../services/PredatorPDMAdapter"
      ],
      "services": [],
      "schemas": [],
      "businessDomain": "Other",
      "description": "Predator PDM Integration Routes"
    },
    {
      "filePath": "src/routes/historianRoutes.ts",
      "moduleName": "historian",
      "baseRoute": "/historian",
      "endpoints": [
        {
          "method": "GET",
          "path": "/api/v1/historian/health",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/historian/tags/create",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/historian/tags/auto-configure",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/historian/data/write",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/historian/equipment/:equipmentDataCollectionId/push",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/historian/process/:processDataCollectionId/push",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/historian/data/query",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/historian/data/aggregate",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/historian/buffer/flush",
          "middleware": [],
          "tags": [],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "../services/IntegrationManager",
        "../services/ProficyHistorianAdapter",
        "@prisma/client"
      ],
      "services": [],
      "schemas": [],
      "businessDomain": "Other"
    },
    {
      "filePath": "src/routes/media.ts",
      "moduleName": "media",
      "baseRoute": "/media",
      "endpoints": [
        {
          "method": "POST",
          "path": "/api/v1/media/upload",
          "description": "Upload media file to library",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/media/search",
          "description": "Upload media file to library",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/media/:id/annotations",
          "description": "Upload media file to library",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/media/:id/usage",
          "description": "Upload media file to library",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/media/:id/metadata",
          "description": "Upload media file to library",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/media/:id/track-usage",
          "description": "Upload media file to library",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/media/library/stats",
          "description": "Upload media file to library",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/media/cleanup",
          "description": "Upload media file to library",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/media/:id",
          "description": "Upload media file to library",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "multer",
        "zod",
        "../services/MediaLibraryService",
        "../utils/logger"
      ],
      "services": [
        "MediaLibraryService",
        "mediaService"
      ],
      "schemas": [
        {
          "name": "MediaUploadSchema",
          "type": "body",
          "schema": {
            "fileName": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            },
            "title": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "description": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "tags": {
              "type": "array",
              "required": false,
              "modifiers": ").optional()"
            },
            "instructionId": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            },
            "mediaType": {
              "type": "enum",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const MediaUploadSchema = z.object({\n  fileName: z.string().min(1),\n  title: z.string().optional(),\n  description: z.string().optional(),\n  tags: z.array(z.string()).optional(),\n  instructionId: z.string().min(1),\n  mediaType: z.enum(['IMAGE', 'VIDEO', 'DOCUMENT', 'DIAGRAM', 'CAD_MODEL', 'ANIMATION']).optional()\n})"
        },
        {
          "name": "AnnotationSchema",
          "type": "body",
          "schema": {
            "id": {
              "type": "string",
              "required": true,
              "modifiers": ""
            },
            "type": {
              "type": "enum",
              "required": true,
              "modifiers": ""
            },
            "position": {
              "type": "object",
              "required": true,
              "modifiers": ""
            },
            "y": {
              "type": "number",
              "required": true,
              "modifiers": ""
            },
            "width": {
              "type": "number",
              "required": false,
              "modifiers": ".optional()"
            },
            "height": {
              "type": "number",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const AnnotationSchema = z.object({\n  id: z.string(),\n  type: z.enum(['arrow', 'callout', 'highlight', 'circle', 'rectangle', 'text']),\n  position: z.object({\n    x: z.number(),\n    y: z.number(),\n    width: z.number().optional(),\n    height: z.number().optional()\n  })"
        },
        {
          "name": "MediaSearchSchema",
          "type": "body",
          "schema": {
            "query": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "mediaType": {
              "type": "enum",
              "required": false,
              "modifiers": ".optional()"
            },
            "tags": {
              "type": "array",
              "required": false,
              "modifiers": ").optional()"
            },
            "instructionId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "hasAnnotations": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional()"
            },
            "limit": {
              "type": "number",
              "required": false,
              "modifiers": ".min(1).max(100).optional()"
            },
            "offset": {
              "type": "number",
              "required": false,
              "modifiers": ".min(0).optional()"
            }
          },
          "zodDefinition": "const MediaSearchSchema = z.object({\n  query: z.string().optional(),\n  mediaType: z.enum(['IMAGE', 'VIDEO', 'DOCUMENT', 'DIAGRAM', 'CAD_MODEL', 'ANIMATION']).optional(),\n  tags: z.array(z.string()).optional(),\n  instructionId: z.string().optional(),\n  hasAnnotations: z.boolean().optional(),\n  limit: z.number().min(1).max(100).optional(),\n  offset: z.number().min(0).optional()\n})"
        },
        {
          "name": "UpdateMetadataSchema",
          "type": "body",
          "schema": {
            "title": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "description": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "tags": {
              "type": "array",
              "required": false,
              "modifiers": ").optional()"
            }
          },
          "zodDefinition": "const UpdateMetadataSchema = z.object({\n  title: z.string().optional(),\n  description: z.string().optional(),\n  tags: z.array(z.string()).optional()\n})"
        }
      ],
      "businessDomain": "Document Management",
      "description": "Media Library Routes"
    },
    {
      "filePath": "src/routes/parameterGroups.ts",
      "moduleName": "parameterGroups",
      "baseRoute": "/parameter-groups",
      "endpoints": [
        {
          "method": "POST",
          "path": "/api/v1/parameter-groups",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/parameter-groups/:id",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/parameter-groups/:id",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/parameter-groups/:id",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/parameter-groups",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/parameter-groups/:id/move",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/parameter-groups/:id/parameters",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/parameter-groups/assign",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/parameter-groups/search/query",
          "middleware": [],
          "tags": [],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "../services/ParameterGroupService",
        "../utils/logger"
      ],
      "services": [
        "parameterGroupService",
        "ParameterGroupService"
      ],
      "schemas": [],
      "businessDomain": "Quality Management",
      "description": "Parameter Groups Routes"
    },
    {
      "filePath": "src/routes/unifiedApprovals.ts",
      "moduleName": "unifiedApprovals",
      "baseRoute": "/approvals",
      "endpoints": [
        {
          "method": "POST",
          "path": "/api/v1/approvals/initiate",
          "middleware": [
            "requireRole"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/approvals/:entityType/:entityId/approve",
          "middleware": [
            "requireRole"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/approvals/:entityType/:entityId/reject",
          "middleware": [
            "requireRole"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/approvals/:entityType/:entityId/delegate",
          "middleware": [
            "requireRole"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/approvals/:entityType/:entityId/status",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/approvals/my-tasks",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/approvals/dashboard",
          "middleware": [
            "requireRole"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/approvals/work-instructions/:id/approve",
          "middleware": [
            "requireRole"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/approvals/fai-reports/:id/approve",
          "middleware": [
            "requireRole"
          ],
          "tags": [],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "@prisma/client",
        "../middleware/auth",
        "../middleware/validation",
        "../services/UnifiedApprovalIntegration",
        "../utils/logger",
        "zod"
      ],
      "services": [
        "unifiedApprovalService"
      ],
      "schemas": [
        {
          "name": "initiateApprovalSchema",
          "type": "body",
          "schema": {
            "entityType": {
              "type": "enum",
              "required": true,
              "modifiers": ""
            },
            "entityId": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            },
            "priority": {
              "type": "enum",
              "required": true,
              "modifiers": ".default('MEDIUM')"
            },
            "requiredApproverRoles": {
              "type": "array",
              "required": true,
              "modifiers": ").min(1)"
            },
            "metadata": {
              "type": "record",
              "required": false,
              "modifiers": ").optional()"
            }
          },
          "zodDefinition": "const initiateApprovalSchema = z.object({\n  entityType: z.enum(['WORK_INSTRUCTION', 'FAI_REPORT', 'QUALITY_PROCESS', 'DOCUMENT']),\n  entityId: z.string().min(1),\n  priority: z.enum(['LOW', 'MEDIUM', 'HIGH', 'CRITICAL']).default('MEDIUM'),\n  requiredApproverRoles: z.array(z.string()).min(1),\n  metadata: z.record(z.any()).optional()\n})"
        },
        {
          "name": "processApprovalSchema",
          "type": "body",
          "schema": {
            "action": {
              "type": "enum",
              "required": true,
              "modifiers": ""
            },
            "comments": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "delegateToUserId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "requiresSignature": {
              "type": "boolean",
              "required": true,
              "modifiers": ".default(false)"
            },
            "signatureReason": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const processApprovalSchema = z.object({\n  action: z.enum(['APPROVE', 'REJECT', 'DELEGATE', 'REQUEST_CHANGES']),\n  comments: z.string().optional(),\n  delegateToUserId: z.string().optional(),\n  requiresSignature: z.boolean().default(false),\n  signatureReason: z.string().optional()\n})"
        },
        {
          "name": "getTasksSchema",
          "type": "body",
          "schema": {
            "status": {
              "type": "enum",
              "required": false,
              "modifiers": ".optional()"
            },
            "entityType": {
              "type": "enum",
              "required": false,
              "modifiers": ".optional()"
            },
            "priority": {
              "type": "enum",
              "required": false,
              "modifiers": ".optional()"
            },
            "limit": {
              "type": "number",
              "required": true,
              "modifiers": ".min(1).max(100).default(50)"
            },
            "offset": {
              "type": "number",
              "required": true,
              "modifiers": ".min(0).default(0)"
            }
          },
          "zodDefinition": "const getTasksSchema = z.object({\n  status: z.enum(['ASSIGNED', 'IN_PROGRESS', 'COMPLETED', 'OVERDUE']).optional(),\n  entityType: z.enum(['WORK_INSTRUCTION', 'FAI_REPORT', 'QUALITY_PROCESS', 'DOCUMENT']).optional(),\n  priority: z.enum(['LOW', 'MEDIUM', 'HIGH', 'CRITICAL']).optional(),\n  limit: z.number().min(1).max(100).default(50),\n  offset: z.number().min(0).default(0)\n})"
        }
      ],
      "businessDomain": "Workflow Management",
      "description": "✅ GITHUB ISSUE #147: Core Unified Workflow Engine"
    },
    {
      "filePath": "src/routes/auth.ts",
      "moduleName": "auth",
      "baseRoute": "/auth",
      "endpoints": [
        {
          "method": "POST",
          "path": "/api/v1/auth/login",
          "description": "User login with concurrent queue management",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/auth/refresh",
          "description": "User login with concurrent queue management",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/auth/logout",
          "description": "User login with concurrent queue management",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/auth/me",
          "description": "User login with concurrent queue management",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/auth/change-password",
          "description": "User login with concurrent queue management",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/auth/queue-status",
          "description": "User login with concurrent queue management",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/auth/validate-token",
          "description": "User login with concurrent queue management",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "bcrypt",
        "jsonwebtoken",
        "zod",
        "../config/config",
        "../middleware/errorHandler",
        "../middleware/errorHandler",
        "../middleware/requestLogger",
        "../utils/logger",
        "../lib/database",
        "../services/AuthenticationManager",
        "../services/permissionService"
      ],
      "services": [
        "permissionService"
      ],
      "schemas": [
        {
          "name": "loginSchema",
          "type": "body",
          "schema": {
            "username": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1"
            },
            "password": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1"
            }
          },
          "zodDefinition": "const loginSchema = z.object({\n  username: z.string().min(1, 'Username is required'),\n  password: z.string().min(1, 'Password is required')\n})"
        },
        {
          "name": "refreshTokenSchema",
          "type": "body",
          "schema": {
            "refreshToken": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1"
            }
          },
          "zodDefinition": "const refreshTokenSchema = z.object({\n  refreshToken: z.string().min(1, 'Refresh token is required')\n})"
        },
        {
          "name": "changePasswordSchema",
          "type": "body",
          "schema": {
            "currentPassword": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1"
            },
            "newPassword": {
              "type": "string",
              "required": true,
              "modifiers": ""
            }
          },
          "zodDefinition": "const changePasswordSchema = z.object({\n      currentPassword: z.string().min(1, 'Current password is required'),\n      newPassword: z.string()\n        .min(8, 'New password must be at least 8 characters')\n        .regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/, \n               'Password must contain uppercase, lowercase, number and special character')\n    })"
        }
      ],
      "businessDomain": "Authentication & Security"
    },
    {
      "filePath": "src/routes/predatorDNCRoutes.ts",
      "moduleName": "predatorDNC",
      "baseRoute": "/predator-d-n-c",
      "endpoints": [
        {
          "method": "POST",
          "path": "/api/v1/predator-d-n-c/authorization-handshake",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/predator-d-n-c/transfer-program",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/predator-d-n-c/machine/:machineId/status",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/predator-d-n-c/machine/:machineId/active-program",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/predator-d-n-c/download-log/:downloadId",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/predator-d-n-c/authorization/:authId",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/predator-d-n-c/health",
          "middleware": [],
          "tags": [],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "../middleware/auth",
        "../services/IntegrationManager",
        "../services/PredatorDNCAdapter"
      ],
      "services": [],
      "schemas": [],
      "businessDomain": "Other",
      "description": "Predator DNC Integration Routes"
    },
    {
      "filePath": "src/routes/shopFloorConnectRoutes.ts",
      "moduleName": "shopFloorConnect",
      "baseRoute": "/shop-floor-connect",
      "endpoints": [
        {
          "method": "POST",
          "path": "/api/v1/shop-floor-connect/sync-programs",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/shop-floor-connect/check-revision",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/shop-floor-connect/authorize-download",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/shop-floor-connect/approve-first-piece",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/shop-floor-connect/program/:programName",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/shop-floor-connect/eco/:ecoNumber",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/shop-floor-connect/health",
          "middleware": [],
          "tags": [],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "../middleware/auth",
        "../services/IntegrationManager",
        "../services/ShopFloorConnectAdapter"
      ],
      "services": [],
      "schemas": [],
      "businessDomain": "Other",
      "description": "Shop Floor Connect Integration Routes"
    },
    {
      "filePath": "src/routes/admin/user-roles.ts",
      "moduleName": "user-roles",
      "baseRoute": "/user-roles",
      "endpoints": [
        {
          "method": "POST",
          "path": "/api/v1/user-roles/assign/global",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/user-roles/assign/site",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/user-roles/revoke/global",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/user-roles/revoke/site",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/user-roles/:userId",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/user-roles",
          "middleware": [],
          "tags": [],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "@prisma/client",
        "../../middleware/auth",
        "../../utils/logger"
      ],
      "services": [],
      "schemas": [],
      "businessDomain": "Administration",
      "description": "User-Role Assignment API - GitHub Issue #29"
    },
    {
      "filePath": "src/routes/covalentRoutes.ts",
      "moduleName": "covalent",
      "baseRoute": "/covalent",
      "endpoints": [
        {
          "method": "POST",
          "path": "/api/v1/covalent/check-authorization",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/covalent/validate-fai-inspector",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/covalent/check-dnc-authorization",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/covalent/operator/:operatorId/certifications",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/covalent/operator/:operatorId/skills",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/covalent/health",
          "middleware": [],
          "tags": [],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "../middleware/auth",
        "../services/IntegrationManager",
        "../services/CovalentAdapter"
      ],
      "services": [],
      "schemas": [],
      "businessDomain": "Other",
      "description": "Covalent Skills Tracking Integration Routes"
    },
    {
      "filePath": "src/routes/maximoRoutes.ts",
      "moduleName": "maximo",
      "baseRoute": "/maximo",
      "endpoints": [
        {
          "method": "POST",
          "path": "/api/v1/maximo/sync-work-orders",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/maximo/work-order-status",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/maximo/create-cm-work-order",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/maximo/equipment/:assetnum/history",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/maximo/work-order/:wonum",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/maximo/health",
          "middleware": [],
          "tags": [],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "../middleware/auth",
        "../services/IntegrationManager",
        "../services/IBMMaximoAdapter"
      ],
      "services": [],
      "schemas": [],
      "businessDomain": "Other",
      "description": "IBM Maximo CMMS Integration Routes"
    },
    {
      "filePath": "src/routes/parameterLimits.ts",
      "moduleName": "parameterLimits",
      "baseRoute": "/parameter-limits",
      "endpoints": [
        {
          "method": "POST",
          "path": "/api/v1/parameter-limits/:parameterId/limits",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/parameter-limits/:parameterId/limits",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/parameter-limits/:parameterId/limits",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/parameter-limits/validate",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/parameter-limits/:parameterId/limits/evaluate",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/parameter-limits/limits",
          "middleware": [],
          "tags": [],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "../services/ParameterLimitsService",
        "../utils/logger"
      ],
      "services": [
        "parameterLimitsService",
        "ParameterLimitsService"
      ],
      "schemas": [],
      "businessDomain": "Quality Management",
      "description": "Parameter Limits Routes"
    },
    {
      "filePath": "src/routes/personnel.ts",
      "moduleName": "personnel",
      "baseRoute": "/personnel",
      "endpoints": [
        {
          "method": "GET",
          "path": "/api/v1/personnel",
          "description": "Get all personnel with optional filtering",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/personnel/:id",
          "description": "Get all personnel with optional filtering",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/personnel/:id",
          "description": "Get all personnel with optional filtering",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/personnel/:id/subordinates",
          "description": "Get all personnel with optional filtering",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/personnel/:id/skills",
          "description": "Get all personnel with optional filtering",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/personnel/:id/skills",
          "description": "Get all personnel with optional filtering",
          "middleware": [],
          "tags": [
            "documented"
          ],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "../services/PersonnelService",
        "@prisma/client"
      ],
      "services": [
        "PersonnelService"
      ],
      "schemas": [],
      "businessDomain": "Personnel Management"
    },
    {
      "filePath": "src/routes/signatures.ts",
      "moduleName": "signatures",
      "baseRoute": "/signatures",
      "endpoints": [
        {
          "method": "POST",
          "path": "/api/v1/signatures/sign",
          "middleware": [
            "authMiddleware"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/signatures/verify",
          "middleware": [
            "authMiddleware"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/signatures/:id",
          "middleware": [
            "authMiddleware"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/signatures",
          "middleware": [
            "authMiddleware"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/signatures/entity/:entityType/:entityId",
          "middleware": [
            "authMiddleware"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/signatures/:id/invalidate",
          "middleware": [
            "authMiddleware"
          ],
          "tags": [],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "@prisma/client",
        "@/services/ElectronicSignatureService",
        "@/middleware/auth",
        "@/utils/logger",
        "@/types/signature"
      ],
      "services": [
        "ElectronicSignatureService",
        "signatureService"
      ],
      "schemas": [],
      "businessDomain": "Authentication & Security"
    },
    {
      "filePath": "src/routes/sites.ts",
      "moduleName": "sites",
      "baseRoute": "/sites",
      "endpoints": [
        {
          "method": "GET",
          "path": "/api/v1/sites",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/sites/:id",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/sites/code/:siteCode",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/sites",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/sites/:id",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/sites/:id",
          "middleware": [],
          "tags": [],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "@prisma/client"
      ],
      "services": [],
      "schemas": [],
      "businessDomain": "Core Infrastructure",
      "description": "Sites API Routes"
    },
    {
      "filePath": "src/routes/sso.ts",
      "moduleName": "sso",
      "baseRoute": "/sso",
      "endpoints": [
        {
          "method": "POST",
          "path": "/api/v1/sso/discover",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/sso/login",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/sso/callback/:providerType",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/sso/logout",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/sso/status/:flowId",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/sso/callback/oidc",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "zod",
        "jsonwebtoken",
        "../config/config",
        "../middleware/errorHandler",
        "../utils/logger",
        "../services/SsoOrchestrationService",
        "../services/permissionService",
        "../lib/database"
      ],
      "services": [
        "SsoOrchestrationService",
        "permissionService",
        "orchestrationService"
      ],
      "schemas": [
        {
          "name": "discoverProvidersSchema",
          "type": "body",
          "schema": {
            "email": {
              "type": "string",
              "required": true,
              "modifiers": ".email('Valid email required')"
            }
          },
          "zodDefinition": "const discoverProvidersSchema = z.object({\n  email: z.string().email('Valid email required')\n})"
        },
        {
          "name": "initiateAuthSchema",
          "type": "body",
          "schema": {
            "email": {
              "type": "string",
              "required": true,
              "modifiers": ".email('Valid email required')"
            },
            "preferredProviderId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "forceProvider": {
              "type": "boolean",
              "required": true,
              "modifiers": ".default(false)"
            },
            "returnUrl": {
              "type": "string",
              "required": false,
              "modifiers": ".url().optional()"
            }
          },
          "zodDefinition": "const initiateAuthSchema = z.object({\n  email: z.string().email('Valid email required'),\n  preferredProviderId: z.string().optional(),\n  forceProvider: z.boolean().default(false),\n  returnUrl: z.string().url().optional()\n})"
        },
        {
          "name": "callbackSchema",
          "type": "body",
          "schema": {
            "success": {
              "type": "boolean",
              "required": true,
              "modifiers": ""
            },
            "userProfile": {
              "type": "object",
              "required": true,
              "modifiers": ".email()"
            },
            "firstName": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "lastName": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "given_name": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "family_name": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const callbackSchema = z.object({\n  success: z.boolean(),\n  userProfile: z.object({\n    email: z.string().email(),\n    firstName: z.string().optional(),\n    lastName: z.string().optional(),\n    given_name: z.string().optional(),\n    family_name: z.string().optional()\n  })"
        }
      ],
      "businessDomain": "Authentication & Security",
      "description": "SSO Authentication Routes (Issue #134)"
    },
    {
      "filePath": "src/routes/admin/permissions.ts",
      "moduleName": "permissions",
      "baseRoute": "/permissions",
      "endpoints": [
        {
          "method": "GET",
          "path": "/api/v1/permissions",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/permissions/:id",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/permissions",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/permissions/:id",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/permissions/:id",
          "middleware": [],
          "tags": [],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "@prisma/client",
        "../../middleware/auth",
        "../../utils/logger"
      ],
      "services": [],
      "schemas": [],
      "businessDomain": "Administration",
      "description": "Permission Management API - GitHub Issue #29"
    },
    {
      "filePath": "src/routes/admin/roles.ts",
      "moduleName": "roles",
      "baseRoute": "/roles",
      "endpoints": [
        {
          "method": "GET",
          "path": "/api/v1/roles",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/roles/:id",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/roles",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/roles/:id",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/roles/:id",
          "middleware": [],
          "tags": [],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "@prisma/client",
        "../../middleware/auth",
        "../../utils/logger"
      ],
      "services": [],
      "schemas": [],
      "businessDomain": "Administration",
      "description": "Role Management API - GitHub Issue #29"
    },
    {
      "filePath": "src/routes/dashboard.ts",
      "moduleName": "dashboard",
      "baseRoute": "/dashboard",
      "endpoints": [
        {
          "method": "GET",
          "path": "/api/v1/dashboard/kpis",
          "description": "Get dashboard KPI metrics",
          "middleware": [
            "requireSiteAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/dashboard/recent-work-orders",
          "description": "Get dashboard KPI metrics",
          "middleware": [
            "requireSiteAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/dashboard/alerts",
          "description": "Get dashboard KPI metrics",
          "middleware": [
            "requireSiteAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/dashboard/efficiency",
          "description": "Get dashboard KPI metrics",
          "middleware": [
            "requireSiteAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/dashboard/quality-trends",
          "description": "Get dashboard KPI metrics",
          "middleware": [
            "requireSiteAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "zod",
        "../lib/database",
        "../middleware/auth",
        "../middleware/errorHandler",
        "../utils/logger"
      ],
      "services": [],
      "schemas": [
        {
          "name": "querySchema",
          "type": "query",
          "schema": {
            "siteId": {
              "type": "string",
              "required": false,
              "modifiers": ".uuid().optional()"
            },
            "limit": {
              "type": "string",
              "required": false,
              "modifiers": ".regex(/^\\d+$/).transform(Number).optional()"
            }
          },
          "zodDefinition": "const querySchema = z.object({\n  siteId: z.string().uuid().optional(),\n  limit: z.string().regex(/^\\d+$/).transform(Number).optional()\n})"
        }
      ],
      "businessDomain": "Analytics & Reporting"
    },
    {
      "filePath": "src/routes/admin/role-permissions.ts",
      "moduleName": "role-permissions",
      "baseRoute": "/role-permissions",
      "endpoints": [
        {
          "method": "POST",
          "path": "/api/v1/role-permissions/assign",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "DELETE",
          "path": "/api/v1/role-permissions/revoke",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "PUT",
          "path": "/api/v1/role-permissions/:roleId",
          "middleware": [],
          "tags": [],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/role-permissions/:roleId",
          "middleware": [],
          "tags": [],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "@prisma/client",
        "../../middleware/auth",
        "../../utils/logger"
      ],
      "services": [],
      "schemas": [],
      "businessDomain": "Administration",
      "description": "Role-Permission Assignment API - GitHub Issue #29"
    },
    {
      "filePath": "src/routes/presence.ts",
      "moduleName": "presence",
      "baseRoute": "/presence",
      "endpoints": [
        {
          "method": "POST",
          "path": "/api/v1/presence/update",
          "description": "Update user presence (heartbeat)",
          "middleware": [
            "requireProductionAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/presence/:resourceType/:resourceId",
          "description": "Update user presence (heartbeat)",
          "middleware": [
            "requireProductionAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/presence/remove",
          "description": "Update user presence (heartbeat)",
          "middleware": [
            "requireProductionAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/presence/debug/all",
          "description": "Update user presence (heartbeat)",
          "middleware": [
            "requireProductionAccess",
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "zod",
        "../services/PresenceService",
        "../middleware/auth",
        "../middleware/errorHandler",
        "../utils/logger"
      ],
      "services": [
        "presenceService",
        "PresenceService"
      ],
      "schemas": [
        {
          "name": "updatePresenceSchema",
          "type": "body",
          "schema": {
            "resourceType": {
              "type": "enum",
              "required": true,
              "modifiers": ""
            },
            "resourceId": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            },
            "action": {
              "type": "enum",
              "required": true,
              "modifiers": ""
            },
            "userName": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const updatePresenceSchema = z.object({\n  resourceType: z.enum(['routing', 'routing-step', 'work-order']),\n  resourceId: z.string().min(1),\n  action: z.enum(['viewing', 'editing']),\n  userName: z.string().optional(), // Will use req.user if not provided\n})"
        },
        {
          "name": "getPresenceSchema",
          "type": "body",
          "schema": {
            "resourceType": {
              "type": "enum",
              "required": true,
              "modifiers": ""
            },
            "resourceId": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            }
          },
          "zodDefinition": "const getPresenceSchema = z.object({\n  resourceType: z.enum(['routing', 'routing-step', 'work-order']),\n  resourceId: z.string().min(1),\n})"
        },
        {
          "name": "removePresenceSchema",
          "type": "body",
          "schema": {
            "resourceType": {
              "type": "enum",
              "required": true,
              "modifiers": ""
            },
            "resourceId": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            }
          },
          "zodDefinition": "const removePresenceSchema = z.object({\n  resourceType: z.enum(['routing', 'routing-step', 'work-order']),\n  resourceId: z.string().min(1),\n})"
        }
      ],
      "businessDomain": "Core Infrastructure",
      "description": "Presence API Routes"
    },
    {
      "filePath": "src/routes/azureAdGraph.ts",
      "moduleName": "azureAdGraph",
      "baseRoute": "/azure-ad",
      "endpoints": [
        {
          "method": "GET",
          "path": "/api/v1/azure-ad/status",
          "description": "Get Azure AD integration status",
          "middleware": [
            "authMiddleware"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/azure-ad/health",
          "description": "Get Azure AD integration status",
          "middleware": [
            "authMiddleware"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/azure-ad/test-connection",
          "description": "Get Azure AD integration status",
          "middleware": [
            "authMiddleware"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "../middleware/auth",
        "../utils/logger"
      ],
      "services": [],
      "schemas": [],
      "businessDomain": "Authentication & Security",
      "description": "Azure AD Graph API Routes (Issue #133)"
    },
    {
      "filePath": "src/routes/quality.ts",
      "moduleName": "quality",
      "baseRoute": "/quality",
      "endpoints": [
        {
          "method": "GET",
          "path": "/api/v1/quality/inspections",
          "description": "Get inspections list",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "POST",
          "path": "/api/v1/quality/inspections",
          "description": "Get inspections list",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/quality/ncrs",
          "description": "Get inspections list",
          "middleware": [
            "asyncHandler"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "../middleware/auth",
        "../middleware/errorHandler"
      ],
      "services": [],
      "schemas": [],
      "businessDomain": "Quality Management"
    },
    {
      "filePath": "src/routes/search.ts",
      "moduleName": "search",
      "baseRoute": "/search",
      "endpoints": [
        {
          "method": "GET",
          "path": "/api/v1/search/scopes",
          "description": "Perform global search across all entities",
          "middleware": [
            "authMiddleware"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        },
        {
          "method": "GET",
          "path": "/api/v1/search/entity-types",
          "description": "Perform global search across all entities",
          "middleware": [
            "authMiddleware"
          ],
          "tags": [
            "documented"
          ],
          "deprecated": false
        }
      ],
      "imports": [
        "express",
        "../services/GlobalSearchService",
        "../types/search",
        "../middleware/auth"
      ],
      "services": [
        "GlobalSearchService"
      ],
      "schemas": [],
      "businessDomain": "Analytics & Reporting",
      "description": "Global Search Routes"
    },
    {
      "filePath": "src/routes/routingTemplates.ts",
      "moduleName": "routingTemplates",
      "baseRoute": "/routing-templates",
      "endpoints": [],
      "imports": [
        "express",
        "zod",
        "@prisma/client",
        "../middleware/auth",
        "../middleware/errorHandler",
        "../utils/logger"
      ],
      "services": [],
      "schemas": [
        {
          "name": "createTemplateSchema",
          "type": "body",
          "schema": {
            "name": {
              "type": "string",
              "required": true,
              "modifiers": ".min(1)"
            },
            "category": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "description": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "tags": {
              "type": "array",
              "required": false,
              "modifiers": ").optional().default([])"
            },
            "isPublic": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional().default(false)"
            },
            "visualData": {
              "type": "any",
              "required": false,
              "modifiers": ".optional()"
            },
            "sourceRoutingId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "siteId": {
              "type": "string",
              "required": true,
              "modifiers": ""
            },
            "createdById": {
              "type": "string",
              "required": true,
              "modifiers": "// CUID from Prisma"
            }
          },
          "zodDefinition": "const createTemplateSchema = z.object({\n  name: z.string().min(1),\n  category: z.string().optional(),\n  description: z.string().optional(),\n  tags: z.array(z.string()).optional().default([]),\n  isPublic: z.boolean().optional().default(false),\n  visualData: z.any().optional(), // ReactFlow graph structure\n  sourceRoutingId: z.string().optional(), // CUID from Prisma\n  siteId: z.string(), // CUID from Prisma\n  createdById: z.string() // CUID from Prisma\n})"
        },
        {
          "name": "updateTemplateSchema",
          "type": "body",
          "schema": {
            "name": {
              "type": "string",
              "required": false,
              "modifiers": ".min(1).optional()"
            },
            "category": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "description": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "tags": {
              "type": "array",
              "required": false,
              "modifiers": ").optional()"
            },
            "isPublic": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional()"
            },
            "isFavorite": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional()"
            },
            "rating": {
              "type": "number",
              "required": false,
              "modifiers": ".min(1).max(5).optional()"
            },
            "visualData": {
              "type": "any",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const updateTemplateSchema = z.object({\n  name: z.string().min(1).optional(),\n  category: z.string().optional(),\n  description: z.string().optional(),\n  tags: z.array(z.string()).optional(),\n  isPublic: z.boolean().optional(),\n  isFavorite: z.boolean().optional(),\n  rating: z.number().min(1).max(5).optional(),\n  visualData: z.any().optional()\n})"
        },
        {
          "name": "searchTemplatesSchema",
          "type": "body",
          "schema": {
            "search": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "category": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "tags": {
              "type": "array",
              "required": false,
              "modifiers": ").optional()"
            },
            "siteId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "isPublic": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional()"
            },
            "isFavorite": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional()"
            },
            "sortBy": {
              "type": "enum",
              "required": false,
              "modifiers": ".optional().default('createdAt')"
            },
            "sortOrder": {
              "type": "enum",
              "required": false,
              "modifiers": ".optional().default('desc')"
            },
            "limit": {
              "type": "number",
              "required": false,
              "modifiers": ".int().positive().optional().default(50)"
            },
            "offset": {
              "type": "number",
              "required": false,
              "modifiers": ".int().nonnegative().optional().default(0)"
            }
          },
          "zodDefinition": "const searchTemplatesSchema = z.object({\n  search: z.string().optional(),\n  category: z.string().optional(),\n  tags: z.array(z.string()).optional(),\n  siteId: z.string().optional(), // CUID from Prisma\n  isPublic: z.boolean().optional(),\n  isFavorite: z.boolean().optional(),\n  sortBy: z.enum(['name', 'usageCount', 'rating', 'createdAt']).optional().default('createdAt'),\n  sortOrder: z.enum(['asc', 'desc']).optional().default('desc'),\n  limit: z.number().int().positive().optional().default(50),\n  offset: z.number().int().nonnegative().optional().default(0)\n})"
        }
      ],
      "businessDomain": "Production Management",
      "description": "Routing Template API Routes"
    },
    {
      "filePath": "src/routes/serialization.ts",
      "moduleName": "serialization",
      "baseRoute": "/serialization",
      "endpoints": [],
      "imports": [
        "express",
        "zod",
        "../lib/database",
        "../services/SerializationService",
        "../middleware/auth",
        "../middleware/errorHandler",
        "../utils/logger"
      ],
      "services": [
        "serializationService",
        "SerializationService"
      ],
      "schemas": [
        {
          "name": "generateSerialSchema",
          "type": "body",
          "schema": {
            "pattern": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "prefix": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "sequencePadding": {
              "type": "number",
              "required": false,
              "modifiers": ".int().min(1).max(12).optional()"
            },
            "sequenceName": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "includeCheckDigit": {
              "type": "boolean",
              "required": false,
              "modifiers": ".optional()"
            },
            "randomLength": {
              "type": "number",
              "required": false,
              "modifiers": ".int().min(4).max(16).optional()"
            }
          },
          "zodDefinition": "const generateSerialSchema = z.object({\n  pattern: z.string().optional(),\n  prefix: z.string().optional(),\n  sequencePadding: z.number().int().min(1).max(12).optional(),\n  sequenceName: z.string().optional(),\n  includeCheckDigit: z.boolean().optional(),\n  randomLength: z.number().int().min(4).max(16).optional(),\n})"
        },
        {
          "name": "createSerializedPartSchema",
          "type": "body",
          "schema": {
            "serialNumber": {
              "type": "string",
              "required": true,
              "modifiers": ""
            },
            "partId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "partNumber": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "workOrderId": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "lotNumber": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "status": {
              "type": "string",
              "required": true,
              "modifiers": ""
            },
            "currentLocation": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            },
            "manufactureDate": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional()"
            },
            "shipDate": {
              "type": "string",
              "required": false,
              "modifiers": ".datetime().optional()"
            },
            "customerInfo": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const createSerializedPartSchema = z.object({\n  serialNumber: z.string(),\n  partId: z.string().optional(), // Either partId or partNumber must be provided\n  partNumber: z.string().optional(),\n  workOrderId: z.string().optional(),\n  lotNumber: z.string().optional(),\n  status: z.string(),\n  currentLocation: z.string().optional(),\n  manufactureDate: z.string().datetime().optional(),\n  shipDate: z.string().datetime().optional(),\n  customerInfo: z.string().optional(),\n})"
        },
        {
          "name": "updateStatusSchema",
          "type": "body",
          "schema": {
            "status": {
              "type": "string",
              "required": true,
              "modifiers": ""
            },
            "location": {
              "type": "string",
              "required": false,
              "modifiers": ".optional()"
            }
          },
          "zodDefinition": "const updateStatusSchema = z.object({\n  status: z.string(),\n  location: z.string().optional(),\n})"
        }
      ],
      "businessDomain": "Material Management"
    }
  ],
  "totalEndpoints": 864,
  "endpointsByMethod": {
    "POST": 322,
    "GET": 405,
    "PUT": 70,
    "DELETE": 66,
    "PATCH": 1
  },
  "endpointsByDomain": {
    "Collaboration": 88,
    "Administration": 33,
    "Authentication & Security": 53,
    "Other": 149,
    "Analytics & Reporting": 7,
    "Equipment Management": 27,
    "Quality Management": 91,
    "Material Management": 71,
    "Document Management": 139,
    "Personnel Management": 6,
    "Core Infrastructure": 10,
    "Production Management": 133,
    "Time Tracking": 15,
    "Workflow Management": 42
  },
  "generatedAt": "2025-10-30T14:20:20.902Z",
  "coverage": {
    "documented": 495,
    "validated": 495,
    "total": 864
  }
}