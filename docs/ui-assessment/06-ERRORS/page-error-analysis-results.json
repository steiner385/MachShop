{
  "summary": {
    "totalRoutes": 52,
    "routesWithErrors": 24,
    "routesWithWarnings": 0,
    "routesWithLoadFailures": 0,
    "totalConsoleMessages": 522,
    "criticalErrors": 0,
    "highErrors": 0,
    "mediumErrors": 372,
    "lowErrors": 150,
    "generatedAt": "2025-10-31T16:33:59.059Z"
  },
  "routeResults": [
    {
      "route": "/",
      "hasErrors": true,
      "hasWarnings": false,
      "hasLoadFailures": false,
      "consoleMessages": 0,
      "errors": [
        {
          "file": "api/auth.ts",
          "line": 42,
          "content": "throw new Error(error.response.data.message || 'Authentication failed');",
          "severity": "CRITICAL"
        },
        {
          "file": "api/auth.ts",
          "line": 44,
          "content": "throw new Error(error.message || 'Network error');",
          "severity": "CRITICAL"
        },
        {
          "file": "api/auth.ts",
          "line": 44,
          "content": "throw new Error(error.message || 'Network error');",
          "severity": "CRITICAL"
        },
        {
          "file": "api/client.ts",
          "line": 76,
          "content": "throw new Error(errorMessage);",
          "severity": "MEDIUM"
        },
        {
          "file": "api/parts.ts",
          "line": 54,
          "content": "throw new Error(errorMessage);",
          "severity": "MEDIUM"
        },
        {
          "file": "api/presence.ts",
          "line": 79,
          "content": "throw new Error(errorMessage);",
          "severity": "MEDIUM"
        },
        {
          "file": "api/rbac.ts",
          "line": 64,
          "content": "throw new Error('Insufficient permissions to perform this action');",
          "severity": "MEDIUM"
        },
        {
          "file": "api/rbac.ts",
          "line": 68,
          "content": "throw new Error(error.response.data.message);",
          "severity": "MEDIUM"
        },
        {
          "file": "api/rbac.ts",
          "line": 71,
          "content": "throw new Error(error.message || 'An unexpected error occurred');",
          "severity": "MEDIUM"
        },
        {
          "file": "api/routing.ts",
          "line": 103,
          "content": "throw new Error(errorMessage);",
          "severity": "MEDIUM"
        },
        {
          "file": "api/routingTemplates.ts",
          "line": 41,
          "content": "console.error('[Routing Template API Error]', message, error.response?.data);",
          "severity": "MEDIUM"
        },
        {
          "file": "api/workInstructions.ts",
          "line": 154,
          "content": "console.error('Error getting auth token', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "api/workInstructions.ts",
          "line": 168,
          "content": "throw new Error(error.response.data.error || error.response.data.message || 'API request failed');",
          "severity": "MEDIUM"
        },
        {
          "file": "api/workInstructions.ts",
          "line": 170,
          "content": "throw new Error(error.message || 'Network error');",
          "severity": "CRITICAL"
        },
        {
          "file": "api/workInstructions.ts",
          "line": 170,
          "content": "throw new Error(error.message || 'Network error');",
          "severity": "CRITICAL"
        },
        {
          "file": "components/Admin/AzureAD/AzureADDashboard.tsx",
          "line": 128,
          "content": "console.error('Failed to fetch dashboard data:', error);",
          "severity": "CRITICAL"
        },
        {
          "file": "components/Admin/AzureADConfig.tsx",
          "line": 139,
          "content": "console.error('Failed to save Azure AD configuration:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Admin/AzureADConfig.tsx",
          "line": 167,
          "content": "console.error('Connection test failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Admin/AzureADDashboard.tsx",
          "line": 90,
          "content": "console.error('Failed to load dashboard data:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Admin/UserSyncManager.tsx",
          "line": 99,
          "content": "console.error('Failed to load users:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Admin/UserSyncManager.tsx",
          "line": 111,
          "content": "console.error('Failed to load sync stats:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Admin/UserSyncManager.tsx",
          "line": 149,
          "content": "console.error('Sync failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Approvals/ApprovalTaskDetail.tsx",
          "line": 209,
          "content": "throw new Error('Task ID or Assignment ID is required');",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Approvals/ApprovalTaskDetail.tsx",
          "line": 221,
          "content": "throw new Error('Failed to load task details');",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Approvals/ApprovalTaskDetail.tsx",
          "line": 296,
          "content": "throw new Error('Failed to approve task');",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Approvals/ApprovalTaskDetail.tsx",
          "line": 327,
          "content": "throw new Error('Failed to reject task');",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Approvals/ApprovalTaskDetail.tsx",
          "line": 361,
          "content": "throw new Error('Failed to delegate task');",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Approvals/ApprovalTaskQueue.tsx",
          "line": 220,
          "content": "throw new Error('Failed to load approval tasks');",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Approvals/ApprovalTaskQueue.tsx",
          "line": 259,
          "content": "throw new Error('Failed to approve task');",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Approvals/ApprovalTaskQueue.tsx",
          "line": 288,
          "content": "throw new Error('Failed to reject task');",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Approvals/ApprovalTaskQueue.tsx",
          "line": 338,
          "content": "throw new Error(`Failed to ${action} tasks`);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Approvals/WorkflowProgressEnhanced.tsx",
          "line": 241,
          "content": "throw new Error('Failed to load workflow data');",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/BuildBookGenerator.tsx",
          "line": 193,
          "content": "console.error('Error fetching templates:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/BuildBookGenerator.tsx",
          "line": 296,
          "content": "console.error('Error generating preview:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/BuildBookGenerator.tsx",
          "line": 330,
          "content": "console.error('Error saving template:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/BuildBookGenerator.tsx",
          "line": 348,
          "content": "console.error('Validation failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/BuildRecordDetail.tsx",
          "line": 209,
          "content": "console.error('Error fetching build record:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/BuildRecordDetail.tsx",
          "line": 244,
          "content": "console.error('Error generating build book:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/BuildRecordList.tsx",
          "line": 211,
          "content": "console.error('Error fetching build records:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/BuildRecordList.tsx",
          "line": 231,
          "content": "console.error('Error fetching summary:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/BuildRecordList.tsx",
          "line": 309,
          "content": "console.error('Error generating build book:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/BuildRecordList.tsx",
          "line": 322,
          "content": "console.error('Error downloading build book:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/BuildRecordList.tsx",
          "line": 354,
          "content": "console.error('Error performing bulk action:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/BuildRecordOperationSignOff.tsx",
          "line": 241,
          "content": "console.error('Error signing off operation:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/BuildRecordOperationSignOff.tsx",
          "line": 275,
          "content": "console.error('Error invalidating signature:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/DeviationTracker.tsx",
          "line": 282,
          "content": "console.error('Error saving deviation:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/DeviationTracker.tsx",
          "line": 312,
          "content": "console.error('Error uploading file:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/DeviationTracker.tsx",
          "line": 344,
          "content": "console.error('Error adding comment:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/PhotoCaptureModal.tsx",
          "line": 146,
          "content": "console.error('Error accessing camera:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/PhotoCaptureModal.tsx",
          "line": 171,
          "content": "console.error('Error starting camera:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/PhotoCaptureModal.tsx",
          "line": 318,
          "content": "console.error('Error saving photo:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Collaboration/ActivityFeed.tsx",
          "line": 140,
          "content": "console.error('Failed to load activity stats:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Collaboration/ConflictResolution.tsx",
          "line": 128,
          "content": "console.error('Failed to load conflicts:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Collaboration/NotificationCenter.tsx",
          "line": 140,
          "content": "console.error('Failed to load unread count:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Collaboration/ReviewDashboard.tsx",
          "line": 151,
          "content": "console.error('Failed to load review stats:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Dashboard/__tests__/OEEMetricsCard.test.tsx",
          "line": 510,
          "content": "it('should handle API network errors', async () => {",
          "severity": "CRITICAL"
        },
        {
          "file": "components/Dashboard/__tests__/OEEMetricsCard.test.tsx",
          "line": 511,
          "content": "// Mock network error - component expects response format, so simulate API client behavior",
          "severity": "CRITICAL"
        },
        {
          "file": "components/Dashboard/__tests__/OEEMetricsCard.test.tsx",
          "line": 514,
          "content": "error: 'Network error',",
          "severity": "CRITICAL"
        },
        {
          "file": "components/Dashboard/__tests__/OEEMetricsCard.test.tsx",
          "line": 524,
          "content": "'Network error'",
          "severity": "CRITICAL"
        },
        {
          "file": "components/ECO/ECODashboard.tsx",
          "line": 171,
          "content": "console.error('Error loading ECOs:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/ECO/ECOForm.tsx",
          "line": 230,
          "content": "console.error('Impact analysis failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/ErrorBoundary.tsx",
          "line": 26,
          "content": "console.error('ErrorBoundary caught an error:', error, errorInfo);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Execution/ConfigurableExecutionLayout.tsx",
          "line": 76,
          "content": "console.error('Failed to initialize layout:', err);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Execution/LayoutPreferenceModal.tsx",
          "line": 29,
          "content": "console.error('Validation failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Execution/panels/DataCollectionPanel.tsx",
          "line": 148,
          "content": "console.error('Form validation failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Kits/KitAnalyticsDashboard.tsx",
          "line": 318,
          "content": "console.error('Failed to load analytics data:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Kits/KitForm.tsx",
          "line": 232,
          "content": "console.error('Form submission error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Kits/KitReportGenerator.tsx",
          "line": 330,
          "content": "console.error('Preview generation failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Kits/KitReportGenerator.tsx",
          "line": 362,
          "content": "console.error('Report generation failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPAlertManagement.tsx",
          "line": 194,
          "content": "console.error('Failed to load alerts:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPAlertManagement.tsx",
          "line": 215,
          "content": "console.error('Failed to load statistics:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPAlertManagement.tsx",
          "line": 237,
          "content": "console.error('Failed to load configuration:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPAlertManagement.tsx",
          "line": 409,
          "content": "console.error('Failed to acknowledge alert:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPAlertManagement.tsx",
          "line": 440,
          "content": "console.error('Failed to resolve alert:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPAlertManagement.tsx",
          "line": 465,
          "content": "console.error('Failed to update configuration:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPConfigurationForm.tsx",
          "line": 136,
          "content": "console.error('Failed to load parts:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPConfigurationForm.tsx",
          "line": 177,
          "content": "console.error('Failed to load configuration:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPConfigurationForm.tsx",
          "line": 272,
          "content": "throw new Error(error.message || 'Failed to save configuration');",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPConfigurationForm.tsx",
          "line": 275,
          "content": "console.error('Failed to save configuration:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPDashboard.tsx",
          "line": 164,
          "content": "console.error('Failed to load LLP dashboard data:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPDashboard.tsx",
          "line": 280,
          "content": "console.error('Export failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPDetailView.tsx",
          "line": 249,
          "content": "console.error('Failed to load LLP detail data:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPDetailView.tsx",
          "line": 417,
          "content": "console.error('Download failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPLifeEventForm.tsx",
          "line": 198,
          "content": "console.error('Failed to load serialized parts:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPLifeEventForm.tsx",
          "line": 221,
          "content": "console.error('Failed to load work orders:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPLifeEventForm.tsx",
          "line": 244,
          "content": "console.error('Failed to load assemblies:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPLifeEventForm.tsx",
          "line": 266,
          "content": "console.error('Failed to load life status:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPLifeEventForm.tsx",
          "line": 374,
          "content": "throw new Error(error.message || 'Failed to record life event');",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPLifeEventForm.tsx",
          "line": 377,
          "content": "console.error('Failed to record life event:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Layout/MainLayout.tsx",
          "line": 322,
          "content": "console.error('Logout error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Parameters/DependencyVisualizer.tsx",
          "line": 72,
          "content": "console.error(`Failed to extract dependencies for formula ${formula.id}:`, err);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Parameters/FormulaBuilder.tsx",
          "line": 85,
          "content": "console.error('Failed to extract dependencies:', err);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Personnel/PersonnelList.tsx",
          "line": 63,
          "content": "console.error('Failed to fetch personnel:', error);",
          "severity": "CRITICAL"
        },
        {
          "file": "components/Routing/ActiveUsersIndicator.tsx",
          "line": 76,
          "content": "console.error('Presence tracking error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Routing/DependencyGraph.tsx",
          "line": 163,
          "content": "console.error('Failed to create dependency graph:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Routing/RoutingForm.tsx",
          "line": 122,
          "content": "console.error('Error loading parts:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Routing/RoutingForm.tsx",
          "line": 250,
          "content": "console.error('[RoutingForm] Submit error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Routing/RoutingForm.tsx",
          "line": 251,
          "content": "console.error('[RoutingForm] Error details:', JSON.stringify(error, null, 2));",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Routing/RoutingForm.tsx",
          "line": 258,
          "content": "console.error('[RoutingForm] Error message:', errorMessage);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Routing/RoutingForm.tsx",
          "line": 284,
          "content": "console.error('[RoutingForm] Validation failed:', errorInfo);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Routing/RoutingForm.tsx",
          "line": 296,
          "content": "console.error('Validation failed:', errorInfo);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Routing/SaveAsTemplateModal.tsx",
          "line": 69,
          "content": "console.error('Failed to create template:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Routing/StepBuilderModal.tsx",
          "line": 144,
          "content": "console.error('Failed to load options:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Routing/StepBuilderModal.tsx",
          "line": 191,
          "content": "console.error('Validation failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/SPC/RuleViolationAlert.tsx",
          "line": 125,
          "content": "console.error('Error fetching rule violations:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/SPC/RuleViolationAlert.tsx",
          "line": 161,
          "content": "console.error('Error acknowledging violation:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/SPC/SPCConfiguration.tsx",
          "line": 199,
          "content": "console.error('Error saving SPC configuration:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/SPC/__tests__/SPCConfiguration.test.tsx",
          "line": 521,
          "content": "it('should handle network errors gracefully', async () => {",
          "severity": "CRITICAL"
        },
        {
          "file": "components/SPC/__tests__/SPCConfiguration.test.tsx",
          "line": 523,
          "content": "mockedAxios.post.mockRejectedValueOnce(new Error('Network error'));",
          "severity": "CRITICAL"
        },
        {
          "file": "components/Staging/StagingDashboard.tsx",
          "line": 195,
          "content": "console.error('Failed to load dashboard data:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/MobileTimeTracker.tsx",
          "line": 321,
          "content": "console.error('Failed to sync offline action:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/MobileTimeTracker.tsx",
          "line": 444,
          "content": "console.error('Failed to decode token:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/MobileTimeTracker.tsx",
          "line": 472,
          "content": "console.error('Failed to load data:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/MobileTimeTracker.tsx",
          "line": 494,
          "content": "console.error('Failed to load active entries:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/MobileTimeTracker.tsx",
          "line": 510,
          "content": "console.error('Failed to fetch indirect codes:', error);",
          "severity": "CRITICAL"
        },
        {
          "file": "components/TimeTracking/MobileTimeTracker.tsx",
          "line": 528,
          "content": "console.error('Failed to load personnel:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/MobileTimeTracker.tsx",
          "line": 577,
          "content": "console.error('Clock in error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/MobileTimeTracker.tsx",
          "line": 630,
          "content": "console.error('Indirect clock in error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/MobileTimeTracker.tsx",
          "line": 676,
          "content": "console.error('Clock out error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/SupervisorApprovalDashboard.tsx",
          "line": 281,
          "content": "console.error('Failed to load pending approvals:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/SupervisorApprovalDashboard.tsx",
          "line": 308,
          "content": "console.error('Failed to load metrics:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/SupervisorApprovalDashboard.tsx",
          "line": 340,
          "content": "console.error('Approval action error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/SupervisorApprovalDashboard.tsx",
          "line": 372,
          "content": "console.error('Bulk approval error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/TimeClockKiosk.tsx",
          "line": 409,
          "content": "console.error('Failed to fetch indirect codes:', error);",
          "severity": "CRITICAL"
        },
        {
          "file": "components/TimeTracking/TimeClockKiosk.tsx",
          "line": 627,
          "content": "console.error('Badge scan error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/TimeClockKiosk.tsx",
          "line": 653,
          "content": "console.error('PIN entry error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/TimeClockKiosk.tsx",
          "line": 676,
          "content": "console.error('Failed to load active entries:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/TimeClockKiosk.tsx",
          "line": 703,
          "content": "throw new Error('Clock in failed');",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/TimeClockKiosk.tsx",
          "line": 725,
          "content": "throw new Error('Clock out failed');",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/TimeEntryEdit.tsx",
          "line": 322,
          "content": "console.error('Validation error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/TimeEntryEdit.tsx",
          "line": 367,
          "content": "console.error('Submit error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/TimeEntryHistory.tsx",
          "line": 210,
          "content": "console.error('Failed to load edit history:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/TimeEntryManagement.tsx",
          "line": 237,
          "content": "console.error('Failed to load time entries:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/TimeEntryManagement.tsx",
          "line": 268,
          "content": "console.error('Failed to load reference data:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/TimeTrackingWidget.tsx",
          "line": 238,
          "content": "console.error('Failed to fetch indirect codes:', error);",
          "severity": "CRITICAL"
        },
        {
          "file": "components/TimeTracking/TimeTrackingWidget.tsx",
          "line": 373,
          "content": "console.error('Failed to decode token:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/TimeTrackingWidget.tsx",
          "line": 416,
          "content": "console.error('Failed to load active entries:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/TimeTrackingWidget.tsx",
          "line": 435,
          "content": "console.error('Failed to load summary:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/TimeTrackingWidget.tsx",
          "line": 474,
          "content": "console.error('Clock in error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/TimeTrackingWidget.tsx",
          "line": 515,
          "content": "console.error('Indirect clock in error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/TimeTrackingWidget.tsx",
          "line": 548,
          "content": "console.error('Clock out error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/TimeTrackingWidget.tsx",
          "line": 582,
          "content": "console.error('Stop all error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/WorkInstructions/DataCollectionFormBuilder.tsx",
          "line": 318,
          "content": "console.error('Failed to save form:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/WorkInstructions/DocumentExporter.tsx",
          "line": 217,
          "content": "console.error('Export failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/WorkInstructions/DocumentImporter.tsx",
          "line": 239,
          "content": "console.error('Failed to import document:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/WorkInstructions/MediaLibraryBrowser.tsx",
          "line": 179,
          "content": "console.error('Failed to upload files:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/WorkInstructions/MediaLibraryBrowser.tsx",
          "line": 329,
          "content": "console.error('Failed to delete items:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/WorkInstructions/MediaLibraryBrowser.tsx",
          "line": 346,
          "content": "console.error('Failed to create folder:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/WorkInstructions/NativeInstructionEditor.tsx",
          "line": 318,
          "content": "console.error('Failed to save work instruction:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/WorkInstructions/RichTextEditor.tsx",
          "line": 104,
          "content": "console.error('Lexical Editor Error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/WorkInstructions/WorkInstructionForm.tsx",
          "line": 176,
          "content": "throw new Error(error.message || 'Failed to reject work instruction');",
          "severity": "MEDIUM"
        },
        {
          "file": "components/WorkInstructions/WorkInstructionStepEditor.tsx",
          "line": 287,
          "content": "console.error('Image upload failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/WorkInstructions/WorkInstructionStepEditor.tsx",
          "line": 299,
          "content": "console.error('Video upload failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/WorkInstructions/WorkInstructionStepEditor.tsx",
          "line": 311,
          "content": "console.error('Attachment upload failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/WorkInstructions/plugins/ImagePlugin.tsx",
          "line": 260,
          "content": "throw new Error('ImagePlugin: ImageNode not registered on editor');",
          "severity": "MEDIUM"
        },
        {
          "file": "components/WorkInstructions/plugins/VideoPlugin.tsx",
          "line": 286,
          "content": "throw new Error('VideoPlugin: VideoNode not registered on editor');",
          "severity": "MEDIUM"
        },
        {
          "file": "components/WorkOrders/WorkOrderCreate.tsx",
          "line": 67,
          "content": "console.error('Failed to load parts:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/WorkOrders/WorkOrderCreate.tsx",
          "line": 105,
          "content": "throw new Error(error.message || 'Failed to create work order');",
          "severity": "MEDIUM"
        },
        {
          "file": "components/WorkOrders/WorkOrderCreate.tsx",
          "line": 114,
          "content": "console.error('Failed to create work order:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/WorkOrders/WorkOrderPriorityChange.tsx",
          "line": 75,
          "content": "throw new Error(error.message || 'Failed to update priority');",
          "severity": "MEDIUM"
        },
        {
          "file": "components/WorkOrders/WorkOrderReschedule.tsx",
          "line": 84,
          "content": "throw new Error(error.message || 'Failed to reschedule work order');",
          "severity": "MEDIUM"
        },
        {
          "file": "components/WorkOrders/__tests__/WorkOrderCreate.test.tsx",
          "line": 63,
          "content": "// Mock console.error to suppress error logs in tests",
          "severity": "MEDIUM"
        },
        {
          "file": "components/WorkOrders/__tests__/WorkOrderCreate.test.tsx",
          "line": 206,
          "content": "it('should use mock data when network error occurs', async () => {",
          "severity": "CRITICAL"
        },
        {
          "file": "components/WorkOrders/__tests__/WorkOrderCreate.test.tsx",
          "line": 207,
          "content": "mockFetch.mockRejectedValueOnce(new Error('Network error'));",
          "severity": "CRITICAL"
        },
        {
          "file": "components/WorkOrders/__tests__/WorkOrderCreate.test.tsx",
          "line": 532,
          "content": "it('should handle network error gracefully', async () => {",
          "severity": "CRITICAL"
        },
        {
          "file": "components/WorkOrders/__tests__/WorkOrderCreate.test.tsx",
          "line": 541,
          "content": "// Mock work order creation API network error",
          "severity": "CRITICAL"
        },
        {
          "file": "components/WorkOrders/__tests__/WorkOrderCreate.test.tsx",
          "line": 542,
          "content": "mockFetch.mockRejectedValueOnce(new Error('Network error'));",
          "severity": "CRITICAL"
        },
        {
          "file": "components/WorkOrders/__tests__/WorkOrderCreate.test.tsx",
          "line": 562,
          "content": "expect(message.error).toHaveBeenCalledWith('Network error');",
          "severity": "CRITICAL"
        },
        {
          "file": "components/WorkOrders/__tests__/WorkOrderPriorityChange.test.tsx",
          "line": 358,
          "content": "it('should handle network error', async () => {",
          "severity": "CRITICAL"
        },
        {
          "file": "components/WorkOrders/__tests__/WorkOrderPriorityChange.test.tsx",
          "line": 360,
          "content": "mockFetch.mockRejectedValueOnce(new Error('Network error'));",
          "severity": "CRITICAL"
        },
        {
          "file": "components/WorkOrders/__tests__/WorkOrderPriorityChange.test.tsx",
          "line": 374,
          "content": "expect(message.error).toHaveBeenCalledWith('Network error');",
          "severity": "CRITICAL"
        },
        {
          "file": "components/WorkOrders/__tests__/WorkOrderReschedule.test.tsx",
          "line": 316,
          "content": "it('should handle network error', async () => {",
          "severity": "CRITICAL"
        },
        {
          "file": "components/WorkOrders/__tests__/WorkOrderReschedule.test.tsx",
          "line": 318,
          "content": "mockFetch.mockRejectedValueOnce(new Error('Network error'));",
          "severity": "CRITICAL"
        },
        {
          "file": "components/WorkOrders/__tests__/WorkOrderReschedule.test.tsx",
          "line": 322,
          "content": "// Similar to above, focusing on component structure for network error scenarios",
          "severity": "CRITICAL"
        },
        {
          "file": "components/__tests__/ErrorBoundary.test.tsx",
          "line": 31,
          "content": "throw new Error('Test error message');",
          "severity": "MEDIUM"
        },
        {
          "file": "components/__tests__/ErrorBoundary.test.tsx",
          "line": 42,
          "content": "// Mock console.error to prevent test output pollution",
          "severity": "MEDIUM"
        },
        {
          "file": "components/__tests__/ErrorBoundary.test.tsx",
          "line": 253,
          "content": "throw new Error();",
          "severity": "MEDIUM"
        },
        {
          "file": "contexts/SiteContext.tsx",
          "line": 108,
          "content": "throw new Error(`Server error: ${response.status}`);",
          "severity": "MEDIUM"
        },
        {
          "file": "contexts/SiteContext.tsx",
          "line": 112,
          "content": "throw new Error(`Client error: ${response.status} ${response.statusText}`);",
          "severity": "MEDIUM"
        },
        {
          "file": "contexts/SiteContext.tsx",
          "line": 123,
          "content": "throw new Error('Request timeout');",
          "severity": "HIGH"
        },
        {
          "file": "contexts/SiteContext.tsx",
          "line": 128,
          "content": "console.error('Error fetching sites:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "contexts/SiteContext.tsx",
          "line": 278,
          "content": "console.error(`[SiteContext] Error refreshing sites (failure ${consecutiveFailuresRef.current}):`, err);",
          "severity": "MEDIUM"
        },
        {
          "file": "contexts/SiteContext.tsx",
          "line": 345,
          "content": "console.error('[SiteContext] Initialization error:', err);",
          "severity": "MEDIUM"
        },
        {
          "file": "contexts/SiteContext.tsx",
          "line": 490,
          "content": "throw new Error('useSite must be used within a SiteProvider');",
          "severity": "MEDIUM"
        },
        {
          "file": "contexts/__tests__/SiteContext.test.tsx",
          "line": 401,
          "content": "mockFetch.mockRejectedValue(new Error('Network error'));",
          "severity": "CRITICAL"
        },
        {
          "file": "contexts/__tests__/SiteContext.test.tsx",
          "line": 413,
          "content": "expect(screen.getByTestId('error')).toHaveTextContent('Network error');",
          "severity": "CRITICAL"
        },
        {
          "file": "contexts/__tests__/SiteContext.test.tsx",
          "line": 686,
          "content": "// Suppress console.error for this test since we expect an error",
          "severity": "MEDIUM"
        },
        {
          "file": "contexts/__tests__/SiteContext.test.tsx",
          "line": 687,
          "content": "const originalError = console.error;",
          "severity": "MEDIUM"
        },
        {
          "file": "contexts/__tests__/SiteContext.test.tsx",
          "line": 688,
          "content": "console.error = vi.fn();",
          "severity": "MEDIUM"
        },
        {
          "file": "contexts/__tests__/SiteContext.test.tsx",
          "line": 694,
          "content": "console.error = originalError;",
          "severity": "MEDIUM"
        },
        {
          "file": "hooks/usePresence.ts",
          "line": 77,
          "content": "console.error('Failed to update presence:', err);",
          "severity": "MEDIUM"
        },
        {
          "file": "hooks/usePresence.ts",
          "line": 103,
          "content": "console.error('Failed to fetch presence:', err);",
          "severity": "CRITICAL"
        },
        {
          "file": "hooks/usePresence.ts",
          "line": 126,
          "content": "console.error('Failed to remove presence:', err);",
          "severity": "MEDIUM"
        },
        {
          "file": "hooks/useRealTimeCollaboration.ts",
          "line": 123,
          "content": "console.error('Real-time collaboration error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "hooks/useRoutingChangeDetection.ts",
          "line": 100,
          "content": "throw new Error('Routing not found');",
          "severity": "MEDIUM"
        },
        {
          "file": "hooks/useRoutingChangeDetection.ts",
          "line": 123,
          "content": "console.error('Failed to check for routing changes:', err);",
          "severity": "MEDIUM"
        },
        {
          "file": "main.tsx",
          "line": 79,
          "content": "console.error('Application error:', error, errorInfo);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Admin/PermissionCatalogPage.tsx",
          "line": 99,
          "content": "console.error('Form validation failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Admin/RoleManagementPage.tsx",
          "line": 105,
          "content": "console.error('Form validation failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Admin/UserRoleAssignmentPage.tsx",
          "line": 143,
          "content": "console.error('Form validation failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Auth/LoginPage.tsx",
          "line": 76,
          "content": "console.error('Login failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Dashboard/Dashboard.tsx",
          "line": 94,
          "content": "console.error('Error fetching dashboard data:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Documents/DocumentsPage.tsx",
          "line": 89,
          "content": "console.error('Failed to fetch document statistics:', error);",
          "severity": "CRITICAL"
        },
        {
          "file": "pages/Equipment/Equipment.tsx",
          "line": 55,
          "content": "console.error('Failed to load equipment:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/FAI/FAIDetailPage.tsx",
          "line": 100,
          "content": "console.error('Failed to load FAI data:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/FAI/FAIDetailPage.tsx",
          "line": 111,
          "content": "console.error('Failed to load signatures:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Integration/IntegrationConfig.tsx",
          "line": 85,
          "content": "console.error('Error fetching integrations:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Integration/IntegrationConfig.tsx",
          "line": 120,
          "content": "console.error('Error deleting integration:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Integration/IntegrationConfig.tsx",
          "line": 154,
          "content": "console.error('Error testing connection:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Integration/IntegrationConfig.tsx",
          "line": 261,
          "content": "console.error('Error saving integration:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Integration/IntegrationConfig.tsx",
          "line": 272,
          "content": "console.error('Error toggling integration:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Integration/IntegrationDashboard.tsx",
          "line": 90,
          "content": "console.error('Error fetching integration health:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Integration/IntegrationDashboard.tsx",
          "line": 114,
          "content": "console.error('Error triggering sync:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Integration/IntegrationLogs.tsx",
          "line": 106,
          "content": "console.error('Error fetching integrations:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Integration/IntegrationLogs.tsx",
          "line": 139,
          "content": "console.error('Error fetching logs:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/NotFound/__tests__/NotFound.test.tsx",
          "line": 205,
          "content": "throw new Error('Navigation error');",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Operations/OperationCreatePage.tsx",
          "line": 46,
          "content": "console.error('Error fetching parent operations:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Operations/OperationCreatePage.tsx",
          "line": 58,
          "content": "console.error('Error creating operation:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Operations/OperationListPage.tsx",
          "line": 59,
          "content": "console.error('Error fetching operations:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Production/TeamWorkQueue.tsx",
          "line": 89,
          "content": "console.error('Failed to fetch team work queue', error);",
          "severity": "CRITICAL"
        },
        {
          "file": "pages/Quality/Inspections.tsx",
          "line": 87,
          "content": "console.error('Failed to load inspections:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Quality/Inspections.tsx",
          "line": 231,
          "content": "console.error('Failed to create inspection:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Quality/NCRs.tsx",
          "line": 93,
          "content": "console.error('Failed to load NCRs:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Quality/NCRs.tsx",
          "line": 267,
          "content": "console.error('Failed to create NCR:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Routing/RoutingTemplatesPage.tsx",
          "line": 77,
          "content": "console.error('Failed to fetch templates:', error);",
          "severity": "CRITICAL"
        },
        {
          "file": "pages/Routing/RoutingTemplatesPage.tsx",
          "line": 96,
          "content": "console.error('Failed to toggle favorite:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Routing/RoutingTemplatesPage.tsx",
          "line": 130,
          "content": "console.error('Failed to update template:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Routing/RoutingTemplatesPage.tsx",
          "line": 159,
          "content": "console.error('Failed to delete template:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Serialization/SerializationListPage.tsx",
          "line": 111,
          "content": "console.error('Failed to load parts:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Serialization/SerializationListPage.tsx",
          "line": 141,
          "content": "console.error('[TEST DEBUG] Generate single serial error:', error);",
          "severity": "LOW"
        },
        {
          "file": "pages/Serialization/SerializationListPage.tsx",
          "line": 142,
          "content": "console.error('[TEST DEBUG] Error details:', {",
          "severity": "LOW"
        },
        {
          "file": "pages/Serialization/SerializationListPage.tsx",
          "line": 204,
          "content": "console.error('[TEST DEBUG] Generate batch error:', error);",
          "severity": "LOW"
        },
        {
          "file": "pages/Serialization/SerializationListPage.tsx",
          "line": 237,
          "content": "console.error('Create part error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/WorkInstructions/WorkInstructionDetailPage.tsx",
          "line": 95,
          "content": "console.error('Failed to load signatures:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/WorkOrders/WorkOrderDetails.tsx",
          "line": 59,
          "content": "throw new Error('Invalid authentication token');",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/WorkOrders/WorkOrderDetails.tsx",
          "line": 64,
          "content": "throw new Error('No authentication token found');",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/WorkOrders/WorkOrders.tsx",
          "line": 94,
          "content": "console.error('Failed to load work orders:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "services/realTimeCollaboration.ts",
          "line": 65,
          "content": "console.error('Failed to parse collaboration event:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "services/realTimeCollaboration.ts",
          "line": 70,
          "content": "console.error('Real-time collaboration error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "services/realTimeCollaboration.ts",
          "line": 80,
          "content": "console.error('Failed to connect to real-time collaboration:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "services/realTimeCollaboration.ts",
          "line": 134,
          "content": ".catch(error => console.error('Failed to update presence:', error));",
          "severity": "MEDIUM"
        },
        {
          "file": "services/realTimeCollaboration.ts",
          "line": 269,
          "content": "console.error(`Failed to parse ${eventType} event:`, error);",
          "severity": "MEDIUM"
        },
        {
          "file": "services/realTimeCollaboration.ts",
          "line": 280,
          "content": "console.error('Max reconnection attempts reached');",
          "severity": "MEDIUM"
        },
        {
          "file": "services/realTimeCollaboration.ts",
          "line": 308,
          "content": ".catch(error => console.error('Failed to update subscriptions:', error));",
          "severity": "MEDIUM"
        },
        {
          "file": "store/AuthStore.tsx",
          "line": 168,
          "content": "console.error('[AuthStore] Logout API error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/AuthStore.tsx",
          "line": 212,
          "content": "throw new Error('No refresh token available');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/AuthStore.tsx",
          "line": 235,
          "content": "console.error('[AuthStore] Logout error during refresh failure:', logoutError);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/AuthStore.tsx",
          "line": 294,
          "content": "console.error('[AuthStore] Auth initialization error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/AuthStore.tsx",
          "line": 334,
          "content": "throw new Error('No redirect URL received from SAML provider');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/AuthStore.tsx",
          "line": 445,
          "content": "console.error('[AuthStore] Auth error from synchronizer:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/AuthStore.tsx",
          "line": 451,
          "content": "console.error('[AuthStore] Logout error during synchronizer auth error:', logoutError);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/AuthStore.tsx",
          "line": 515,
          "content": "throw new Error('useAuthStore must be used within AuthProvider');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/__tests__/AuthStore.test.tsx",
          "line": 284,
          "content": "const logoutError = new Error('Network error');",
          "severity": "CRITICAL"
        },
        {
          "file": "store/__tests__/AuthStore.test.tsx",
          "line": 465,
          "content": "// Suppress console.error for this test",
          "severity": "MEDIUM"
        },
        {
          "file": "store/__tests__/AuthStore.test.tsx",
          "line": 466,
          "content": "const originalError = console.error;",
          "severity": "MEDIUM"
        },
        {
          "file": "store/__tests__/AuthStore.test.tsx",
          "line": 467,
          "content": "console.error = vi.fn();",
          "severity": "MEDIUM"
        },
        {
          "file": "store/__tests__/AuthStore.test.tsx",
          "line": 473,
          "content": "console.error = originalError;",
          "severity": "MEDIUM"
        },
        {
          "file": "store/equipmentStore.ts",
          "line": 202,
          "content": "console.error('[EquipmentStore] fetchEquipment error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/equipmentStore.ts",
          "line": 204,
          "content": "equipmentError: error instanceof Error ? error.message : 'Network error while fetching equipment',",
          "severity": "CRITICAL"
        },
        {
          "file": "store/equipmentStore.ts",
          "line": 311,
          "content": "console.error('[EquipmentStore] fetchMaintenance error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/equipmentStore.ts",
          "line": 313,
          "content": "maintenanceError: error instanceof Error ? error.message : 'Network error while fetching maintenance records',",
          "severity": "CRITICAL"
        },
        {
          "file": "store/faiStore.ts",
          "line": 98,
          "content": "throw new Error(errorMessage);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/faiStore.ts",
          "line": 114,
          "content": "throw new Error(errorMessage);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/faiStore.ts",
          "line": 130,
          "content": "throw new Error(errorMessage);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/faiStore.ts",
          "line": 157,
          "content": "throw new Error(errorMessage);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/faiStore.ts",
          "line": 179,
          "content": "throw new Error(errorMessage);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/faiStore.ts",
          "line": 202,
          "content": "throw new Error(errorMessage);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/faiStore.ts",
          "line": 222,
          "content": "throw new Error(errorMessage);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/faiStore.ts",
          "line": 237,
          "content": "throw new Error(errorMessage);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/faiStore.ts",
          "line": 263,
          "content": "throw new Error(errorMessage);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/faiStore.ts",
          "line": 281,
          "content": "throw new Error(errorMessage);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/faiStore.ts",
          "line": 303,
          "content": "throw new Error(errorMessage);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/materialsStore.ts",
          "line": 198,
          "content": "console.error('[MaterialsStore] fetchDefinitions error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/materialsStore.ts",
          "line": 200,
          "content": "definitionsError: error instanceof Error ? error.message : 'Network error while fetching definitions',",
          "severity": "CRITICAL"
        },
        {
          "file": "store/materialsStore.ts",
          "line": 217,
          "content": "console.error('[MaterialsStore] fetchDefinitionById error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/materialsStore.ts",
          "line": 219,
          "content": "definitionsError: error instanceof Error ? error.message : 'Network error while fetching definition',",
          "severity": "CRITICAL"
        },
        {
          "file": "store/materialsStore.ts",
          "line": 236,
          "content": "console.error('[MaterialsStore] fetchDefinitionByNumber error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/materialsStore.ts",
          "line": 238,
          "content": "definitionsError: error instanceof Error ? error.message : 'Network error while fetching definition',",
          "severity": "CRITICAL"
        },
        {
          "file": "store/materialsStore.ts",
          "line": 268,
          "content": "console.error('[MaterialsStore] fetchLots error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/materialsStore.ts",
          "line": 270,
          "content": "lotsError: error instanceof Error ? error.message : 'Network error while fetching lots',",
          "severity": "CRITICAL"
        },
        {
          "file": "store/materialsStore.ts",
          "line": 287,
          "content": "console.error('[MaterialsStore] fetchLotById error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/materialsStore.ts",
          "line": 289,
          "content": "lotsError: error instanceof Error ? error.message : 'Network error while fetching lot',",
          "severity": "CRITICAL"
        },
        {
          "file": "store/materialsStore.ts",
          "line": 351,
          "content": "console.error('[MaterialsStore] fetchClasses error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/materialsStore.ts",
          "line": 353,
          "content": "classesError: error instanceof Error ? error.message : 'Network error while fetching classes',",
          "severity": "CRITICAL"
        },
        {
          "file": "store/routingStore.ts",
          "line": 219,
          "content": "throw new Error(response.error || 'Failed to fetch routings');",
          "severity": "CRITICAL"
        },
        {
          "file": "store/routingStore.ts",
          "line": 302,
          "content": "throw new Error(response.error || 'Failed to fetch routing');",
          "severity": "CRITICAL"
        },
        {
          "file": "store/routingStore.ts",
          "line": 324,
          "content": "throw new Error(response.error || 'Failed to create routing');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/routingStore.ts",
          "line": 355,
          "content": "throw new Error(response.error || 'Failed to update routing');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/routingStore.ts",
          "line": 405,
          "content": "throw new Error(response.error || 'Failed to copy routing');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/routingStore.ts",
          "line": 433,
          "content": "throw new Error(response.error || 'Failed to approve routing');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/routingStore.ts",
          "line": 457,
          "content": "throw new Error(response.error || 'Failed to activate routing');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/routingStore.ts",
          "line": 481,
          "content": "throw new Error(response.error || 'Failed to obsolete routing');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/routingStore.ts",
          "line": 508,
          "content": "throw new Error(response.error || 'Failed to fetch routing steps');",
          "severity": "CRITICAL"
        },
        {
          "file": "store/routingStore.ts",
          "line": 589,
          "content": "throw new Error(response.error || 'Failed to resequence steps');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/routingStore.ts",
          "line": 660,
          "content": "throw new Error('Failed to fetch available sites');",
          "severity": "CRITICAL"
        },
        {
          "file": "store/routingStore.ts",
          "line": 680,
          "content": "console.error('Failed to calculate routing timing:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/routingStore.ts",
          "line": 692,
          "content": "console.error('Failed to validate routing:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 220,
          "content": "throw new Error(response.error || 'Failed to fetch schedules');",
          "severity": "CRITICAL"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 290,
          "content": "throw new Error('Schedule ID is required and must be a valid string');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 304,
          "content": "throw new Error(response.error || 'Failed to fetch schedule');",
          "severity": "CRITICAL"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 319,
          "content": "throw new Error('Schedule number is required and must be a valid string');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 333,
          "content": "throw new Error(response.error || 'Failed to fetch schedule');",
          "severity": "CRITICAL"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 355,
          "content": "throw new Error(response.error || 'Failed to create schedule');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 379,
          "content": "throw new Error(response.error || 'Failed to update schedule');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 419,
          "content": "throw new Error(response.error || 'Failed to fetch schedules by state');",
          "severity": "CRITICAL"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 446,
          "content": "throw new Error(response.error || 'Failed to fetch schedule entries');",
          "severity": "CRITICAL"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 527,
          "content": "throw new Error(response.error || 'Failed to fetch dispatch-ready entries');",
          "severity": "CRITICAL"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 551,
          "content": "throw new Error(response.error || 'Failed to fetch constraints');",
          "severity": "CRITICAL"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 615,
          "content": "console.error('Failed to check constraint violation:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 634,
          "content": "throw new Error(response.error || 'Failed to transition schedule state');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 657,
          "content": "throw new Error(response.error || 'Failed to fetch state history');",
          "severity": "CRITICAL"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 677,
          "content": "throw new Error(response.error || 'Failed to apply priority sequencing');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 692,
          "content": "throw new Error(response.error || 'Failed to apply EDD sequencing');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 711,
          "content": "throw new Error(response.error || 'Failed to check schedule feasibility');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 734,
          "content": "throw new Error(response.error || 'Failed to dispatch schedule entry');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 749,
          "content": "throw new Error(response.error || 'Failed to dispatch all entries');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 772,
          "content": "throw new Error(response.error || 'Failed to fetch statistics');",
          "severity": "CRITICAL"
        },
        {
          "file": "store/signatureStore.ts",
          "line": 100,
          "content": "throw new Error(errorMessage);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/signatureStore.ts",
          "line": 116,
          "content": "throw new Error(errorMessage);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/signatureStore.ts",
          "line": 131,
          "content": "throw new Error(errorMessage);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/signatureStore.ts",
          "line": 158,
          "content": "throw new Error(errorMessage);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/signatureStore.ts",
          "line": 174,
          "content": "throw new Error(errorMessage);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/signatureStore.ts",
          "line": 197,
          "content": "throw new Error(errorMessage);",
          "severity": "MEDIUM"
        },
        {
          "file": "test/setup.ts",
          "line": 13,
          "content": "const originalConsoleError = console.error;",
          "severity": "MEDIUM"
        },
        {
          "file": "test/setup.ts",
          "line": 46,
          "content": "throw new Error(`React Key Prop Warning: ${message}`);",
          "severity": "HIGH"
        },
        {
          "file": "test/setup.ts",
          "line": 50,
          "content": "throw new Error(`Ant Design Deprecation Warning: ${message}`);",
          "severity": "HIGH"
        },
        {
          "file": "test/setup.ts",
          "line": 54,
          "content": "throw new Error(`React Duplicate Key Warning: ${message}`);",
          "severity": "HIGH"
        },
        {
          "file": "test/setup.ts",
          "line": 59,
          "content": "// Override console.error to capture critical errors",
          "severity": "MEDIUM"
        },
        {
          "file": "test/setup.ts",
          "line": 60,
          "content": "console.error = vi.fn((message: string, ...args: any[]) => {",
          "severity": "MEDIUM"
        },
        {
          "file": "test/setup.ts",
          "line": 61,
          "content": "// Call original console.error for debugging",
          "severity": "LOW"
        },
        {
          "file": "test/setup.ts",
          "line": 81,
          "content": "throw new Error(`React Error: ${message}`);",
          "severity": "MEDIUM"
        },
        {
          "file": "test-utils/helpers.ts",
          "line": 24,
          "content": "throw new Error('Element not found');",
          "severity": "MEDIUM"
        },
        {
          "file": "test-utils/helpers.ts",
          "line": 43,
          "content": "throw new Error('Element still present');",
          "severity": "MEDIUM"
        },
        {
          "file": "test-utils/helpers.ts",
          "line": 320,
          "content": "throw new Error('Test error for error boundary');",
          "severity": "MEDIUM"
        },
        {
          "file": "tests/e2e/collaborative-routing.spec.ts",
          "line": 465,
          "content": "test('COL-EDGE-002: Should handle network errors gracefully', async ({ page }) => {",
          "severity": "CRITICAL"
        },
        {
          "file": "tests/e2e/collaborative-routing.spec.ts",
          "line": 484,
          "content": "console.log('Network error resilience: Errors logged:', errors.length);",
          "severity": "CRITICAL"
        },
        {
          "file": "tests/setup.ts",
          "line": 49,
          "content": "const originalError = console.error;",
          "severity": "MEDIUM"
        },
        {
          "file": "tests/setup.ts",
          "line": 51,
          "content": "console.error = (...args: any[]) => {",
          "severity": "MEDIUM"
        },
        {
          "file": "tests/setup.ts",
          "line": 67,
          "content": "console.error = originalError;",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/AuthStateSynchronizer.ts",
          "line": 130,
          "content": "console.error('[AuthSync] Failed to initialize persistent state:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/AuthStateSynchronizer.ts",
          "line": 220,
          "content": "console.error('[AuthSync] Sync failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/AuthStateSynchronizer.ts",
          "line": 229,
          "content": "console.error('[AuthSync] Max sync retries exceeded, forcing logout');",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/AuthStateSynchronizer.ts",
          "line": 299,
          "content": "throw new Error(`Backend validation failed: ${response.status}`);",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/AuthStateSynchronizer.ts",
          "line": 456,
          "content": "console.error('[AuthSync] Failed to apply resolved state:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/AuthStateSynchronizer.ts",
          "line": 480,
          "content": "console.error('[AuthSync] Force logout failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/AuthStateSynchronizer.ts",
          "line": 524,
          "content": "console.error('[AuthSync] Token refresh check failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/AuthStateSynchronizer.ts",
          "line": 561,
          "content": "throw new Error(`Token refresh failed: ${response.status}`);",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/AuthStateSynchronizer.ts",
          "line": 583,
          "content": "console.error('[AuthSync] Token refresh failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/AuthStateSynchronizer.ts",
          "line": 619,
          "content": "console.error('[AuthSync] Backend token validation failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/AuthStateSynchronizer.ts",
          "line": 633,
          "content": "console.error(`[AuthSync] Event listener error for ${event}:`, error);",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/apiErrorHandler.ts",
          "line": 28,
          "content": "console.error('API Error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/apiErrorHandler.ts",
          "line": 30,
          "content": "// Handle network errors",
          "severity": "CRITICAL"
        },
        {
          "file": "utils/apiErrorHandler.ts",
          "line": 32,
          "content": "message.error('Network error. Please check your connection and try again.');",
          "severity": "CRITICAL"
        },
        {
          "file": "utils/apiErrorHandler.ts",
          "line": 136,
          "content": "throw new Error('Request timed out');",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/authInterceptor.ts",
          "line": 64,
          "content": "console.error('[AuthInterceptor] Error during logout:', logoutError);",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/authInterceptor.ts",
          "line": 92,
          "content": "console.error('[AuthInterceptor] Error in 401 handler:', handlerError);",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/csrfManager.ts",
          "line": 40,
          "content": "throw new Error(`Failed to fetch CSRF token: ${response.status}`);",
          "severity": "CRITICAL"
        },
        {
          "file": "utils/csrfManager.ts",
          "line": 45,
          "content": "throw new Error('No CSRF token received from server');",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/csrfManager.ts",
          "line": 54,
          "content": "console.error('Failed to fetch CSRF token:', error);",
          "severity": "CRITICAL"
        },
        {
          "file": "utils/csrfManager.ts",
          "line": 141,
          "content": "console.error('Failed to retry request with new CSRF token:', retryError);",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/csrfManager.ts",
          "line": 149,
          "content": "console.error('Request failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/exportUtils.ts",
          "line": 39,
          "content": "console.error('Error exporting to Excel:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/exportUtils.ts",
          "line": 40,
          "content": "throw new Error('Failed to export to Excel');",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/exportUtils.ts",
          "line": 88,
          "content": "console.error('Error exporting to PDF:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/exportUtils.ts",
          "line": 89,
          "content": "throw new Error('Failed to export to PDF');",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/exportUtils.ts",
          "line": 162,
          "content": "console.error('Error exporting dashboard metrics to Excel:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/exportUtils.ts",
          "line": 163,
          "content": "throw new Error('Failed to export dashboard metrics to Excel');",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/exportUtils.ts",
          "line": 285,
          "content": "console.error('Error exporting dashboard metrics to PDF:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/exportUtils.ts",
          "line": 286,
          "content": "throw new Error('Failed to export dashboard metrics to PDF');",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/uuidUtils.ts",
          "line": 71,
          "content": "throw new Error('Invalid UUID format - must be UUID v4');",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/uuidUtils.ts",
          "line": 127,
          "content": "throw new Error(`Entity type ${entityType} does not support persistent UUIDs`);",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/uuidUtils.ts",
          "line": 137,
          "content": "throw new Error('Invalid UUID format');",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/uuidUtils.ts",
          "line": 166,
          "content": "console.error('Failed to copy UUID to clipboard:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/uuidUtils.ts",
          "line": 208,
          "content": "throw new Error(`Invalid UUID parameter: ${validation.error}`);",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/uuidUtils.ts",
          "line": 212,
          "content": "throw new Error(`UUID parameter must be UUID v4 format, got: ${validation.format}`);",
          "severity": "MEDIUM"
        }
      ],
      "warnings": [],
      "loadIssues": [],
      "recommendations": []
    },
    {
      "route": "/login",
      "hasErrors": true,
      "hasWarnings": false,
      "hasLoadFailures": false,
      "consoleMessages": 0,
      "errors": [
        {
          "file": "api/auth.ts",
          "line": 42,
          "content": "throw new Error(error.response.data.message || 'Authentication failed');",
          "severity": "CRITICAL"
        },
        {
          "file": "api/auth.ts",
          "line": 44,
          "content": "throw new Error(error.message || 'Network error');",
          "severity": "CRITICAL"
        },
        {
          "file": "api/auth.ts",
          "line": 44,
          "content": "throw new Error(error.message || 'Network error');",
          "severity": "CRITICAL"
        },
        {
          "file": "api/parts.ts",
          "line": 54,
          "content": "throw new Error(errorMessage);",
          "severity": "MEDIUM"
        },
        {
          "file": "api/presence.ts",
          "line": 79,
          "content": "throw new Error(errorMessage);",
          "severity": "MEDIUM"
        },
        {
          "file": "api/rbac.ts",
          "line": 64,
          "content": "throw new Error('Insufficient permissions to perform this action');",
          "severity": "MEDIUM"
        },
        {
          "file": "api/rbac.ts",
          "line": 68,
          "content": "throw new Error(error.response.data.message);",
          "severity": "MEDIUM"
        },
        {
          "file": "api/rbac.ts",
          "line": 71,
          "content": "throw new Error(error.message || 'An unexpected error occurred');",
          "severity": "MEDIUM"
        },
        {
          "file": "api/routing.ts",
          "line": 103,
          "content": "throw new Error(errorMessage);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Admin/AzureADConfig.tsx",
          "line": 139,
          "content": "console.error('Failed to save Azure AD configuration:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Admin/AzureADConfig.tsx",
          "line": 167,
          "content": "console.error('Connection test failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Layout/MainLayout.tsx",
          "line": 322,
          "content": "console.error('Logout error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Auth/LoginPage.tsx",
          "line": 76,
          "content": "console.error('Login failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/AuthStore.tsx",
          "line": 168,
          "content": "console.error('[AuthStore] Logout API error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/AuthStore.tsx",
          "line": 212,
          "content": "throw new Error('No refresh token available');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/AuthStore.tsx",
          "line": 235,
          "content": "console.error('[AuthStore] Logout error during refresh failure:', logoutError);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/AuthStore.tsx",
          "line": 294,
          "content": "console.error('[AuthStore] Auth initialization error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/AuthStore.tsx",
          "line": 334,
          "content": "throw new Error('No redirect URL received from SAML provider');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/AuthStore.tsx",
          "line": 445,
          "content": "console.error('[AuthStore] Auth error from synchronizer:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/AuthStore.tsx",
          "line": 451,
          "content": "console.error('[AuthStore] Logout error during synchronizer auth error:', logoutError);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/AuthStore.tsx",
          "line": 515,
          "content": "throw new Error('useAuthStore must be used within AuthProvider');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/__tests__/AuthStore.test.tsx",
          "line": 284,
          "content": "const logoutError = new Error('Network error');",
          "severity": "CRITICAL"
        },
        {
          "file": "store/__tests__/AuthStore.test.tsx",
          "line": 465,
          "content": "// Suppress console.error for this test",
          "severity": "MEDIUM"
        },
        {
          "file": "store/__tests__/AuthStore.test.tsx",
          "line": 466,
          "content": "const originalError = console.error;",
          "severity": "MEDIUM"
        },
        {
          "file": "store/__tests__/AuthStore.test.tsx",
          "line": 467,
          "content": "console.error = vi.fn();",
          "severity": "MEDIUM"
        },
        {
          "file": "store/__tests__/AuthStore.test.tsx",
          "line": 473,
          "content": "console.error = originalError;",
          "severity": "MEDIUM"
        },
        {
          "file": "tests/e2e/collaborative-routing.spec.ts",
          "line": 465,
          "content": "test('COL-EDGE-002: Should handle network errors gracefully', async ({ page }) => {",
          "severity": "CRITICAL"
        },
        {
          "file": "tests/e2e/collaborative-routing.spec.ts",
          "line": 484,
          "content": "console.log('Network error resilience: Errors logged:', errors.length);",
          "severity": "CRITICAL"
        },
        {
          "file": "utils/apiErrorHandler.ts",
          "line": 28,
          "content": "console.error('API Error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/apiErrorHandler.ts",
          "line": 30,
          "content": "// Handle network errors",
          "severity": "CRITICAL"
        },
        {
          "file": "utils/apiErrorHandler.ts",
          "line": 32,
          "content": "message.error('Network error. Please check your connection and try again.');",
          "severity": "CRITICAL"
        },
        {
          "file": "utils/apiErrorHandler.ts",
          "line": 136,
          "content": "throw new Error('Request timed out');",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/authInterceptor.ts",
          "line": 64,
          "content": "console.error('[AuthInterceptor] Error during logout:', logoutError);",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/authInterceptor.ts",
          "line": 92,
          "content": "console.error('[AuthInterceptor] Error in 401 handler:', handlerError);",
          "severity": "MEDIUM"
        }
      ],
      "warnings": [],
      "loadIssues": [],
      "recommendations": []
    },
    {
      "route": "/dashboard",
      "hasErrors": true,
      "hasWarnings": false,
      "hasLoadFailures": false,
      "consoleMessages": 0,
      "errors": [
        {
          "file": "api/rbac.ts",
          "line": 64,
          "content": "throw new Error('Insufficient permissions to perform this action');",
          "severity": "MEDIUM"
        },
        {
          "file": "api/rbac.ts",
          "line": 68,
          "content": "throw new Error(error.response.data.message);",
          "severity": "MEDIUM"
        },
        {
          "file": "api/rbac.ts",
          "line": 71,
          "content": "throw new Error(error.message || 'An unexpected error occurred');",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Admin/AzureAD/AzureADDashboard.tsx",
          "line": 128,
          "content": "console.error('Failed to fetch dashboard data:', error);",
          "severity": "CRITICAL"
        },
        {
          "file": "components/Admin/AzureADDashboard.tsx",
          "line": 90,
          "content": "console.error('Failed to load dashboard data:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Collaboration/ReviewDashboard.tsx",
          "line": 151,
          "content": "console.error('Failed to load review stats:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Dashboard/__tests__/OEEMetricsCard.test.tsx",
          "line": 510,
          "content": "it('should handle API network errors', async () => {",
          "severity": "CRITICAL"
        },
        {
          "file": "components/Dashboard/__tests__/OEEMetricsCard.test.tsx",
          "line": 511,
          "content": "// Mock network error - component expects response format, so simulate API client behavior",
          "severity": "CRITICAL"
        },
        {
          "file": "components/Dashboard/__tests__/OEEMetricsCard.test.tsx",
          "line": 514,
          "content": "error: 'Network error',",
          "severity": "CRITICAL"
        },
        {
          "file": "components/Dashboard/__tests__/OEEMetricsCard.test.tsx",
          "line": 524,
          "content": "'Network error'",
          "severity": "CRITICAL"
        },
        {
          "file": "components/ECO/ECODashboard.tsx",
          "line": 171,
          "content": "console.error('Error loading ECOs:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Kits/KitAnalyticsDashboard.tsx",
          "line": 318,
          "content": "console.error('Failed to load analytics data:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPAlertManagement.tsx",
          "line": 194,
          "content": "console.error('Failed to load alerts:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPAlertManagement.tsx",
          "line": 215,
          "content": "console.error('Failed to load statistics:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPAlertManagement.tsx",
          "line": 237,
          "content": "console.error('Failed to load configuration:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPAlertManagement.tsx",
          "line": 409,
          "content": "console.error('Failed to acknowledge alert:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPAlertManagement.tsx",
          "line": 440,
          "content": "console.error('Failed to resolve alert:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPAlertManagement.tsx",
          "line": 465,
          "content": "console.error('Failed to update configuration:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPConfigurationForm.tsx",
          "line": 136,
          "content": "console.error('Failed to load parts:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPConfigurationForm.tsx",
          "line": 177,
          "content": "console.error('Failed to load configuration:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPConfigurationForm.tsx",
          "line": 272,
          "content": "throw new Error(error.message || 'Failed to save configuration');",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPConfigurationForm.tsx",
          "line": 275,
          "content": "console.error('Failed to save configuration:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPDashboard.tsx",
          "line": 164,
          "content": "console.error('Failed to load LLP dashboard data:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPDashboard.tsx",
          "line": 280,
          "content": "console.error('Export failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPLifeEventForm.tsx",
          "line": 198,
          "content": "console.error('Failed to load serialized parts:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPLifeEventForm.tsx",
          "line": 221,
          "content": "console.error('Failed to load work orders:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPLifeEventForm.tsx",
          "line": 244,
          "content": "console.error('Failed to load assemblies:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPLifeEventForm.tsx",
          "line": 266,
          "content": "console.error('Failed to load life status:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPLifeEventForm.tsx",
          "line": 374,
          "content": "throw new Error(error.message || 'Failed to record life event');",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPLifeEventForm.tsx",
          "line": 377,
          "content": "console.error('Failed to record life event:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Layout/MainLayout.tsx",
          "line": 322,
          "content": "console.error('Logout error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Staging/StagingDashboard.tsx",
          "line": 195,
          "content": "console.error('Failed to load dashboard data:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/SupervisorApprovalDashboard.tsx",
          "line": 281,
          "content": "console.error('Failed to load pending approvals:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/SupervisorApprovalDashboard.tsx",
          "line": 308,
          "content": "console.error('Failed to load metrics:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/SupervisorApprovalDashboard.tsx",
          "line": 340,
          "content": "console.error('Approval action error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/SupervisorApprovalDashboard.tsx",
          "line": 372,
          "content": "console.error('Bulk approval error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/TimeEntryManagement.tsx",
          "line": 237,
          "content": "console.error('Failed to load time entries:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/TimeEntryManagement.tsx",
          "line": 268,
          "content": "console.error('Failed to load reference data:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Auth/LoginPage.tsx",
          "line": 76,
          "content": "console.error('Login failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Dashboard/Dashboard.tsx",
          "line": 94,
          "content": "console.error('Error fetching dashboard data:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Integration/IntegrationDashboard.tsx",
          "line": 90,
          "content": "console.error('Error fetching integration health:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Integration/IntegrationDashboard.tsx",
          "line": 114,
          "content": "console.error('Error triggering sync:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/NotFound/__tests__/NotFound.test.tsx",
          "line": 205,
          "content": "throw new Error('Navigation error');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/equipmentStore.ts",
          "line": 202,
          "content": "console.error('[EquipmentStore] fetchEquipment error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/equipmentStore.ts",
          "line": 204,
          "content": "equipmentError: error instanceof Error ? error.message : 'Network error while fetching equipment',",
          "severity": "CRITICAL"
        },
        {
          "file": "store/equipmentStore.ts",
          "line": 311,
          "content": "console.error('[EquipmentStore] fetchMaintenance error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/equipmentStore.ts",
          "line": 313,
          "content": "maintenanceError: error instanceof Error ? error.message : 'Network error while fetching maintenance records',",
          "severity": "CRITICAL"
        },
        {
          "file": "store/materialsStore.ts",
          "line": 198,
          "content": "console.error('[MaterialsStore] fetchDefinitions error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/materialsStore.ts",
          "line": 200,
          "content": "definitionsError: error instanceof Error ? error.message : 'Network error while fetching definitions',",
          "severity": "CRITICAL"
        },
        {
          "file": "store/materialsStore.ts",
          "line": 217,
          "content": "console.error('[MaterialsStore] fetchDefinitionById error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/materialsStore.ts",
          "line": 219,
          "content": "definitionsError: error instanceof Error ? error.message : 'Network error while fetching definition',",
          "severity": "CRITICAL"
        },
        {
          "file": "store/materialsStore.ts",
          "line": 236,
          "content": "console.error('[MaterialsStore] fetchDefinitionByNumber error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/materialsStore.ts",
          "line": 238,
          "content": "definitionsError: error instanceof Error ? error.message : 'Network error while fetching definition',",
          "severity": "CRITICAL"
        },
        {
          "file": "store/materialsStore.ts",
          "line": 268,
          "content": "console.error('[MaterialsStore] fetchLots error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/materialsStore.ts",
          "line": 270,
          "content": "lotsError: error instanceof Error ? error.message : 'Network error while fetching lots',",
          "severity": "CRITICAL"
        },
        {
          "file": "store/materialsStore.ts",
          "line": 287,
          "content": "console.error('[MaterialsStore] fetchLotById error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/materialsStore.ts",
          "line": 289,
          "content": "lotsError: error instanceof Error ? error.message : 'Network error while fetching lot',",
          "severity": "CRITICAL"
        },
        {
          "file": "store/materialsStore.ts",
          "line": 351,
          "content": "console.error('[MaterialsStore] fetchClasses error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/materialsStore.ts",
          "line": 353,
          "content": "classesError: error instanceof Error ? error.message : 'Network error while fetching classes',",
          "severity": "CRITICAL"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 220,
          "content": "throw new Error(response.error || 'Failed to fetch schedules');",
          "severity": "CRITICAL"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 290,
          "content": "throw new Error('Schedule ID is required and must be a valid string');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 304,
          "content": "throw new Error(response.error || 'Failed to fetch schedule');",
          "severity": "CRITICAL"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 319,
          "content": "throw new Error('Schedule number is required and must be a valid string');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 333,
          "content": "throw new Error(response.error || 'Failed to fetch schedule');",
          "severity": "CRITICAL"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 355,
          "content": "throw new Error(response.error || 'Failed to create schedule');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 379,
          "content": "throw new Error(response.error || 'Failed to update schedule');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 419,
          "content": "throw new Error(response.error || 'Failed to fetch schedules by state');",
          "severity": "CRITICAL"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 446,
          "content": "throw new Error(response.error || 'Failed to fetch schedule entries');",
          "severity": "CRITICAL"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 527,
          "content": "throw new Error(response.error || 'Failed to fetch dispatch-ready entries');",
          "severity": "CRITICAL"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 551,
          "content": "throw new Error(response.error || 'Failed to fetch constraints');",
          "severity": "CRITICAL"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 615,
          "content": "console.error('Failed to check constraint violation:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 634,
          "content": "throw new Error(response.error || 'Failed to transition schedule state');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 657,
          "content": "throw new Error(response.error || 'Failed to fetch state history');",
          "severity": "CRITICAL"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 677,
          "content": "throw new Error(response.error || 'Failed to apply priority sequencing');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 692,
          "content": "throw new Error(response.error || 'Failed to apply EDD sequencing');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 711,
          "content": "throw new Error(response.error || 'Failed to check schedule feasibility');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 734,
          "content": "throw new Error(response.error || 'Failed to dispatch schedule entry');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 749,
          "content": "throw new Error(response.error || 'Failed to dispatch all entries');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 772,
          "content": "throw new Error(response.error || 'Failed to fetch statistics');",
          "severity": "CRITICAL"
        },
        {
          "file": "tests/e2e/collaborative-routing.spec.ts",
          "line": 465,
          "content": "test('COL-EDGE-002: Should handle network errors gracefully', async ({ page }) => {",
          "severity": "CRITICAL"
        },
        {
          "file": "tests/e2e/collaborative-routing.spec.ts",
          "line": 484,
          "content": "console.log('Network error resilience: Errors logged:', errors.length);",
          "severity": "CRITICAL"
        },
        {
          "file": "utils/csrfManager.ts",
          "line": 40,
          "content": "throw new Error(`Failed to fetch CSRF token: ${response.status}`);",
          "severity": "CRITICAL"
        },
        {
          "file": "utils/csrfManager.ts",
          "line": 45,
          "content": "throw new Error('No CSRF token received from server');",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/csrfManager.ts",
          "line": 54,
          "content": "console.error('Failed to fetch CSRF token:', error);",
          "severity": "CRITICAL"
        },
        {
          "file": "utils/csrfManager.ts",
          "line": 141,
          "content": "console.error('Failed to retry request with new CSRF token:', retryError);",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/csrfManager.ts",
          "line": 149,
          "content": "console.error('Request failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/exportUtils.ts",
          "line": 39,
          "content": "console.error('Error exporting to Excel:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/exportUtils.ts",
          "line": 40,
          "content": "throw new Error('Failed to export to Excel');",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/exportUtils.ts",
          "line": 88,
          "content": "console.error('Error exporting to PDF:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/exportUtils.ts",
          "line": 89,
          "content": "throw new Error('Failed to export to PDF');",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/exportUtils.ts",
          "line": 162,
          "content": "console.error('Error exporting dashboard metrics to Excel:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/exportUtils.ts",
          "line": 163,
          "content": "throw new Error('Failed to export dashboard metrics to Excel');",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/exportUtils.ts",
          "line": 285,
          "content": "console.error('Error exporting dashboard metrics to PDF:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/exportUtils.ts",
          "line": 286,
          "content": "throw new Error('Failed to export dashboard metrics to PDF');",
          "severity": "MEDIUM"
        }
      ],
      "warnings": [],
      "loadIssues": [],
      "recommendations": []
    },
    {
      "route": "/work-orders",
      "hasErrors": true,
      "hasWarnings": false,
      "hasLoadFailures": false,
      "consoleMessages": 0,
      "errors": [
        {
          "file": "pages/WorkOrders/WorkOrders.tsx",
          "line": 94,
          "content": "console.error('Failed to load work orders:', error);",
          "severity": "MEDIUM"
        }
      ],
      "warnings": [],
      "loadIssues": [],
      "recommendations": []
    },
    {
      "route": "/work-orders/create",
      "hasErrors": false,
      "hasWarnings": false,
      "hasLoadFailures": false,
      "consoleMessages": 0,
      "errors": [],
      "warnings": [],
      "loadIssues": [],
      "recommendations": []
    },
    {
      "route": "/work-orders/:id",
      "hasErrors": false,
      "hasWarnings": false,
      "hasLoadFailures": false,
      "consoleMessages": 0,
      "errors": [],
      "warnings": [],
      "loadIssues": [],
      "recommendations": []
    },
    {
      "route": "/quality/inspections",
      "hasErrors": true,
      "hasWarnings": false,
      "hasLoadFailures": false,
      "consoleMessages": 0,
      "errors": [
        {
          "file": "components/Layout/MainLayout.tsx",
          "line": 322,
          "content": "console.error('Logout error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Quality/Inspections.tsx",
          "line": 87,
          "content": "console.error('Failed to load inspections:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Quality/Inspections.tsx",
          "line": 231,
          "content": "console.error('Failed to create inspection:', error);",
          "severity": "MEDIUM"
        }
      ],
      "warnings": [],
      "loadIssues": [],
      "recommendations": []
    },
    {
      "route": "/quality/inspections/create",
      "hasErrors": false,
      "hasWarnings": false,
      "hasLoadFailures": false,
      "consoleMessages": 0,
      "errors": [],
      "warnings": [],
      "loadIssues": [],
      "recommendations": []
    },
    {
      "route": "/quality/inspections/:id",
      "hasErrors": false,
      "hasWarnings": false,
      "hasLoadFailures": false,
      "consoleMessages": 0,
      "errors": [],
      "warnings": [],
      "loadIssues": [],
      "recommendations": []
    },
    {
      "route": "/traceability",
      "hasErrors": true,
      "hasWarnings": false,
      "hasLoadFailures": false,
      "consoleMessages": 0,
      "errors": [
        {
          "file": "components/LLP/LLPDetailView.tsx",
          "line": 249,
          "content": "console.error('Failed to load LLP detail data:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPDetailView.tsx",
          "line": 417,
          "content": "console.error('Download failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPLifeEventForm.tsx",
          "line": 198,
          "content": "console.error('Failed to load serialized parts:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPLifeEventForm.tsx",
          "line": 221,
          "content": "console.error('Failed to load work orders:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPLifeEventForm.tsx",
          "line": 244,
          "content": "console.error('Failed to load assemblies:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPLifeEventForm.tsx",
          "line": 266,
          "content": "console.error('Failed to load life status:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPLifeEventForm.tsx",
          "line": 374,
          "content": "throw new Error(error.message || 'Failed to record life event');",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPLifeEventForm.tsx",
          "line": 377,
          "content": "console.error('Failed to record life event:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Layout/MainLayout.tsx",
          "line": 322,
          "content": "console.error('Logout error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Dashboard/Dashboard.tsx",
          "line": 94,
          "content": "console.error('Error fetching dashboard data:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Serialization/SerializationListPage.tsx",
          "line": 111,
          "content": "console.error('Failed to load parts:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Serialization/SerializationListPage.tsx",
          "line": 141,
          "content": "console.error('[TEST DEBUG] Generate single serial error:', error);",
          "severity": "LOW"
        },
        {
          "file": "pages/Serialization/SerializationListPage.tsx",
          "line": 142,
          "content": "console.error('[TEST DEBUG] Error details:', {",
          "severity": "LOW"
        },
        {
          "file": "pages/Serialization/SerializationListPage.tsx",
          "line": 204,
          "content": "console.error('[TEST DEBUG] Generate batch error:', error);",
          "severity": "LOW"
        },
        {
          "file": "pages/Serialization/SerializationListPage.tsx",
          "line": 237,
          "content": "console.error('Create part error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/uuidUtils.ts",
          "line": 71,
          "content": "throw new Error('Invalid UUID format - must be UUID v4');",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/uuidUtils.ts",
          "line": 127,
          "content": "throw new Error(`Entity type ${entityType} does not support persistent UUIDs`);",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/uuidUtils.ts",
          "line": 137,
          "content": "throw new Error('Invalid UUID format');",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/uuidUtils.ts",
          "line": 166,
          "content": "console.error('Failed to copy UUID to clipboard:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/uuidUtils.ts",
          "line": 208,
          "content": "throw new Error(`Invalid UUID parameter: ${validation.error}`);",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/uuidUtils.ts",
          "line": 212,
          "content": "throw new Error(`UUID parameter must be UUID v4 format, got: ${validation.format}`);",
          "severity": "MEDIUM"
        }
      ],
      "warnings": [],
      "loadIssues": [],
      "recommendations": []
    },
    {
      "route": "/traceability/:serialNumber",
      "hasErrors": false,
      "hasWarnings": false,
      "hasLoadFailures": false,
      "consoleMessages": 0,
      "errors": [],
      "warnings": [],
      "loadIssues": [],
      "recommendations": []
    },
    {
      "route": "/routing",
      "hasErrors": true,
      "hasWarnings": false,
      "hasLoadFailures": false,
      "consoleMessages": 0,
      "errors": [
        {
          "file": "api/presence.ts",
          "line": 79,
          "content": "throw new Error(errorMessage);",
          "severity": "MEDIUM"
        },
        {
          "file": "api/routing.ts",
          "line": 103,
          "content": "throw new Error(errorMessage);",
          "severity": "MEDIUM"
        },
        {
          "file": "api/routingTemplates.ts",
          "line": 41,
          "content": "console.error('[Routing Template API Error]', message, error.response?.data);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Approvals/WorkflowProgressEnhanced.tsx",
          "line": 241,
          "content": "throw new Error('Failed to load workflow data');",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Layout/MainLayout.tsx",
          "line": 322,
          "content": "console.error('Logout error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Routing/ActiveUsersIndicator.tsx",
          "line": 76,
          "content": "console.error('Presence tracking error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Routing/DependencyGraph.tsx",
          "line": 163,
          "content": "console.error('Failed to create dependency graph:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Routing/RoutingForm.tsx",
          "line": 122,
          "content": "console.error('Error loading parts:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Routing/RoutingForm.tsx",
          "line": 250,
          "content": "console.error('[RoutingForm] Submit error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Routing/RoutingForm.tsx",
          "line": 251,
          "content": "console.error('[RoutingForm] Error details:', JSON.stringify(error, null, 2));",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Routing/RoutingForm.tsx",
          "line": 258,
          "content": "console.error('[RoutingForm] Error message:', errorMessage);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Routing/RoutingForm.tsx",
          "line": 284,
          "content": "console.error('[RoutingForm] Validation failed:', errorInfo);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Routing/RoutingForm.tsx",
          "line": 296,
          "content": "console.error('Validation failed:', errorInfo);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Routing/SaveAsTemplateModal.tsx",
          "line": 69,
          "content": "console.error('Failed to create template:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Routing/StepBuilderModal.tsx",
          "line": 144,
          "content": "console.error('Failed to load options:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Routing/StepBuilderModal.tsx",
          "line": 191,
          "content": "console.error('Validation failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/WorkInstructions/WorkInstructionForm.tsx",
          "line": 176,
          "content": "throw new Error(error.message || 'Failed to reject work instruction');",
          "severity": "MEDIUM"
        },
        {
          "file": "components/WorkOrders/WorkOrderCreate.tsx",
          "line": 67,
          "content": "console.error('Failed to load parts:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/WorkOrders/WorkOrderCreate.tsx",
          "line": 105,
          "content": "throw new Error(error.message || 'Failed to create work order');",
          "severity": "MEDIUM"
        },
        {
          "file": "components/WorkOrders/WorkOrderCreate.tsx",
          "line": 114,
          "content": "console.error('Failed to create work order:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "hooks/usePresence.ts",
          "line": 77,
          "content": "console.error('Failed to update presence:', err);",
          "severity": "MEDIUM"
        },
        {
          "file": "hooks/usePresence.ts",
          "line": 103,
          "content": "console.error('Failed to fetch presence:', err);",
          "severity": "CRITICAL"
        },
        {
          "file": "hooks/usePresence.ts",
          "line": 126,
          "content": "console.error('Failed to remove presence:', err);",
          "severity": "MEDIUM"
        },
        {
          "file": "hooks/useRoutingChangeDetection.ts",
          "line": 100,
          "content": "throw new Error('Routing not found');",
          "severity": "MEDIUM"
        },
        {
          "file": "hooks/useRoutingChangeDetection.ts",
          "line": 123,
          "content": "console.error('Failed to check for routing changes:', err);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/NotFound/__tests__/NotFound.test.tsx",
          "line": 205,
          "content": "throw new Error('Navigation error');",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Routing/RoutingTemplatesPage.tsx",
          "line": 77,
          "content": "console.error('Failed to fetch templates:', error);",
          "severity": "CRITICAL"
        },
        {
          "file": "pages/Routing/RoutingTemplatesPage.tsx",
          "line": 96,
          "content": "console.error('Failed to toggle favorite:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Routing/RoutingTemplatesPage.tsx",
          "line": 130,
          "content": "console.error('Failed to update template:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Routing/RoutingTemplatesPage.tsx",
          "line": 159,
          "content": "console.error('Failed to delete template:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/routingStore.ts",
          "line": 219,
          "content": "throw new Error(response.error || 'Failed to fetch routings');",
          "severity": "CRITICAL"
        },
        {
          "file": "store/routingStore.ts",
          "line": 302,
          "content": "throw new Error(response.error || 'Failed to fetch routing');",
          "severity": "CRITICAL"
        },
        {
          "file": "store/routingStore.ts",
          "line": 324,
          "content": "throw new Error(response.error || 'Failed to create routing');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/routingStore.ts",
          "line": 355,
          "content": "throw new Error(response.error || 'Failed to update routing');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/routingStore.ts",
          "line": 405,
          "content": "throw new Error(response.error || 'Failed to copy routing');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/routingStore.ts",
          "line": 433,
          "content": "throw new Error(response.error || 'Failed to approve routing');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/routingStore.ts",
          "line": 457,
          "content": "throw new Error(response.error || 'Failed to activate routing');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/routingStore.ts",
          "line": 481,
          "content": "throw new Error(response.error || 'Failed to obsolete routing');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/routingStore.ts",
          "line": 508,
          "content": "throw new Error(response.error || 'Failed to fetch routing steps');",
          "severity": "CRITICAL"
        },
        {
          "file": "store/routingStore.ts",
          "line": 589,
          "content": "throw new Error(response.error || 'Failed to resequence steps');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/routingStore.ts",
          "line": 660,
          "content": "throw new Error('Failed to fetch available sites');",
          "severity": "CRITICAL"
        },
        {
          "file": "store/routingStore.ts",
          "line": 680,
          "content": "console.error('Failed to calculate routing timing:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/routingStore.ts",
          "line": 692,
          "content": "console.error('Failed to validate routing:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "tests/e2e/collaborative-routing.spec.ts",
          "line": 465,
          "content": "test('COL-EDGE-002: Should handle network errors gracefully', async ({ page }) => {",
          "severity": "CRITICAL"
        },
        {
          "file": "tests/e2e/collaborative-routing.spec.ts",
          "line": 484,
          "content": "console.log('Network error resilience: Errors logged:', errors.length);",
          "severity": "CRITICAL"
        }
      ],
      "warnings": [],
      "loadIssues": [],
      "recommendations": []
    },
    {
      "route": "/routing/create",
      "hasErrors": false,
      "hasWarnings": false,
      "hasLoadFailures": false,
      "consoleMessages": 0,
      "errors": [],
      "warnings": [],
      "loadIssues": [],
      "recommendations": []
    },
    {
      "route": "/routing/:id/edit",
      "hasErrors": false,
      "hasWarnings": false,
      "hasLoadFailures": false,
      "consoleMessages": 0,
      "errors": [],
      "warnings": [],
      "loadIssues": [],
      "recommendations": []
    },
    {
      "route": "/equipment",
      "hasErrors": true,
      "hasWarnings": false,
      "hasLoadFailures": false,
      "consoleMessages": 0,
      "errors": [
        {
          "file": "components/Dashboard/__tests__/OEEMetricsCard.test.tsx",
          "line": 510,
          "content": "it('should handle API network errors', async () => {",
          "severity": "CRITICAL"
        },
        {
          "file": "components/Dashboard/__tests__/OEEMetricsCard.test.tsx",
          "line": 511,
          "content": "// Mock network error - component expects response format, so simulate API client behavior",
          "severity": "CRITICAL"
        },
        {
          "file": "components/Dashboard/__tests__/OEEMetricsCard.test.tsx",
          "line": 514,
          "content": "error: 'Network error',",
          "severity": "CRITICAL"
        },
        {
          "file": "components/Dashboard/__tests__/OEEMetricsCard.test.tsx",
          "line": 524,
          "content": "'Network error'",
          "severity": "CRITICAL"
        },
        {
          "file": "components/Layout/MainLayout.tsx",
          "line": 322,
          "content": "console.error('Logout error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Routing/StepBuilderModal.tsx",
          "line": 144,
          "content": "console.error('Failed to load options:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Routing/StepBuilderModal.tsx",
          "line": 191,
          "content": "console.error('Validation failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/SupervisorApprovalDashboard.tsx",
          "line": 281,
          "content": "console.error('Failed to load pending approvals:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/SupervisorApprovalDashboard.tsx",
          "line": 308,
          "content": "console.error('Failed to load metrics:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/SupervisorApprovalDashboard.tsx",
          "line": 340,
          "content": "console.error('Approval action error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/SupervisorApprovalDashboard.tsx",
          "line": 372,
          "content": "console.error('Bulk approval error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/WorkOrders/WorkOrderPriorityChange.tsx",
          "line": 75,
          "content": "throw new Error(error.message || 'Failed to update priority');",
          "severity": "MEDIUM"
        },
        {
          "file": "components/WorkOrders/WorkOrderReschedule.tsx",
          "line": 84,
          "content": "throw new Error(error.message || 'Failed to reschedule work order');",
          "severity": "MEDIUM"
        },
        {
          "file": "components/WorkOrders/__tests__/WorkOrderPriorityChange.test.tsx",
          "line": 358,
          "content": "it('should handle network error', async () => {",
          "severity": "CRITICAL"
        },
        {
          "file": "components/WorkOrders/__tests__/WorkOrderPriorityChange.test.tsx",
          "line": 360,
          "content": "mockFetch.mockRejectedValueOnce(new Error('Network error'));",
          "severity": "CRITICAL"
        },
        {
          "file": "components/WorkOrders/__tests__/WorkOrderPriorityChange.test.tsx",
          "line": 374,
          "content": "expect(message.error).toHaveBeenCalledWith('Network error');",
          "severity": "CRITICAL"
        },
        {
          "file": "components/WorkOrders/__tests__/WorkOrderReschedule.test.tsx",
          "line": 316,
          "content": "it('should handle network error', async () => {",
          "severity": "CRITICAL"
        },
        {
          "file": "components/WorkOrders/__tests__/WorkOrderReschedule.test.tsx",
          "line": 318,
          "content": "mockFetch.mockRejectedValueOnce(new Error('Network error'));",
          "severity": "CRITICAL"
        },
        {
          "file": "components/WorkOrders/__tests__/WorkOrderReschedule.test.tsx",
          "line": 322,
          "content": "// Similar to above, focusing on component structure for network error scenarios",
          "severity": "CRITICAL"
        },
        {
          "file": "pages/Dashboard/Dashboard.tsx",
          "line": 94,
          "content": "console.error('Error fetching dashboard data:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Equipment/Equipment.tsx",
          "line": 55,
          "content": "console.error('Failed to load equipment:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Operations/OperationCreatePage.tsx",
          "line": 46,
          "content": "console.error('Error fetching parent operations:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Operations/OperationCreatePage.tsx",
          "line": 58,
          "content": "console.error('Error creating operation:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/equipmentStore.ts",
          "line": 202,
          "content": "console.error('[EquipmentStore] fetchEquipment error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/equipmentStore.ts",
          "line": 204,
          "content": "equipmentError: error instanceof Error ? error.message : 'Network error while fetching equipment',",
          "severity": "CRITICAL"
        },
        {
          "file": "store/equipmentStore.ts",
          "line": 311,
          "content": "console.error('[EquipmentStore] fetchMaintenance error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/equipmentStore.ts",
          "line": 313,
          "content": "maintenanceError: error instanceof Error ? error.message : 'Network error while fetching maintenance records',",
          "severity": "CRITICAL"
        }
      ],
      "warnings": [],
      "loadIssues": [],
      "recommendations": []
    },
    {
      "route": "/equipment/:id",
      "hasErrors": false,
      "hasWarnings": false,
      "hasLoadFailures": false,
      "consoleMessages": 0,
      "errors": [],
      "warnings": [],
      "loadIssues": [],
      "recommendations": []
    },
    {
      "route": "/quality/ncrs",
      "hasErrors": true,
      "hasWarnings": false,
      "hasLoadFailures": false,
      "consoleMessages": 0,
      "errors": [
        {
          "file": "components/Layout/MainLayout.tsx",
          "line": 322,
          "content": "console.error('Logout error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Quality/NCRs.tsx",
          "line": 93,
          "content": "console.error('Failed to load NCRs:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Quality/NCRs.tsx",
          "line": 267,
          "content": "console.error('Failed to create NCR:', error);",
          "severity": "MEDIUM"
        }
      ],
      "warnings": [],
      "loadIssues": [],
      "recommendations": []
    },
    {
      "route": "/quality/ncrs/create",
      "hasErrors": false,
      "hasWarnings": false,
      "hasLoadFailures": false,
      "consoleMessages": 0,
      "errors": [],
      "warnings": [],
      "loadIssues": [],
      "recommendations": []
    },
    {
      "route": "/quality/ncrs/:id",
      "hasErrors": false,
      "hasWarnings": false,
      "hasLoadFailures": false,
      "consoleMessages": 0,
      "errors": [],
      "warnings": [],
      "loadIssues": [],
      "recommendations": []
    },
    {
      "route": "/quality/fai",
      "hasErrors": false,
      "hasWarnings": false,
      "hasLoadFailures": false,
      "consoleMessages": 0,
      "errors": [],
      "warnings": [],
      "loadIssues": [],
      "recommendations": []
    },
    {
      "route": "/quality/fai/create",
      "hasErrors": false,
      "hasWarnings": false,
      "hasLoadFailures": false,
      "consoleMessages": 0,
      "errors": [],
      "warnings": [],
      "loadIssues": [],
      "recommendations": []
    },
    {
      "route": "/quality/fai/:id",
      "hasErrors": false,
      "hasWarnings": false,
      "hasLoadFailures": false,
      "consoleMessages": 0,
      "errors": [],
      "warnings": [],
      "loadIssues": [],
      "recommendations": []
    },
    {
      "route": "/work-instructions",
      "hasErrors": true,
      "hasWarnings": false,
      "hasLoadFailures": false,
      "consoleMessages": 0,
      "errors": [
        {
          "file": "api/workInstructions.ts",
          "line": 154,
          "content": "console.error('Error getting auth token', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "api/workInstructions.ts",
          "line": 168,
          "content": "throw new Error(error.response.data.error || error.response.data.message || 'API request failed');",
          "severity": "MEDIUM"
        },
        {
          "file": "api/workInstructions.ts",
          "line": 170,
          "content": "throw new Error(error.message || 'Network error');",
          "severity": "CRITICAL"
        },
        {
          "file": "api/workInstructions.ts",
          "line": 170,
          "content": "throw new Error(error.message || 'Network error');",
          "severity": "CRITICAL"
        },
        {
          "file": "components/Approvals/ApprovalTaskDetail.tsx",
          "line": 209,
          "content": "throw new Error('Task ID or Assignment ID is required');",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Approvals/ApprovalTaskDetail.tsx",
          "line": 221,
          "content": "throw new Error('Failed to load task details');",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Approvals/ApprovalTaskDetail.tsx",
          "line": 296,
          "content": "throw new Error('Failed to approve task');",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Approvals/ApprovalTaskDetail.tsx",
          "line": 327,
          "content": "throw new Error('Failed to reject task');",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Approvals/ApprovalTaskDetail.tsx",
          "line": 361,
          "content": "throw new Error('Failed to delegate task');",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Layout/MainLayout.tsx",
          "line": 322,
          "content": "console.error('Logout error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/WorkInstructions/DocumentExporter.tsx",
          "line": 217,
          "content": "console.error('Export failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/WorkInstructions/WorkInstructionForm.tsx",
          "line": 176,
          "content": "throw new Error(error.message || 'Failed to reject work instruction');",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Documents/DocumentsPage.tsx",
          "line": 89,
          "content": "console.error('Failed to fetch document statistics:', error);",
          "severity": "CRITICAL"
        },
        {
          "file": "pages/WorkInstructions/WorkInstructionDetailPage.tsx",
          "line": 95,
          "content": "console.error('Failed to load signatures:', error);",
          "severity": "MEDIUM"
        }
      ],
      "warnings": [],
      "loadIssues": [],
      "recommendations": []
    },
    {
      "route": "/work-instructions/create",
      "hasErrors": true,
      "hasWarnings": false,
      "hasLoadFailures": false,
      "consoleMessages": 0,
      "errors": [
        {
          "file": "components/Layout/MainLayout.tsx",
          "line": 322,
          "content": "console.error('Logout error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Documents/DocumentsPage.tsx",
          "line": 89,
          "content": "console.error('Failed to fetch document statistics:', error);",
          "severity": "CRITICAL"
        }
      ],
      "warnings": [],
      "loadIssues": [],
      "recommendations": []
    },
    {
      "route": "/work-instructions/:id",
      "hasErrors": true,
      "hasWarnings": false,
      "hasLoadFailures": false,
      "consoleMessages": 0,
      "errors": [
        {
          "file": "pages/WorkInstructions/WorkInstructionDetailPage.tsx",
          "line": 95,
          "content": "console.error('Failed to load signatures:', error);",
          "severity": "MEDIUM"
        }
      ],
      "warnings": [],
      "loadIssues": [],
      "recommendations": []
    },
    {
      "route": "/kits",
      "hasErrors": true,
      "hasWarnings": false,
      "hasLoadFailures": false,
      "consoleMessages": 0,
      "errors": [
        {
          "file": "components/Kits/KitAnalyticsDashboard.tsx",
          "line": 318,
          "content": "console.error('Failed to load analytics data:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Kits/KitForm.tsx",
          "line": 232,
          "content": "console.error('Form submission error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Kits/KitReportGenerator.tsx",
          "line": 330,
          "content": "console.error('Preview generation failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Kits/KitReportGenerator.tsx",
          "line": 362,
          "content": "console.error('Report generation failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Layout/MainLayout.tsx",
          "line": 322,
          "content": "console.error('Logout error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Staging/StagingDashboard.tsx",
          "line": 195,
          "content": "console.error('Failed to load dashboard data:', error);",
          "severity": "MEDIUM"
        }
      ],
      "warnings": [],
      "loadIssues": [],
      "recommendations": []
    },
    {
      "route": "/kits/create",
      "hasErrors": false,
      "hasWarnings": false,
      "hasLoadFailures": false,
      "consoleMessages": 0,
      "errors": [],
      "warnings": [],
      "loadIssues": [],
      "recommendations": []
    },
    {
      "route": "/kits/:id",
      "hasErrors": false,
      "hasWarnings": false,
      "hasLoadFailures": false,
      "consoleMessages": 0,
      "errors": [],
      "warnings": [],
      "loadIssues": [],
      "recommendations": []
    },
    {
      "route": "/kits/:id/analytics",
      "hasErrors": false,
      "hasWarnings": false,
      "hasLoadFailures": false,
      "consoleMessages": 0,
      "errors": [],
      "warnings": [],
      "loadIssues": [],
      "recommendations": []
    },
    {
      "route": "/kits/:id/reports",
      "hasErrors": false,
      "hasWarnings": false,
      "hasLoadFailures": false,
      "consoleMessages": 0,
      "errors": [],
      "warnings": [],
      "loadIssues": [],
      "recommendations": []
    },
    {
      "route": "/operations",
      "hasErrors": true,
      "hasWarnings": false,
      "hasLoadFailures": false,
      "consoleMessages": 0,
      "errors": [
        {
          "file": "api/rbac.ts",
          "line": 64,
          "content": "throw new Error('Insufficient permissions to perform this action');",
          "severity": "MEDIUM"
        },
        {
          "file": "api/rbac.ts",
          "line": 68,
          "content": "throw new Error(error.response.data.message);",
          "severity": "MEDIUM"
        },
        {
          "file": "api/rbac.ts",
          "line": 71,
          "content": "throw new Error(error.message || 'An unexpected error occurred');",
          "severity": "MEDIUM"
        },
        {
          "file": "api/routing.ts",
          "line": 103,
          "content": "throw new Error(errorMessage);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Approvals/ApprovalTaskQueue.tsx",
          "line": 220,
          "content": "throw new Error('Failed to load approval tasks');",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Approvals/ApprovalTaskQueue.tsx",
          "line": 259,
          "content": "throw new Error('Failed to approve task');",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Approvals/ApprovalTaskQueue.tsx",
          "line": 288,
          "content": "throw new Error('Failed to reject task');",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Approvals/ApprovalTaskQueue.tsx",
          "line": 338,
          "content": "throw new Error(`Failed to ${action} tasks`);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/BuildBookGenerator.tsx",
          "line": 193,
          "content": "console.error('Error fetching templates:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/BuildBookGenerator.tsx",
          "line": 296,
          "content": "console.error('Error generating preview:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/BuildBookGenerator.tsx",
          "line": 330,
          "content": "console.error('Error saving template:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/BuildBookGenerator.tsx",
          "line": 348,
          "content": "console.error('Validation failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/BuildRecordDetail.tsx",
          "line": 209,
          "content": "console.error('Error fetching build record:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/BuildRecordDetail.tsx",
          "line": 244,
          "content": "console.error('Error generating build book:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/BuildRecordList.tsx",
          "line": 211,
          "content": "console.error('Error fetching build records:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/BuildRecordList.tsx",
          "line": 231,
          "content": "console.error('Error fetching summary:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/BuildRecordList.tsx",
          "line": 309,
          "content": "console.error('Error generating build book:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/BuildRecordList.tsx",
          "line": 322,
          "content": "console.error('Error downloading build book:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/BuildRecordList.tsx",
          "line": 354,
          "content": "console.error('Error performing bulk action:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/BuildRecordOperationSignOff.tsx",
          "line": 241,
          "content": "console.error('Error signing off operation:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/BuildRecordOperationSignOff.tsx",
          "line": 275,
          "content": "console.error('Error invalidating signature:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/DeviationTracker.tsx",
          "line": 282,
          "content": "console.error('Error saving deviation:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/DeviationTracker.tsx",
          "line": 312,
          "content": "console.error('Error uploading file:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/DeviationTracker.tsx",
          "line": 344,
          "content": "console.error('Error adding comment:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/PhotoCaptureModal.tsx",
          "line": 146,
          "content": "console.error('Error accessing camera:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/PhotoCaptureModal.tsx",
          "line": 171,
          "content": "console.error('Error starting camera:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/PhotoCaptureModal.tsx",
          "line": 318,
          "content": "console.error('Error saving photo:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/ECO/ECODashboard.tsx",
          "line": 171,
          "content": "console.error('Error loading ECOs:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/ECO/ECOForm.tsx",
          "line": 230,
          "content": "console.error('Impact analysis failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Kits/KitForm.tsx",
          "line": 232,
          "content": "console.error('Form submission error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Layout/MainLayout.tsx",
          "line": 322,
          "content": "console.error('Logout error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Routing/RoutingForm.tsx",
          "line": 122,
          "content": "console.error('Error loading parts:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Routing/RoutingForm.tsx",
          "line": 250,
          "content": "console.error('[RoutingForm] Submit error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Routing/RoutingForm.tsx",
          "line": 251,
          "content": "console.error('[RoutingForm] Error details:', JSON.stringify(error, null, 2));",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Routing/RoutingForm.tsx",
          "line": 258,
          "content": "console.error('[RoutingForm] Error message:', errorMessage);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Routing/RoutingForm.tsx",
          "line": 284,
          "content": "console.error('[RoutingForm] Validation failed:', errorInfo);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Routing/RoutingForm.tsx",
          "line": 296,
          "content": "console.error('Validation failed:', errorInfo);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Routing/StepBuilderModal.tsx",
          "line": 144,
          "content": "console.error('Failed to load options:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Routing/StepBuilderModal.tsx",
          "line": 191,
          "content": "console.error('Validation failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/TimeEntryEdit.tsx",
          "line": 322,
          "content": "console.error('Validation error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/TimeEntryEdit.tsx",
          "line": 367,
          "content": "console.error('Submit error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/TimeEntryManagement.tsx",
          "line": 237,
          "content": "console.error('Failed to load time entries:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/TimeEntryManagement.tsx",
          "line": 268,
          "content": "console.error('Failed to load reference data:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/WorkInstructions/WorkInstructionForm.tsx",
          "line": 176,
          "content": "throw new Error(error.message || 'Failed to reject work instruction');",
          "severity": "MEDIUM"
        },
        {
          "file": "components/WorkInstructions/WorkInstructionStepEditor.tsx",
          "line": 287,
          "content": "console.error('Image upload failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/WorkInstructions/WorkInstructionStepEditor.tsx",
          "line": 299,
          "content": "console.error('Video upload failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/WorkInstructions/WorkInstructionStepEditor.tsx",
          "line": 311,
          "content": "console.error('Attachment upload failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/WorkOrders/WorkOrderCreate.tsx",
          "line": 67,
          "content": "console.error('Failed to load parts:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/WorkOrders/WorkOrderCreate.tsx",
          "line": 105,
          "content": "throw new Error(error.message || 'Failed to create work order');",
          "severity": "MEDIUM"
        },
        {
          "file": "components/WorkOrders/WorkOrderCreate.tsx",
          "line": 114,
          "content": "console.error('Failed to create work order:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/WorkOrders/WorkOrderReschedule.tsx",
          "line": 84,
          "content": "throw new Error(error.message || 'Failed to reschedule work order');",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Integration/IntegrationLogs.tsx",
          "line": 106,
          "content": "console.error('Error fetching integrations:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Integration/IntegrationLogs.tsx",
          "line": 139,
          "content": "console.error('Error fetching logs:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Operations/OperationCreatePage.tsx",
          "line": 46,
          "content": "console.error('Error fetching parent operations:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Operations/OperationCreatePage.tsx",
          "line": 58,
          "content": "console.error('Error creating operation:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Operations/OperationListPage.tsx",
          "line": 59,
          "content": "console.error('Error fetching operations:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/WorkOrders/WorkOrderDetails.tsx",
          "line": 59,
          "content": "throw new Error('Invalid authentication token');",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/WorkOrders/WorkOrderDetails.tsx",
          "line": 64,
          "content": "throw new Error('No authentication token found');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/routingStore.ts",
          "line": 219,
          "content": "throw new Error(response.error || 'Failed to fetch routings');",
          "severity": "CRITICAL"
        },
        {
          "file": "store/routingStore.ts",
          "line": 302,
          "content": "throw new Error(response.error || 'Failed to fetch routing');",
          "severity": "CRITICAL"
        },
        {
          "file": "store/routingStore.ts",
          "line": 324,
          "content": "throw new Error(response.error || 'Failed to create routing');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/routingStore.ts",
          "line": 355,
          "content": "throw new Error(response.error || 'Failed to update routing');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/routingStore.ts",
          "line": 405,
          "content": "throw new Error(response.error || 'Failed to copy routing');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/routingStore.ts",
          "line": 433,
          "content": "throw new Error(response.error || 'Failed to approve routing');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/routingStore.ts",
          "line": 457,
          "content": "throw new Error(response.error || 'Failed to activate routing');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/routingStore.ts",
          "line": 481,
          "content": "throw new Error(response.error || 'Failed to obsolete routing');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/routingStore.ts",
          "line": 508,
          "content": "throw new Error(response.error || 'Failed to fetch routing steps');",
          "severity": "CRITICAL"
        },
        {
          "file": "store/routingStore.ts",
          "line": 589,
          "content": "throw new Error(response.error || 'Failed to resequence steps');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/routingStore.ts",
          "line": 660,
          "content": "throw new Error('Failed to fetch available sites');",
          "severity": "CRITICAL"
        },
        {
          "file": "store/routingStore.ts",
          "line": 680,
          "content": "console.error('Failed to calculate routing timing:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/routingStore.ts",
          "line": 692,
          "content": "console.error('Failed to validate routing:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 220,
          "content": "throw new Error(response.error || 'Failed to fetch schedules');",
          "severity": "CRITICAL"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 290,
          "content": "throw new Error('Schedule ID is required and must be a valid string');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 304,
          "content": "throw new Error(response.error || 'Failed to fetch schedule');",
          "severity": "CRITICAL"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 319,
          "content": "throw new Error('Schedule number is required and must be a valid string');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 333,
          "content": "throw new Error(response.error || 'Failed to fetch schedule');",
          "severity": "CRITICAL"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 355,
          "content": "throw new Error(response.error || 'Failed to create schedule');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 379,
          "content": "throw new Error(response.error || 'Failed to update schedule');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 419,
          "content": "throw new Error(response.error || 'Failed to fetch schedules by state');",
          "severity": "CRITICAL"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 446,
          "content": "throw new Error(response.error || 'Failed to fetch schedule entries');",
          "severity": "CRITICAL"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 527,
          "content": "throw new Error(response.error || 'Failed to fetch dispatch-ready entries');",
          "severity": "CRITICAL"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 551,
          "content": "throw new Error(response.error || 'Failed to fetch constraints');",
          "severity": "CRITICAL"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 615,
          "content": "console.error('Failed to check constraint violation:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 634,
          "content": "throw new Error(response.error || 'Failed to transition schedule state');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 657,
          "content": "throw new Error(response.error || 'Failed to fetch state history');",
          "severity": "CRITICAL"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 677,
          "content": "throw new Error(response.error || 'Failed to apply priority sequencing');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 692,
          "content": "throw new Error(response.error || 'Failed to apply EDD sequencing');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 711,
          "content": "throw new Error(response.error || 'Failed to check schedule feasibility');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 734,
          "content": "throw new Error(response.error || 'Failed to dispatch schedule entry');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 749,
          "content": "throw new Error(response.error || 'Failed to dispatch all entries');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 772,
          "content": "throw new Error(response.error || 'Failed to fetch statistics');",
          "severity": "CRITICAL"
        },
        {
          "file": "test-utils/helpers.ts",
          "line": 24,
          "content": "throw new Error('Element not found');",
          "severity": "MEDIUM"
        },
        {
          "file": "test-utils/helpers.ts",
          "line": 43,
          "content": "throw new Error('Element still present');",
          "severity": "MEDIUM"
        },
        {
          "file": "test-utils/helpers.ts",
          "line": 320,
          "content": "throw new Error('Test error for error boundary');",
          "severity": "MEDIUM"
        },
        {
          "file": "tests/e2e/collaborative-routing.spec.ts",
          "line": 465,
          "content": "test('COL-EDGE-002: Should handle network errors gracefully', async ({ page }) => {",
          "severity": "CRITICAL"
        },
        {
          "file": "tests/e2e/collaborative-routing.spec.ts",
          "line": 484,
          "content": "console.log('Network error resilience: Errors logged:', errors.length);",
          "severity": "CRITICAL"
        }
      ],
      "warnings": [],
      "loadIssues": [],
      "recommendations": []
    },
    {
      "route": "/operations/:id",
      "hasErrors": false,
      "hasWarnings": false,
      "hasLoadFailures": false,
      "consoleMessages": 0,
      "errors": [],
      "warnings": [],
      "loadIssues": [],
      "recommendations": []
    },
    {
      "route": "/staging",
      "hasErrors": true,
      "hasWarnings": false,
      "hasLoadFailures": false,
      "consoleMessages": 0,
      "errors": [
        {
          "file": "components/BuildRecords/BuildRecordList.tsx",
          "line": 211,
          "content": "console.error('Error fetching build records:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/BuildRecordList.tsx",
          "line": 231,
          "content": "console.error('Error fetching summary:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/BuildRecordList.tsx",
          "line": 309,
          "content": "console.error('Error generating build book:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/BuildRecordList.tsx",
          "line": 322,
          "content": "console.error('Error downloading build book:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/BuildRecordList.tsx",
          "line": 354,
          "content": "console.error('Error performing bulk action:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Kits/KitAnalyticsDashboard.tsx",
          "line": 318,
          "content": "console.error('Failed to load analytics data:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Kits/KitReportGenerator.tsx",
          "line": 330,
          "content": "console.error('Preview generation failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Kits/KitReportGenerator.tsx",
          "line": 362,
          "content": "console.error('Report generation failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Layout/MainLayout.tsx",
          "line": 322,
          "content": "console.error('Logout error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Staging/StagingDashboard.tsx",
          "line": 195,
          "content": "console.error('Failed to load dashboard data:', error);",
          "severity": "MEDIUM"
        }
      ],
      "warnings": [],
      "loadIssues": [],
      "recommendations": []
    },
    {
      "route": "/staging/dashboard",
      "hasErrors": true,
      "hasWarnings": false,
      "hasLoadFailures": false,
      "consoleMessages": 0,
      "errors": [
        {
          "file": "components/Staging/StagingDashboard.tsx",
          "line": 195,
          "content": "console.error('Failed to load dashboard data:', error);",
          "severity": "MEDIUM"
        }
      ],
      "warnings": [],
      "loadIssues": [],
      "recommendations": []
    },
    {
      "route": "/staging/kits",
      "hasErrors": false,
      "hasWarnings": false,
      "hasLoadFailures": false,
      "consoleMessages": 0,
      "errors": [],
      "warnings": [],
      "loadIssues": [],
      "recommendations": []
    },
    {
      "route": "/staging/materials",
      "hasErrors": false,
      "hasWarnings": false,
      "hasLoadFailures": false,
      "consoleMessages": 0,
      "errors": [],
      "warnings": [],
      "loadIssues": [],
      "recommendations": []
    },
    {
      "route": "/scheduling",
      "hasErrors": true,
      "hasWarnings": false,
      "hasLoadFailures": false,
      "consoleMessages": 0,
      "errors": [
        {
          "file": "components/ECO/ECODashboard.tsx",
          "line": 171,
          "content": "console.error('Error loading ECOs:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Kits/KitReportGenerator.tsx",
          "line": 330,
          "content": "console.error('Preview generation failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Kits/KitReportGenerator.tsx",
          "line": 362,
          "content": "console.error('Report generation failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Layout/MainLayout.tsx",
          "line": 322,
          "content": "console.error('Logout error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/WorkOrders/WorkOrderReschedule.tsx",
          "line": 84,
          "content": "throw new Error(error.message || 'Failed to reschedule work order');",
          "severity": "MEDIUM"
        },
        {
          "file": "components/WorkOrders/__tests__/WorkOrderReschedule.test.tsx",
          "line": 316,
          "content": "it('should handle network error', async () => {",
          "severity": "CRITICAL"
        },
        {
          "file": "components/WorkOrders/__tests__/WorkOrderReschedule.test.tsx",
          "line": 318,
          "content": "mockFetch.mockRejectedValueOnce(new Error('Network error'));",
          "severity": "CRITICAL"
        },
        {
          "file": "components/WorkOrders/__tests__/WorkOrderReschedule.test.tsx",
          "line": 322,
          "content": "// Similar to above, focusing on component structure for network error scenarios",
          "severity": "CRITICAL"
        },
        {
          "file": "contexts/SiteContext.tsx",
          "line": 108,
          "content": "throw new Error(`Server error: ${response.status}`);",
          "severity": "MEDIUM"
        },
        {
          "file": "contexts/SiteContext.tsx",
          "line": 112,
          "content": "throw new Error(`Client error: ${response.status} ${response.statusText}`);",
          "severity": "MEDIUM"
        },
        {
          "file": "contexts/SiteContext.tsx",
          "line": 123,
          "content": "throw new Error('Request timeout');",
          "severity": "HIGH"
        },
        {
          "file": "contexts/SiteContext.tsx",
          "line": 128,
          "content": "console.error('Error fetching sites:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "contexts/SiteContext.tsx",
          "line": 278,
          "content": "console.error(`[SiteContext] Error refreshing sites (failure ${consecutiveFailuresRef.current}):`, err);",
          "severity": "MEDIUM"
        },
        {
          "file": "contexts/SiteContext.tsx",
          "line": 345,
          "content": "console.error('[SiteContext] Initialization error:', err);",
          "severity": "MEDIUM"
        },
        {
          "file": "contexts/SiteContext.tsx",
          "line": 490,
          "content": "throw new Error('useSite must be used within a SiteProvider');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/equipmentStore.ts",
          "line": 202,
          "content": "console.error('[EquipmentStore] fetchEquipment error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/equipmentStore.ts",
          "line": 204,
          "content": "equipmentError: error instanceof Error ? error.message : 'Network error while fetching equipment',",
          "severity": "CRITICAL"
        },
        {
          "file": "store/equipmentStore.ts",
          "line": 311,
          "content": "console.error('[EquipmentStore] fetchMaintenance error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/equipmentStore.ts",
          "line": 313,
          "content": "maintenanceError: error instanceof Error ? error.message : 'Network error while fetching maintenance records',",
          "severity": "CRITICAL"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 220,
          "content": "throw new Error(response.error || 'Failed to fetch schedules');",
          "severity": "CRITICAL"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 290,
          "content": "throw new Error('Schedule ID is required and must be a valid string');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 304,
          "content": "throw new Error(response.error || 'Failed to fetch schedule');",
          "severity": "CRITICAL"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 319,
          "content": "throw new Error('Schedule number is required and must be a valid string');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 333,
          "content": "throw new Error(response.error || 'Failed to fetch schedule');",
          "severity": "CRITICAL"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 355,
          "content": "throw new Error(response.error || 'Failed to create schedule');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 379,
          "content": "throw new Error(response.error || 'Failed to update schedule');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 419,
          "content": "throw new Error(response.error || 'Failed to fetch schedules by state');",
          "severity": "CRITICAL"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 446,
          "content": "throw new Error(response.error || 'Failed to fetch schedule entries');",
          "severity": "CRITICAL"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 527,
          "content": "throw new Error(response.error || 'Failed to fetch dispatch-ready entries');",
          "severity": "CRITICAL"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 551,
          "content": "throw new Error(response.error || 'Failed to fetch constraints');",
          "severity": "CRITICAL"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 615,
          "content": "console.error('Failed to check constraint violation:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 634,
          "content": "throw new Error(response.error || 'Failed to transition schedule state');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 657,
          "content": "throw new Error(response.error || 'Failed to fetch state history');",
          "severity": "CRITICAL"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 677,
          "content": "throw new Error(response.error || 'Failed to apply priority sequencing');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 692,
          "content": "throw new Error(response.error || 'Failed to apply EDD sequencing');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 711,
          "content": "throw new Error(response.error || 'Failed to check schedule feasibility');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 734,
          "content": "throw new Error(response.error || 'Failed to dispatch schedule entry');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 749,
          "content": "throw new Error(response.error || 'Failed to dispatch all entries');",
          "severity": "MEDIUM"
        },
        {
          "file": "store/schedulingStore.ts",
          "line": 772,
          "content": "throw new Error(response.error || 'Failed to fetch statistics');",
          "severity": "CRITICAL"
        },
        {
          "file": "utils/AuthStateSynchronizer.ts",
          "line": 130,
          "content": "console.error('[AuthSync] Failed to initialize persistent state:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/AuthStateSynchronizer.ts",
          "line": 220,
          "content": "console.error('[AuthSync] Sync failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/AuthStateSynchronizer.ts",
          "line": 229,
          "content": "console.error('[AuthSync] Max sync retries exceeded, forcing logout');",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/AuthStateSynchronizer.ts",
          "line": 299,
          "content": "throw new Error(`Backend validation failed: ${response.status}`);",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/AuthStateSynchronizer.ts",
          "line": 456,
          "content": "console.error('[AuthSync] Failed to apply resolved state:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/AuthStateSynchronizer.ts",
          "line": 480,
          "content": "console.error('[AuthSync] Force logout failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/AuthStateSynchronizer.ts",
          "line": 524,
          "content": "console.error('[AuthSync] Token refresh check failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/AuthStateSynchronizer.ts",
          "line": 561,
          "content": "throw new Error(`Token refresh failed: ${response.status}`);",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/AuthStateSynchronizer.ts",
          "line": 583,
          "content": "console.error('[AuthSync] Token refresh failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/AuthStateSynchronizer.ts",
          "line": 619,
          "content": "console.error('[AuthSync] Backend token validation failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "utils/AuthStateSynchronizer.ts",
          "line": 633,
          "content": "console.error(`[AuthSync] Event listener error for ${event}:`, error);",
          "severity": "MEDIUM"
        }
      ],
      "warnings": [],
      "loadIssues": [],
      "recommendations": []
    },
    {
      "route": "/scheduling/capacity",
      "hasErrors": false,
      "hasWarnings": false,
      "hasLoadFailures": false,
      "consoleMessages": 0,
      "errors": [],
      "warnings": [],
      "loadIssues": [],
      "recommendations": []
    },
    {
      "route": "/serialization",
      "hasErrors": true,
      "hasWarnings": false,
      "hasLoadFailures": false,
      "consoleMessages": 0,
      "errors": [
        {
          "file": "components/LLP/LLPLifeEventForm.tsx",
          "line": 198,
          "content": "console.error('Failed to load serialized parts:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPLifeEventForm.tsx",
          "line": 221,
          "content": "console.error('Failed to load work orders:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPLifeEventForm.tsx",
          "line": 244,
          "content": "console.error('Failed to load assemblies:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPLifeEventForm.tsx",
          "line": 266,
          "content": "console.error('Failed to load life status:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPLifeEventForm.tsx",
          "line": 374,
          "content": "throw new Error(error.message || 'Failed to record life event');",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPLifeEventForm.tsx",
          "line": 377,
          "content": "console.error('Failed to record life event:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Layout/MainLayout.tsx",
          "line": 322,
          "content": "console.error('Logout error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Dashboard/Dashboard.tsx",
          "line": 94,
          "content": "console.error('Error fetching dashboard data:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Serialization/SerializationListPage.tsx",
          "line": 111,
          "content": "console.error('Failed to load parts:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Serialization/SerializationListPage.tsx",
          "line": 141,
          "content": "console.error('[TEST DEBUG] Generate single serial error:', error);",
          "severity": "LOW"
        },
        {
          "file": "pages/Serialization/SerializationListPage.tsx",
          "line": 142,
          "content": "console.error('[TEST DEBUG] Error details:', {",
          "severity": "LOW"
        },
        {
          "file": "pages/Serialization/SerializationListPage.tsx",
          "line": 204,
          "content": "console.error('[TEST DEBUG] Generate batch error:', error);",
          "severity": "LOW"
        },
        {
          "file": "pages/Serialization/SerializationListPage.tsx",
          "line": 237,
          "content": "console.error('Create part error:', error);",
          "severity": "MEDIUM"
        }
      ],
      "warnings": [],
      "loadIssues": [],
      "recommendations": []
    },
    {
      "route": "/serialization/create",
      "hasErrors": false,
      "hasWarnings": false,
      "hasLoadFailures": false,
      "consoleMessages": 0,
      "errors": [],
      "warnings": [],
      "loadIssues": [],
      "recommendations": []
    },
    {
      "route": "/serialization/:id",
      "hasErrors": false,
      "hasWarnings": false,
      "hasLoadFailures": false,
      "consoleMessages": 0,
      "errors": [],
      "warnings": [],
      "loadIssues": [],
      "recommendations": []
    },
    {
      "route": "/integrations",
      "hasErrors": true,
      "hasWarnings": false,
      "hasLoadFailures": false,
      "consoleMessages": 0,
      "errors": [
        {
          "file": "components/Layout/MainLayout.tsx",
          "line": 322,
          "content": "console.error('Logout error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Integration/IntegrationConfig.tsx",
          "line": 85,
          "content": "console.error('Error fetching integrations:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Integration/IntegrationConfig.tsx",
          "line": 120,
          "content": "console.error('Error deleting integration:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Integration/IntegrationConfig.tsx",
          "line": 154,
          "content": "console.error('Error testing connection:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Integration/IntegrationConfig.tsx",
          "line": 261,
          "content": "console.error('Error saving integration:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Integration/IntegrationConfig.tsx",
          "line": 272,
          "content": "console.error('Error toggling integration:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Integration/IntegrationDashboard.tsx",
          "line": 90,
          "content": "console.error('Error fetching integration health:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Integration/IntegrationDashboard.tsx",
          "line": 114,
          "content": "console.error('Error triggering sync:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Integration/IntegrationLogs.tsx",
          "line": 106,
          "content": "console.error('Error fetching integrations:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Integration/IntegrationLogs.tsx",
          "line": 139,
          "content": "console.error('Error fetching logs:', error);",
          "severity": "MEDIUM"
        }
      ],
      "warnings": [],
      "loadIssues": [],
      "recommendations": []
    },
    {
      "route": "/integrations/azure",
      "hasErrors": false,
      "hasWarnings": false,
      "hasLoadFailures": false,
      "consoleMessages": 0,
      "errors": [],
      "warnings": [],
      "loadIssues": [],
      "recommendations": []
    },
    {
      "route": "/integrations/mes",
      "hasErrors": false,
      "hasWarnings": false,
      "hasLoadFailures": false,
      "consoleMessages": 0,
      "errors": [],
      "warnings": [],
      "loadIssues": [],
      "recommendations": []
    },
    {
      "route": "/integrations/erp",
      "hasErrors": false,
      "hasWarnings": false,
      "hasLoadFailures": false,
      "consoleMessages": 0,
      "errors": [],
      "warnings": [],
      "loadIssues": [],
      "recommendations": []
    },
    {
      "route": "/signatures",
      "hasErrors": true,
      "hasWarnings": false,
      "hasLoadFailures": false,
      "consoleMessages": 0,
      "errors": [
        {
          "file": "components/BuildRecords/BuildBookGenerator.tsx",
          "line": 193,
          "content": "console.error('Error fetching templates:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/BuildBookGenerator.tsx",
          "line": 296,
          "content": "console.error('Error generating preview:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/BuildBookGenerator.tsx",
          "line": 330,
          "content": "console.error('Error saving template:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/BuildBookGenerator.tsx",
          "line": 348,
          "content": "console.error('Validation failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/BuildRecordDetail.tsx",
          "line": 209,
          "content": "console.error('Error fetching build record:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/BuildRecordDetail.tsx",
          "line": 244,
          "content": "console.error('Error generating build book:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/BuildRecordOperationSignOff.tsx",
          "line": 241,
          "content": "console.error('Error signing off operation:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/BuildRecordOperationSignOff.tsx",
          "line": 275,
          "content": "console.error('Error invalidating signature:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Layout/MainLayout.tsx",
          "line": 322,
          "content": "console.error('Logout error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/FAI/FAIDetailPage.tsx",
          "line": 100,
          "content": "console.error('Failed to load FAI data:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/FAI/FAIDetailPage.tsx",
          "line": 111,
          "content": "console.error('Failed to load signatures:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/WorkInstructions/WorkInstructionDetailPage.tsx",
          "line": 95,
          "content": "console.error('Failed to load signatures:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/signatureStore.ts",
          "line": 100,
          "content": "throw new Error(errorMessage);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/signatureStore.ts",
          "line": 116,
          "content": "throw new Error(errorMessage);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/signatureStore.ts",
          "line": 131,
          "content": "throw new Error(errorMessage);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/signatureStore.ts",
          "line": 158,
          "content": "throw new Error(errorMessage);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/signatureStore.ts",
          "line": 174,
          "content": "throw new Error(errorMessage);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/signatureStore.ts",
          "line": 197,
          "content": "throw new Error(errorMessage);",
          "severity": "MEDIUM"
        }
      ],
      "warnings": [],
      "loadIssues": [],
      "recommendations": []
    },
    {
      "route": "/signatures/create",
      "hasErrors": false,
      "hasWarnings": false,
      "hasLoadFailures": false,
      "consoleMessages": 0,
      "errors": [],
      "warnings": [],
      "loadIssues": [],
      "recommendations": []
    },
    {
      "route": "/signatures/:id",
      "hasErrors": false,
      "hasWarnings": false,
      "hasLoadFailures": false,
      "consoleMessages": 0,
      "errors": [],
      "warnings": [],
      "loadIssues": [],
      "recommendations": []
    },
    {
      "route": "/materials",
      "hasErrors": true,
      "hasWarnings": false,
      "hasLoadFailures": false,
      "consoleMessages": 0,
      "errors": [
        {
          "file": "components/Execution/ConfigurableExecutionLayout.tsx",
          "line": 76,
          "content": "console.error('Failed to initialize layout:', err);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Kits/KitAnalyticsDashboard.tsx",
          "line": 318,
          "content": "console.error('Failed to load analytics data:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Layout/MainLayout.tsx",
          "line": 322,
          "content": "console.error('Logout error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Integration/IntegrationConfig.tsx",
          "line": 85,
          "content": "console.error('Error fetching integrations:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Integration/IntegrationConfig.tsx",
          "line": 120,
          "content": "console.error('Error deleting integration:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Integration/IntegrationConfig.tsx",
          "line": 154,
          "content": "console.error('Error testing connection:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Integration/IntegrationConfig.tsx",
          "line": 261,
          "content": "console.error('Error saving integration:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Integration/IntegrationConfig.tsx",
          "line": 272,
          "content": "console.error('Error toggling integration:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Operations/OperationCreatePage.tsx",
          "line": 46,
          "content": "console.error('Error fetching parent operations:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Operations/OperationCreatePage.tsx",
          "line": 58,
          "content": "console.error('Error creating operation:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Quality/NCRs.tsx",
          "line": 93,
          "content": "console.error('Failed to load NCRs:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Quality/NCRs.tsx",
          "line": 267,
          "content": "console.error('Failed to create NCR:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/materialsStore.ts",
          "line": 198,
          "content": "console.error('[MaterialsStore] fetchDefinitions error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/materialsStore.ts",
          "line": 200,
          "content": "definitionsError: error instanceof Error ? error.message : 'Network error while fetching definitions',",
          "severity": "CRITICAL"
        },
        {
          "file": "store/materialsStore.ts",
          "line": 217,
          "content": "console.error('[MaterialsStore] fetchDefinitionById error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/materialsStore.ts",
          "line": 219,
          "content": "definitionsError: error instanceof Error ? error.message : 'Network error while fetching definition',",
          "severity": "CRITICAL"
        },
        {
          "file": "store/materialsStore.ts",
          "line": 236,
          "content": "console.error('[MaterialsStore] fetchDefinitionByNumber error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/materialsStore.ts",
          "line": 238,
          "content": "definitionsError: error instanceof Error ? error.message : 'Network error while fetching definition',",
          "severity": "CRITICAL"
        },
        {
          "file": "store/materialsStore.ts",
          "line": 268,
          "content": "console.error('[MaterialsStore] fetchLots error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/materialsStore.ts",
          "line": 270,
          "content": "lotsError: error instanceof Error ? error.message : 'Network error while fetching lots',",
          "severity": "CRITICAL"
        },
        {
          "file": "store/materialsStore.ts",
          "line": 287,
          "content": "console.error('[MaterialsStore] fetchLotById error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/materialsStore.ts",
          "line": 289,
          "content": "lotsError: error instanceof Error ? error.message : 'Network error while fetching lot',",
          "severity": "CRITICAL"
        },
        {
          "file": "store/materialsStore.ts",
          "line": 351,
          "content": "console.error('[MaterialsStore] fetchClasses error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/materialsStore.ts",
          "line": 353,
          "content": "classesError: error instanceof Error ? error.message : 'Network error while fetching classes',",
          "severity": "CRITICAL"
        }
      ],
      "warnings": [],
      "loadIssues": [],
      "recommendations": []
    },
    {
      "route": "/personnel",
      "hasErrors": true,
      "hasWarnings": false,
      "hasLoadFailures": false,
      "consoleMessages": 0,
      "errors": [
        {
          "file": "components/Layout/MainLayout.tsx",
          "line": 322,
          "content": "console.error('Logout error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Personnel/PersonnelList.tsx",
          "line": 63,
          "content": "console.error('Failed to fetch personnel:', error);",
          "severity": "CRITICAL"
        },
        {
          "file": "components/TimeTracking/MobileTimeTracker.tsx",
          "line": 321,
          "content": "console.error('Failed to sync offline action:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/MobileTimeTracker.tsx",
          "line": 444,
          "content": "console.error('Failed to decode token:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/MobileTimeTracker.tsx",
          "line": 472,
          "content": "console.error('Failed to load data:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/MobileTimeTracker.tsx",
          "line": 494,
          "content": "console.error('Failed to load active entries:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/MobileTimeTracker.tsx",
          "line": 510,
          "content": "console.error('Failed to fetch indirect codes:', error);",
          "severity": "CRITICAL"
        },
        {
          "file": "components/TimeTracking/MobileTimeTracker.tsx",
          "line": 528,
          "content": "console.error('Failed to load personnel:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/MobileTimeTracker.tsx",
          "line": 577,
          "content": "console.error('Clock in error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/MobileTimeTracker.tsx",
          "line": 630,
          "content": "console.error('Indirect clock in error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/MobileTimeTracker.tsx",
          "line": 676,
          "content": "console.error('Clock out error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/TimeClockKiosk.tsx",
          "line": 409,
          "content": "console.error('Failed to fetch indirect codes:', error);",
          "severity": "CRITICAL"
        },
        {
          "file": "components/TimeTracking/TimeClockKiosk.tsx",
          "line": 627,
          "content": "console.error('Badge scan error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/TimeClockKiosk.tsx",
          "line": 653,
          "content": "console.error('PIN entry error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/TimeClockKiosk.tsx",
          "line": 676,
          "content": "console.error('Failed to load active entries:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/TimeClockKiosk.tsx",
          "line": 703,
          "content": "throw new Error('Clock in failed');",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/TimeClockKiosk.tsx",
          "line": 725,
          "content": "throw new Error('Clock out failed');",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Operations/OperationCreatePage.tsx",
          "line": 46,
          "content": "console.error('Error fetching parent operations:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Operations/OperationCreatePage.tsx",
          "line": 58,
          "content": "console.error('Error creating operation:', error);",
          "severity": "MEDIUM"
        }
      ],
      "warnings": [],
      "loadIssues": [],
      "recommendations": []
    },
    {
      "route": "/admin",
      "hasErrors": true,
      "hasWarnings": false,
      "hasLoadFailures": false,
      "consoleMessages": 0,
      "errors": [
        {
          "file": "api/rbac.ts",
          "line": 64,
          "content": "throw new Error('Insufficient permissions to perform this action');",
          "severity": "MEDIUM"
        },
        {
          "file": "api/rbac.ts",
          "line": 68,
          "content": "throw new Error(error.response.data.message);",
          "severity": "MEDIUM"
        },
        {
          "file": "api/rbac.ts",
          "line": 71,
          "content": "throw new Error(error.message || 'An unexpected error occurred');",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Admin/AzureAD/AzureADDashboard.tsx",
          "line": 128,
          "content": "console.error('Failed to fetch dashboard data:', error);",
          "severity": "CRITICAL"
        },
        {
          "file": "components/Admin/AzureADConfig.tsx",
          "line": 139,
          "content": "console.error('Failed to save Azure AD configuration:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Admin/AzureADConfig.tsx",
          "line": 167,
          "content": "console.error('Connection test failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Admin/AzureADDashboard.tsx",
          "line": 90,
          "content": "console.error('Failed to load dashboard data:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Admin/UserSyncManager.tsx",
          "line": 99,
          "content": "console.error('Failed to load users:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Admin/UserSyncManager.tsx",
          "line": 111,
          "content": "console.error('Failed to load sync stats:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Admin/UserSyncManager.tsx",
          "line": 149,
          "content": "console.error('Sync failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/BuildBookGenerator.tsx",
          "line": 193,
          "content": "console.error('Error fetching templates:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/BuildBookGenerator.tsx",
          "line": 296,
          "content": "console.error('Error generating preview:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/BuildBookGenerator.tsx",
          "line": 330,
          "content": "console.error('Error saving template:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/BuildBookGenerator.tsx",
          "line": 348,
          "content": "console.error('Validation failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/BuildRecordList.tsx",
          "line": 211,
          "content": "console.error('Error fetching build records:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/BuildRecordList.tsx",
          "line": 231,
          "content": "console.error('Error fetching summary:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/BuildRecordList.tsx",
          "line": 309,
          "content": "console.error('Error generating build book:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/BuildRecordList.tsx",
          "line": 322,
          "content": "console.error('Error downloading build book:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/BuildRecordList.tsx",
          "line": 354,
          "content": "console.error('Error performing bulk action:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Layout/MainLayout.tsx",
          "line": 322,
          "content": "console.error('Logout error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/TimeEntryEdit.tsx",
          "line": 322,
          "content": "console.error('Validation error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/TimeTracking/TimeEntryEdit.tsx",
          "line": 367,
          "content": "console.error('Submit error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Admin/PermissionCatalogPage.tsx",
          "line": 99,
          "content": "console.error('Form validation failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Admin/RoleManagementPage.tsx",
          "line": 105,
          "content": "console.error('Form validation failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Admin/UserRoleAssignmentPage.tsx",
          "line": 143,
          "content": "console.error('Form validation failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Auth/LoginPage.tsx",
          "line": 76,
          "content": "console.error('Login failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "store/__tests__/AuthStore.test.tsx",
          "line": 284,
          "content": "const logoutError = new Error('Network error');",
          "severity": "CRITICAL"
        },
        {
          "file": "store/__tests__/AuthStore.test.tsx",
          "line": 465,
          "content": "// Suppress console.error for this test",
          "severity": "MEDIUM"
        },
        {
          "file": "store/__tests__/AuthStore.test.tsx",
          "line": 466,
          "content": "const originalError = console.error;",
          "severity": "MEDIUM"
        },
        {
          "file": "store/__tests__/AuthStore.test.tsx",
          "line": 467,
          "content": "console.error = vi.fn();",
          "severity": "MEDIUM"
        },
        {
          "file": "store/__tests__/AuthStore.test.tsx",
          "line": 473,
          "content": "console.error = originalError;",
          "severity": "MEDIUM"
        }
      ],
      "warnings": [],
      "loadIssues": [],
      "recommendations": []
    },
    {
      "route": "/settings",
      "hasErrors": true,
      "hasWarnings": false,
      "hasLoadFailures": false,
      "consoleMessages": 0,
      "errors": [
        {
          "file": "components/Admin/AzureADConfig.tsx",
          "line": 139,
          "content": "console.error('Failed to save Azure AD configuration:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Admin/AzureADConfig.tsx",
          "line": 167,
          "content": "console.error('Connection test failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/BuildBookGenerator.tsx",
          "line": 193,
          "content": "console.error('Error fetching templates:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/BuildBookGenerator.tsx",
          "line": 296,
          "content": "console.error('Error generating preview:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/BuildBookGenerator.tsx",
          "line": 330,
          "content": "console.error('Error saving template:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/BuildBookGenerator.tsx",
          "line": 348,
          "content": "console.error('Validation failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/PhotoCaptureModal.tsx",
          "line": 146,
          "content": "console.error('Error accessing camera:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/PhotoCaptureModal.tsx",
          "line": 171,
          "content": "console.error('Error starting camera:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/BuildRecords/PhotoCaptureModal.tsx",
          "line": 318,
          "content": "console.error('Error saving photo:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Collaboration/NotificationCenter.tsx",
          "line": 140,
          "content": "console.error('Failed to load unread count:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPAlertManagement.tsx",
          "line": 194,
          "content": "console.error('Failed to load alerts:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPAlertManagement.tsx",
          "line": 215,
          "content": "console.error('Failed to load statistics:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPAlertManagement.tsx",
          "line": 237,
          "content": "console.error('Failed to load configuration:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPAlertManagement.tsx",
          "line": 409,
          "content": "console.error('Failed to acknowledge alert:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPAlertManagement.tsx",
          "line": 440,
          "content": "console.error('Failed to resolve alert:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPAlertManagement.tsx",
          "line": 465,
          "content": "console.error('Failed to update configuration:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPConfigurationForm.tsx",
          "line": 136,
          "content": "console.error('Failed to load parts:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPConfigurationForm.tsx",
          "line": 177,
          "content": "console.error('Failed to load configuration:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPConfigurationForm.tsx",
          "line": 272,
          "content": "throw new Error(error.message || 'Failed to save configuration');",
          "severity": "MEDIUM"
        },
        {
          "file": "components/LLP/LLPConfigurationForm.tsx",
          "line": 275,
          "content": "console.error('Failed to save configuration:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Layout/MainLayout.tsx",
          "line": 322,
          "content": "console.error('Logout error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Routing/RoutingForm.tsx",
          "line": 122,
          "content": "console.error('Error loading parts:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Routing/RoutingForm.tsx",
          "line": 250,
          "content": "console.error('[RoutingForm] Submit error:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Routing/RoutingForm.tsx",
          "line": 251,
          "content": "console.error('[RoutingForm] Error details:', JSON.stringify(error, null, 2));",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Routing/RoutingForm.tsx",
          "line": 258,
          "content": "console.error('[RoutingForm] Error message:', errorMessage);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Routing/RoutingForm.tsx",
          "line": 284,
          "content": "console.error('[RoutingForm] Validation failed:', errorInfo);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/Routing/RoutingForm.tsx",
          "line": 296,
          "content": "console.error('Validation failed:', errorInfo);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/SPC/SPCConfiguration.tsx",
          "line": 199,
          "content": "console.error('Error saving SPC configuration:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/SPC/__tests__/SPCConfiguration.test.tsx",
          "line": 521,
          "content": "it('should handle network errors gracefully', async () => {",
          "severity": "CRITICAL"
        },
        {
          "file": "components/SPC/__tests__/SPCConfiguration.test.tsx",
          "line": 523,
          "content": "mockedAxios.post.mockRejectedValueOnce(new Error('Network error'));",
          "severity": "CRITICAL"
        },
        {
          "file": "components/WorkInstructions/DataCollectionFormBuilder.tsx",
          "line": 318,
          "content": "console.error('Failed to save form:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/WorkInstructions/DocumentExporter.tsx",
          "line": 217,
          "content": "console.error('Export failed:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/WorkInstructions/DocumentImporter.tsx",
          "line": 239,
          "content": "console.error('Failed to import document:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/WorkInstructions/MediaLibraryBrowser.tsx",
          "line": 179,
          "content": "console.error('Failed to upload files:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/WorkInstructions/MediaLibraryBrowser.tsx",
          "line": 329,
          "content": "console.error('Failed to delete items:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/WorkInstructions/MediaLibraryBrowser.tsx",
          "line": 346,
          "content": "console.error('Failed to create folder:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "components/WorkInstructions/NativeInstructionEditor.tsx",
          "line": 318,
          "content": "console.error('Failed to save work instruction:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Integration/IntegrationConfig.tsx",
          "line": 85,
          "content": "console.error('Error fetching integrations:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Integration/IntegrationConfig.tsx",
          "line": 120,
          "content": "console.error('Error deleting integration:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Integration/IntegrationConfig.tsx",
          "line": 154,
          "content": "console.error('Error testing connection:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Integration/IntegrationConfig.tsx",
          "line": 261,
          "content": "console.error('Error saving integration:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Integration/IntegrationConfig.tsx",
          "line": 272,
          "content": "console.error('Error toggling integration:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Integration/IntegrationDashboard.tsx",
          "line": 90,
          "content": "console.error('Error fetching integration health:', error);",
          "severity": "MEDIUM"
        },
        {
          "file": "pages/Integration/IntegrationDashboard.tsx",
          "line": 114,
          "content": "console.error('Error triggering sync:', error);",
          "severity": "MEDIUM"
        }
      ],
      "warnings": [],
      "loadIssues": [],
      "recommendations": []
    }
  ],
  "errorsByCategory": {
    "critical": [],
    "high": [],
    "medium": [
      {
        "file": "api/auth.ts",
        "line": 42,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(error.response.data.message || 'Authentication failed');",
        "message": "throw new Error"
      },
      {
        "file": "api/auth.ts",
        "line": 44,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(error.message || 'Network error');",
        "message": "throw new Error"
      },
      {
        "file": "api/client.ts",
        "line": 76,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(errorMessage);",
        "message": "throw new Error"
      },
      {
        "file": "api/parts.ts",
        "line": 54,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(errorMessage);",
        "message": "throw new Error"
      },
      {
        "file": "api/presence.ts",
        "line": 79,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(errorMessage);",
        "message": "throw new Error"
      },
      {
        "file": "api/rbac.ts",
        "line": 64,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error('Insufficient permissions to perform this action');",
        "message": "throw new Error"
      },
      {
        "file": "api/rbac.ts",
        "line": 68,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(error.response.data.message);",
        "message": "throw new Error"
      },
      {
        "file": "api/rbac.ts",
        "line": 71,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(error.message || 'An unexpected error occurred');",
        "message": "throw new Error"
      },
      {
        "file": "api/routing.ts",
        "line": 103,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(errorMessage);",
        "message": "throw new Error"
      },
      {
        "file": "api/routingTemplates.ts",
        "line": 41,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('[Routing Template API Error]', message, error.response?.data);",
        "message": "console.error"
      },
      {
        "file": "api/workInstructions.ts",
        "line": 154,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Error getting auth token', error);",
        "message": "console.error"
      },
      {
        "file": "api/workInstructions.ts",
        "line": 168,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(error.response.data.error || error.response.data.message || 'API request failed');",
        "message": "throw new Error"
      },
      {
        "file": "api/workInstructions.ts",
        "line": 170,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(error.message || 'Network error');",
        "message": "throw new Error"
      },
      {
        "file": "components/Admin/AzureAD/AzureADDashboard.tsx",
        "line": 128,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to fetch dashboard data:', error);",
        "message": "console.error"
      },
      {
        "file": "components/Admin/AzureADConfig.tsx",
        "line": 139,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to save Azure AD configuration:', error);",
        "message": "console.error"
      },
      {
        "file": "components/Admin/AzureADConfig.tsx",
        "line": 167,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Connection test failed:', error);",
        "message": "console.error"
      },
      {
        "file": "components/Admin/AzureADDashboard.tsx",
        "line": 90,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to load dashboard data:', error);",
        "message": "console.error"
      },
      {
        "file": "components/Admin/UserSyncManager.tsx",
        "line": 99,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to load users:', error);",
        "message": "console.error"
      },
      {
        "file": "components/Admin/UserSyncManager.tsx",
        "line": 111,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to load sync stats:', error);",
        "message": "console.error"
      },
      {
        "file": "components/Admin/UserSyncManager.tsx",
        "line": 149,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Sync failed:', error);",
        "message": "console.error"
      },
      {
        "file": "components/Approvals/ApprovalTaskDetail.tsx",
        "line": 209,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error('Task ID or Assignment ID is required');",
        "message": "throw new Error"
      },
      {
        "file": "components/Approvals/ApprovalTaskDetail.tsx",
        "line": 221,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error('Failed to load task details');",
        "message": "throw new Error"
      },
      {
        "file": "components/Approvals/ApprovalTaskDetail.tsx",
        "line": 296,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error('Failed to approve task');",
        "message": "throw new Error"
      },
      {
        "file": "components/Approvals/ApprovalTaskDetail.tsx",
        "line": 327,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error('Failed to reject task');",
        "message": "throw new Error"
      },
      {
        "file": "components/Approvals/ApprovalTaskDetail.tsx",
        "line": 361,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error('Failed to delegate task');",
        "message": "throw new Error"
      },
      {
        "file": "components/Approvals/ApprovalTaskQueue.tsx",
        "line": 220,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error('Failed to load approval tasks');",
        "message": "throw new Error"
      },
      {
        "file": "components/Approvals/ApprovalTaskQueue.tsx",
        "line": 259,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error('Failed to approve task');",
        "message": "throw new Error"
      },
      {
        "file": "components/Approvals/ApprovalTaskQueue.tsx",
        "line": 288,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error('Failed to reject task');",
        "message": "throw new Error"
      },
      {
        "file": "components/Approvals/ApprovalTaskQueue.tsx",
        "line": 338,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(`Failed to ${action} tasks`);",
        "message": "throw new Error"
      },
      {
        "file": "components/Approvals/WorkflowProgressEnhanced.tsx",
        "line": 241,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error('Failed to load workflow data');",
        "message": "throw new Error"
      },
      {
        "file": "components/Approvals/WorkflowProgressEnhanced.tsx",
        "line": 264,
        "severity": "MEDIUM",
        "type": "WARNING",
        "content": "console.warn('Failed to load analytics data:', error);",
        "message": "console.warn"
      },
      {
        "file": "components/BuildRecords/BuildBookGenerator.tsx",
        "line": 193,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Error fetching templates:', error);",
        "message": "console.error"
      },
      {
        "file": "components/BuildRecords/BuildBookGenerator.tsx",
        "line": 296,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Error generating preview:', error);",
        "message": "console.error"
      },
      {
        "file": "components/BuildRecords/BuildBookGenerator.tsx",
        "line": 330,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Error saving template:', error);",
        "message": "console.error"
      },
      {
        "file": "components/BuildRecords/BuildBookGenerator.tsx",
        "line": 348,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Validation failed:', error);",
        "message": "console.error"
      },
      {
        "file": "components/BuildRecords/BuildRecordDetail.tsx",
        "line": 209,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Error fetching build record:', error);",
        "message": "console.error"
      },
      {
        "file": "components/BuildRecords/BuildRecordDetail.tsx",
        "line": 244,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Error generating build book:', error);",
        "message": "console.error"
      },
      {
        "file": "components/BuildRecords/BuildRecordList.tsx",
        "line": 211,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Error fetching build records:', error);",
        "message": "console.error"
      },
      {
        "file": "components/BuildRecords/BuildRecordList.tsx",
        "line": 231,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Error fetching summary:', error);",
        "message": "console.error"
      },
      {
        "file": "components/BuildRecords/BuildRecordList.tsx",
        "line": 309,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Error generating build book:', error);",
        "message": "console.error"
      },
      {
        "file": "components/BuildRecords/BuildRecordList.tsx",
        "line": 322,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Error downloading build book:', error);",
        "message": "console.error"
      },
      {
        "file": "components/BuildRecords/BuildRecordList.tsx",
        "line": 354,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Error performing bulk action:', error);",
        "message": "console.error"
      },
      {
        "file": "components/BuildRecords/BuildRecordOperationSignOff.tsx",
        "line": 241,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Error signing off operation:', error);",
        "message": "console.error"
      },
      {
        "file": "components/BuildRecords/BuildRecordOperationSignOff.tsx",
        "line": 275,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Error invalidating signature:', error);",
        "message": "console.error"
      },
      {
        "file": "components/BuildRecords/DeviationTracker.tsx",
        "line": 282,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Error saving deviation:', error);",
        "message": "console.error"
      },
      {
        "file": "components/BuildRecords/DeviationTracker.tsx",
        "line": 312,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Error uploading file:', error);",
        "message": "console.error"
      },
      {
        "file": "components/BuildRecords/DeviationTracker.tsx",
        "line": 344,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Error adding comment:', error);",
        "message": "console.error"
      },
      {
        "file": "components/BuildRecords/PhotoCaptureModal.tsx",
        "line": 146,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Error accessing camera:', error);",
        "message": "console.error"
      },
      {
        "file": "components/BuildRecords/PhotoCaptureModal.tsx",
        "line": 171,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Error starting camera:', error);",
        "message": "console.error"
      },
      {
        "file": "components/BuildRecords/PhotoCaptureModal.tsx",
        "line": 318,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Error saving photo:', error);",
        "message": "console.error"
      },
      {
        "file": "components/Collaboration/ActivityFeed.tsx",
        "line": 140,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to load activity stats:', error);",
        "message": "console.error"
      },
      {
        "file": "components/Collaboration/ConflictResolution.tsx",
        "line": 128,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to load conflicts:', error);",
        "message": "console.error"
      },
      {
        "file": "components/Collaboration/NotificationCenter.tsx",
        "line": 140,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to load unread count:', error);",
        "message": "console.error"
      },
      {
        "file": "components/Collaboration/ReviewDashboard.tsx",
        "line": 151,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to load review stats:', error);",
        "message": "console.error"
      },
      {
        "file": "components/Collaboration/withCollaboration.tsx",
        "line": 71,
        "severity": "MEDIUM",
        "type": "WARNING",
        "content": "console.warn(`withCollaboration: Document ID not found using key '${config.documentIdKey || 'id'}'`);",
        "message": "console.warn"
      },
      {
        "file": "components/Collaboration/withCollaboration.tsx",
        "line": 74,
        "severity": "MEDIUM",
        "type": "WARNING",
        "content": "console.warn('withCollaboration: User information not available');",
        "message": "console.warn"
      },
      {
        "file": "components/Dashboard/OEEMetricsCard.tsx",
        "line": 167,
        "severity": "MEDIUM",
        "type": "WARNING",
        "content": "console.warn('OEE Dashboard data unavailable:', error);",
        "message": "console.warn"
      },
      {
        "file": "components/ECO/ECODashboard.tsx",
        "line": 171,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Error loading ECOs:', error);",
        "message": "console.error"
      },
      {
        "file": "components/ECO/ECOForm.tsx",
        "line": 230,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Impact analysis failed:', error);",
        "message": "console.error"
      },
      {
        "file": "components/ErrorBoundary.tsx",
        "line": 26,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('ErrorBoundary caught an error:', error, errorInfo);",
        "message": "console.error"
      },
      {
        "file": "components/Execution/ConfigurableExecutionLayout.tsx",
        "line": 76,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to initialize layout:', err);",
        "message": "console.error"
      },
      {
        "file": "components/Execution/LayoutPreferenceModal.tsx",
        "line": 29,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Validation failed:', error);",
        "message": "console.error"
      },
      {
        "file": "components/Execution/panels/DataCollectionPanel.tsx",
        "line": 148,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Form validation failed:', error);",
        "message": "console.error"
      },
      {
        "file": "components/Kits/KitAnalyticsDashboard.tsx",
        "line": 318,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to load analytics data:', error);",
        "message": "console.error"
      },
      {
        "file": "components/Kits/KitForm.tsx",
        "line": 232,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Form submission error:', error);",
        "message": "console.error"
      },
      {
        "file": "components/Kits/KitReportGenerator.tsx",
        "line": 330,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Preview generation failed:', error);",
        "message": "console.error"
      },
      {
        "file": "components/Kits/KitReportGenerator.tsx",
        "line": 362,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Report generation failed:', error);",
        "message": "console.error"
      },
      {
        "file": "components/LLP/LLPAlertManagement.tsx",
        "line": 194,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to load alerts:', error);",
        "message": "console.error"
      },
      {
        "file": "components/LLP/LLPAlertManagement.tsx",
        "line": 215,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to load statistics:', error);",
        "message": "console.error"
      },
      {
        "file": "components/LLP/LLPAlertManagement.tsx",
        "line": 237,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to load configuration:', error);",
        "message": "console.error"
      },
      {
        "file": "components/LLP/LLPAlertManagement.tsx",
        "line": 409,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to acknowledge alert:', error);",
        "message": "console.error"
      },
      {
        "file": "components/LLP/LLPAlertManagement.tsx",
        "line": 440,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to resolve alert:', error);",
        "message": "console.error"
      },
      {
        "file": "components/LLP/LLPAlertManagement.tsx",
        "line": 465,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to update configuration:', error);",
        "message": "console.error"
      },
      {
        "file": "components/LLP/LLPConfigurationForm.tsx",
        "line": 136,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to load parts:', error);",
        "message": "console.error"
      },
      {
        "file": "components/LLP/LLPConfigurationForm.tsx",
        "line": 177,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to load configuration:', error);",
        "message": "console.error"
      },
      {
        "file": "components/LLP/LLPConfigurationForm.tsx",
        "line": 272,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(error.message || 'Failed to save configuration');",
        "message": "throw new Error"
      },
      {
        "file": "components/LLP/LLPConfigurationForm.tsx",
        "line": 275,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to save configuration:', error);",
        "message": "console.error"
      },
      {
        "file": "components/LLP/LLPDashboard.tsx",
        "line": 164,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to load LLP dashboard data:', error);",
        "message": "console.error"
      },
      {
        "file": "components/LLP/LLPDashboard.tsx",
        "line": 280,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Export failed:', error);",
        "message": "console.error"
      },
      {
        "file": "components/LLP/LLPDetailView.tsx",
        "line": 249,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to load LLP detail data:', error);",
        "message": "console.error"
      },
      {
        "file": "components/LLP/LLPDetailView.tsx",
        "line": 417,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Download failed:', error);",
        "message": "console.error"
      },
      {
        "file": "components/LLP/LLPLifeEventForm.tsx",
        "line": 198,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to load serialized parts:', error);",
        "message": "console.error"
      },
      {
        "file": "components/LLP/LLPLifeEventForm.tsx",
        "line": 221,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to load work orders:', error);",
        "message": "console.error"
      },
      {
        "file": "components/LLP/LLPLifeEventForm.tsx",
        "line": 244,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to load assemblies:', error);",
        "message": "console.error"
      },
      {
        "file": "components/LLP/LLPLifeEventForm.tsx",
        "line": 266,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to load life status:', error);",
        "message": "console.error"
      },
      {
        "file": "components/LLP/LLPLifeEventForm.tsx",
        "line": 374,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(error.message || 'Failed to record life event');",
        "message": "throw new Error"
      },
      {
        "file": "components/LLP/LLPLifeEventForm.tsx",
        "line": 377,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to record life event:', error);",
        "message": "console.error"
      },
      {
        "file": "components/Layout/MainLayout.tsx",
        "line": 322,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Logout error:', error);",
        "message": "console.error"
      },
      {
        "file": "components/Parameters/DependencyVisualizer.tsx",
        "line": 72,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error(`Failed to extract dependencies for formula ${formula.id}:`, err);",
        "message": "console.error"
      },
      {
        "file": "components/Parameters/FormulaBuilder.tsx",
        "line": 85,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to extract dependencies:', err);",
        "message": "console.error"
      },
      {
        "file": "components/Personnel/PersonnelList.tsx",
        "line": 63,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to fetch personnel:', error);",
        "message": "console.error"
      },
      {
        "file": "components/Routing/ActiveUsersIndicator.tsx",
        "line": 76,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Presence tracking error:', error);",
        "message": "console.error"
      },
      {
        "file": "components/Routing/DependencyGraph.tsx",
        "line": 163,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to create dependency graph:', error);",
        "message": "console.error"
      },
      {
        "file": "components/Routing/RoutingForm.tsx",
        "line": 122,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Error loading parts:', error);",
        "message": "console.error"
      },
      {
        "file": "components/Routing/RoutingForm.tsx",
        "line": 250,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('[RoutingForm] Submit error:', error);",
        "message": "console.error"
      },
      {
        "file": "components/Routing/RoutingForm.tsx",
        "line": 251,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('[RoutingForm] Error details:', JSON.stringify(error, null, 2));",
        "message": "console.error"
      },
      {
        "file": "components/Routing/RoutingForm.tsx",
        "line": 258,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('[RoutingForm] Error message:', errorMessage);",
        "message": "console.error"
      },
      {
        "file": "components/Routing/RoutingForm.tsx",
        "line": 284,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('[RoutingForm] Validation failed:', errorInfo);",
        "message": "console.error"
      },
      {
        "file": "components/Routing/RoutingForm.tsx",
        "line": 296,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Validation failed:', errorInfo);",
        "message": "console.error"
      },
      {
        "file": "components/Routing/SaveAsTemplateModal.tsx",
        "line": 69,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to create template:', error);",
        "message": "console.error"
      },
      {
        "file": "components/Routing/StepBuilderModal.tsx",
        "line": 144,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to load options:', error);",
        "message": "console.error"
      },
      {
        "file": "components/Routing/StepBuilderModal.tsx",
        "line": 191,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Validation failed:', error);",
        "message": "console.error"
      },
      {
        "file": "components/SPC/RuleViolationAlert.tsx",
        "line": 125,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Error fetching rule violations:', error);",
        "message": "console.error"
      },
      {
        "file": "components/SPC/RuleViolationAlert.tsx",
        "line": 161,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Error acknowledging violation:', error);",
        "message": "console.error"
      },
      {
        "file": "components/SPC/SPCConfiguration.tsx",
        "line": 199,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Error saving SPC configuration:', error);",
        "message": "console.error"
      },
      {
        "file": "components/Staging/StagingDashboard.tsx",
        "line": 195,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to load dashboard data:', error);",
        "message": "console.error"
      },
      {
        "file": "components/TimeTracking/MobileTimeTracker.tsx",
        "line": 321,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to sync offline action:', error);",
        "message": "console.error"
      },
      {
        "file": "components/TimeTracking/MobileTimeTracker.tsx",
        "line": 444,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to decode token:', error);",
        "message": "console.error"
      },
      {
        "file": "components/TimeTracking/MobileTimeTracker.tsx",
        "line": 472,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to load data:', error);",
        "message": "console.error"
      },
      {
        "file": "components/TimeTracking/MobileTimeTracker.tsx",
        "line": 494,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to load active entries:', error);",
        "message": "console.error"
      },
      {
        "file": "components/TimeTracking/MobileTimeTracker.tsx",
        "line": 510,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to fetch indirect codes:', error);",
        "message": "console.error"
      },
      {
        "file": "components/TimeTracking/MobileTimeTracker.tsx",
        "line": 528,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to load personnel:', error);",
        "message": "console.error"
      },
      {
        "file": "components/TimeTracking/MobileTimeTracker.tsx",
        "line": 577,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Clock in error:', error);",
        "message": "console.error"
      },
      {
        "file": "components/TimeTracking/MobileTimeTracker.tsx",
        "line": 630,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Indirect clock in error:', error);",
        "message": "console.error"
      },
      {
        "file": "components/TimeTracking/MobileTimeTracker.tsx",
        "line": 676,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Clock out error:', error);",
        "message": "console.error"
      },
      {
        "file": "components/TimeTracking/SupervisorApprovalDashboard.tsx",
        "line": 281,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to load pending approvals:', error);",
        "message": "console.error"
      },
      {
        "file": "components/TimeTracking/SupervisorApprovalDashboard.tsx",
        "line": 308,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to load metrics:', error);",
        "message": "console.error"
      },
      {
        "file": "components/TimeTracking/SupervisorApprovalDashboard.tsx",
        "line": 340,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Approval action error:', error);",
        "message": "console.error"
      },
      {
        "file": "components/TimeTracking/SupervisorApprovalDashboard.tsx",
        "line": 372,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Bulk approval error:', error);",
        "message": "console.error"
      },
      {
        "file": "components/TimeTracking/TimeClockKiosk.tsx",
        "line": 409,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to fetch indirect codes:', error);",
        "message": "console.error"
      },
      {
        "file": "components/TimeTracking/TimeClockKiosk.tsx",
        "line": 627,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Badge scan error:', error);",
        "message": "console.error"
      },
      {
        "file": "components/TimeTracking/TimeClockKiosk.tsx",
        "line": 653,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('PIN entry error:', error);",
        "message": "console.error"
      },
      {
        "file": "components/TimeTracking/TimeClockKiosk.tsx",
        "line": 676,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to load active entries:', error);",
        "message": "console.error"
      },
      {
        "file": "components/TimeTracking/TimeClockKiosk.tsx",
        "line": 703,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error('Clock in failed');",
        "message": "throw new Error"
      },
      {
        "file": "components/TimeTracking/TimeClockKiosk.tsx",
        "line": 725,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error('Clock out failed');",
        "message": "throw new Error"
      },
      {
        "file": "components/TimeTracking/TimeEntryEdit.tsx",
        "line": 322,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Validation error:', error);",
        "message": "console.error"
      },
      {
        "file": "components/TimeTracking/TimeEntryEdit.tsx",
        "line": 367,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Submit error:', error);",
        "message": "console.error"
      },
      {
        "file": "components/TimeTracking/TimeEntryHistory.tsx",
        "line": 210,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to load edit history:', error);",
        "message": "console.error"
      },
      {
        "file": "components/TimeTracking/TimeEntryManagement.tsx",
        "line": 237,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to load time entries:', error);",
        "message": "console.error"
      },
      {
        "file": "components/TimeTracking/TimeEntryManagement.tsx",
        "line": 268,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to load reference data:', error);",
        "message": "console.error"
      },
      {
        "file": "components/TimeTracking/TimeTrackingWidget.tsx",
        "line": 238,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to fetch indirect codes:', error);",
        "message": "console.error"
      },
      {
        "file": "components/TimeTracking/TimeTrackingWidget.tsx",
        "line": 373,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to decode token:', error);",
        "message": "console.error"
      },
      {
        "file": "components/TimeTracking/TimeTrackingWidget.tsx",
        "line": 416,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to load active entries:', error);",
        "message": "console.error"
      },
      {
        "file": "components/TimeTracking/TimeTrackingWidget.tsx",
        "line": 435,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to load summary:', error);",
        "message": "console.error"
      },
      {
        "file": "components/TimeTracking/TimeTrackingWidget.tsx",
        "line": 474,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Clock in error:', error);",
        "message": "console.error"
      },
      {
        "file": "components/TimeTracking/TimeTrackingWidget.tsx",
        "line": 515,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Indirect clock in error:', error);",
        "message": "console.error"
      },
      {
        "file": "components/TimeTracking/TimeTrackingWidget.tsx",
        "line": 548,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Clock out error:', error);",
        "message": "console.error"
      },
      {
        "file": "components/TimeTracking/TimeTrackingWidget.tsx",
        "line": 582,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Stop all error:', error);",
        "message": "console.error"
      },
      {
        "file": "components/WorkInstructions/DataCollectionFormBuilder.tsx",
        "line": 318,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to save form:', error);",
        "message": "console.error"
      },
      {
        "file": "components/WorkInstructions/DocumentExporter.tsx",
        "line": 217,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Export failed:', error);",
        "message": "console.error"
      },
      {
        "file": "components/WorkInstructions/DocumentImporter.tsx",
        "line": 239,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to import document:', error);",
        "message": "console.error"
      },
      {
        "file": "components/WorkInstructions/MediaLibraryBrowser.tsx",
        "line": 179,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to upload files:', error);",
        "message": "console.error"
      },
      {
        "file": "components/WorkInstructions/MediaLibraryBrowser.tsx",
        "line": 329,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to delete items:', error);",
        "message": "console.error"
      },
      {
        "file": "components/WorkInstructions/MediaLibraryBrowser.tsx",
        "line": 346,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to create folder:', error);",
        "message": "console.error"
      },
      {
        "file": "components/WorkInstructions/NativeInstructionEditor.tsx",
        "line": 318,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to save work instruction:', error);",
        "message": "console.error"
      },
      {
        "file": "components/WorkInstructions/RichTextEditor.tsx",
        "line": 104,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Lexical Editor Error:', error);",
        "message": "console.error"
      },
      {
        "file": "components/WorkInstructions/WorkInstructionForm.tsx",
        "line": 176,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(error.message || 'Failed to reject work instruction');",
        "message": "throw new Error"
      },
      {
        "file": "components/WorkInstructions/WorkInstructionStepEditor.tsx",
        "line": 287,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Image upload failed:', error);",
        "message": "console.error"
      },
      {
        "file": "components/WorkInstructions/WorkInstructionStepEditor.tsx",
        "line": 299,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Video upload failed:', error);",
        "message": "console.error"
      },
      {
        "file": "components/WorkInstructions/WorkInstructionStepEditor.tsx",
        "line": 311,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Attachment upload failed:', error);",
        "message": "console.error"
      },
      {
        "file": "components/WorkInstructions/plugins/ImagePlugin.tsx",
        "line": 260,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error('ImagePlugin: ImageNode not registered on editor');",
        "message": "throw new Error"
      },
      {
        "file": "components/WorkInstructions/plugins/VideoPlugin.tsx",
        "line": 286,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error('VideoPlugin: VideoNode not registered on editor');",
        "message": "throw new Error"
      },
      {
        "file": "components/WorkOrders/WorkOrderCreate.tsx",
        "line": 67,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to load parts:', error);",
        "message": "console.error"
      },
      {
        "file": "components/WorkOrders/WorkOrderCreate.tsx",
        "line": 105,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(error.message || 'Failed to create work order');",
        "message": "throw new Error"
      },
      {
        "file": "components/WorkOrders/WorkOrderCreate.tsx",
        "line": 114,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to create work order:', error);",
        "message": "console.error"
      },
      {
        "file": "components/WorkOrders/WorkOrderPriorityChange.tsx",
        "line": 75,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(error.message || 'Failed to update priority');",
        "message": "throw new Error"
      },
      {
        "file": "components/WorkOrders/WorkOrderReschedule.tsx",
        "line": 84,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(error.message || 'Failed to reschedule work order');",
        "message": "throw new Error"
      },
      {
        "file": "components/WorkOrders/__tests__/WorkOrderCreate.test.tsx",
        "line": 63,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "// Mock console.error to suppress error logs in tests",
        "message": "console.error"
      },
      {
        "file": "components/__tests__/ErrorBoundary.test.tsx",
        "line": 31,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error('Test error message');",
        "message": "throw new Error"
      },
      {
        "file": "components/__tests__/ErrorBoundary.test.tsx",
        "line": 42,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "// Mock console.error to prevent test output pollution",
        "message": "console.error"
      },
      {
        "file": "components/__tests__/ErrorBoundary.test.tsx",
        "line": 253,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error();",
        "message": "throw new Error"
      },
      {
        "file": "contexts/SiteContext.tsx",
        "line": 108,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(`Server error: ${response.status}`);",
        "message": "throw new Error"
      },
      {
        "file": "contexts/SiteContext.tsx",
        "line": 112,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(`Client error: ${response.status} ${response.statusText}`);",
        "message": "throw new Error"
      },
      {
        "file": "contexts/SiteContext.tsx",
        "line": 123,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error('Request timeout');",
        "message": "throw new Error"
      },
      {
        "file": "contexts/SiteContext.tsx",
        "line": 128,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Error fetching sites:', error);",
        "message": "console.error"
      },
      {
        "file": "contexts/SiteContext.tsx",
        "line": 152,
        "severity": "MEDIUM",
        "type": "WARNING",
        "content": "console.warn('[SiteContext] Failed to load cached sites:', error);",
        "message": "console.warn"
      },
      {
        "file": "contexts/SiteContext.tsx",
        "line": 166,
        "severity": "MEDIUM",
        "type": "WARNING",
        "content": "console.warn('[SiteContext] Failed to cache sites:', error);",
        "message": "console.warn"
      },
      {
        "file": "contexts/SiteContext.tsx",
        "line": 188,
        "severity": "MEDIUM",
        "type": "WARNING",
        "content": "console.warn('[SiteContext] Failed to load site from localStorage:', error);",
        "message": "console.warn"
      },
      {
        "file": "contexts/SiteContext.tsx",
        "line": 208,
        "severity": "MEDIUM",
        "type": "WARNING",
        "content": "console.warn('[SiteContext] Failed to save site to localStorage:', error);",
        "message": "console.warn"
      },
      {
        "file": "contexts/SiteContext.tsx",
        "line": 278,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error(`[SiteContext] Error refreshing sites (failure ${consecutiveFailuresRef.current}):`, err);",
        "message": "console.error"
      },
      {
        "file": "contexts/SiteContext.tsx",
        "line": 345,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('[SiteContext] Initialization error:', err);",
        "message": "console.error"
      },
      {
        "file": "contexts/SiteContext.tsx",
        "line": 365,
        "severity": "MEDIUM",
        "type": "WARNING",
        "content": "console.warn('[SiteContext] Circuit breaker: Too many consecutive failures, stopping polling');",
        "message": "console.warn"
      },
      {
        "file": "contexts/SiteContext.tsx",
        "line": 393,
        "severity": "MEDIUM",
        "type": "WARNING",
        "content": "console.warn('[SiteContext] Max retries reached, stopping site fetch attempts');",
        "message": "console.warn"
      },
      {
        "file": "contexts/SiteContext.tsx",
        "line": 490,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error('useSite must be used within a SiteProvider');",
        "message": "throw new Error"
      },
      {
        "file": "contexts/__tests__/SiteContext.test.tsx",
        "line": 686,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "// Suppress console.error for this test since we expect an error",
        "message": "console.error"
      },
      {
        "file": "contexts/__tests__/SiteContext.test.tsx",
        "line": 687,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "const originalError = console.error;",
        "message": "console.error"
      },
      {
        "file": "contexts/__tests__/SiteContext.test.tsx",
        "line": 688,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error = vi.fn();",
        "message": "console.error"
      },
      {
        "file": "contexts/__tests__/SiteContext.test.tsx",
        "line": 694,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error = originalError;",
        "message": "console.error"
      },
      {
        "file": "hooks/usePresence.ts",
        "line": 77,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to update presence:', err);",
        "message": "console.error"
      },
      {
        "file": "hooks/usePresence.ts",
        "line": 103,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to fetch presence:', err);",
        "message": "console.error"
      },
      {
        "file": "hooks/usePresence.ts",
        "line": 126,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to remove presence:', err);",
        "message": "console.error"
      },
      {
        "file": "hooks/useRealTimeCollaboration.ts",
        "line": 123,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Real-time collaboration error:', error);",
        "message": "console.error"
      },
      {
        "file": "hooks/useRoutingChangeDetection.ts",
        "line": 100,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error('Routing not found');",
        "message": "throw new Error"
      },
      {
        "file": "hooks/useRoutingChangeDetection.ts",
        "line": 123,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to check for routing changes:', err);",
        "message": "console.error"
      },
      {
        "file": "main.tsx",
        "line": 79,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Application error:', error, errorInfo);",
        "message": "console.error"
      },
      {
        "file": "pages/Admin/PermissionCatalogPage.tsx",
        "line": 99,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Form validation failed:', error);",
        "message": "console.error"
      },
      {
        "file": "pages/Admin/RoleManagementPage.tsx",
        "line": 105,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Form validation failed:', error);",
        "message": "console.error"
      },
      {
        "file": "pages/Admin/UserRoleAssignmentPage.tsx",
        "line": 143,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Form validation failed:', error);",
        "message": "console.error"
      },
      {
        "file": "pages/Auth/LoginPage.tsx",
        "line": 76,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Login failed:', error);",
        "message": "console.error"
      },
      {
        "file": "pages/Dashboard/Dashboard.tsx",
        "line": 94,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Error fetching dashboard data:', error);",
        "message": "console.error"
      },
      {
        "file": "pages/Documents/DocumentsPage.tsx",
        "line": 89,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to fetch document statistics:', error);",
        "message": "console.error"
      },
      {
        "file": "pages/Equipment/Equipment.tsx",
        "line": 55,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to load equipment:', error);",
        "message": "console.error"
      },
      {
        "file": "pages/FAI/FAIDetailPage.tsx",
        "line": 100,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to load FAI data:', error);",
        "message": "console.error"
      },
      {
        "file": "pages/FAI/FAIDetailPage.tsx",
        "line": 111,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to load signatures:', error);",
        "message": "console.error"
      },
      {
        "file": "pages/Integration/IntegrationConfig.tsx",
        "line": 85,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Error fetching integrations:', error);",
        "message": "console.error"
      },
      {
        "file": "pages/Integration/IntegrationConfig.tsx",
        "line": 120,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Error deleting integration:', error);",
        "message": "console.error"
      },
      {
        "file": "pages/Integration/IntegrationConfig.tsx",
        "line": 154,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Error testing connection:', error);",
        "message": "console.error"
      },
      {
        "file": "pages/Integration/IntegrationConfig.tsx",
        "line": 261,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Error saving integration:', error);",
        "message": "console.error"
      },
      {
        "file": "pages/Integration/IntegrationConfig.tsx",
        "line": 272,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Error toggling integration:', error);",
        "message": "console.error"
      },
      {
        "file": "pages/Integration/IntegrationDashboard.tsx",
        "line": 90,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Error fetching integration health:', error);",
        "message": "console.error"
      },
      {
        "file": "pages/Integration/IntegrationDashboard.tsx",
        "line": 114,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Error triggering sync:', error);",
        "message": "console.error"
      },
      {
        "file": "pages/Integration/IntegrationLogs.tsx",
        "line": 106,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Error fetching integrations:', error);",
        "message": "console.error"
      },
      {
        "file": "pages/Integration/IntegrationLogs.tsx",
        "line": 139,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Error fetching logs:', error);",
        "message": "console.error"
      },
      {
        "file": "pages/NotFound/__tests__/NotFound.test.tsx",
        "line": 205,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error('Navigation error');",
        "message": "throw new Error"
      },
      {
        "file": "pages/Operations/OperationCreatePage.tsx",
        "line": 46,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Error fetching parent operations:', error);",
        "message": "console.error"
      },
      {
        "file": "pages/Operations/OperationCreatePage.tsx",
        "line": 58,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Error creating operation:', error);",
        "message": "console.error"
      },
      {
        "file": "pages/Operations/OperationListPage.tsx",
        "line": 59,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Error fetching operations:', error);",
        "message": "console.error"
      },
      {
        "file": "pages/Production/TeamWorkQueue.tsx",
        "line": 89,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to fetch team work queue', error);",
        "message": "console.error"
      },
      {
        "file": "pages/Quality/Inspections.tsx",
        "line": 87,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to load inspections:', error);",
        "message": "console.error"
      },
      {
        "file": "pages/Quality/Inspections.tsx",
        "line": 231,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to create inspection:', error);",
        "message": "console.error"
      },
      {
        "file": "pages/Quality/NCRs.tsx",
        "line": 93,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to load NCRs:', error);",
        "message": "console.error"
      },
      {
        "file": "pages/Quality/NCRs.tsx",
        "line": 267,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to create NCR:', error);",
        "message": "console.error"
      },
      {
        "file": "pages/Routing/RoutingTemplatesPage.tsx",
        "line": 77,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to fetch templates:', error);",
        "message": "console.error"
      },
      {
        "file": "pages/Routing/RoutingTemplatesPage.tsx",
        "line": 96,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to toggle favorite:', error);",
        "message": "console.error"
      },
      {
        "file": "pages/Routing/RoutingTemplatesPage.tsx",
        "line": 130,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to update template:', error);",
        "message": "console.error"
      },
      {
        "file": "pages/Routing/RoutingTemplatesPage.tsx",
        "line": 159,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to delete template:', error);",
        "message": "console.error"
      },
      {
        "file": "pages/Serialization/SerializationListPage.tsx",
        "line": 111,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to load parts:', error);",
        "message": "console.error"
      },
      {
        "file": "pages/Serialization/SerializationListPage.tsx",
        "line": 141,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('[TEST DEBUG] Generate single serial error:', error);",
        "message": "console.error"
      },
      {
        "file": "pages/Serialization/SerializationListPage.tsx",
        "line": 142,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('[TEST DEBUG] Error details:', {",
        "message": "console.error"
      },
      {
        "file": "pages/Serialization/SerializationListPage.tsx",
        "line": 204,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('[TEST DEBUG] Generate batch error:', error);",
        "message": "console.error"
      },
      {
        "file": "pages/Serialization/SerializationListPage.tsx",
        "line": 237,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Create part error:', error);",
        "message": "console.error"
      },
      {
        "file": "pages/WorkInstructions/WorkInstructionDetailPage.tsx",
        "line": 95,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to load signatures:', error);",
        "message": "console.error"
      },
      {
        "file": "pages/WorkOrders/WorkOrderDetails.tsx",
        "line": 59,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error('Invalid authentication token');",
        "message": "throw new Error"
      },
      {
        "file": "pages/WorkOrders/WorkOrderDetails.tsx",
        "line": 64,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error('No authentication token found');",
        "message": "throw new Error"
      },
      {
        "file": "pages/WorkOrders/WorkOrderDetails.tsx",
        "line": 87,
        "severity": "MEDIUM",
        "type": "WARNING",
        "content": "console.warn('Could not fetch operations:', opsError);",
        "message": "console.warn"
      },
      {
        "file": "pages/WorkOrders/WorkOrders.tsx",
        "line": 94,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to load work orders:', error);",
        "message": "console.error"
      },
      {
        "file": "services/apiClient.ts",
        "line": 65,
        "severity": "MEDIUM",
        "type": "WARNING",
        "content": "console.warn('Failed to get auth token from storage:', error);",
        "message": "console.warn"
      },
      {
        "file": "services/apiClient.ts",
        "line": 206,
        "severity": "MEDIUM",
        "type": "WARNING",
        "content": "console.warn('[ApiClient] Circuit breaker: Too many failures, skipping health check');",
        "message": "console.warn"
      },
      {
        "file": "services/apiClient.ts",
        "line": 295,
        "severity": "MEDIUM",
        "type": "WARNING",
        "content": "console.warn(`[ApiClient] Too many consecutive health check failures (${consecutiveFailures})`);",
        "message": "console.warn"
      },
      {
        "file": "services/apiClient.ts",
        "line": 303,
        "severity": "MEDIUM",
        "type": "WARNING",
        "content": "console.warn(`[ApiClient] Health check error limit reached:`, error);",
        "message": "console.warn"
      },
      {
        "file": "services/apiClient.ts",
        "line": 311,
        "severity": "MEDIUM",
        "type": "WARNING",
        "content": "console.warn(`[ApiClient] Health check timeout after ${timeout}ms`);",
        "message": "console.warn"
      },
      {
        "file": "services/realTimeCollaboration.ts",
        "line": 65,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to parse collaboration event:', error);",
        "message": "console.error"
      },
      {
        "file": "services/realTimeCollaboration.ts",
        "line": 70,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Real-time collaboration error:', error);",
        "message": "console.error"
      },
      {
        "file": "services/realTimeCollaboration.ts",
        "line": 80,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to connect to real-time collaboration:', error);",
        "message": "console.error"
      },
      {
        "file": "services/realTimeCollaboration.ts",
        "line": 134,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": ".catch(error => console.error('Failed to update presence:', error));",
        "message": "console.error"
      },
      {
        "file": "services/realTimeCollaboration.ts",
        "line": 134,
        "severity": "MEDIUM",
        "type": "ERROR_HANDLER",
        "content": ".catch(error => console.error('Failed to update presence:', error));",
        "message": ".catch(error =>"
      },
      {
        "file": "services/realTimeCollaboration.ts",
        "line": 269,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error(`Failed to parse ${eventType} event:`, error);",
        "message": "console.error"
      },
      {
        "file": "services/realTimeCollaboration.ts",
        "line": 280,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Max reconnection attempts reached');",
        "message": "console.error"
      },
      {
        "file": "services/realTimeCollaboration.ts",
        "line": 308,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": ".catch(error => console.error('Failed to update subscriptions:', error));",
        "message": "console.error"
      },
      {
        "file": "services/realTimeCollaboration.ts",
        "line": 308,
        "severity": "MEDIUM",
        "type": "ERROR_HANDLER",
        "content": ".catch(error => console.error('Failed to update subscriptions:', error));",
        "message": ".catch(error =>"
      },
      {
        "file": "store/AuthStore.tsx",
        "line": 88,
        "severity": "MEDIUM",
        "type": "WARNING",
        "content": "console.warn('[TEST MODE] Failed to parse auth state from localStorage:', error);",
        "message": "console.warn"
      },
      {
        "file": "store/AuthStore.tsx",
        "line": 168,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('[AuthStore] Logout API error:', error);",
        "message": "console.error"
      },
      {
        "file": "store/AuthStore.tsx",
        "line": 212,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error('No refresh token available');",
        "message": "throw new Error"
      },
      {
        "file": "store/AuthStore.tsx",
        "line": 235,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('[AuthStore] Logout error during refresh failure:', logoutError);",
        "message": "console.error"
      },
      {
        "file": "store/AuthStore.tsx",
        "line": 294,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('[AuthStore] Auth initialization error:', error);",
        "message": "console.error"
      },
      {
        "file": "store/AuthStore.tsx",
        "line": 334,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error('No redirect URL received from SAML provider');",
        "message": "throw new Error"
      },
      {
        "file": "store/AuthStore.tsx",
        "line": 445,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('[AuthStore] Auth error from synchronizer:', error);",
        "message": "console.error"
      },
      {
        "file": "store/AuthStore.tsx",
        "line": 451,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('[AuthStore] Logout error during synchronizer auth error:', logoutError);",
        "message": "console.error"
      },
      {
        "file": "store/AuthStore.tsx",
        "line": 515,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error('useAuthStore must be used within AuthProvider');",
        "message": "throw new Error"
      },
      {
        "file": "store/__tests__/AuthStore.test.tsx",
        "line": 465,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "// Suppress console.error for this test",
        "message": "console.error"
      },
      {
        "file": "store/__tests__/AuthStore.test.tsx",
        "line": 466,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "const originalError = console.error;",
        "message": "console.error"
      },
      {
        "file": "store/__tests__/AuthStore.test.tsx",
        "line": 467,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error = vi.fn();",
        "message": "console.error"
      },
      {
        "file": "store/__tests__/AuthStore.test.tsx",
        "line": 473,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error = originalError;",
        "message": "console.error"
      },
      {
        "file": "store/equipmentStore.ts",
        "line": 202,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('[EquipmentStore] fetchEquipment error:', error);",
        "message": "console.error"
      },
      {
        "file": "store/equipmentStore.ts",
        "line": 311,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('[EquipmentStore] fetchMaintenance error:', error);",
        "message": "console.error"
      },
      {
        "file": "store/faiStore.ts",
        "line": 98,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(errorMessage);",
        "message": "throw new Error"
      },
      {
        "file": "store/faiStore.ts",
        "line": 114,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(errorMessage);",
        "message": "throw new Error"
      },
      {
        "file": "store/faiStore.ts",
        "line": 130,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(errorMessage);",
        "message": "throw new Error"
      },
      {
        "file": "store/faiStore.ts",
        "line": 157,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(errorMessage);",
        "message": "throw new Error"
      },
      {
        "file": "store/faiStore.ts",
        "line": 179,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(errorMessage);",
        "message": "throw new Error"
      },
      {
        "file": "store/faiStore.ts",
        "line": 202,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(errorMessage);",
        "message": "throw new Error"
      },
      {
        "file": "store/faiStore.ts",
        "line": 222,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(errorMessage);",
        "message": "throw new Error"
      },
      {
        "file": "store/faiStore.ts",
        "line": 237,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(errorMessage);",
        "message": "throw new Error"
      },
      {
        "file": "store/faiStore.ts",
        "line": 263,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(errorMessage);",
        "message": "throw new Error"
      },
      {
        "file": "store/faiStore.ts",
        "line": 281,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(errorMessage);",
        "message": "throw new Error"
      },
      {
        "file": "store/faiStore.ts",
        "line": 303,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(errorMessage);",
        "message": "throw new Error"
      },
      {
        "file": "store/materialsStore.ts",
        "line": 198,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('[MaterialsStore] fetchDefinitions error:', error);",
        "message": "console.error"
      },
      {
        "file": "store/materialsStore.ts",
        "line": 217,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('[MaterialsStore] fetchDefinitionById error:', error);",
        "message": "console.error"
      },
      {
        "file": "store/materialsStore.ts",
        "line": 236,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('[MaterialsStore] fetchDefinitionByNumber error:', error);",
        "message": "console.error"
      },
      {
        "file": "store/materialsStore.ts",
        "line": 268,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('[MaterialsStore] fetchLots error:', error);",
        "message": "console.error"
      },
      {
        "file": "store/materialsStore.ts",
        "line": 287,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('[MaterialsStore] fetchLotById error:', error);",
        "message": "console.error"
      },
      {
        "file": "store/materialsStore.ts",
        "line": 351,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('[MaterialsStore] fetchClasses error:', error);",
        "message": "console.error"
      },
      {
        "file": "store/routingStore.ts",
        "line": 219,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(response.error || 'Failed to fetch routings');",
        "message": "throw new Error"
      },
      {
        "file": "store/routingStore.ts",
        "line": 302,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(response.error || 'Failed to fetch routing');",
        "message": "throw new Error"
      },
      {
        "file": "store/routingStore.ts",
        "line": 324,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(response.error || 'Failed to create routing');",
        "message": "throw new Error"
      },
      {
        "file": "store/routingStore.ts",
        "line": 355,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(response.error || 'Failed to update routing');",
        "message": "throw new Error"
      },
      {
        "file": "store/routingStore.ts",
        "line": 405,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(response.error || 'Failed to copy routing');",
        "message": "throw new Error"
      },
      {
        "file": "store/routingStore.ts",
        "line": 433,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(response.error || 'Failed to approve routing');",
        "message": "throw new Error"
      },
      {
        "file": "store/routingStore.ts",
        "line": 457,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(response.error || 'Failed to activate routing');",
        "message": "throw new Error"
      },
      {
        "file": "store/routingStore.ts",
        "line": 481,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(response.error || 'Failed to obsolete routing');",
        "message": "throw new Error"
      },
      {
        "file": "store/routingStore.ts",
        "line": 508,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(response.error || 'Failed to fetch routing steps');",
        "message": "throw new Error"
      },
      {
        "file": "store/routingStore.ts",
        "line": 589,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(response.error || 'Failed to resequence steps');",
        "message": "throw new Error"
      },
      {
        "file": "store/routingStore.ts",
        "line": 660,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error('Failed to fetch available sites');",
        "message": "throw new Error"
      },
      {
        "file": "store/routingStore.ts",
        "line": 680,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to calculate routing timing:', error);",
        "message": "console.error"
      },
      {
        "file": "store/routingStore.ts",
        "line": 692,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to validate routing:', error);",
        "message": "console.error"
      },
      {
        "file": "store/schedulingStore.ts",
        "line": 220,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(response.error || 'Failed to fetch schedules');",
        "message": "throw new Error"
      },
      {
        "file": "store/schedulingStore.ts",
        "line": 290,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error('Schedule ID is required and must be a valid string');",
        "message": "throw new Error"
      },
      {
        "file": "store/schedulingStore.ts",
        "line": 304,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(response.error || 'Failed to fetch schedule');",
        "message": "throw new Error"
      },
      {
        "file": "store/schedulingStore.ts",
        "line": 319,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error('Schedule number is required and must be a valid string');",
        "message": "throw new Error"
      },
      {
        "file": "store/schedulingStore.ts",
        "line": 333,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(response.error || 'Failed to fetch schedule');",
        "message": "throw new Error"
      },
      {
        "file": "store/schedulingStore.ts",
        "line": 355,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(response.error || 'Failed to create schedule');",
        "message": "throw new Error"
      },
      {
        "file": "store/schedulingStore.ts",
        "line": 379,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(response.error || 'Failed to update schedule');",
        "message": "throw new Error"
      },
      {
        "file": "store/schedulingStore.ts",
        "line": 419,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(response.error || 'Failed to fetch schedules by state');",
        "message": "throw new Error"
      },
      {
        "file": "store/schedulingStore.ts",
        "line": 446,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(response.error || 'Failed to fetch schedule entries');",
        "message": "throw new Error"
      },
      {
        "file": "store/schedulingStore.ts",
        "line": 527,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(response.error || 'Failed to fetch dispatch-ready entries');",
        "message": "throw new Error"
      },
      {
        "file": "store/schedulingStore.ts",
        "line": 551,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(response.error || 'Failed to fetch constraints');",
        "message": "throw new Error"
      },
      {
        "file": "store/schedulingStore.ts",
        "line": 615,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to check constraint violation:', error);",
        "message": "console.error"
      },
      {
        "file": "store/schedulingStore.ts",
        "line": 634,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(response.error || 'Failed to transition schedule state');",
        "message": "throw new Error"
      },
      {
        "file": "store/schedulingStore.ts",
        "line": 657,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(response.error || 'Failed to fetch state history');",
        "message": "throw new Error"
      },
      {
        "file": "store/schedulingStore.ts",
        "line": 677,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(response.error || 'Failed to apply priority sequencing');",
        "message": "throw new Error"
      },
      {
        "file": "store/schedulingStore.ts",
        "line": 692,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(response.error || 'Failed to apply EDD sequencing');",
        "message": "throw new Error"
      },
      {
        "file": "store/schedulingStore.ts",
        "line": 711,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(response.error || 'Failed to check schedule feasibility');",
        "message": "throw new Error"
      },
      {
        "file": "store/schedulingStore.ts",
        "line": 734,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(response.error || 'Failed to dispatch schedule entry');",
        "message": "throw new Error"
      },
      {
        "file": "store/schedulingStore.ts",
        "line": 749,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(response.error || 'Failed to dispatch all entries');",
        "message": "throw new Error"
      },
      {
        "file": "store/schedulingStore.ts",
        "line": 772,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(response.error || 'Failed to fetch statistics');",
        "message": "throw new Error"
      },
      {
        "file": "store/signatureStore.ts",
        "line": 100,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(errorMessage);",
        "message": "throw new Error"
      },
      {
        "file": "store/signatureStore.ts",
        "line": 116,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(errorMessage);",
        "message": "throw new Error"
      },
      {
        "file": "store/signatureStore.ts",
        "line": 131,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(errorMessage);",
        "message": "throw new Error"
      },
      {
        "file": "store/signatureStore.ts",
        "line": 158,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(errorMessage);",
        "message": "throw new Error"
      },
      {
        "file": "store/signatureStore.ts",
        "line": 174,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(errorMessage);",
        "message": "throw new Error"
      },
      {
        "file": "store/signatureStore.ts",
        "line": 197,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(errorMessage);",
        "message": "throw new Error"
      },
      {
        "file": "test/setup.ts",
        "line": 12,
        "severity": "MEDIUM",
        "type": "WARNING",
        "content": "const originalConsoleWarn = console.warn;",
        "message": "console.warn"
      },
      {
        "file": "test/setup.ts",
        "line": 13,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "const originalConsoleError = console.error;",
        "message": "console.error"
      },
      {
        "file": "test/setup.ts",
        "line": 19,
        "severity": "MEDIUM",
        "type": "WARNING",
        "content": "// Override console.warn to capture React and library warnings",
        "message": "console.warn"
      },
      {
        "file": "test/setup.ts",
        "line": 20,
        "severity": "MEDIUM",
        "type": "WARNING",
        "content": "console.warn = vi.fn((message: string, ...args: any[]) => {",
        "message": "console.warn"
      },
      {
        "file": "test/setup.ts",
        "line": 21,
        "severity": "MEDIUM",
        "type": "WARNING",
        "content": "// Call original console.warn for debugging",
        "message": "console.warn"
      },
      {
        "file": "test/setup.ts",
        "line": 46,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(`React Key Prop Warning: ${message}`);",
        "message": "throw new Error"
      },
      {
        "file": "test/setup.ts",
        "line": 50,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(`Ant Design Deprecation Warning: ${message}`);",
        "message": "throw new Error"
      },
      {
        "file": "test/setup.ts",
        "line": 54,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(`React Duplicate Key Warning: ${message}`);",
        "message": "throw new Error"
      },
      {
        "file": "test/setup.ts",
        "line": 59,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "// Override console.error to capture critical errors",
        "message": "console.error"
      },
      {
        "file": "test/setup.ts",
        "line": 60,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error = vi.fn((message: string, ...args: any[]) => {",
        "message": "console.error"
      },
      {
        "file": "test/setup.ts",
        "line": 61,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "// Call original console.error for debugging",
        "message": "console.error"
      },
      {
        "file": "test/setup.ts",
        "line": 81,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(`React Error: ${message}`);",
        "message": "throw new Error"
      },
      {
        "file": "test-utils/helpers.ts",
        "line": 24,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error('Element not found');",
        "message": "throw new Error"
      },
      {
        "file": "test-utils/helpers.ts",
        "line": 43,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error('Element still present');",
        "message": "throw new Error"
      },
      {
        "file": "test-utils/helpers.ts",
        "line": 320,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error('Test error for error boundary');",
        "message": "throw new Error"
      },
      {
        "file": "tests/setup.ts",
        "line": 49,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "const originalError = console.error;",
        "message": "console.error"
      },
      {
        "file": "tests/setup.ts",
        "line": 51,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error = (...args: any[]) => {",
        "message": "console.error"
      },
      {
        "file": "tests/setup.ts",
        "line": 67,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error = originalError;",
        "message": "console.error"
      },
      {
        "file": "utils/AuthStateSynchronizer.ts",
        "line": 130,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('[AuthSync] Failed to initialize persistent state:', error);",
        "message": "console.error"
      },
      {
        "file": "utils/AuthStateSynchronizer.ts",
        "line": 159,
        "severity": "MEDIUM",
        "type": "WARNING",
        "content": "console.warn('[AuthSync] Failed to load stored state:', error);",
        "message": "console.warn"
      },
      {
        "file": "utils/AuthStateSynchronizer.ts",
        "line": 220,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('[AuthSync] Sync failed:', error);",
        "message": "console.error"
      },
      {
        "file": "utils/AuthStateSynchronizer.ts",
        "line": 229,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('[AuthSync] Max sync retries exceeded, forcing logout');",
        "message": "console.error"
      },
      {
        "file": "utils/AuthStateSynchronizer.ts",
        "line": 263,
        "severity": "MEDIUM",
        "type": "WARNING",
        "content": "console.warn('[AuthSync] Failed to get frontend state:', error);",
        "message": "console.warn"
      },
      {
        "file": "utils/AuthStateSynchronizer.ts",
        "line": 299,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(`Backend validation failed: ${response.status}`);",
        "message": "throw new Error"
      },
      {
        "file": "utils/AuthStateSynchronizer.ts",
        "line": 314,
        "severity": "MEDIUM",
        "type": "WARNING",
        "content": "console.warn('[AuthSync] Failed to get backend state:', error);",
        "message": "console.warn"
      },
      {
        "file": "utils/AuthStateSynchronizer.ts",
        "line": 338,
        "severity": "MEDIUM",
        "type": "WARNING",
        "content": "console.warn('[AuthSync] Token validation request failed:', error);",
        "message": "console.warn"
      },
      {
        "file": "utils/AuthStateSynchronizer.ts",
        "line": 456,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('[AuthSync] Failed to apply resolved state:', error);",
        "message": "console.error"
      },
      {
        "file": "utils/AuthStateSynchronizer.ts",
        "line": 480,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('[AuthSync] Force logout failed:', error);",
        "message": "console.error"
      },
      {
        "file": "utils/AuthStateSynchronizer.ts",
        "line": 524,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('[AuthSync] Token refresh check failed:', error);",
        "message": "console.error"
      },
      {
        "file": "utils/AuthStateSynchronizer.ts",
        "line": 540,
        "severity": "MEDIUM",
        "type": "WARNING",
        "content": "console.warn('[AuthSync] Failed to parse JWT payload:', error);",
        "message": "console.warn"
      },
      {
        "file": "utils/AuthStateSynchronizer.ts",
        "line": 561,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(`Token refresh failed: ${response.status}`);",
        "message": "throw new Error"
      },
      {
        "file": "utils/AuthStateSynchronizer.ts",
        "line": 583,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('[AuthSync] Token refresh failed:', error);",
        "message": "console.error"
      },
      {
        "file": "utils/AuthStateSynchronizer.ts",
        "line": 619,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('[AuthSync] Backend token validation failed:', error);",
        "message": "console.error"
      },
      {
        "file": "utils/AuthStateSynchronizer.ts",
        "line": 633,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error(`[AuthSync] Event listener error for ${event}:`, error);",
        "message": "console.error"
      },
      {
        "file": "utils/apiErrorHandler.ts",
        "line": 28,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('API Error:', error);",
        "message": "console.error"
      },
      {
        "file": "utils/apiErrorHandler.ts",
        "line": 136,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error('Request timed out');",
        "message": "throw new Error"
      },
      {
        "file": "utils/authInterceptor.ts",
        "line": 24,
        "severity": "MEDIUM",
        "type": "WARNING",
        "content": "console.warn('[AuthInterceptor] 401 redirect already in progress, ignoring duplicate');",
        "message": "console.warn"
      },
      {
        "file": "utils/authInterceptor.ts",
        "line": 58,
        "severity": "MEDIUM",
        "type": "WARNING",
        "content": "console.warn('[AuthInterceptor] Auth store not available, clearing storage manually');",
        "message": "console.warn"
      },
      {
        "file": "utils/authInterceptor.ts",
        "line": 64,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('[AuthInterceptor] Error during logout:', logoutError);",
        "message": "console.error"
      },
      {
        "file": "utils/authInterceptor.ts",
        "line": 92,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('[AuthInterceptor] Error in 401 handler:', handlerError);",
        "message": "console.error"
      },
      {
        "file": "utils/csrfManager.ts",
        "line": 40,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(`Failed to fetch CSRF token: ${response.status}`);",
        "message": "throw new Error"
      },
      {
        "file": "utils/csrfManager.ts",
        "line": 45,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error('No CSRF token received from server');",
        "message": "throw new Error"
      },
      {
        "file": "utils/csrfManager.ts",
        "line": 54,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to fetch CSRF token:', error);",
        "message": "console.error"
      },
      {
        "file": "utils/csrfManager.ts",
        "line": 109,
        "severity": "MEDIUM",
        "type": "WARNING",
        "content": "console.warn('Failed to get CSRF token, proceeding without it:', error);",
        "message": "console.warn"
      },
      {
        "file": "utils/csrfManager.ts",
        "line": 132,
        "severity": "MEDIUM",
        "type": "WARNING",
        "content": "console.warn('CSRF token invalid, refreshing and retrying...');",
        "message": "console.warn"
      },
      {
        "file": "utils/csrfManager.ts",
        "line": 141,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to retry request with new CSRF token:', retryError);",
        "message": "console.error"
      },
      {
        "file": "utils/csrfManager.ts",
        "line": 149,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Request failed:', error);",
        "message": "console.error"
      },
      {
        "file": "utils/exportUtils.ts",
        "line": 39,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Error exporting to Excel:', error);",
        "message": "console.error"
      },
      {
        "file": "utils/exportUtils.ts",
        "line": 40,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error('Failed to export to Excel');",
        "message": "throw new Error"
      },
      {
        "file": "utils/exportUtils.ts",
        "line": 88,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Error exporting to PDF:', error);",
        "message": "console.error"
      },
      {
        "file": "utils/exportUtils.ts",
        "line": 89,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error('Failed to export to PDF');",
        "message": "throw new Error"
      },
      {
        "file": "utils/exportUtils.ts",
        "line": 162,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Error exporting dashboard metrics to Excel:', error);",
        "message": "console.error"
      },
      {
        "file": "utils/exportUtils.ts",
        "line": 163,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error('Failed to export dashboard metrics to Excel');",
        "message": "throw new Error"
      },
      {
        "file": "utils/exportUtils.ts",
        "line": 285,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Error exporting dashboard metrics to PDF:', error);",
        "message": "console.error"
      },
      {
        "file": "utils/exportUtils.ts",
        "line": 286,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error('Failed to export dashboard metrics to PDF');",
        "message": "throw new Error"
      },
      {
        "file": "utils/uuidUtils.ts",
        "line": 71,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error('Invalid UUID format - must be UUID v4');",
        "message": "throw new Error"
      },
      {
        "file": "utils/uuidUtils.ts",
        "line": 127,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(`Entity type ${entityType} does not support persistent UUIDs`);",
        "message": "throw new Error"
      },
      {
        "file": "utils/uuidUtils.ts",
        "line": 137,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error('Invalid UUID format');",
        "message": "throw new Error"
      },
      {
        "file": "utils/uuidUtils.ts",
        "line": 166,
        "severity": "MEDIUM",
        "type": "ERROR",
        "content": "console.error('Failed to copy UUID to clipboard:', error);",
        "message": "console.error"
      },
      {
        "file": "utils/uuidUtils.ts",
        "line": 208,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(`Invalid UUID parameter: ${validation.error}`);",
        "message": "throw new Error"
      },
      {
        "file": "utils/uuidUtils.ts",
        "line": 212,
        "severity": "MEDIUM",
        "type": "THROWN_ERROR",
        "content": "throw new Error(`UUID parameter must be UUID v4 format, got: ${validation.format}`);",
        "message": "throw new Error"
      }
    ],
    "low": [
      {
        "file": "components/Execution/ConfigurableExecutionLayout.tsx",
        "line": 170,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('Switch to instructions tab');",
        "message": "console.log"
      },
      {
        "file": "components/Execution/ConfigurableExecutionLayout.tsx",
        "line": 176,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('Switch to data collection tab');",
        "message": "console.log"
      },
      {
        "file": "components/Kits/KitAnalyticsDashboard.tsx",
        "line": 332,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log(`Exporting analytics data as ${format}`);",
        "message": "console.log"
      },
      {
        "file": "components/Kits/KitCostAnalysis.tsx",
        "line": 322,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('Loading cost data for range:', timeRange);",
        "message": "console.log"
      },
      {
        "file": "components/Kits/KitsList.tsx",
        "line": 384,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('Status transition for kit:', kit.id);",
        "message": "console.log"
      },
      {
        "file": "components/Kits/KitsList.tsx",
        "line": 389,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('Generate QR for kit:', kit.id);",
        "message": "console.log"
      },
      {
        "file": "components/Kits/KitsList.tsx",
        "line": 405,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('Bulk action:', action, 'on kits:', selectedRowKeys);",
        "message": "console.log"
      },
      {
        "file": "components/Kits/KitsList.tsx",
        "line": 561,
        "severity": "LOW",
        "type": "LOG",
        "content": "onClick={() => console.log('Export functionality')}",
        "message": "console.log"
      },
      {
        "file": "components/Routing/DependencyGraph.tsx",
        "line": 150,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('Clicked step:', step);",
        "message": "console.log"
      },
      {
        "file": "components/Routing/RoutingDetail.tsx",
        "line": 111,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('Routing changed:', info);",
        "message": "console.log"
      },
      {
        "file": "components/Routing/RoutingForm.tsx",
        "line": 186,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[RoutingForm] handleSubmit called with values:', values);",
        "message": "console.log"
      },
      {
        "file": "components/Routing/RoutingForm.tsx",
        "line": 187,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[RoutingForm] lifecycleState:', lifecycleState);",
        "message": "console.log"
      },
      {
        "file": "components/Routing/RoutingForm.tsx",
        "line": 218,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[RoutingForm] Form data to submit:', formData);",
        "message": "console.log"
      },
      {
        "file": "components/Routing/RoutingForm.tsx",
        "line": 222,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[RoutingForm] Calling createRouting API...');",
        "message": "console.log"
      },
      {
        "file": "components/Routing/RoutingForm.tsx",
        "line": 224,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[RoutingForm] createRouting result:', result);",
        "message": "console.log"
      },
      {
        "file": "components/Routing/RoutingForm.tsx",
        "line": 238,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[RoutingForm] Calling updateRouting API...');",
        "message": "console.log"
      },
      {
        "file": "components/Routing/RoutingForm.tsx",
        "line": 276,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[RoutingForm] handleSaveDraft called');",
        "message": "console.log"
      },
      {
        "file": "components/Routing/RoutingForm.tsx",
        "line": 277,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[RoutingForm] Form values before validation:', form.getFieldsValue());",
        "message": "console.log"
      },
      {
        "file": "components/Routing/RoutingForm.tsx",
        "line": 280,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[RoutingForm] Validation successful, values:', values);",
        "message": "console.log"
      },
      {
        "file": "components/SPC/SPCConfiguration.tsx",
        "line": 127,
        "severity": "LOW",
        "type": "LOG",
        "content": "*   onSaved={(config) => console.log('Saved:', config)}",
        "message": "console.log"
      },
      {
        "file": "components/Search/GlobalSearch.tsx",
        "line": 98,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('Detected UUID query, performing exact lookup:', queryToSearch);",
        "message": "console.log"
      },
      {
        "file": "components/Traceability/GenealogyTreeVisualization.tsx",
        "line": 224,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('Node details:', node);",
        "message": "console.log"
      },
      {
        "file": "components/WorkInstructions/NativeInstructionEditor.tsx",
        "line": 309,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('Add data collection field', stepId);",
        "message": "console.log"
      },
      {
        "file": "contexts/SiteContext.tsx",
        "line": 59,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[SiteContext] No auth token yet, skipping site fetch');",
        "message": "console.log"
      },
      {
        "file": "contexts/SiteContext.tsx",
        "line": 68,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[SiteContext] Invalid auth token format, skipping site fetch');",
        "message": "console.log"
      },
      {
        "file": "contexts/SiteContext.tsx",
        "line": 78,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[SiteContext] No access token in auth data, skipping site fetch');",
        "message": "console.log"
      },
      {
        "file": "contexts/SiteContext.tsx",
        "line": 102,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[SiteContext] Unauthorized - auth token invalid/expired');",
        "message": "console.log"
      },
      {
        "file": "contexts/SiteContext.tsx",
        "line": 107,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log(`[SiteContext] Server error (${response.status}), will retry`);",
        "message": "console.log"
      },
      {
        "file": "contexts/SiteContext.tsx",
        "line": 111,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log(`[SiteContext] Client error (${response.status}), reducing retry frequency`);",
        "message": "console.log"
      },
      {
        "file": "contexts/SiteContext.tsx",
        "line": 116,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[SiteContext] Successfully fetched sites:', data.sites?.length || 0);",
        "message": "console.log"
      },
      {
        "file": "contexts/SiteContext.tsx",
        "line": 122,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[SiteContext] Request timeout - server may be unavailable');",
        "message": "console.log"
      },
      {
        "file": "contexts/SiteContext.tsx",
        "line": 147,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[SiteContext] Using cached sites');",
        "message": "console.log"
      },
      {
        "file": "contexts/SiteContext.tsx",
        "line": 156,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[SiteContext] Fetching sites from API');",
        "message": "console.log"
      },
      {
        "file": "contexts/SiteContext.tsx",
        "line": 183,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[SiteContext] Restored site from localStorage:', site.siteName);",
        "message": "console.log"
      },
      {
        "file": "contexts/SiteContext.tsx",
        "line": 241,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[SiteContext] Current site changed:', site?.siteName || 'None');",
        "message": "console.log"
      },
      {
        "file": "contexts/SiteContext.tsx",
        "line": 261,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[SiteContext] Sites loaded successfully, consecutive failures reset');",
        "message": "console.log"
      },
      {
        "file": "contexts/SiteContext.tsx",
        "line": 314,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[SiteContext] Initializing site context...');",
        "message": "console.log"
      },
      {
        "file": "contexts/SiteContext.tsx",
        "line": 323,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[SiteContext] No sites available yet (might be waiting for auth)');",
        "message": "console.log"
      },
      {
        "file": "contexts/SiteContext.tsx",
        "line": 338,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[SiteContext] Defaulting to site:', defaultSite.siteName);",
        "message": "console.log"
      },
      {
        "file": "contexts/SiteContext.tsx",
        "line": 341,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[SiteContext] Initialization complete. Sites loaded:', sites.length);",
        "message": "console.log"
      },
      {
        "file": "contexts/SiteContext.tsx",
        "line": 381,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log(`[SiteContext] Auth detected, refetching sites... (attempt ${retryCountRef.current + 1}/${maxRetries})`);",
        "message": "console.log"
      },
      {
        "file": "contexts/SiteContext.tsx",
        "line": 385,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[SiteContext] Auth storage found but token not ready yet, will retry...');",
        "message": "console.log"
      },
      {
        "file": "contexts/SiteContext.tsx",
        "line": 389,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[SiteContext] Auth storage format invalid, will retry...');",
        "message": "console.log"
      },
      {
        "file": "contexts/SiteContext.tsx",
        "line": 413,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[SiteContext] Circuit breaker active, not scheduling next check');",
        "message": "console.log"
      },
      {
        "file": "contexts/SiteContext.tsx",
        "line": 430,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[SiteContext] Test environment with failures detected, reducing polling aggressiveness');",
        "message": "console.log"
      },
      {
        "file": "contexts/SiteContext.tsx",
        "line": 442,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log(`[SiteContext] Polling timeout reached (${maxPollingTime}ms), stopping`);",
        "message": "console.log"
      },
      {
        "file": "contexts/SiteContext.tsx",
        "line": 458,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[SiteContext] Sites loaded successfully, retry count reset');",
        "message": "console.log"
      },
      {
        "file": "hooks/useRoutingChangeDetection.ts",
        "line": 53,
        "severity": "LOW",
        "type": "LOG",
        "content": "*     console.log('Routing was modified by', info.modifiedBy);",
        "message": "console.log"
      },
      {
        "file": "pages/Kits/KitAnalyticsPage.tsx",
        "line": 59,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('Exporting all analytics data...');",
        "message": "console.log"
      },
      {
        "file": "pages/Kits/KitAnalyticsPage.tsx",
        "line": 212,
        "severity": "LOW",
        "type": "LOG",
        "content": "onClick={() => console.log('Analytics settings')}",
        "message": "console.log"
      },
      {
        "file": "pages/Kits/KitAnalyticsPage.tsx",
        "line": 280,
        "severity": "LOW",
        "type": "LOG",
        "content": "onClick={() => console.log(`Downloading ${activeTab} view`)}",
        "message": "console.log"
      },
      {
        "file": "pages/Serialization/SerializationListPage.tsx",
        "line": 123,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[TEST DEBUG] handleGenerateSingle called with:', values);",
        "message": "console.log"
      },
      {
        "file": "pages/Serialization/SerializationListPage.tsx",
        "line": 126,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[TEST DEBUG] Starting API call...');",
        "message": "console.log"
      },
      {
        "file": "pages/Serialization/SerializationListPage.tsx",
        "line": 128,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[TEST DEBUG] API call completed:', response);",
        "message": "console.log"
      },
      {
        "file": "pages/Serialization/SerializationListPage.tsx",
        "line": 130,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[TEST DEBUG] Setting generated serial:', response.serialNumber);",
        "message": "console.log"
      },
      {
        "file": "pages/Serialization/SerializationListPage.tsx",
        "line": 133,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[TEST DEBUG] Showing success message');",
        "message": "console.log"
      },
      {
        "file": "pages/Serialization/SerializationListPage.tsx",
        "line": 136,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[TEST DEBUG] Resetting form');",
        "message": "console.log"
      },
      {
        "file": "pages/Serialization/SerializationListPage.tsx",
        "line": 139,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[TEST DEBUG] handleGenerateSingle completed successfully');",
        "message": "console.log"
      },
      {
        "file": "pages/Serialization/SerializationListPage.tsx",
        "line": 154,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[TEST DEBUG] Setting generating to false');",
        "message": "console.log"
      },
      {
        "file": "pages/Serialization/SerializationListPage.tsx",
        "line": 160,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[TEST DEBUG] handleGenerateBatch called with:', values);",
        "message": "console.log"
      },
      {
        "file": "pages/Serialization/SerializationListPage.tsx",
        "line": 163,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[TEST DEBUG] Starting batch API call...');",
        "message": "console.log"
      },
      {
        "file": "pages/Serialization/SerializationListPage.tsx",
        "line": 168,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[TEST DEBUG] Batch API call completed:', response);",
        "message": "console.log"
      },
      {
        "file": "pages/Serialization/SerializationListPage.tsx",
        "line": 171,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[TEST DEBUG] Showing success message for', response.count, 'serials');",
        "message": "console.log"
      },
      {
        "file": "pages/Serialization/SerializationListPage.tsx",
        "line": 175,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[TEST DEBUG] Opening info modal');",
        "message": "console.log"
      },
      {
        "file": "pages/Serialization/SerializationListPage.tsx",
        "line": 195,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[TEST DEBUG] Resetting batch form');",
        "message": "console.log"
      },
      {
        "file": "pages/Serialization/SerializationListPage.tsx",
        "line": 198,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[TEST DEBUG] Closing batch modal');",
        "message": "console.log"
      },
      {
        "file": "pages/Serialization/SerializationListPage.tsx",
        "line": 202,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[TEST DEBUG] handleGenerateBatch completed successfully');",
        "message": "console.log"
      },
      {
        "file": "pages/Serialization/SerializationListPage.tsx",
        "line": 208,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[TEST DEBUG] Setting batch generating to false');",
        "message": "console.log"
      },
      {
        "file": "pages/Staging/StagingPage.tsx",
        "line": 119,
        "severity": "LOW",
        "type": "LOG",
        "content": "onClick={() => console.log('Staging settings')}",
        "message": "console.log"
      },
      {
        "file": "services/apiClient.ts",
        "line": 231,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log(`[ApiClient] Health check passed (attempt ${attempt}/${maxRetries})`);",
        "message": "console.log"
      },
      {
        "file": "services/apiClient.ts",
        "line": 239,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log(`[ApiClient] Health check failed (attempt ${attempt}/${maxRetries}):`, error.message);",
        "message": "console.log"
      },
      {
        "file": "services/apiClient.ts",
        "line": 287,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[ApiClient] API is healthy');",
        "message": "console.log"
      },
      {
        "file": "services/realTimeCollaboration.ts",
        "line": 54,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('Real-time collaboration connected');",
        "message": "console.log"
      },
      {
        "file": "services/realTimeCollaboration.ts",
        "line": 288,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log(`Attempting to reconnect in ${delay}ms (attempt ${this.reconnectAttempts})`);",
        "message": "console.log"
      },
      {
        "file": "store/AuthStore.tsx",
        "line": 74,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[TEST MODE] Using pre-existing auth state from localStorage');",
        "message": "console.log"
      },
      {
        "file": "store/AuthStore.tsx",
        "line": 144,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[AuthStore] Login successful, auth synchronizer initialized');",
        "message": "console.log"
      },
      {
        "file": "store/AuthStore.tsx",
        "line": 165,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[AuthStore] Logout API call successful');",
        "message": "console.log"
      },
      {
        "file": "store/AuthStore.tsx",
        "line": 204,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[AuthStore] Local logout completed, auth synchronizer cleaned up');",
        "message": "console.log"
      },
      {
        "file": "store/AuthStore.tsx",
        "line": 228,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[AuthStore] Manual token refresh successful, synchronizer will handle future refreshes');",
        "message": "console.log"
      },
      {
        "file": "store/AuthStore.tsx",
        "line": 259,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[AuthStore] Starting auth initialization with synchronizer support');",
        "message": "console.log"
      },
      {
        "file": "store/AuthStore.tsx",
        "line": 266,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[AuthStore] No token found, initialization complete');",
        "message": "console.log"
      },
      {
        "file": "store/AuthStore.tsx",
        "line": 272,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[TEST MODE] Using cached auth state, initializing synchronizer');",
        "message": "console.log"
      },
      {
        "file": "store/AuthStore.tsx",
        "line": 292,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[AuthStore] Auth initialization complete, synchronizer handling state management');",
        "message": "console.log"
      },
      {
        "file": "store/AuthStore.tsx",
        "line": 313,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[AuthStore] SAML provider discovery successful');",
        "message": "console.log"
      },
      {
        "file": "store/AuthStore.tsx",
        "line": 337,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[AuthStore] SAML authentication initiated');",
        "message": "console.log"
      },
      {
        "file": "store/AuthStore.tsx",
        "line": 356,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[AuthStore] SAML providers loaded successfully');",
        "message": "console.log"
      },
      {
        "file": "store/AuthStore.tsx",
        "line": 406,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[AuthStore] Applying resolved auth state from synchronizer');",
        "message": "console.log"
      },
      {
        "file": "store/AuthStore.tsx",
        "line": 431,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[AuthStore] Token refreshed by synchronizer');",
        "message": "console.log"
      },
      {
        "file": "store/AuthStore.tsx",
        "line": 503,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[AuthProvider] Cleaning up auth synchronizer on unmount');",
        "message": "console.log"
      },
      {
        "file": "store/executionLayoutStore.ts",
        "line": 510,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('Opening second monitor window...');",
        "message": "console.log"
      },
      {
        "file": "test-utils/helpers.ts",
        "line": 225,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log(`\\n=== ${label} ===`);",
        "message": "console.log"
      },
      {
        "file": "test-utils/helpers.ts",
        "line": 226,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('DOM:', document.body.innerHTML);",
        "message": "console.log"
      },
      {
        "file": "test-utils/helpers.ts",
        "line": 230,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('URL:', window.location.href);",
        "message": "console.log"
      },
      {
        "file": "test-utils/helpers.ts",
        "line": 235,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('React DevTools available');",
        "message": "console.log"
      },
      {
        "file": "test-utils/helpers.ts",
        "line": 238,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('=================\\n');",
        "message": "console.log"
      },
      {
        "file": "tests/e2e/collaborative-routing.spec.ts",
        "line": 101,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('Presence indicator presence check completed');",
        "message": "console.log"
      },
      {
        "file": "tests/e2e/collaborative-routing.spec.ts",
        "line": 112,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('Presence API call:', url);",
        "message": "console.log"
      },
      {
        "file": "tests/e2e/collaborative-routing.spec.ts",
        "line": 123,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('Total presence requests:', presenceRequests.length);",
        "message": "console.log"
      },
      {
        "file": "tests/e2e/collaborative-routing.spec.ts",
        "line": 148,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('Page contains \"Step\":', stepsContent?.includes('Step'));",
        "message": "console.log"
      },
      {
        "file": "tests/e2e/collaborative-routing.spec.ts",
        "line": 164,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('Switched to Graph view');",
        "message": "console.log"
      },
      {
        "file": "tests/e2e/collaborative-routing.spec.ts",
        "line": 172,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('Switched to Gantt view');",
        "message": "console.log"
      },
      {
        "file": "tests/e2e/collaborative-routing.spec.ts",
        "line": 180,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('Switched to Table view');",
        "message": "console.log"
      },
      {
        "file": "tests/e2e/collaborative-routing.spec.ts",
        "line": 205,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('Gantt chart elements found:', ganttExists);",
        "message": "console.log"
      },
      {
        "file": "tests/e2e/collaborative-routing.spec.ts",
        "line": 210,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('Gantt bars found:', barsCount);",
        "message": "console.log"
      },
      {
        "file": "tests/e2e/collaborative-routing.spec.ts",
        "line": 248,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('Errors during change detection period:', errors.length);",
        "message": "console.log"
      },
      {
        "file": "tests/e2e/collaborative-routing.spec.ts",
        "line": 284,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('Save request:', url, 'Body:', request.postData());",
        "message": "console.log"
      },
      {
        "file": "tests/e2e/collaborative-routing.spec.ts",
        "line": 295,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('Save requests made:', saveRequests.length);",
        "message": "console.log"
      },
      {
        "file": "tests/e2e/collaborative-routing.spec.ts",
        "line": 318,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('Modal infrastructure check completed');",
        "message": "console.log"
      },
      {
        "file": "tests/e2e/collaborative-routing.spec.ts",
        "line": 337,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('✓ Presence tracking initialized');",
        "message": "console.log"
      },
      {
        "file": "tests/e2e/collaborative-routing.spec.ts",
        "line": 342,
        "severity": "LOW",
        "type": "LOG",
        "content": "// console.log('✓ View toggle available:', hasViewToggle);",
        "message": "console.log"
      },
      {
        "file": "tests/e2e/collaborative-routing.spec.ts",
        "line": 349,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('✓ Switched to Gantt view');",
        "message": "console.log"
      },
      {
        "file": "tests/e2e/collaborative-routing.spec.ts",
        "line": 354,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('✓ Change detection running');",
        "message": "console.log"
      },
      {
        "file": "tests/e2e/collaborative-routing.spec.ts",
        "line": 359,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('✓ Page responsive');",
        "message": "console.log"
      },
      {
        "file": "tests/e2e/collaborative-routing.spec.ts",
        "line": 362,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('✅ Integration test completed successfully');",
        "message": "console.log"
      },
      {
        "file": "tests/e2e/collaborative-routing.spec.ts",
        "line": 379,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log(`Switched to ${view} view`);",
        "message": "console.log"
      },
      {
        "file": "tests/e2e/collaborative-routing.spec.ts",
        "line": 387,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('✅ Rapid view switching completed successfully');",
        "message": "console.log"
      },
      {
        "file": "tests/e2e/collaborative-routing.spec.ts",
        "line": 405,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log(`Page load time: ${loadTime}ms`);",
        "message": "console.log"
      },
      {
        "file": "tests/e2e/collaborative-routing.spec.ts",
        "line": 430,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log(`View switch time: ${switchTime}ms`);",
        "message": "console.log"
      },
      {
        "file": "tests/e2e/collaborative-routing.spec.ts",
        "line": 461,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('✅ Empty routing handled gracefully');",
        "message": "console.log"
      },
      {
        "file": "tests/e2e/collaborative-routing.spec.ts",
        "line": 484,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('Network error resilience: Errors logged:', errors.length);",
        "message": "console.log"
      },
      {
        "file": "utils/AuthStateSynchronizer.ts",
        "line": 77,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[AuthSync] Initialized with config:', {",
        "message": "console.log"
      },
      {
        "file": "utils/AuthStateSynchronizer.ts",
        "line": 116,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[AuthSync] Loaded persistent state:', {",
        "message": "console.log"
      },
      {
        "file": "utils/AuthStateSynchronizer.ts",
        "line": 181,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[AuthSync] Background sync started');",
        "message": "console.log"
      },
      {
        "file": "utils/AuthStateSynchronizer.ts",
        "line": 189,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[AuthSync] Sync already in progress, skipping...');",
        "message": "console.log"
      },
      {
        "file": "utils/AuthStateSynchronizer.ts",
        "line": 199,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[AuthSync] Performing sync:', {",
        "message": "console.log"
      },
      {
        "file": "utils/AuthStateSynchronizer.ts",
        "line": 282,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[AuthSync] Token validation failed');",
        "message": "console.log"
      },
      {
        "file": "utils/AuthStateSynchronizer.ts",
        "line": 296,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[AuthSync] Backend says token is invalid');",
        "message": "console.log"
      },
      {
        "file": "utils/AuthStateSynchronizer.ts",
        "line": 380,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[AuthSync] No auth state on either side');",
        "message": "console.log"
      },
      {
        "file": "utils/AuthStateSynchronizer.ts",
        "line": 386,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[AuthSync] Frontend state exists but backend validation failed - clearing frontend');",
        "message": "console.log"
      },
      {
        "file": "utils/AuthStateSynchronizer.ts",
        "line": 392,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[AuthSync] Backend state exists but no frontend state - using backend');",
        "message": "console.log"
      },
      {
        "file": "utils/AuthStateSynchronizer.ts",
        "line": 400,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[AuthSync] States are consistent');",
        "message": "console.log"
      },
      {
        "file": "utils/AuthStateSynchronizer.ts",
        "line": 409,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[AuthSync] State conflicts detected, using backend as source of truth');",
        "message": "console.log"
      },
      {
        "file": "utils/AuthStateSynchronizer.ts",
        "line": 448,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[AuthSync] Applied resolved state:', {",
        "message": "console.log"
      },
      {
        "file": "utils/AuthStateSynchronizer.ts",
        "line": 466,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[AuthSync] Forcing logout to clear inconsistent state');",
        "message": "console.log"
      },
      {
        "file": "utils/AuthStateSynchronizer.ts",
        "line": 477,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[AuthSync] Force logout completed');",
        "message": "console.log"
      },
      {
        "file": "utils/AuthStateSynchronizer.ts",
        "line": 498,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[AuthSync] Persistent token refresh setup');",
        "message": "console.log"
      },
      {
        "file": "utils/AuthStateSynchronizer.ts",
        "line": 519,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[AuthSync] Token needs refresh - expiry soon');",
        "message": "console.log"
      },
      {
        "file": "utils/AuthStateSynchronizer.ts",
        "line": 550,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[AuthSync] Performing token refresh');",
        "message": "console.log"
      },
      {
        "file": "utils/AuthStateSynchronizer.ts",
        "line": 579,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[AuthSync] Token refresh successful');",
        "message": "console.log"
      },
      {
        "file": "utils/AuthStateSynchronizer.ts",
        "line": 605,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[AuthSync] Validating token with backend');",
        "message": "console.log"
      },
      {
        "file": "utils/AuthStateSynchronizer.ts",
        "line": 609,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[AuthSync] Token validation failed - triggering sync');",
        "message": "console.log"
      },
      {
        "file": "utils/AuthStateSynchronizer.ts",
        "line": 677,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[AuthSync] Force sync requested');",
        "message": "console.log"
      },
      {
        "file": "utils/AuthStateSynchronizer.ts",
        "line": 701,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[AuthSync] Cleanup completed');",
        "message": "console.log"
      },
      {
        "file": "utils/authInterceptor.ts",
        "line": 30,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[AuthInterceptor] Handling 401 error - starting logout process');",
        "message": "console.log"
      },
      {
        "file": "utils/authInterceptor.ts",
        "line": 40,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[AuthInterceptor] Already on login page, skipping redirect');",
        "message": "console.log"
      },
      {
        "file": "utils/authInterceptor.ts",
        "line": 54,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log('[AuthInterceptor] Calling auth store logout');",
        "message": "console.log"
      },
      {
        "file": "utils/authInterceptor.ts",
        "line": 86,
        "severity": "LOW",
        "type": "LOG",
        "content": "console.log(`[AuthInterceptor] Redirecting to login (${redirectDelay}ms delay)`);",
        "message": "console.log"
      },
      {
        "file": "utils/csrfManager.ts",
        "line": 51,
        "severity": "LOW",
        "type": "DEBUG",
        "content": "console.debug('CSRF token fetched successfully');",
        "message": "console.debug"
      },
      {
        "file": "utils/csrfManager.ts",
        "line": 107,
        "severity": "LOW",
        "type": "DEBUG",
        "content": "console.debug('CSRF token added to request:', method, url);",
        "message": "console.debug"
      },
      {
        "file": "utils/csrfManager.ts",
        "line": 160,
        "severity": "LOW",
        "type": "DEBUG",
        "content": "console.debug('CSRF token cleared');",
        "message": "console.debug"
      }
    ]
  },
  "performanceIssues": [
    {
      "file": "__tests__/components/Kits/KitAnalyticsDashboard.test.tsx",
      "line": 190,
      "severity": "LOW",
      "issue": "Frequent Date object creation",
      "content": "lastUpdated: new Date().toISOString(),"
    },
    {
      "file": "__tests__/components/Kits/KitsList.test.tsx",
      "line": 626,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "new Promise(resolve => setTimeout(resolve, 100))"
    },
    {
      "file": "components/Admin/AzureAD/AzureADDashboard.tsx",
      "line": 91,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "const interval = setInterval(fetchDashboardData, 30000); // 30 seconds"
    },
    {
      "file": "components/Admin/AzureAD/UserSyncManager.tsx",
      "line": 148,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "const progressInterval = setInterval(async () => {"
    },
    {
      "file": "components/Admin/AzureADConfig.tsx",
      "line": 156,
      "severity": "LOW",
      "issue": "Frequent Date object creation",
      "content": "timestamp: new Date().toISOString(),"
    },
    {
      "file": "components/Admin/AzureADConfig.tsx",
      "line": 171,
      "severity": "LOW",
      "issue": "Frequent Date object creation",
      "content": "timestamp: new Date().toISOString(),"
    },
    {
      "file": "components/Admin/UserSyncManager.tsx",
      "line": 124,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "const progressInterval = setInterval(() => {"
    },
    {
      "file": "components/Admin/UserSyncManager.tsx",
      "line": 134,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "await new Promise(resolve => setTimeout(resolve, 3000)); // Simulate sync time"
    },
    {
      "file": "components/Admin/UserSyncManager.tsx",
      "line": 139,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "setTimeout(() => {"
    },
    {
      "file": "components/Approvals/ApprovalTaskQueue.tsx",
      "line": 238,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "const interval = setInterval(loadTasks, refreshInterval * 1000);"
    },
    {
      "file": "components/Approvals/WorkflowProgressEnhanced.tsx",
      "line": 283,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "const interval = setInterval(loadWorkflowData, refreshInterval * 1000);"
    },
    {
      "file": "components/BuildRecords/BuildRecordOperationSignOff.tsx",
      "line": 219,
      "severity": "LOW",
      "issue": "Frequent Date object creation",
      "content": "timestamp: new Date().toISOString()"
    },
    {
      "file": "components/Collaboration/ConflictResolution.tsx",
      "line": 154,
      "severity": "LOW",
      "issue": "Frequent Date object creation",
      "content": "resolvedAt: new Date().toISOString(),"
    },
    {
      "file": "components/Collaboration/ReviewDashboard.tsx",
      "line": 311,
      "severity": "LOW",
      "issue": "Frequent Date object creation",
      "content": "const isOverdue = dueDate < new Date();"
    },
    {
      "file": "components/Collaboration/ReviewTaskQueue.tsx",
      "line": 234,
      "severity": "LOW",
      "issue": "Frequent Date object creation",
      "content": "review.deadline && new Date(review.deadline) < new Date()"
    },
    {
      "file": "components/Collaboration/ReviewTaskQueue.tsx",
      "line": 290,
      "severity": "LOW",
      "issue": "Frequent Date object creation",
      "content": "const isOverdue = review.deadline && new Date(review.deadline) < new Date();"
    },
    {
      "file": "components/Common/UUIDDisplay.tsx",
      "line": 73,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "setTimeout(() => {"
    },
    {
      "file": "components/Dashboard/__tests__/OEEMetricsCard.test.tsx",
      "line": 183,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "() => new Promise((resolve) => setTimeout(resolve, 1000))"
    },
    {
      "file": "components/Equipment/MaintenanceList.tsx",
      "line": 132,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "setTimeout(() => clearErrors(), 3000);"
    },
    {
      "file": "components/Execution/panels/DataCollectionPanel.tsx",
      "line": 68,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "setTimeout(() => {"
    },
    {
      "file": "components/Execution/panels/InstructionPanel.tsx",
      "line": 53,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "const interval = setInterval(() => {"
    },
    {
      "file": "components/Kits/KitReportGenerator.tsx",
      "line": 303,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "await new Promise(resolve => setTimeout(resolve, 2000)); // Mock delay"
    },
    {
      "file": "components/Kits/KitReportGenerator.tsx",
      "line": 343,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "await new Promise(resolve => setTimeout(resolve, 3000)); // Mock delay"
    },
    {
      "file": "components/Kits/KitReportGenerator.tsx",
      "line": 349,
      "severity": "LOW",
      "issue": "Frequent Date object creation",
      "content": "createdAt: new Date().toISOString(),"
    },
    {
      "file": "components/Kits/KitReportGenerator.tsx",
      "line": 384,
      "severity": "LOW",
      "issue": "Frequent Date object creation",
      "content": "createdAt: new Date().toISOString(),"
    },
    {
      "file": "components/LLP/LLPDashboard.tsx",
      "line": 270,
      "severity": "LOW",
      "issue": "Frequent Date object creation",
      "content": "a.download = `llp-fleet-report-${new Date().toISOString().split('T')[0]}.pdf`;"
    },
    {
      "file": "components/Layout/__tests__/MainLayout.test.tsx",
      "line": 129,
      "severity": "MEDIUM",
      "issue": "Direct DOM manipulation",
      "content": "const sidebar = document.querySelector('.ant-layout-sider');"
    },
    {
      "file": "components/Materials/MaterialsList.tsx",
      "line": 123,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "setTimeout(() => clearErrors(), 3000);"
    },
    {
      "file": "components/Materials/MaterialsList.tsx",
      "line": 305,
      "severity": "LOW",
      "issue": "Frequent Date object creation",
      "content": "const now = new Date();"
    },
    {
      "file": "components/Materials/__tests__/MaterialsList.test.tsx",
      "line": 563,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "// Wait for setTimeout to trigger clearErrors"
    },
    {
      "file": "components/Personnel/PersonnelList.tsx",
      "line": 108,
      "severity": "LOW",
      "issue": "Frequent Date object creation",
      "content": "(new Date(c.expirationDate).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24)"
    },
    {
      "file": "components/Routing/RoutingChangedAlert.tsx",
      "line": 67,
      "severity": "LOW",
      "issue": "Frequent Date object creation",
      "content": "const now = new Date();"
    },
    {
      "file": "components/Routing/RoutingForm.tsx",
      "line": 228,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "setTimeout(() => {"
    },
    {
      "file": "components/Routing/RoutingForm.tsx",
      "line": 243,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "setTimeout(() => {"
    },
    {
      "file": "components/SPC/RuleViolationAlert.tsx",
      "line": 139,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "const interval = setInterval(fetchViolations, refreshInterval);"
    },
    {
      "file": "components/Search/GlobalSearch.tsx",
      "line": 128,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "const timeoutId = setTimeout(() => {"
    },
    {
      "file": "components/Signatures/BiometricCapture.tsx",
      "line": 54,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "const interval = setInterval(() => {"
    },
    {
      "file": "components/Staging/StagingDashboard.tsx",
      "line": 207,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "const interval = setInterval(() => {"
    },
    {
      "file": "components/TimeTracking/MobileTimeTracker.tsx",
      "line": 291,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "const timer = setInterval(() => {"
    },
    {
      "file": "components/TimeTracking/MobileTimeTracker.tsx",
      "line": 456,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "const interval = setInterval(loadData, 30000);"
    },
    {
      "file": "components/TimeTracking/TimeClockKiosk.tsx",
      "line": 302,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "scanTimeout = setTimeout(() => {"
    },
    {
      "file": "components/TimeTracking/TimeClockKiosk.tsx",
      "line": 320,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "const timer = setInterval(() => {"
    },
    {
      "file": "components/TimeTracking/TimeClockKiosk.tsx",
      "line": 560,
      "severity": "LOW",
      "issue": "Frequent Date object creation",
      "content": "const [currentTime, setCurrentTime] = useState(new Date());"
    },
    {
      "file": "components/TimeTracking/TimeClockKiosk.tsx",
      "line": 568,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "const timer = setInterval(() => {"
    },
    {
      "file": "components/TimeTracking/TimeClockKiosk.tsx",
      "line": 569,
      "severity": "LOW",
      "issue": "Frequent Date object creation",
      "content": "setCurrentTime(new Date());"
    },
    {
      "file": "components/TimeTracking/TimeClockKiosk.tsx",
      "line": 582,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "autoLogoutRef.current = setTimeout(() => {"
    },
    {
      "file": "components/TimeTracking/TimeTrackingWidget.tsx",
      "line": 196,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "const timer = setInterval(() => {"
    },
    {
      "file": "components/TimeTracking/TimeTrackingWidget.tsx",
      "line": 387,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "const interval = setInterval(() => {"
    },
    {
      "file": "components/Torque/DigitalWrenchConnection.tsx",
      "line": 145,
      "severity": "LOW",
      "issue": "Frequent Date object creation",
      "content": "const now = new Date();"
    },
    {
      "file": "components/Torque/TorqueValidationDisplay.tsx",
      "line": 222,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "const timer = setTimeout(() => {"
    },
    {
      "file": "components/Torque/TorqueValidationDisplay.tsx",
      "line": 226,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "const countdown = setInterval(() => {"
    },
    {
      "file": "components/WorkInstructions/DocumentExporter.tsx",
      "line": 207,
      "severity": "LOW",
      "issue": "Frequent Date object creation",
      "content": "createdAt: new Date(),"
    },
    {
      "file": "components/WorkInstructions/DocumentExporter.tsx",
      "line": 246,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "await new Promise((resolve) => setTimeout(resolve, 800));"
    },
    {
      "file": "components/WorkInstructions/DocumentImporter.tsx",
      "line": 121,
      "severity": "LOW",
      "issue": "Frequent Date object creation",
      "content": "uploadedAt: new Date(),"
    },
    {
      "file": "components/WorkInstructions/DocumentImporter.tsx",
      "line": 160,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "await new Promise((resolve) => setTimeout(resolve, 100));"
    },
    {
      "file": "components/WorkInstructions/DocumentImporter.tsx",
      "line": 167,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "await new Promise((resolve) => setTimeout(resolve, 1000));"
    },
    {
      "file": "components/WorkInstructions/DocumentImporter.tsx",
      "line": 197,
      "severity": "LOW",
      "issue": "Frequent Date object creation",
      "content": "extractedAt: new Date().toISOString(),"
    },
    {
      "file": "components/WorkInstructions/DocumentImporter.tsx",
      "line": 202,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "await new Promise((resolve) => setTimeout(resolve, 200));"
    },
    {
      "file": "components/WorkInstructions/DocumentImporter.tsx",
      "line": 227,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "await new Promise((resolve) => setTimeout(resolve, 2000));"
    },
    {
      "file": "components/WorkInstructions/MediaLibraryBrowser.tsx",
      "line": 164,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "const progressInterval = setInterval(() => {"
    },
    {
      "file": "components/WorkInstructions/NativeInstructionEditor.tsx",
      "line": 211,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "const uploadSimulation = setInterval(() => {"
    },
    {
      "file": "components/WorkOrders/__tests__/WorkOrderReschedule.test.tsx",
      "line": 278,
      "severity": "MEDIUM",
      "issue": "Direct DOM manipulation",
      "content": "const form = screen.getByRole('form') || document.querySelector('form');"
    },
    {
      "file": "contexts/SiteContext.tsx",
      "line": 84,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "const timeoutId = setTimeout(() => {"
    },
    {
      "file": "contexts/SiteContext.tsx",
      "line": 417,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "interval = setTimeout(async () => {"
    },
    {
      "file": "contexts/SiteContext.tsx",
      "line": 439,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "const timeout = setTimeout(() => {"
    },
    {
      "file": "hooks/__tests__/usePresence.test.ts",
      "line": 354,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "await new Promise(resolve => setTimeout(resolve, 100));"
    },
    {
      "file": "hooks/usePresence.ts",
      "line": 145,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "heartbeatTimerRef.current = setInterval(() => {"
    },
    {
      "file": "hooks/usePresence.ts",
      "line": 150,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "refreshTimerRef.current = setInterval(() => {"
    },
    {
      "file": "hooks/useRealTimeCollaboration.ts",
      "line": 265,
      "severity": "LOW",
      "issue": "Frequent Date object creation",
      "content": "editingSince: new Date().toISOString(),"
    },
    {
      "file": "hooks/useRealTimeCollaboration.ts",
      "line": 266,
      "severity": "LOW",
      "issue": "Frequent Date object creation",
      "content": "lastSeen: new Date().toISOString(),"
    },
    {
      "file": "hooks/useRealTimeCollaboration.ts",
      "line": 277,
      "severity": "LOW",
      "issue": "Frequent Date object creation",
      "content": "lastSeen: new Date().toISOString(),"
    },
    {
      "file": "hooks/useRealTimeCollaboration.ts",
      "line": 290,
      "severity": "LOW",
      "issue": "Frequent Date object creation",
      "content": "lastSeen: new Date().toISOString(),"
    },
    {
      "file": "hooks/useRealTimeCollaboration.ts",
      "line": 301,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "const heartbeatInterval = setInterval(() => {"
    },
    {
      "file": "hooks/useRealTimeCollaboration.ts",
      "line": 306,
      "severity": "LOW",
      "issue": "Frequent Date object creation",
      "content": "lastSeen: new Date().toISOString(),"
    },
    {
      "file": "hooks/useRoutingChangeDetection.ts",
      "line": 183,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "const initialCheckTimeout = setTimeout(() => {"
    },
    {
      "file": "hooks/useRoutingChangeDetection.ts",
      "line": 188,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "pollTimerRef.current = setInterval(() => {"
    },
    {
      "file": "pages/Admin/AzureADPage.tsx",
      "line": 106,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "setTimeout(() => setLoading(false), 2000);"
    },
    {
      "file": "pages/Admin/__tests__/RBACAdminPages.test.tsx",
      "line": 224,
      "severity": "MEDIUM",
      "issue": "Direct DOM manipulation",
      "content": "expect(document.querySelector('.anticon-bar-chart')).toBeInTheDocument();"
    },
    {
      "file": "pages/Admin/__tests__/RBACAdminPages.test.tsx",
      "line": 233,
      "severity": "MEDIUM",
      "issue": "Direct DOM manipulation",
      "content": "expect(document.querySelector('.anticon-safety')).toBeInTheDocument();"
    },
    {
      "file": "pages/Admin/__tests__/RBACAdminPages.test.tsx",
      "line": 242,
      "severity": "MEDIUM",
      "issue": "Direct DOM manipulation",
      "content": "expect(document.querySelector('.anticon-key')).toBeInTheDocument();"
    },
    {
      "file": "pages/Admin/__tests__/RBACAdminPages.test.tsx",
      "line": 251,
      "severity": "MEDIUM",
      "issue": "Direct DOM manipulation",
      "content": "expect(document.querySelector('.anticon-team')).toBeInTheDocument();"
    },
    {
      "file": "pages/Auth/__tests__/LoginPage.test.tsx",
      "line": 164,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "mockAuthStore.login.mockImplementation(() => new Promise(resolve => setTimeout(resolve, 100)));"
    },
    {
      "file": "pages/Auth/__tests__/LoginPage.test.tsx",
      "line": 188,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "mockAuthStore.login.mockImplementation(() => new Promise(resolve => setTimeout(resolve, 100)));"
    },
    {
      "file": "pages/Dashboard/__tests__/Dashboard.test.tsx",
      "line": 155,
      "severity": "MEDIUM",
      "issue": "Direct DOM manipulation",
      "content": "expect(spinner || document.querySelector('.ant-spin')).toBeTruthy();"
    },
    {
      "file": "pages/Integration/IntegrationDashboard.tsx",
      "line": 112,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "setTimeout(fetchHealthData, 2000);"
    },
    {
      "file": "pages/Integration/IntegrationLogs.tsx",
      "line": 184,
      "severity": "HIGH",
      "issue": "Nested array maps (potential O(n²))",
      "content": ".map(row => row.map(cell => `\"${cell}\"`).join(','))"
    },
    {
      "file": "pages/Integration/IntegrationLogs.tsx",
      "line": 191,
      "severity": "LOW",
      "issue": "Frequent Date object creation",
      "content": "a.download = `integration-logs-${new Date().toISOString()}.csv`;"
    },
    {
      "file": "pages/Quality/InspectionDetail.tsx",
      "line": 28,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "setTimeout(() => {"
    },
    {
      "file": "pages/Quality/InspectionDetail.tsx",
      "line": 36,
      "severity": "LOW",
      "issue": "Frequent Date object creation",
      "content": "datePerformed: new Date().toISOString().split('T')[0],"
    },
    {
      "file": "pages/Quality/NCRDetail.tsx",
      "line": 29,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "setTimeout(() => {"
    },
    {
      "file": "pages/Quality/NCRDetail.tsx",
      "line": 38,
      "severity": "LOW",
      "issue": "Frequent Date object creation",
      "content": "dateReported: new Date().toISOString().split('T')[0],"
    },
    {
      "file": "pages/Quality/NCRs.tsx",
      "line": 208,
      "severity": "LOW",
      "issue": "Frequent Date object creation",
      "content": "const isOverdue = record.status !== 'CLOSED' && new Date(date) < new Date();"
    },
    {
      "file": "pages/Serialization/SerializationListPage.tsx",
      "line": 197,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "setTimeout(() => {"
    },
    {
      "file": "pages/Serialization/SerializationListPage.tsx",
      "line": 221,
      "severity": "LOW",
      "issue": "Frequent Date object creation",
      "content": "manufactureDate: new Date().toISOString(),"
    },
    {
      "file": "pages/Serialization/SerializationListPage.tsx",
      "line": 233,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "setTimeout(() => {"
    },
    {
      "file": "pages/Sprint3Demo/Sprint3Demo.tsx",
      "line": 39,
      "severity": "LOW",
      "issue": "Frequent Date object creation",
      "content": "timestamp: new Date(),"
    },
    {
      "file": "pages/Traceability/Traceability.tsx",
      "line": 187,
      "severity": "LOW",
      "issue": "Frequent Date object creation",
      "content": "manufactureDate: data.manufacturingHistory[0]?.startTime || new Date().toISOString(),"
    },
    {
      "file": "pages/WorkOrders/WorkOrderEdit.tsx",
      "line": 31,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "await new Promise(resolve => setTimeout(resolve, 500));"
    },
    {
      "file": "pages/WorkOrders/WorkOrders.tsx",
      "line": 150,
      "severity": "LOW",
      "issue": "Frequent Date object creation",
      "content": "downloadCSV(csvContent, `work_orders_${new Date().toISOString().split('T')[0]}.csv`);"
    },
    {
      "file": "services/apiClient.ts",
      "line": 159,
      "severity": "LOW",
      "issue": "Frequent Date object creation",
      "content": "const now = new Date();"
    },
    {
      "file": "services/apiClient.ts",
      "line": 209,
      "severity": "LOW",
      "issue": "Frequent Date object creation",
      "content": "timestamp: new Date().toISOString(),"
    },
    {
      "file": "services/apiClient.ts",
      "line": 249,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "await new Promise(resolve => setTimeout(resolve, retryDelay * attempt));"
    },
    {
      "file": "services/apiClient.ts",
      "line": 257,
      "severity": "LOW",
      "issue": "Frequent Date object creation",
      "content": "timestamp: new Date().toISOString(),"
    },
    {
      "file": "services/apiClient.ts",
      "line": 308,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "await new Promise(resolve => setTimeout(resolve, checkInterval));"
    },
    {
      "file": "services/qualityApi.ts",
      "line": 157,
      "severity": "LOW",
      "issue": "Frequent Date object creation",
      "content": "completedAt: new Date().toISOString(),"
    },
    {
      "file": "services/qualityApi.ts",
      "line": 216,
      "severity": "LOW",
      "issue": "Frequent Date object creation",
      "content": "closedAt: new Date().toISOString(),"
    },
    {
      "file": "services/realTimeCollaboration.ts",
      "line": 179,
      "severity": "LOW",
      "issue": "Frequent Date object creation",
      "content": "timestamp: data.timestamp || new Date().toISOString(),"
    },
    {
      "file": "services/realTimeCollaboration.ts",
      "line": 291,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "setTimeout(() => {"
    },
    {
      "file": "services/workOrderApi.ts",
      "line": 181,
      "severity": "LOW",
      "issue": "Frequent Date object creation",
      "content": "`work-orders-${new Date().toISOString().split('T')[0]}.${format}`"
    },
    {
      "file": "services/workOrderApi.ts",
      "line": 188,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "await new Promise(resolve => setTimeout(resolve, 500));"
    },
    {
      "file": "store/executionLayoutStore.ts",
      "line": 344,
      "severity": "LOW",
      "issue": "Frequent Date object creation",
      "content": "startTime: new Date()"
    },
    {
      "file": "store/executionLayoutStore.ts",
      "line": 482,
      "severity": "LOW",
      "issue": "Frequent Date object creation",
      "content": "stepStartTime: new Date(),"
    },
    {
      "file": "store/executionLayoutStore.ts",
      "line": 530,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "setTimeout(() => {"
    },
    {
      "file": "store/kitStore.ts",
      "line": 638,
      "severity": "LOW",
      "issue": "Frequent Date object creation",
      "content": "? { ...shortage, isResolved: true, resolvedAt: new Date().toISOString() }"
    },
    {
      "file": "test-utils/factories.ts",
      "line": 303,
      "severity": "LOW",
      "issue": "Frequent Date object creation",
      "content": "lastSeen: new Date(),"
    },
    {
      "file": "test-utils/factories.ts",
      "line": 344,
      "severity": "LOW",
      "issue": "Frequent Date object creation",
      "content": "createdAt: new Date(),"
    },
    {
      "file": "test-utils/factories.ts",
      "line": 345,
      "severity": "LOW",
      "issue": "Frequent Date object creation",
      "content": "updatedAt: new Date(),"
    },
    {
      "file": "test-utils/helpers.ts",
      "line": 245,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "return new Promise(resolve => setTimeout(resolve, 0));"
    },
    {
      "file": "test-utils/helpers.ts",
      "line": 252,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "return new Promise(resolve => setTimeout(resolve, ms));"
    },
    {
      "file": "test-utils/helpers.ts",
      "line": 295,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "setTimeout(() => {"
    },
    {
      "file": "test-utils/hooks.ts",
      "line": 101,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "setTimeout(checkValue, 10);"
    },
    {
      "file": "test-utils/hooks.ts",
      "line": 153,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "const originalSetInterval = global.setInterval;"
    },
    {
      "file": "test-utils/hooks.ts",
      "line": 154,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "const originalSetTimeout = global.setTimeout;"
    },
    {
      "file": "test-utils/hooks.ts",
      "line": 158,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "// Mock setInterval to track intervals"
    },
    {
      "file": "test-utils/hooks.ts",
      "line": 159,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "global.setInterval = ((callback: Function, delay: number) => {"
    },
    {
      "file": "test-utils/hooks.ts",
      "line": 165,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "// Mock setTimeout to track timeouts"
    },
    {
      "file": "test-utils/hooks.ts",
      "line": 166,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "global.setTimeout = ((callback: Function, delay: number) => {"
    },
    {
      "file": "test-utils/hooks.ts",
      "line": 193,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "global.setInterval = originalSetInterval;"
    },
    {
      "file": "test-utils/hooks.ts",
      "line": 194,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "global.setTimeout = originalSetTimeout;"
    },
    {
      "file": "test-utils/stores.ts",
      "line": 173,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "const timeout = setTimeout(() => {"
    },
    {
      "file": "test-utils/stores.ts",
      "line": 206,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "const timeoutId = setTimeout(() => {"
    },
    {
      "file": "test-utils/stores.ts",
      "line": 216,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "setTimeout(checkState, 10);"
    },
    {
      "file": "test-utils/stores.ts",
      "line": 242,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "setTimeout(checkState, 10);"
    },
    {
      "file": "tests/components/TimeTypeIndicator.test.tsx",
      "line": 208,
      "severity": "MEDIUM",
      "issue": "Direct DOM manipulation",
      "content": "const dot = document.querySelector('div');"
    },
    {
      "file": "tests/components/TimeTypeIndicator.test.tsx",
      "line": 215,
      "severity": "MEDIUM",
      "issue": "Direct DOM manipulation",
      "content": "const dot = document.querySelector('div');"
    },
    {
      "file": "tests/components/TimeTypeIndicator.test.tsx",
      "line": 222,
      "severity": "MEDIUM",
      "issue": "Direct DOM manipulation",
      "content": "const dot = document.querySelector('div');"
    },
    {
      "file": "tests/components/TimeTypeIndicator.test.tsx",
      "line": 229,
      "severity": "MEDIUM",
      "issue": "Direct DOM manipulation",
      "content": "const dot = document.querySelector('div');"
    },
    {
      "file": "utils/AuthStateSynchronizer.ts",
      "line": 103,
      "severity": "MEDIUM",
      "issue": "Direct DOM manipulation",
      "content": "if (typeof window !== 'undefined' && document.querySelector('meta[name=\"x-test-mode\"]')) return true;"
    },
    {
      "file": "utils/AuthStateSynchronizer.ts",
      "line": 169,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "setTimeout(() => this.performSync(), 1000);"
    },
    {
      "file": "utils/AuthStateSynchronizer.ts",
      "line": 172,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "this.syncTimer = window.setInterval(() => {"
    },
    {
      "file": "utils/AuthStateSynchronizer.ts",
      "line": 177,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "this.validationTimer = window.setInterval(() => {"
    },
    {
      "file": "utils/AuthStateSynchronizer.ts",
      "line": 494,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "this.persistentRefreshTimer = window.setInterval(() => {"
    },
    {
      "file": "utils/apiErrorHandler.ts",
      "line": 111,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "const timeoutId = setTimeout(() => controller.abort(), timeout);"
    },
    {
      "file": "utils/apiErrorHandler.ts",
      "line": 166,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "await new Promise(resolve => setTimeout(resolve, delayMs * (i + 1)));"
    },
    {
      "file": "utils/authInterceptor.ts",
      "line": 80,
      "severity": "LOW",
      "issue": "Timer usage (check cleanup)",
      "content": "redirectTimeout = setTimeout(() => {"
    },
    {
      "file": "utils/exportUtils.ts",
      "line": 63,
      "severity": "LOW",
      "issue": "Frequent Date object creation",
      "content": "doc.text(`Generated: ${new Date().toLocaleString()}`, 14, 30);"
    },
    {
      "file": "utils/exportUtils.ts",
      "line": 69,
      "severity": "HIGH",
      "issue": "Nested array maps (potential O(n²))",
      "content": "body: data.map((row) => columns.map((col) => row[col.dataKey] || '')),"
    },
    {
      "file": "utils/exportUtils.ts",
      "line": 156,
      "severity": "LOW",
      "issue": "Frequent Date object creation",
      "content": "const timestamp = new Date().toISOString().split('T')[0];"
    },
    {
      "file": "utils/exportUtils.ts",
      "line": 189,
      "severity": "LOW",
      "issue": "Frequent Date object creation",
      "content": "doc.text(`Generated: ${new Date().toLocaleString()}`, 14, 30);"
    },
    {
      "file": "utils/exportUtils.ts",
      "line": 281,
      "severity": "LOW",
      "issue": "Frequent Date object creation",
      "content": "const timestamp = new Date().toISOString().split('T')[0];"
    }
  ],
  "networkFailures": [
    {
      "file": "api/fai.ts",
      "line": 3,
      "severity": "HIGH",
      "type": "HARDCODED_LOCALHOST",
      "content": "const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || 'http://localhost:3001/api/v1';",
      "match": "localhost:3001"
    },
    {
      "file": "api/operation.ts",
      "line": 28,
      "severity": "HIGH",
      "type": "HARDCODED_LOCALHOST",
      "content": "const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || 'http://localhost:3000';",
      "match": "localhost:3000"
    },
    {
      "file": "api/parameters.ts",
      "line": 3,
      "severity": "HIGH",
      "type": "HARDCODED_LOCALHOST",
      "content": "const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:3000';",
      "match": "localhost:3000"
    },
    {
      "file": "api/signatures.ts",
      "line": 3,
      "severity": "HIGH",
      "type": "HARDCODED_LOCALHOST",
      "content": "const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:3001/api/v1';",
      "match": "localhost:3001"
    },
    {
      "file": "test-utils/mocks.ts",
      "line": 165,
      "severity": "HIGH",
      "type": "HARDCODED_LOCALHOST",
      "content": "href: 'http://localhost:3000/',",
      "match": "localhost:3000"
    },
    {
      "file": "test-utils/mocks.ts",
      "line": 166,
      "severity": "HIGH",
      "type": "HARDCODED_LOCALHOST",
      "content": "origin: 'http://localhost:3000',",
      "match": "localhost:3000"
    },
    {
      "file": "test-utils/mocks.ts",
      "line": 168,
      "severity": "HIGH",
      "type": "HARDCODED_LOCALHOST",
      "content": "host: 'localhost:3000',",
      "match": "localhost:3000"
    },
    {
      "file": "tests/e2e/collaborative-routing.spec.ts",
      "line": 5,
      "severity": "HIGH",
      "type": "HARDCODED_LOCALHOST",
      "content": "baseURL: process.env.E2E_BASE_URL || 'http://localhost:5278',",
      "match": "localhost:5278"
    },
    {
      "file": "tests/e2e/collaborative-routing.spec.ts",
      "line": 13,
      "severity": "HIGH",
      "type": "HARDCODED_LOCALHOST",
      "content": "* - Backend server running on http://localhost:3001",
      "match": "localhost:3001"
    },
    {
      "file": "tests/e2e/collaborative-routing.spec.ts",
      "line": 14,
      "severity": "HIGH",
      "type": "HARDCODED_LOCALHOST",
      "content": "* - Frontend dev server running on http://localhost:5278",
      "match": "localhost:5278"
    }
  ],
  "recommendations": [
    {
      "priority": "MEDIUM",
      "category": "Performance",
      "title": "Optimize 150 performance issues",
      "description": "Performance issues can slow down the application",
      "action": "Review and optimize performance bottlenecks"
    },
    {
      "priority": "MEDIUM",
      "category": "Configuration",
      "title": "Replace 10 hardcoded localhost URLs",
      "description": "Hardcoded URLs make deployment difficult",
      "action": "Use environment variables for all API endpoints"
    }
  ]
}