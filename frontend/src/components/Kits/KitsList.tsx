/**
 * Kit Management List Component
 *
 * Main component for displaying and managing kits with search, filters,
 * statistics, and CRUD operations following MachShop UI patterns
 */

import React, { useEffect, useState } from 'react';
import {
  Table,
  Card,
  Button,
  Input,
  Space,
  Tag,
  Tooltip,
  Dropdown,
  Row,
  Col,
  Statistic,
  Badge,
  Modal,
  Select,
  DatePicker,
  Alert,
  Typography,
  Divider,
  Progress
} from 'antd';
import type { ColumnsType, TableProps } from 'antd/es/table';
import {
  PlusOutlined,
  SearchOutlined,
  FilterOutlined,
  ReloadOutlined,
  ExportOutlined,
  EyeOutlined,
  EditOutlined,
  DeleteOutlined,
  PlayCircleOutlined,
  WarningOutlined,
  QrcodeOutlined,
  BarcodeOutlined,
  SettingOutlined,
  DashboardOutlined
} from '@ant-design/icons';
import dayjs from 'dayjs';
import { useKitStore } from '../../store/kitStore';
import {
  Kit,
  KitStatus,
  KitPriority,
  AssemblyStage,
  KitStatusColors,
  KitStatusLabels,
  KitPriorityColors,
  KitPriorityLabels,
  KitTableItem
} from '../../types/kits';

const { Search } = Input;
const { Option } = Select;
const { RangePicker } = DatePicker;
const { Text, Title } = Typography;

export const KitsList: React.FC = () => {
  // Store state and actions
  const {
    kits,
    kitStatistics,
    loading,
    error,
    filters,
    searchText,
    pagination,
    sortBy,
    sortOrder,
    modals,

    // Actions
    fetchKits,
    fetchKitStatistics,
    deleteKit,
    setFilters,
    setSearchText,
    setPagination,
    setSorting,
    setSelectedKit,
    openModal,
    closeModal,
    clearErrors,
    resetFilters,
    transitionKitStatus
  } = useKitStore();

  // Local state
  const [selectedRowKeys, setSelectedRowKeys] = useState<string[]>([]);
  const [filtersVisible, setFiltersVisible] = useState(false);

  // Load data on component mount
  useEffect(() => {
    fetchKits();
    fetchKitStatistics();
  }, [fetchKits, fetchKitStatistics]);

  // Reload data when filters change
  useEffect(() => {
    fetchKits();
  }, [filters, searchText, pagination.current, pagination.pageSize, sortBy, sortOrder]);

  // Convert kits to table format
  const tableData: KitTableItem[] = kits.map((kit) => ({
    ...kit,
    key: kit.id,
    workOrderNumber: kit.workOrder?.workOrderNumber,
    partNumber: kit.workOrder?.part?.partNumber,
    itemCount: kit.kitItems?.length || 0,
    shortageCount: 0, // TODO: Calculate from shortages
    stagingLocationCode: kit.stagingLocation?.locationCode
  }));

  // Table columns configuration
  const columns: ColumnsType<KitTableItem> = [
    {
      title: 'Kit Number',
      dataIndex: 'kitNumber',
      key: 'kitNumber',
      sorter: true,
      sortOrder: sortBy === 'kitNumber' ? sortOrder : null,
      render: (text: string, record: KitTableItem) => (
        <Space direction="vertical" size={0}>
          <Button
            type="link"
            onClick={() => {
              setSelectedKit(record);
              openModal('viewKit');
            }}
            style={{ padding: 0, fontWeight: 500 }}
          >
            {text}
          </Button>
          {record.autoGenerated && (
            <Tag size="small" color="blue">AUTO</Tag>
          )}
        </Space>
      ),
      width: 200,
      fixed: 'left'
    },
    {
      title: 'Kit Name',
      dataIndex: 'kitName',
      key: 'kitName',
      sorter: true,
      sortOrder: sortBy === 'kitName' ? sortOrder : null,
      ellipsis: { showTitle: false },
      render: (text: string) => (
        <Tooltip title={text}>
          <Text style={{ maxWidth: 200 }}>{text}</Text>
        </Tooltip>
      )
    },
    {
      title: 'Work Order',
      dataIndex: 'workOrderNumber',
      key: 'workOrderNumber',
      render: (text: string, record: KitTableItem) => (
        <Space direction="vertical" size={0}>
          <Text>{text}</Text>
          {record.partNumber && (
            <Text type="secondary" style={{ fontSize: '12px' }}>
              {record.partNumber}
            </Text>
          )}
        </Space>
      ),
      width: 150
    },
    {
      title: 'Status',
      dataIndex: 'status',
      key: 'status',
      sorter: true,
      sortOrder: sortBy === 'status' ? sortOrder : null,
      render: (status: KitStatus) => (
        <Tag color={KitStatusColors[status]}>
          {KitStatusLabels[status]}
        </Tag>
      ),
      filters: Object.values(KitStatus).map(status => ({
        text: KitStatusLabels[status],
        value: status
      })),
      filteredValue: filters.status || null,
      width: 120
    },
    {
      title: 'Priority',
      dataIndex: 'priority',
      key: 'priority',
      sorter: true,
      sortOrder: sortBy === 'priority' ? sortOrder : null,
      render: (priority: KitPriority) => (
        <Tag color={KitPriorityColors[priority]}>
          {KitPriorityLabels[priority]}
        </Tag>
      ),
      filters: Object.values(KitPriority).map(priority => ({
        text: KitPriorityLabels[priority],
        value: priority
      })),
      filteredValue: filters.priority || null,
      width: 100
    },
    {
      title: 'Items',
      dataIndex: 'itemCount',
      key: 'itemCount',
      render: (count: number, record: KitTableItem) => (
        <Space>
          <Badge count={count} showZero style={{ backgroundColor: '#1890ff' }} />
          {record.shortageCount > 0 && (
            <Badge count={record.shortageCount} style={{ backgroundColor: '#ff4d4f' }} />
          )}
        </Space>
      ),
      width: 80,
      align: 'center'
    },
    {
      title: 'Staging Location',
      dataIndex: 'stagingLocationCode',
      key: 'stagingLocationCode',
      render: (code: string) => code ? (
        <Tag color="geekblue">{code}</Tag>
      ) : (
        <Text type="secondary">Not assigned</Text>
      ),
      width: 140
    },
    {
      title: 'Due Date',
      dataIndex: 'dueDate',
      key: 'dueDate',
      sorter: true,
      sortOrder: sortBy === 'dueDate' ? sortOrder : null,
      render: (date: string) => {
        if (!date) return <Text type="secondary">-</Text>;

        const dueDate = dayjs(date);
        const isOverdue = dueDate.isBefore(dayjs());
        const isNearDue = dueDate.isBefore(dayjs().add(3, 'days'));

        return (
          <Text type={isOverdue ? 'danger' : isNearDue ? 'warning' : undefined}>
            {dueDate.format('MMM DD, YYYY')}
          </Text>
        );
      },
      width: 120
    },
    {
      title: 'Created',
      dataIndex: 'createdAt',
      key: 'createdAt',
      sorter: true,
      sortOrder: sortBy === 'createdAt' ? sortOrder : null,
      render: (date: string) => dayjs(date).format('MMM DD, YYYY'),
      width: 120
    },
    {
      title: 'Actions',
      key: 'actions',
      fixed: 'right',
      width: 120,
      render: (_, record: KitTableItem) => (
        <Space size="small">
          <Tooltip title="View Details">
            <Button
              type="text"
              size="small"
              icon={<EyeOutlined />}
              onClick={() => {
                setSelectedKit(record);
                openModal('viewKit');
              }}
            />
          </Tooltip>
          <Tooltip title="Edit Kit">
            <Button
              type="text"
              size="small"
              icon={<EditOutlined />}
              onClick={() => {
                setSelectedKit(record);
                openModal('editKit');
              }}
            />
          </Tooltip>
          <Dropdown
            menu={{
              items: [
                {
                  key: 'transition',
                  icon: <PlayCircleOutlined />,
                  label: 'Change Status',
                  onClick: () => handleStatusTransition(record)
                },
                {
                  key: 'qr',
                  icon: <QrcodeOutlined />,
                  label: 'Generate QR Code',
                  onClick: () => handleGenerateQR(record)
                },
                {
                  key: 'assign',
                  icon: <SettingOutlined />,
                  label: 'Assign Staging',
                  onClick: () => {
                    setSelectedKit(record);
                    openModal('assignStaging');
                  }
                },
                {
                  type: 'divider'
                },
                {
                  key: 'delete',
                  icon: <DeleteOutlined />,
                  label: 'Delete',
                  danger: true,
                  onClick: () => handleDelete(record)
                }
              ]
            }}
            trigger={['click']}
          >
            <Button type="text" size="small" icon={<SettingOutlined />} />
          </Dropdown>
        </Space>
      )
    }
  ];

  // Event handlers
  const handleTableChange: TableProps<KitTableItem>['onChange'] = (paginationConfig, filtersConfig, sorterConfig) => {
    // Handle pagination
    if (paginationConfig) {
      setPagination({
        current: paginationConfig.current || 1,
        pageSize: paginationConfig.pageSize || 20
      });
    }

    // Handle filters
    if (filtersConfig) {
      setFilters({
        status: filtersConfig.status as KitStatus[],
        priority: filtersConfig.priority as KitPriority[]
      });
    }

    // Handle sorting
    if (sorterConfig && !Array.isArray(sorterConfig)) {
      setSorting(
        sorterConfig.field as string,
        sorterConfig.order === 'ascend' ? 'asc' : 'desc'
      );
    }
  };

  const handleSearch = (value: string) => {
    setSearchText(value);
  };

  const handleRefresh = () => {
    clearErrors();
    fetchKits();
    fetchKitStatistics();
  };

  const handleStatusTransition = (kit: Kit) => {
    // TODO: Implement status transition modal
    console.log('Status transition for kit:', kit.id);
  };

  const handleGenerateQR = (kit: Kit) => {
    // TODO: Implement QR code generation
    console.log('Generate QR for kit:', kit.id);
  };

  const handleDelete = (kit: Kit) => {
    Modal.confirm({
      title: 'Delete Kit',
      content: `Are you sure you want to delete kit "${kit.kitNumber}"? This action cannot be undone.`,
      okText: 'Yes, Delete',
      okType: 'danger',
      cancelText: 'Cancel',
      onOk: () => deleteKit(kit.id)
    });
  };

  const handleBulkActions = (action: string) => {
    // TODO: Implement bulk actions
    console.log('Bulk action:', action, 'on kits:', selectedRowKeys);
  };

  const rowSelection = {
    selectedRowKeys,
    onChange: setSelectedRowKeys,
    preserveSelectedRowKeys: true
  };

  // Statistics cards
  const statisticsCards = kitStatistics ? [
    {
      title: 'Total Kits',
      value: kitStatistics.totalKits,
      icon: <DashboardOutlined style={{ color: '#1890ff' }} />,
      color: '#1890ff'
    },
    {
      title: 'Active Kits',
      value: kitStatistics.activeKits,
      icon: <PlayCircleOutlined style={{ color: '#52c41a' }} />,
      color: '#52c41a'
    },
    {
      title: 'Completed',
      value: kitStatistics.completedKits,
      icon: <Badge status="success" />,
      color: '#52c41a'
    },
    {
      title: 'Overdue',
      value: kitStatistics.overdueKits,
      icon: <WarningOutlined style={{ color: '#ff4d4f' }} />,
      color: '#ff4d4f'
    },
    {
      title: 'Shortages',
      value: kitStatistics.totalShortages,
      icon: <WarningOutlined style={{ color: '#faad14' }} />,
      color: '#faad14'
    },
    {
      title: 'Staging Utilization',
      value: `${kitStatistics.stagingUtilization}%`,
      icon: <Progress type="circle" percent={kitStatistics.stagingUtilization} size={24} />,
      color: kitStatistics.stagingUtilization > 80 ? '#ff4d4f' : '#1890ff'
    }
  ] : [];

  return (
    <div style={{ padding: 24 }}>
      {/* Page Header */}
      <div style={{ marginBottom: 24 }}>
        <Row justify="space-between" align="middle">
          <Col>
            <Title level={2} style={{ margin: 0 }}>
              Kit Management
            </Title>
            <Text type="secondary">
              Manage kits, staging, and material workflows for aerospace manufacturing
            </Text>
          </Col>
          <Col>
            <Space>
              <Button
                icon={<DashboardOutlined />}
                onClick={() => window.open('/kits/analytics', '_blank')}
              >
                Analytics
              </Button>
              <Button
                icon={<BarcodeOutlined />}
                onClick={() => openModal('scanBarcode')}
              >
                Scan Barcode
              </Button>
              <Button
                type="primary"
                icon={<PlusOutlined />}
                onClick={() => openModal('createKit')}
              >
                Create Kit
              </Button>
              <Button
                icon={<PlusOutlined />}
                onClick={() => openModal('generateKits')}
              >
                Generate Kits
              </Button>
            </Space>
          </Col>
        </Row>
      </div>

      {/* Statistics Cards */}
      {kitStatistics && (
        <Row gutter={16} style={{ marginBottom: 24 }}>
          {statisticsCards.map((stat, index) => (
            <Col xs={12} sm={8} md={6} lg={4} key={index}>
              <Card size="small">
                <Statistic
                  title={stat.title}
                  value={stat.value}
                  prefix={stat.icon}
                  valueStyle={{ color: stat.color, fontSize: '18px' }}
                />
              </Card>
            </Col>
          ))}
        </Row>
      )}

      {/* Error Alert */}
      {error.kits && (
        <Alert
          message="Error loading kits"
          description={error.kits}
          type="error"
          closable
          onClose={clearErrors}
          style={{ marginBottom: 16 }}
        />
      )}

      {/* Filters and Search */}
      <Card size="small" style={{ marginBottom: 16 }}>
        <Row gutter={16} align="middle">
          <Col flex="auto">
            <Search
              placeholder="Search kits by number, name, or work order..."
              allowClear
              enterButton={<SearchOutlined />}
              size="middle"
              value={searchText}
              onChange={(e) => setSearchText(e.target.value)}
              onSearch={handleSearch}
              style={{ maxWidth: 400 }}
            />
          </Col>
          <Col>
            <Space>
              <Button
                icon={<FilterOutlined />}
                onClick={() => setFiltersVisible(!filtersVisible)}
              >
                Filters
              </Button>
              <Button
                icon={<ReloadOutlined />}
                onClick={handleRefresh}
                loading={loading.kits}
              >
                Refresh
              </Button>
              <Button
                icon={<ExportOutlined />}
                onClick={() => console.log('Export functionality')}
              >
                Export
              </Button>
            </Space>
          </Col>
        </Row>

        {/* Advanced Filters */}
        {filtersVisible && (
          <>
            <Divider style={{ margin: '16px 0 8px 0' }} />
            <Row gutter={16}>
              <Col span={6}>
                <Text strong>Assembly Stage:</Text>
                <Select
                  mode="multiple"
                  style={{ width: '100%', marginTop: 4 }}
                  placeholder="Select stages"
                  value={filters.assemblyStage}
                  onChange={(value) => setFilters({ assemblyStage: value })}
                  allowClear
                >
                  {Object.values(AssemblyStage).map(stage => (
                    <Option key={stage} value={stage}>{stage}</Option>
                  ))}
                </Select>
              </Col>
              <Col span={6}>
                <Text strong>Due Date Range:</Text>
                <RangePicker
                  style={{ width: '100%', marginTop: 4 }}
                  value={filters.dueDateFrom && filters.dueDateTo ? [
                    dayjs(filters.dueDateFrom),
                    dayjs(filters.dueDateTo)
                  ] : null}
                  onChange={(dates) => {
                    if (dates) {
                      setFilters({
                        dueDateFrom: dates[0]?.toISOString(),
                        dueDateTo: dates[1]?.toISOString()
                      });
                    } else {
                      setFilters({ dueDateFrom: undefined, dueDateTo: undefined });
                    }
                  }}
                />
              </Col>
              <Col span={4}>
                <Text strong>Auto Generated:</Text>
                <Select
                  style={{ width: '100%', marginTop: 4 }}
                  placeholder="Any"
                  value={filters.autoGenerated}
                  onChange={(value) => setFilters({ autoGenerated: value })}
                  allowClear
                >
                  <Option value={true}>Yes</Option>
                  <Option value={false}>No</Option>
                </Select>
              </Col>
              <Col span={4}>
                <Text strong>Has Shortages:</Text>
                <Select
                  style={{ width: '100%', marginTop: 4 }}
                  placeholder="Any"
                  value={filters.hasShortages}
                  onChange={(value) => setFilters({ hasShortages: value })}
                  allowClear
                >
                  <Option value={true}>Yes</Option>
                  <Option value={false}>No</Option>
                </Select>
              </Col>
              <Col span={4}>
                <div style={{ marginTop: 20 }}>
                  <Button onClick={resetFilters}>Reset</Button>
                </div>
              </Col>
            </Row>
          </>
        )}
      </Card>

      {/* Bulk Actions */}
      {selectedRowKeys.length > 0 && (
        <Card size="small" style={{ marginBottom: 16 }}>
          <Row justify="space-between" align="middle">
            <Col>
              <Text strong>{selectedRowKeys.length} kit(s) selected</Text>
            </Col>
            <Col>
              <Space>
                <Button size="small" onClick={() => handleBulkActions('transition')}>
                  Bulk Status Change
                </Button>
                <Button size="small" onClick={() => handleBulkActions('assign')}>
                  Bulk Assign Location
                </Button>
                <Button
                  size="small"
                  danger
                  onClick={() => handleBulkActions('delete')}
                >
                  Bulk Delete
                </Button>
              </Space>
            </Col>
          </Row>
        </Card>
      )}

      {/* Main Table */}
      <Card>
        <Table<KitTableItem>
          columns={columns}
          dataSource={tableData}
          rowSelection={rowSelection}
          loading={loading.kits}
          onChange={handleTableChange}
          pagination={{
            current: pagination.current,
            pageSize: pagination.pageSize,
            total: pagination.total,
            showSizeChanger: true,
            showQuickJumper: true,
            showTotal: (total, range) =>
              `${range[0]}-${range[1]} of ${total} kits`,
            pageSizeOptions: ['10', '20', '50', '100']
          }}
          scroll={{ x: 1400, y: 600 }}
          size="small"
          bordered
        />
      </Card>
    </div>
  );
};

export default KitsList;