/**
 * Kit Management Types
 *
 * TypeScript types, interfaces, and enums for the kit management system
 */

// Kit Status Enums
export enum KitStatus {
  PLANNED = 'PLANNED',
  STAGING = 'STAGING',
  STAGED = 'STAGED',
  ISSUED = 'ISSUED',
  PARTIAL = 'PARTIAL',
  CONSUMED = 'CONSUMED',
  CANCELLED = 'CANCELLED'
}

export enum KitItemStatus {
  PLANNED = 'PLANNED',
  STAGING = 'STAGING',
  STAGED = 'STAGED',
  PICKED = 'PICKED',
  ISSUED = 'ISSUED',
  CONSUMED = 'CONSUMED',
  RETURNED = 'RETURNED'
}

export enum KitPriority {
  LOW = 'LOW',
  NORMAL = 'NORMAL',
  HIGH = 'HIGH',
  URGENT = 'URGENT'
}

export enum AssemblyStage {
  FAN = 'FAN',
  COMPRESSOR = 'COMPRESSOR',
  COMBUSTOR = 'COMBUSTOR',
  TURBINE = 'TURBINE',
  INTEGRATION = 'INTEGRATION',
  COMPLETE = 'COMPLETE'
}

export enum LocationType {
  ASSEMBLY = 'ASSEMBLY',
  STORAGE = 'STORAGE',
  INSPECTION = 'INSPECTION',
  SHIPPING = 'SHIPPING',
  QUARANTINE = 'QUARANTINE'
}

// Color and Label Mappings
export const KitStatusColors: Record<KitStatus, string> = {
  [KitStatus.PLANNED]: '#1890ff',      // Blue
  [KitStatus.STAGING]: '#faad14',      // Orange
  [KitStatus.STAGED]: '#52c41a',       // Green
  [KitStatus.ISSUED]: '#722ed1',       // Purple
  [KitStatus.PARTIAL]: '#fa8c16',      // Dark Orange
  [KitStatus.CONSUMED]: '#595959',     // Gray
  [KitStatus.CANCELLED]: '#ff4d4f'     // Red
};

export const KitStatusLabels: Record<KitStatus, string> = {
  [KitStatus.PLANNED]: 'Planned',
  [KitStatus.STAGING]: 'Staging',
  [KitStatus.STAGED]: 'Staged',
  [KitStatus.ISSUED]: 'Issued',
  [KitStatus.PARTIAL]: 'Partial',
  [KitStatus.CONSUMED]: 'Consumed',
  [KitStatus.CANCELLED]: 'Cancelled'
};

export const KitPriorityColors: Record<KitPriority, string> = {
  [KitPriority.LOW]: '#52c41a',        // Green
  [KitPriority.NORMAL]: '#1890ff',     // Blue
  [KitPriority.HIGH]: '#faad14',       // Orange
  [KitPriority.URGENT]: '#ff4d4f'      // Red
};

export const KitPriorityLabels: Record<KitPriority, string> = {
  [KitPriority.LOW]: 'Low',
  [KitPriority.NORMAL]: 'Normal',
  [KitPriority.HIGH]: 'High',
  [KitPriority.URGENT]: 'Urgent'
};

// Core Interfaces
export interface Kit {
  id: string;
  kitNumber: string;
  kitName: string;
  workOrderId: string;
  operationId?: string;
  status: KitStatus;
  priority: KitPriority;
  assemblyStage?: AssemblyStage;
  dueDate?: string;
  stagingLocationId?: string;
  autoGenerated: boolean;
  generatedFromBOM: boolean;
  notes?: string;
  createdAt: string;
  updatedAt: string;

  // Related entities
  workOrder?: WorkOrderSummary;
  operation?: OperationSummary;
  stagingLocation?: StagingLocationSummary;
  kitItems?: KitItem[];
  statusHistory?: KitStatusHistory[];
}

export interface KitItem {
  id: string;
  kitId: string;
  partId: string;
  requiredQuantity: number;
  stagedQuantity: number;
  consumedQuantity: number;
  status: KitItemStatus;
  notes?: string;

  // Related entities
  part?: PartSummary;
  unitOfMeasureRef?: UnitOfMeasureSummary;
}

export interface StagingLocation {
  id: string;
  locationCode: string;
  locationName: string;
  areaId: string;
  locationType: LocationType;
  isActive: boolean;
  isAvailable: boolean;
  currentOccupancy: number;
  maxCapacity: number;
  isCleanRoom: boolean;
  securityLevel: 'STANDARD' | 'RESTRICTED' | 'CLASSIFIED';
  maintenanceMode: boolean;

  // Related entities
  area?: AreaSummary;
  kits?: KitSummary[];
}

export interface KitStatusHistory {
  id: string;
  kitId: string;
  previousStatus?: KitStatus;
  newStatus: KitStatus;
  changeReason?: string;
  userId: string;
  createdAt: string;

  // Related entities
  user?: UserSummary;
}

export interface KitShortageAlert {
  id: string;
  kitId: string;
  partId: string;
  requiredQuantity: number;
  availableQuantity: number;
  shortageQuantity: number;
  severity: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';
  isResolved: boolean;
  resolvedAt?: string;
  createdAt: string;

  // Related entities
  kit?: KitSummary;
  part?: PartSummary;
}

// Summary interfaces for related entities
export interface WorkOrderSummary {
  id: string;
  workOrderNumber: string;
  partId: string;
  quantity: number;
  status: string;
  part?: PartSummary;
}

export interface OperationSummary {
  id: string;
  operationNumber: string;
  operationName: string;
  workCellId?: string;
}

export interface StagingLocationSummary {
  id: string;
  locationCode: string;
  locationName: string;
  currentOccupancy: number;
  maxCapacity: number;
}

export interface PartSummary {
  id: string;
  partNumber: string;
  partName: string;
  description?: string;
}

export interface UnitOfMeasureSummary {
  id: string;
  unitCode: string;
  unitName: string;
}

export interface AreaSummary {
  id: string;
  areaName: string;
  isActive: boolean;
}

export interface UserSummary {
  id: string;
  firstName: string;
  lastName: string;
  email: string;
}

export interface KitSummary {
  id: string;
  kitNumber: string;
  kitName: string;
  status: KitStatus;
  priority: KitPriority;
}

// API Request/Response Types
export interface CreateKitRequest {
  kitName: string;
  workOrderId: string;
  operationId?: string;
  priority: KitPriority;
  assemblyStage?: AssemblyStage;
  dueDate?: string;
  notes?: string;
  kitItems: CreateKitItemRequest[];
}

export interface CreateKitItemRequest {
  partId: string;
  requiredQuantity: number;
  notes?: string;
}

export interface UpdateKitRequest {
  kitName?: string;
  priority?: KitPriority;
  dueDate?: string;
  notes?: string;
}

export interface UpdateKitItemRequest {
  requiredQuantity?: number;
  stagedQuantity?: number;
  consumedQuantity?: number;
  status?: KitItemStatus;
  notes?: string;
}

export interface KitGenerationRequest {
  workOrderId: string;
  operationId?: string;
  assemblyStage?: AssemblyStage;
  priority?: KitPriority;
  autoGenerate?: boolean;
  includeSubassemblies?: boolean;
}

export interface KitTransitionRequest {
  kitId: string;
  newStatus: KitStatus;
  reason?: string;
  notes?: string;
}

export interface StagingAssignmentRequest {
  kitId: string;
  locationId: string;
  notes?: string;
}

// API Response Types
export interface KitListResponse {
  kits: Kit[];
  totalCount: number;
  pageSize: number;
  currentPage: number;
}

export interface KitGenerationResponse {
  kits: Kit[];
  analysis: {
    totalItems: number;
    uniqueParts: number;
    missingParts: number;
    shortages: KitShortageAlert[];
  };
  recommendations: string[];
}

export interface KitMetricsResponse {
  totalKits: number;
  statusDistribution: Record<KitStatus, number>;
  priorityDistribution: Record<KitPriority, number>;
  completionRate: number;
  averageLeadTime: number;
  activeShortages: number;
  stagingUtilization: number;
}

export interface StagingLocationOptimizationResponse {
  recommendedLocation: StagingLocation;
  score: {
    score: number;
    proximityScore: number;
    capacityScore: number;
    environmentScore: number;
    availabilityScore: number;
  };
  alternatives: Array<{
    location: StagingLocation;
    score: number;
  }>;
}

// Filter and Search Types
export interface KitFilters {
  status?: KitStatus[];
  priority?: KitPriority[];
  assemblyStage?: AssemblyStage[];
  workOrderId?: string;
  stagingLocationId?: string;
  dueDateFrom?: string;
  dueDateTo?: string;
  autoGenerated?: boolean;
  hasShortages?: boolean;
}

export interface KitSearchParams {
  searchText?: string;
  filters?: KitFilters;
  sortBy?: 'kitNumber' | 'kitName' | 'status' | 'priority' | 'dueDate' | 'createdAt';
  sortOrder?: 'asc' | 'desc';
  page?: number;
  pageSize?: number;
}

// Form Validation Schemas (for use with react-hook-form + Zod)
export interface KitFormData {
  kitName: string;
  workOrderId: string;
  operationId?: string;
  priority: KitPriority;
  assemblyStage?: AssemblyStage;
  dueDate?: string;
  notes?: string;
  kitItems: KitItemFormData[];
}

export interface KitItemFormData {
  partId: string;
  requiredQuantity: number;
  notes?: string;
}

// Table Column Types (for Ant Design tables)
export interface KitTableItem extends Kit {
  key: string;
  workOrderNumber?: string;
  partNumber?: string;
  itemCount: number;
  shortageCount: number;
  stagingLocationCode?: string;
}

export interface KitItemTableItem extends KitItem {
  key: string;
  partNumber?: string;
  partName?: string;
  unitCode?: string;
  availableQuantity?: number;
  shortageQuantity?: number;
}

// Barcode Scanning Types
export interface BarcodeScanRequest {
  barcodeString: string;
  expectedType?: 'kit' | 'part' | 'location';
  operatorId?: string;
}

export interface BarcodeScanResult {
  success: boolean;
  data?: any;
  validation: {
    isValid: boolean;
    errors: string[];
    suggestions: string[];
  };
  nextActions: string[];
  warnings: string[];
}